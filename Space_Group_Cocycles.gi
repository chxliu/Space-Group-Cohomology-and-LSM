#####################################################################
#Space Group No. 1 (P1)
#####################################################################
#Space Group No. 2 (P-1)
P2 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 3 (P2)
C23 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 4 (P2_1)
C24 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 5 (C2)
C25 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 6 (Pm)
M6 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 7 (Pc)
M7 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 8 (Cm)
M8 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 9 (Cc)
M9 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 10 (P2/m)
C210 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P10 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 11 (P2_1/m)
C211 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
P11 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 12 (C2/m)
C212 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P12 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 13 (P2/c)
C213 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P13 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 14 (P2_1/c)
C214 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P14 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 15 (C2/c)
C215 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P15 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 16 (P222)
C216 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p16 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 17 (P222_1)
C217 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p17 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 18 (P2_12_12)
C218 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p18 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 19 (P2_12_12_1)
C219 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p19 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 20 (C222_1)
C220 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p20 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 21 (C222)
C221 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p21 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 22 (F222)
C222 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p22 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 23 (I222)
C223 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p23 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 24 (I2_12_12_1)
C224 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p24 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 25 (Pmm2)
C225 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M25 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 26 (Pmc2_1)
C226 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M26 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 27 (Pcc2)
C227 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M27 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 28 (Pma2)
C228 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M28 := [[1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 29 (Pca2_1)
C229 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M29 := [[1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 30 (Pnc2)
C230 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M30 := [[1, 0, 0, 0], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 31 (Pmn2_1)
C231 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M31 := [[1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 32 (Pba2)
C232 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M32 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 33 (Pna2_1)
C233 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M33 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 34 (Pnn2)
C234 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M34 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 35 (Cmm2)
C235 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M35 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 36 (Cmc2_1)
C236 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M36 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 37 (Ccc2)
C237 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M37 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 38 (Amm2)
C238 := [[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M38 := [[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 39 (Aem2)
C239 := [[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M39 := [[1, 0, 0, 0], [0, 0, 1, 1/2], [0, 1, 0, -1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 40 (Ama2)
C240 := [[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M40 := [[1, 0, 0, 1/2], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 41 (Aea2)
C241 := [[-1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M41 := [[1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 1, 0, -1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 42 (Fmm2)
C242 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
M42 := [[0, 0, -1, 0], [1, 1, 1, 0], [-1, 0, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 43 (Fdd2)
C243 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
M43 := [[0, 0, -1, 1/4], [1, 1, 1, 1/4], [-1, 0, 0, 1/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 44 (Imm2)
C244 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M44 := [[0, 1, -1, 0], [0, 1, 0, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 45 (Iba2)
C245 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M45 := [[0, 1, -1, 1/2], [0, 1, 0, 1/2], [-1, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 46 (Ima2)
C246 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M46 := [[0, 1, -1, 0], [0, 1, 0, 1/2], [-1, 1, 0, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 47 (Pmmm)
C247 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p47 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P47 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 48 (Pnnn)
C248 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p48 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P48 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 49 (Pccm)
C249 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p49 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P49 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 50 (Pban)
C250 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p50 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P50 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 51 (Pmma)
C251 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p51 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P51 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 52 (Pnna)
C252 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p52 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P52 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 53 (Pmna)
C253 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p53 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P53 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 54 (Pcca)
C254 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p54 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P54 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 55 (Pbam)
C255 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p55 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
P55 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 56 (Pccn)
C256 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p56 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P56 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 57 (Pbcm)
C257 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p57 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P57 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 58 (Pnnm)
C258 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p58 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P58 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 59 (Pmmn)
C259 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p59 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
P59 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 60 (Pbcn)
C260 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p60 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P60 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 61 (Pbca)
C261 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p61 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P61 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 62 (Pnma)
C262 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p62 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
P62 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 63 (Cmcm)
C263 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p63 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P63 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 64 (Cmce)
C264 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p64 := [[0, 1, 0, 1/2], [1, 0, 0, -1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P64 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 65 (Cmmm)
C265 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p65 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P65 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 66 (Cccm)
C266 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p66 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P66 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 67 (Cmme)
C267 := [[-1, 0, 0, 1/2], [0, -1, 0, -1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p67 := [[0, 1, 0, 1/2], [1, 0, 0, -1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
P67 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 68 (Ccce)
C268 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p68 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P68 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 69 (Fmmm)
C269 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p69 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
P69 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 70 (Fddd)
C270 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 1/2], [0, 0, 0, 1]];
C2p70 := [[0, 0, 1, 0], [-1, -1, -1, 1/2], [1, 0, 0, 0], [0, 0, 0, 1]];
P70 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 71 (Immm)
C271 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p71 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
P71 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 72 (Ibam)
C272 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p72 := [[0, -1, 1, 1/2], [0, -1, 0, 1/2], [1, -1, 0, 0], [0, 0, 0, 1]];
P72 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 73 (Ibca)
C273 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p73 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
P73 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 74 (Imma)
C274 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p74 := [[0, -1, 1, 1/2], [0, -1, 0, 1], [1, -1, 0, 1/2], [0, 0, 0, 1]];
P74 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 75 (P4)
C275 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C475 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 76 (P4_1)
C276 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C476 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 77 (P4_2)
C277 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C477 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 78 (P4_3)
C278 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C478 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 3/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 79 (I4)
C279 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C479 := [[0, 1, 0, 0], [0, 1, -1, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 80 (I4_1)
C280 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C480 := [[0, 1, 0, 3/4], [0, 1, -1, 1/4], [-1, 1, 0, -1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 81 (P-4)
C281 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C481 := [[0, 1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 82 (I-4)
C282 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C482 := [[0, -1, 0, 0], [0, -1, 1, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 83 (P4/m)
C283 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C483 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P83 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 84 (P4_2/m)
C284 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C484 := [[0, -1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P84 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 85 (P4/n)
C285 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C485 := [[0, -1, 0, 1/2], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P85 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 86 (P4_2/n)
C286 := [[-1, 0, 0, -1/2], [0, -1, 0, 1/2], [0, 0, 1, 1], [0, 0, 0, 1]];
C486 := [[0, -1, 0, 0], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P86 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 87 (I4/m)
C287 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C487 := [[0, 1, 0, 0], [0, 1, -1, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
P87 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 88 (I4_1/a)
C288 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C488 := [[0, 1, 0, 1/2], [0, 1, -1, 1], [-1, 1, 0, 1], [0, 0, 0, 1]];
P88 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 89 (P422)
C289 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p89 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2pp89 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 90 (P42_12)
C290 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p90 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
C2pp90 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 91 (P4_122)
C291 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p91 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2pp91 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 92 (P4_12_12)
C292 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p92 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/4], [0, 0, 0, 1]];
C2pp92 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 93 (P4_222)
C293 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p93 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2pp93 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 94 (P4_22_12)
C294 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p94 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2pp94 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 95 (P4_322)
C295 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p95 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2pp95 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 3/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 96 (P4_32_12)
C296 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p96 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 3/4], [0, 0, 0, 1]];
C2pp96 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 97 (I422)
C297 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p97 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C2pp97 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 98 (I4_122)
C298 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p98 := [[0, -1, 1, 3/4], [0, -1, 0, 5/4], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C2pp98 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 99 (P4mm)
C299 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp99 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M99 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 100 (P4bm)
C2100 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp100 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
M100 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 101 (P4_2cm)
C2101 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp101 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M101 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 102 (P4_2nm)
C2102 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp102 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M102 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 103 (P4cc)
C2103 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp103 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M103 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 104 (P4nc)
C2104 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp104 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
M104 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 105 (P4_2mc)
C2105 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp105 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M105 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 106 (P4_2bc)
C2106 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
Mp106 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
M106 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 107 (I4mm)
C2107 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
Mp107 := [[0, 1, -1, 0], [0, 1, 0, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
M107 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 108 (I4cm)
C2108 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
Mp108 := [[0, 1, -1, 1/2], [0, 1, 0, 1/2], [-1, 1, 0, 0], [0, 0, 0, 1]];
M108 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 109 (I4_1md)
C2109 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
Mp109 := [[0, 1, -1, 0], [0, 1, 0, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
M109 := [[0, 1, 0, 3/4], [1, 0, 0, 5/4], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 110 (I4_1cd)
C2110 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
Mp110 := [[0, 1, -1, 1/2], [0, 1, 0, 1/2], [-1, 1, 0, 0], [0, 0, 0, 1]];
M110 := [[0, 1, 0, 1/4], [1, 0, 0, 3/4], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 111 (P-42m)
C2111 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p111 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M111 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 112 (P-42c)
C2112 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p112 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M112 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 113 (P-42_1m)
C2113 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p113 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M113 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 114 (P-42_1c)
C2114 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p114 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M114 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 115 (P-4m2)
C2115 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p115 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M115 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 116 (P-4c2)
C2116 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p116 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M116 := [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 117 (P-4b2)
C2117 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p117 := [[0, -1, 0, 1/2], [-1, 0, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M117 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 118 (P-4n2)
C2118 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p118 := [[0, -1, 0, 1/2], [-1, 0, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M118 := [[1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 119 (I-4m2)
C2119 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p119 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M119 := [[0, 1, -1, 0], [0, 1, 0, 0], [-1, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 120 (I-4c2)
C2120 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p120 := [[0, -1, 0, 1/2], [-1, 0, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M120 := [[0, 1, -1, 1/2], [0, 1, 0, 1/2], [-1, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 121 (I-42m)
C2121 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p121 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
M121 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 122 (I-42d)
C2122 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p122 := [[0, -1, 1, 3/4], [0, -1, 0, 5/4], [1, -1, 0, 1/2], [0, 0, 0, 1]];
M122 := [[0, 1, 0, 3/4], [1, 0, 0, 1/4], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 123 (P4/mmm)
C2123 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p123 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M123 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P123 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 124 (P4/mcc)
C2124 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p124 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M124 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P124 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 125 (P4/nbm)
C2125 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p125 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M125 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
P125 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 126 (P4/nnc)
C2126 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p126 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M126 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P126 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 127 (P4/mbm)
C2127 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p127 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M127 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
P127 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 128 (P4/mnc)
C2128 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p128 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M128 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P128 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 129 (P4/nmm)
C2129 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p129 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M129 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P129 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 130 (P4/ncc)
C2130 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p130 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M130 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P130 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 131 (P4_2/mmc)
C2131 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p131 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M131 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P131 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 132 (P4_2/mcm)
C2132 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p132 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M132 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P132 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 133 (P4_2/nbc)
C2133 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p133 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M133 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P133 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 134 (P4_2/nnm)
C2134 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p134 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M134 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
P134 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 135 (P4_2/mbc)
C2135 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p135 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M135 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P135 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 136 (P4_2/mnm)
C2136 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p136 := [[-1, 0, 0, 1/2], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M136 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P136 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 137 (P4_2/nmc)
C2137 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p137 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 0], [0, 0, 0, 1]];
M137 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P137 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 138 (P4_2/ncm)
C2138 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p138 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
M138 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P138 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 139 (I4/mmm)
C2139 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p139 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
M139 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P139 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 140 (I4/mcm)
C2140 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p140 := [[0, -1, 1, 1/2], [0, -1, 0, 1/2], [1, -1, 0, 0], [0, 0, 0, 1]];
M140 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
P140 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 141 (I4_1/amd)
C2141 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p141 := [[0, -1, 1, 1/2], [0, -1, 0, 1], [1, -1, 0, 1/2], [0, 0, 0, 1]];
M141 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P141 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 142 (I4_1/acd)
C2142 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p142 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
M142 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P142 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 143 (P3)
C3143 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 144 (P3_1)
C3144 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 145 (P3_2)
C3145 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 146 (R3)
C3146 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 147 (P-3)
C3147 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P147 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 148 (R-3)
C3148 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P148 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 149 (P312)
C3149 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p149 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 150 (P321)
C3150 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p150 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 151 (P3_112)
C3151 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2p151 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 2/3], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 152 (P3_121)
C3152 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2p152 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 153 (P3_212)
C3153 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2p153 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/3], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 154 (P3_221)
C3154 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2p154 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 155 (R32)
C3155 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p155 := [[0, 1, 1, 0], [1, 0, 1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 156 (P3m1)
C3156 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M156 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 157 (P31m)
C3157 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M157 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 158 (P3c1)
C3158 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M158 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 159 (P31c)
C3159 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M159 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 160 (R3m)
C3160 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M160 := [[0, -1, -1, 0], [-1, 0, -1, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 161 (R3c)
C3161 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M161 := [[0, -1, -1, -1], [-1, 0, -1, -1/2], [0, 0, 1, 3/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 162 (P-31m)
C3162 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p162 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P162 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 163 (P-31c)
C3163 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p163 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P163 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 164 (P-3m1)
C3164 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p164 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P164 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 165 (P-3c1)
C3165 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p165 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
P165 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 166 (R-3m)
C3166 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p166 := [[0, 1, 1, 0], [1, 0, 1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
P166 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 167 (R-3c)
C3167 := [[0, -1, -1, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p167 := [[0, 1, 1, -1], [1, 0, 1, -1/2], [0, 0, -1, 3/2], [0, 0, 0, 1]];
P167 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 168 (P6)
C3168 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2168 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 169 (P6_1)
C3169 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2169 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 170 (P6_5)
C3170 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2170 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 171 (P6_2)
C3171 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2171 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 172 (P6_4)
C3172 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2172 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 173 (P6_3)
C3173 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2173 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 174 (P-6)
C3174 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M174 := [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 175 (P6/m)
C3175 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2175 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P175 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 176 (P6_3/m)
C3176 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2176 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P176 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 177 (P622)
C3177 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p177 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2177 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 178 (P6_122)
C3178 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2p178 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/3], [0, 0, 0, 1]];
C2178 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 179 (P6_522)
C3179 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2p179 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 2/3], [0, 0, 0, 1]];
C2179 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 180 (P6_222)
C3180 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 2/3], [0, 0, 0, 1]];
C2p180 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 2/3], [0, 0, 0, 1]];
C2180 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 181 (P6_422)
C3181 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 1/3], [0, 0, 0, 1]];
C2p181 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/3], [0, 0, 0, 1]];
C2181 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 182 (P6_322)
C3182 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p182 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2182 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 183 (P6mm)
C3183 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M183 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2183 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 184 (P6cc)
C3184 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M184 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2184 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 185 (P6_3cm)
C3185 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M185 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2185 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 186 (P6_3mc)
C3186 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
M186 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2186 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 187 (P-6m2)
C3187 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p187 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M187 := [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 188 (P-6c2)
C3188 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p188 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M188 := [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 189 (P-62m)
C3189 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p189 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M189 := [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 190 (P-62c)
C3190 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p190 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
M190 := [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 191 (P6/mmm)
C3191 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p191 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2191 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P191 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 192 (P6/mcc)
C3192 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p192 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2192 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P192 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 193 (P6_3/mcm)
C3193 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p193 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2193 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P193 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 194 (P6_3/mmc)
C3194 := [[0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p194 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2194 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P194 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 195 (P23)
C2195 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p195 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3195 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 196 (F23)
C2196 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p196 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3196 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 197 (I23)
C2197 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p197 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C3197 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 198 (P2_13)
C2198 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p198 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3198 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 199 (I2_13)
C2199 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p199 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C3199 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 200 (Pm-3)
C2200 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p200 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3200 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P200 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 201 (Pn-3)
C2201 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p201 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3201 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P201 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 202 (Fm-3)
C2202 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p202 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3202 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P202 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 203 (Fd-3)
C2203 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 1/2], [0, 0, 0, 1]];
C2p203 := [[0, 0, 1, 0], [-1, -1, -1, 1/2], [1, 0, 0, 0], [0, 0, 0, 1]];
C3203 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P203 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 204 (Im-3)
C2204 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p204 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C3204 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P204 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 205 (Pa-3)
C2205 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p205 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3205 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P205 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 206 (Ia-3)
C2206 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p206 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C3206 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
P206 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 207 (P432)
C2207 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p207 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3207 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp207 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 208 (P4_232)
C2208 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p208 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3208 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp208 := [[0, -1, 0, 1/2], [-1, 0, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 209 (F432)
C2209 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p209 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3209 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp209 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 210 (F4_132)
C2210 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p210 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3210 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp210 := [[0, -1, 0, 1/4], [-1, 0, 0, 1/4], [0, 0, -1, 1/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 211 (I432)
C2211 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p211 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C3211 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp211 := [[0, -1, 0, 0], [-1, 0, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 212 (P4_332)
C2212 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p212 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3212 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp212 := [[0, -1, 0, 1/4], [-1, 0, 0, 1/4], [0, 0, -1, 1/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 213 (P4_132)
C2213 := [[-1, 0, 0, 1/2], [0, -1, 0, 0], [0, 0, 1, 1/2], [0, 0, 0, 1]];
C2p213 := [[-1, 0, 0, 0], [0, 1, 0, 1/2], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3213 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp213 := [[0, -1, 0, 3/4], [-1, 0, 0, 3/4], [0, 0, -1, 3/4], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 214 (I4_132)
C2214 := [[0, 1, -1, 1/2], [1, 0, -1, 1], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p214 := [[0, -1, 1, 1], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C3214 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
C2pp214 := [[0, -1, 0, 3/2], [-1, 0, 0, 3/2], [0, 0, -1, 3/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 215 (P-43m)
C2215 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p215 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3215 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M215 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 216 (F-43m)
C2216 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p216 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3216 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M216 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 217 (I-43m)
C2217 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p217 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C3217 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M217 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 218 (P-43n)
C2218 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p218 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3218 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M218 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 219 (F-43c)
C2219 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p219 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3219 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M219 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 220 (I-43d)
C2220 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p220 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C3220 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M220 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 221 (Pm-3m)
C2221 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p221 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3221 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M221 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P221 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 222 (Pn-3n)
C2222 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p222 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3222 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M222 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P222 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 223 (Pm-3n)
C2223 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p223 := [[-1, 0, 0, 0], [0, 1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C3223 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M223 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P223 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 224 (Pn-3m)
C2224 := [[-1, 0, 0, 1/2], [0, -1, 0, 1/2], [0, 0, 1, 0], [0, 0, 0, 1]];
C2p224 := [[-1, 0, 0, 1/2], [0, 1, 0, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C3224 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M224 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P224 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 225 (Fm-3m)
C2225 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p225 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3225 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M225 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P225 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 226 (Fm-3c)
C2226 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 0], [0, 0, 0, 1]];
C2p226 := [[0, 0, 1, 0], [-1, -1, -1, 0], [1, 0, 0, 0], [0, 0, 0, 1]];
C3226 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M226 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P226 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 227 (Fd-3m)
C2227 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 1/2], [0, 0, 0, 1]];
C2p227 := [[0, 0, 1, 0], [-1, -1, -1, 1/2], [1, 0, 0, 0], [0, 0, 0, 1]];
C3227 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M227 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P227 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 228 (Fd-3c)
C2228 := [[0, 1, 0, 0], [1, 0, 0, 0], [-1, -1, -1, 1/2], [0, 0, 0, 1]];
C2p228 := [[0, 0, 1, 0], [-1, -1, -1, 1/2], [1, 0, 0, 0], [0, 0, 0, 1]];
C3228 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M228 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P228 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 229 (Im-3m)
C2229 := [[0, 1, -1, 0], [1, 0, -1, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
C2p229 := [[0, -1, 1, 0], [0, -1, 0, 0], [1, -1, 0, 0], [0, 0, 0, 1]];
C3229 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M229 := [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
P229 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################
#Space Group No. 230 (Ia-3d)
C2230 := [[0, 1, -1, 1/2], [1, 0, -1, 0], [0, 0, -1, 1/2], [0, 0, 0, 1]];
C2p230 := [[0, -1, 1, 0], [0, -1, 0, 1/2], [1, -1, 0, 1/2], [0, 0, 0, 1]];
C3230 := [[0, 0, 1, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1]];
M230 := [[0, 1, 0, 1/2], [1, 0, 0, 1/2], [0, 0, 1, 1/2], [0, 0, 0, 1]];
P230 := [[-1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]];
#####################################################################










IWP:=[[["C1",[[1,0,0],[0,1,0],[0,0,1]]]],[["Ci",[[0,0,0,1]]],["Ci",[[0,0,1,1]]],["Ci",[[0,1,0,1]]],["Ci",[[1,0,0,1]]],["Ci",[[1,1,0,1]]],["Ci",[[1,0,1,1]]],["Ci",[[0,1,1,1]]],["Ci",[[1,1,1,1]]]],[["C2",[[0,1,0,0],[0,0,0,1]]],["C2",[[0,1,0,0],[0,0,1,1]]],["C2",[[0,1,0,0],[1,0,0,1]]],["C2",[[0,1,0,0],[1,0,1,1]]]],[["C1ss",[[1,0,0,0],[0,0,1,0],[0,0,0,1]]]],[["C2",[[1,1,0,0],[0,0,0,1]]],["C2",[[1,1,0,0],[0,0,1,1]]]],[["Cs",[[1,0,0,0],[0,0,1,0],[0,0,0,1]]],["Cs",[[1,0,0,0],[0,0,1,0],[0,1,0,1]]]],[["C1s",[[0,1,0,0],[0,0,0,1],[1,0,0,0]]]],[["Cs",[[1,-1,0,0],[0,0,1,0],[0,0,0,1]]]],[["C1ss",[[1,0,0,0],[0,1,0,0],[0,0,0,1]]]],[["C2h",[[0,0,0,0,1]]],["C2h",[[0,1,0,0,1]]],["C2h",[[0,0,1,0,1]]],["C2h",[[1,0,0,0,1]]],["C2h",[[1,1,0,0,1]]],["C2h",[[0,1,1,0,1]]],["C2h",[[1,0,1,0,1]]],["C2h",[[1,1,1,0,1]]]],[["Ci",[[0,0,0,0,1]]],["Ci",[[1,0,0,0,1]]],["Ci",[[0,0,1,0,1]]],["Ci",[[1,0,1,0,1]]],["Cs",[[1,0,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]]],[["C2h",[[0,0,0,0,1]]],["C2h",[[1,1,0,0,1]]],["C2h",[[0,0,1,0,1]]],["C2h",[[1,1,1,0,1]]],["Ci",[[1,0,0,0,1]]],["Ci",[[1,0,1,0,1]]]],[["Ci",[[0,0,0,0,1]]],["Ci",[[1,1,0,0,1]]],["Ci",[[0,1,0,0,1]]],["Ci",[[1,0,0,0,1]]],["C2",[[0,1,0,0,0],[0,0,0,1,0]]],["C2",[[0,1,0,0,0],[1,0,0,1,0]]]],[["Ci",[[0,0,0,0,1]]],["Ci",[[1,0,0,0,1]]],["Ci",[[0,1,0,0,1]]],["Ci",[[1,1,0,0,1]]]],[["Ci",[[0,0,0,0,1]]],["Ci",[[1,1,0,0,1]]],["Ci",[[1,0,0,0,1]]],["Ci",[[1,0,1,0,1]]],["C2",[[1,1,0,0,0],[0,0,0,1,0]]]],[["D2",[[0,0,0,1,0],[0,0,0,0,1]]],["D2",[[1,0,0,1,0],[1,0,0,0,1]]],["D2",[[0,1,0,1,0],[0,0,0,0,1]]],["D2",[[0,0,0,1,0],[0,0,1,0,1]]],["D2",[[1,1,0,1,0],[1,0,0,0,1]]],["D2",[[1,0,0,1,0],[1,0,1,0,1]]],["D2",[[0,1,0,1,0],[0,0,1,0,1]]],["D2",[[1,1,0,1,0],[1,0,1,0,1]]]],[["C2",[[1,0,0,0,0],[0,0,0,1,1]]],["C2",[[1,0,0,0,0],[0,1,0,1,1]]],["C2",[[0,1,0,0,0],[0,0,0,0,1]]],["C2",[[0,1,0,0,0],[1,0,0,0,1]]]],[["C2",[[0,0,1,0,0],[0,0,0,1,0]]],["C2",[[0,0,1,0,0],[0,1,0,1,0]]]],[["C1ss",[[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]]],[["C2",[[1,-1,0,0,0],[0,0,0,1,1]]],["C2",[[1,1,0,0,0],[0,0,0,0,1]]]],[["D2",[[0,0,0,1,0],[0,0,0,0,1]]],["D2",[[1,1,0,1,0],[0,0,0,0,1]]],["D2",[[1,1,0,1,0],[0,0,1,0,1]]],["D2",[[0,0,0,1,0],[0,0,1,0,1]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["D2",[[0,0,0,1,0],[0,0,0,0,1]]],["D2",[[0,0,0,1,0],[1,1,-1,0,1]]],["D2",[[0,0,1,1,0],[0,1,0,0,1]]],["D2",[[-1,1,0,1,0],[0,1,0,0,1]]]],[["D2",[[0,0,0,1,0],[0,0,0,0,1]]],["D2",[[0,1,1,1,0],[0,1,1,0,1]]],["D2",[[0,0,0,1,0],[1,1,0,0,1]]],["D2",[[1,0,1,1,0],[0,0,0,0,1]]]],[["C2",[[0,1,1,0,0],[0,1,0,1,1]]],["C2",[[1,0,1,0,0],[0,0,0,0,1]]],["C2",[[1,1,0,0,0],[0,0,0,1,0]]]],[["C2v",[[0,0,1,0,0],[0,0,0,1,0]]],["C2v",[[0,0,1,0,0],[0,1,0,1,0]]],["C2v",[[0,0,1,0,0],[1,0,0,1,0]]],["C2v",[[0,0,1,0,0],[1,1,0,1,0]]]],[["Css",[[0,1,0,0,0],[0,0,0,0,1],[0,0,-1,1,1]]],["Css",[[0,1,0,0,0],[0,0,0,0,1],[1,0,-1,1,1]]]],[["C2",[[0,0,0,0,1],[0,0,0,1,0]]],["C2",[[0,0,0,1,1],[0,1,0,1,0]]],["C2",[[0,0,0,0,1],[1,0,0,1,0]]],["C2",[[0,1,0,0,1],[1,1,0,1,0]]]],[["C2",[[0,0,1,0,0],[0,0,0,1,0]]],["C2",[[0,0,1,0,0],[0,1,0,1,0]]],["Cs",[[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]]],[["C1s",[[1,0,0,0,0],[0,1,0,0,0],[0,0,-1,1,0],[0,0,0,0,1]]]],[["C2",[[0,0,1,0,0],[0,0,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["Cs",[[0,1,0,0,0],[0,0,1,0,0],[0,0,-1,1,1]]]],[["C2",[[0,0,1,0,0],[0,0,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C1s",[[1,0,0,0,0],[0,1,0,0,0],[0,0,-1,1,0],[0,0,0,0,1]]]],[["C2",[[0,0,1,0,0],[0,0,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C2v",[[0,0,1,0,0],[0,0,0,1,0]]],["C2v",[[0,0,1,0,0],[1,1,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C1s",[[1,1,0,0,0],[0,0,0,0,1],[0,0,-1,1,1]]]],[["C2v",[[0,0,0,0,1],[0,0,0,1,0]]],["C2v",[[0,0,0,0,1],[1,-1,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C2v",[[0,1,1,0,0],[0,0,0,1,0]]],["C2v",[[0,1,1,0,0],[1,0,0,1,0]]]],[["C2v",[[0,0,1,0,1],[0,0,0,1,0]]],["C2v",[[0,0,1,0,1],[1,0,0,1,0]]],["Css",[[1,0,0,0,0],[0,1,0,1,1],[0,0,0,0,1]]]],[["C2v",[[0,1,1,0,0],[0,0,0,1,0]]],["Cs",[[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]]],[["C2",[[0,1,1,0,0],[0,0,0,1,0]]]],[["C2v",[[1,1,-1,0,0],[0,0,0,1,0]]],["C2v",[[1,0,0,0,1],[0,0,1,1,0]]]],[["C2",[[1,1,-1,0,0],[0,0,0,1,0]]]],[["C2v",[[1,1,0,0,0],[0,0,0,1,0]]],["C2v",[[1,1,0,0,0],[1,0,1,1,0]]]],[["C2",[[0,0,0,0,1],[0,0,0,1,0]]],["C2",[[0,0,0,0,1],[0,1,1,1,0]]]],[["C2",[[1,1,0,0,0],[0,0,0,1,0]]],["Css",[[1,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2h",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["D2h",[[1,0,0,1,0,0],[1,0,1,0,1,0]]],["D2h",[[0,1,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,1,0,1,0,0],[1,0,0,0,1,0]]],["D2h",[[0,1,0,1,0,0],[0,0,1,0,1,0]]],["D2h",[[1,1,0,1,0,0],[1,0,1,0,1,0]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2h",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["D2h",[[1,0,0,1,0,0],[1,0,1,0,1,0]]],["Ci",[[1,1,1,0,0,1]]],["Ci",[[0,0,0,0,0,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,1,0,1,0,0],[1,0,0,0,1,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,1,0,1,0]]],["D2",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,0,1,0,0,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["C2h",[[0,1,1,0,0,1]]],["C2v",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2v",[[0,0,1,0,0,0],[0,1,0,1,0,0]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,1,0,0,0,1]]],["C2",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2",[[1,0,0,0,0,0],[0,0,0,1,1,0]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2",[[0,1,0,0,0,0],[0,0,0,0,1,0]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,1,0,0,0,1]]],["C2",[[0,1,0,0,0,0],[0,0,0,0,1,0]]],["C2",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["C2",[[0,1,0,0,1,1],[0,1,0,1,0,0]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[1,0,1,0,0,1]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]],["C2",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["C2",[[0,0,0,0,1,1],[1,0,0,1,0,0]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]],["C2",[[1,0,0,0,0,0],[0,0,0,1,1,0]]],["Css",[[1,0,0,0,0,0],[0,0,-1,1,1,1],[0,0,0,1,0,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2h",[[1,0,0,0,0,1]]]],[["C2",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2",[[0,0,1,0,0,0],[1,0,0,1,0,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,0,1,0,0,1]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]],["C2",[[0,1,0,0,0,0],[0,0,0,0,1,0]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]],["Css",[[0,0,1,0,0,0],[0,0,0,1,0,1],[0,0,0,0,1,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2v",[[1,1,0,0,0,0],[0,0,0,0,1,0]]],["Ci",[[1,0,0,0,0,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["Ci",[[1,0,0,0,0,1]]],["C2",[[0,0,0,1,0,1],[0,0,0,0,1,0]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,1,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,1,0,1,0,0],[0,0,1,0,1,0]]],["D2h",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[1,0,1,0,0,1]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[1,1,0,1,0,0],[0,0,0,0,1,0]]],["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["C2h",[[0,0,0,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[1,0,1,0,0,1]]],["C2v",[[0,0,1,0,0,0],[0,1,0,1,0,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,1,0,1,0,0],[0,0,0,0,1,0]]],["Ci",[[1,0,0,0,0,1]]],["Ci",[[0,0,0,0,0,1]]],["C2",[[0,-1,0,1,1,1],[0,-1,0,1,0,0]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[0,0,0,1,0,0],[1,1,-1,0,1,0]]],["C2h",[[1,0,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["D2",[[0,0,1,1,0,0],[0,1,0,0,1,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[0,0,0,1,0,0],[1,1,-1,0,1,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,1,1,0,0,1]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[0,1,1,1,0,0],[0,1,1,0,1,0]]],["D2h",[[0,0,0,1,0,0],[1,1,0,0,1,0]]],["D2h",[[1,0,1,1,0,0],[0,0,0,0,1,0]]],["Ci",[[1,1,1,0,0,1]]]],[["D2h",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2h",[[0,1,1,1,0,0],[0,1,1,0,1,0]]],["C2h",[[0,0,0,0,0,1]]],["C2h",[[0,1,1,0,0,1]]],["Ci",[[1,1,1,0,0,1]]]],[["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,1,1,0,0,1]]],["C2",[[0,0,0,0,1,1],[0,1,0,1,1,0]]],["C2",[[0,0,0,1,0,1],[0,0,0,0,1,0]]],["C2",[[0,1,0,1,1,1],[0,0,0,1,0,0]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2h",[[1,1,1,0,0,1]]],["C2h",[[0,0,1,0,0,1]]],["C2v",[[1,1,0,0,0,0],[0,0,0,1,0,0]]]],[["C4",[[0,0,1,0,0],[0,0,0,1,0]]],["C4",[[0,0,1,0,0],[1,1,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C1ss",[[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1]]]],[["C2",[[0,0,0,0,1],[0,0,0,1,0]]],["C2",[[1,0,0,0,1],[1,1,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["C1ss",[[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1]]]],[["C4",[[1,1,0,0,0],[0,0,0,1,0]]],["C2",[[0,1,0,0,1],[0,1,1,1,0]]]],[["C2",[[1,1,0,0,0],[0,0,0,1,0]]]],[["S4",[[0,0,0,0,1],[0,0,0,1,0]]],["S4",[[0,0,1,0,1],[0,0,0,1,0]]],["S4",[[0,1,0,0,1],[1,1,0,1,0]]],["S4",[[0,1,1,0,1],[1,1,0,1,0]]],["C2",[[0,0,1,0,0],[1,0,0,1,0]]]],[["S4",[[0,0,0,0,1],[0,0,0,1,0]]],["S4",[[1,1,0,0,1],[0,0,0,1,0]]],["S4",[[1,0,0,0,1],[1,0,1,1,0]]],["S4",[[0,-1,0,0,1],[1,0,1,1,0]]]],[["C4h",[[0,0,0,0,0,1]]],["C4h",[[0,0,1,0,0,1]]],["C4h",[[1,1,0,0,0,1]]],["C4h",[[1,1,1,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["C4h",[[1,0,1,0,0,1]]]],[["C2h",[[0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,1]]],["C2h",[[0,1,0,0,0,1]]],["C2h",[[1,0,0,0,0,1]]],["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,1,0,0,1,1],[1,1,0,1,0,0]]]],[["S4",[[0,0,0,0,1,1],[0,-1,0,1,0,0]]],["S4",[[0,0,1,0,1,1],[0,-1,0,1,0,0]]],["C4",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,0,1,0,0,1]]]],[["S4",[[0,0,0,0,1,1],[1,0,-1,1,0,0]]],["S4",[[0,0,1,0,1,1],[1,0,-1,1,0,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[0,0,1,0,0,1]]],["C2",[[0,0,0,0,1,0],[0,0,-1,1,0,0]]]],[["C4h",[[0,0,0,0,0,1]]],["C4h",[[1,1,0,0,0,1]]],["C2h",[[0,1,1,0,0,1]]],["S4",[[1,0,0,0,1,1],[1,0,1,1,0,0]]],["Ci",[[1,1,1,0,0,1]]]],[["S4",[[0,0,0,0,1,1],[-1,1,0,1,0,0]]],["S4",[[1,1,0,0,1,1],[-1,1,0,1,0,0]]],["Ci",[[0,0,0,0,0,1]]],["Ci",[[1,1,0,0,0,1]]]],[["D4",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D4",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["D4",[[1,1,0,1,0,0],[1,0,0,0,1,0]]],["D4",[[1,1,0,1,0,0],[1,0,1,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,1,0,1,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,0,1]]],["D2",[[0,0,0,1,0,0],[0,0,1,0,0,1]]],["C4",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["C2",[[0,1,0,0,0,0],[0,0,0,0,1,0]]],["C2",[[0,1,0,0,0,0],[1,0,0,0,1,0]]],["C2",[[1,-1,0,0,0,0],[0,0,0,0,0,1]]]],[["C2",[[1,-1,0,0,0,0],[0,0,0,0,0,1]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,1,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,1,0,1,0]]],["D2",[[0,0,0,1,0,0],[0,0,0,0,0,1]]],["D2",[[1,1,0,1,0,0],[1,1,0,0,0,1]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,0,1]]],["D2",[[0,0,0,1,0,0],[0,0,1,0,0,1]]],["C2",[[0,0,0,0,1,1],[1,0,0,1,0,0]]]],[["C2",[[0,1,0,0,0,0],[0,0,0,0,1,0]]],["C2",[[0,1,0,0,0,0],[1,0,0,0,1,0]]],["C2",[[1,-1,0,0,0,0],[0,0,0,0,0,1]]]],[["C2",[[1,1,0,0,0,0],[0,0,-1,1,0,1]]]],[["D4",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D4",[[0,0,0,1,0,0],[1,1,0,0,1,0]]],["D2",[[0,1,1,1,0,0],[0,1,1,0,1,0]]],["D2",[[0,1,1,1,0,0],[1,1,1,0,0,1]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,0,1]]],["D2",[[0,0,0,1,0,0],[1,1,0,0,0,1]]],["C2",[[1,0,1,0,0,0],[0,0,0,0,1,0]]]],[["C4v",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C4v",[[0,0,1,0,0,0],[1,1,0,1,0,0]]],["C2v",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["C4",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2v",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["C2v",[[0,0,0,0,1,0],[0,0,0,1,0,0]]],["C2v",[[0,1,0,0,1,0],[1,1,0,1,0,0]]],["C2",[[0,1,0,0,1,0],[0,1,0,1,0,0]]]],[["C2v",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2",[[0,0,0,0,1,1],[1,0,0,1,0,0]]]],[["C4",[[0,0,0,0,1,0],[0,0,0,1,0,0]]],["C4",[[0,1,0,0,1,0],[1,1,0,1,0,0]]],["C2",[[0,0,0,0,1,0],[1,0,0,1,0,0]]]],[["C4",[[0,0,1,0,0,0],[0,0,0,1,0,0]]],["C2",[[-1,0,0,0,0,1],[0,1,0,1,0,0]]]],[["C2v",[[0,0,0,0,0,1],[0,0,0,1,0,0]]],["C2v",[[0,0,0,0,0,1],[1,1,0,1,0,0]]],["C2v",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["C2",[[-1,0,0,0,1,1],[0,0,0,1,0,0]]],["C2v",[[1,1,0,1,0,1],[1,0,0,1,0,0]]]],[["C4v",[[1,1,0,0,0,0],[0,0,0,1,0,0]]],["C2v",[[0,1,0,0,0,1],[0,1,1,1,0,0]]]],[["C4",[[0,0,0,0,1,0],[0,0,0,1,0,0]]],["C2v",[[0,0,0,0,1,0],[0,1,1,1,0,0]]]],[["C2v",[[1,1,0,0,0,0],[0,0,0,1,0,0]]]],[["C2v",[[0,0,0,0,1,0],[0,0,0,1,0,0]]]],[["D2d",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2d",[[1,1,0,1,0,0],[1,0,1,0,1,0]]],["D2d",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["D2d",[[1,1,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,1,0,1,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[1,1,0,1,0,0],[1,0,0,0,1,0]]],["D2",[[0,1,0,1,0,0],[0,0,0,0,1,0]]],["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[1,0,0,0,1,1],[1,1,0,1,0,0]]]],[["S4",[[0,-1,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,-1,1,0,1,1],[0,0,0,1,0,0]]],["C2v",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["S4",[[0,-1,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,-1,1,0,1,1],[0,0,0,1,0,0]]],["C2v",[[0,-1,0,0,0,1],[1,0,0,1,0,0]]]],[["D2d",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2d",[[1,1,0,1,0,0],[1,1,0,0,1,0]]],["D2d",[[1,1,0,1,0,0],[1,1,1,0,1,0]]],["D2d",[[0,0,0,1,0,0],[0,0,1,0,1,0]]],["C2v",[[0,0,1,0,0,0],[1,0,0,1,0,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,1,0,1,0,0],[1,1,0,0,1,0]]],["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,1,0,0,1,1],[1,1,0,1,0,0]]],["D2",[[0,0,0,0,0,1],[1,0,0,1,0,0]]]],[["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,0,1,0,1,1],[0,0,0,1,0,0]]],["D2",[[1,0,0,1,0,0],[0,0,0,0,1,0]]],["D2",[[1,0,0,1,0,0],[0,0,1,0,1,0]]]],[["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[0,0,1,0,1,1],[0,0,0,1,0,0]]],["D2",[[1,0,0,1,0,0],[0,0,1,0,1,0]]],["D2",[[1,0,0,1,0,0],[0,0,0,0,1,0]]]],[["D2d",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2d",[[0,0,0,1,0,0],[1,1,0,0,1,0]]],["D2d",[[1,0,1,1,0,0],[1,1,1,0,1,0]]],["D2d",[[1,0,1,1,0,0],[0,0,1,0,1,0]]]],[["D2",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["S4",[[0,0,0,0,1,1],[0,0,0,1,0,0]]],["S4",[[1,0,0,0,1,1],[1,0,1,1,0,0]]],["D2",[[1,0,1,1,0,0],[0,0,1,0,1,0]]]],[["D2d",[[0,0,0,1,0,0],[0,0,0,0,1,0]]],["D2d",[[0,0,0,1,0,0],[1,1,0,0,1,0]]],["D2",[[1,0,1,1,0,0],[0,0,0,0,1,0]]],["S4",[[1,1,1,0,1,1],[1,0,1,1,0,0]]]],[["S4",[[0,0,0,0,1,1],[1,0,1,1,0,0]]],["S4",[[0,0,-1,0,1,1],[0,0,0,1,0,0]]],["C2",[[0,1,1,0,0,0],[0,0,1,1,1,0]]]],[["D4h",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D4h",[[0,0,0,1,0,0,0],[0,0,1,0,1,0,0]]],["D4h",[[1,1,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D4h",[[1,1,0,1,0,0,0],[1,0,1,0,1,0,0]]],["D2h",[[1,0,0,1,0,0,0],[1,0,1,0,1,0,0]]],["D2h",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]]],[["D4",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["C4h",[[0,0,0,0,0,0,1]]],["D4",[[1,1,0,1,0,0,0],[1,1,0,0,0,1,1]]],["C4h",[[1,1,0,0,0,0,1]]],["C2h",[[1,0,0,0,0,0,1]]],["D2",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]]],[["D4",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D4",[[0,0,0,1,0,0,0],[0,0,1,0,1,0,0]]],["D2d",[[0,1,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2d",[[0,1,0,1,0,0,0],[0,0,1,0,1,0,0]]],["C2h",[[0,0,0,0,0,0,1]]],["C2h",[[0,0,1,0,0,0,1]]]],[["D4",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D4",[[0,0,0,1,0,0,0],[0,0,1,0,1,0,0]]],["D2",[[1,0,0,1,0,0,0],[1,0,1,0,1,0,0]]],["S4",[[0,0,0,0,1,1,0],[-1,0,0,1,0,0,0]]],["Ci",[[0,0,0,0,0,0,1]]]],[["C4h",[[0,0,0,0,0,0,1]]],["C4h",[[0,0,1,0,0,0,1]]],["D2h",[[0,1,0,1,0,0,0],[0,0,1,0,0,1,1]]],["D2h",[[0,1,0,1,0,0,0],[0,0,0,0,0,1,1]]]],[["C4h",[[0,0,0,0,0,0,1]]],["C4h",[[0,0,1,0,0,0,1]]],["C2h",[[1,0,0,0,0,0,1]]],["D2",[[1,0,0,1,0,0,0],[0,0,0,0,0,1,1]]]],[["D2d",[[0,1,0,1,0,0,0],[1,1,0,0,0,1,1]]],["D2d",[[0,1,0,1,0,0,0],[1,1,1,0,0,1,1]]],["C4v",[[0,0,1,0,0,0,0],[0,0,0,1,0,0,0]]],["C2h",[[0,0,0,0,0,0,1]]],["C2h",[[0,0,1,0,0,0,1]]]],[["D2",[[0,1,0,1,0,0,0],[1,1,0,0,0,1,1]]],["S4",[[0,0,0,0,1,1,0],[-1,0,0,1,0,0,0]]],["C4",[[0,0,0,0,0,1,0],[0,0,0,1,0,0,0]]],["Ci",[[0,0,0,0,0,0,1]]]],[["D2h",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2h",[[1,1,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D2h",[[0,1,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2h",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D2d",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["D2d",[[1,1,0,1,0,0,0],[1,1,0,0,0,1,1]]]],[["D2h",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["D2d",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2h",[[1,1,0,1,0,0,0],[1,1,0,0,0,1,1]]],["D2d",[[1,1,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D2",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]],["C2h",[[1,0,0,0,0,0,1]]]],[["D2",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D2h",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["S4",[[0,0,0,1,1,1,0],[0,-1,0,1,0,0,0]]],["Ci",[[0,0,0,0,0,0,1]]]],[["D2d",[[0,1,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2d",[[1,0,0,1,0,0,0],[1,0,0,0,1,0,0]]],["D2",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["C2h",[[0,0,1,0,0,0,1]]],["C2h",[[0,0,0,0,0,0,1]]]],[["C2h",[[0,0,0,0,0,0,1]]],["S4",[[0,-1,0,0,1,1,0],[0,0,0,1,0,0,0]]],["C2h",[[1,0,0,0,0,0,1]]],["D2",[[1,0,0,1,0,0,0],[0,0,0,0,0,1,1]]]],[["D2h",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["D2h",[[0,0,0,1,0,0,0],[0,0,1,0,0,1,1]]],["C2h",[[1,0,0,0,0,0,1]]],["S4",[[0,0,0,0,1,1,0],[0,1,0,1,0,0,0]]]],[["D2d",[[1,0,0,1,0,0,0],[1,1,1,0,0,1,1]]],["D2d",[[1,0,0,1,0,0,0],[1,1,0,0,0,1,1]]],["C2v",[[0,0,0,0,1,1,1],[0,0,0,1,0,0,0]]],["Ci",[[0,0,0,0,0,0,1]]]],[["D2",[[-1,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["S4",[[0,0,0,0,1,1,0],[-1,0,0,1,0,0,0]]],["C2h",[[1,0,0,0,0,0,1]]],["C2h",[[0,0,0,0,0,0,1]]],["C2v",[[0,0,0,0,1,0,1],[0,0,0,1,0,0,0]]]],[["D4h",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D4h",[[0,0,0,1,0,0,0],[1,1,0,0,1,0,0]]],["D2h",[[1,0,1,1,0,0,0],[0,0,0,0,1,0,0]]],["D2d",[[1,0,1,1,0,0,0],[1,1,1,0,0,1,1]]],["C2h",[[1,1,1,0,0,0,1]]]],[["D4",[[0,0,0,1,0,0,0],[0,0,0,0,1,0,0]]],["D2d",[[1,0,1,1,0,0,0],[0,0,0,0,1,0,0]]],["C4h",[[0,0,0,0,0,0,1]]],["D2h",[[1,0,1,1,0,0,0],[0,0,1,0,0,1,1]]],["C2h",[[1,1,1,0,0,0,1]]]],[["D2d",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["D2d",[[1,0,1,1,0,0,0],[0,0,1,0,0,1,1]]],["C2h",[[0,0,0,0,0,0,1]]],["C2h",[[1,1,0,0,0,0,1]]]],[["S4",[[0,0,0,0,1,1,0],[0,0,0,1,0,0,0]]],["D2",[[0,0,0,1,0,0,0],[0,0,0,0,0,1,1]]],["Ci",[[0,0,0,0,0,0,1]]],["C2",[[0,0,0,0,1,0,1],[0,1,0,1,1,0,0]]]]];



GENNAMES:=[["Ax","Ay","Az"],["Ai","Ax","Ay","Az"],["Ac","Ax","Ay","Az"],["Ac","Ax","Az"],["Ac","Axy","Az","Bxy"],["Am","Ax","Ay","Az"],["Am","Ax","Ay"],["Am","Axy","Az","Bxy"],["Am","Axy","Bxy","Bzxy"],["Ac","Ai","Ax","Ay","Az"],["Ac","Ai","Ax","Az"],["Ac","Ai","Axy","Az","Bxy"],["Ac","Ai","Ax","Ay"],["Ac","Ai","Ax","Bphi"],["Ac","Ai","Axy","Bxy","Bzxy"],["Ac","Acp","Ax","Ay","Az"],["Ac","Acp","Ax","Ay"],["Ac","Acp","Az","Bphi"],["Ac","Acp","Bphi1","Bphi2"],["Ac","Acp","Axy","Bxy"],["Ac","Acp","Axy","Az","Bxy"],["Ac","Acp","Axy","Axz","Cgamma1","Cgamma2"],["Ac","Acp","Axyz","Bphi","Bxyz","Byxz","Cxyz"],["Ac","Acp","Axyz","Byxz","Bzxy"],["Ac","Am","Ax","Ay","Az"],["Ac","Am","Ax","Ay"],["Ac","Am","Ax","Ay"],["Ac","Am","Ay","Az"],["Ac","Am","Ay"],["Ac","Am","Ax","Bphi"],["Ac","Am","Ay","Bphi"],["Ac","Am","Az","Bphi"],["Ac","Am","Bphi1","Bphi2"],["Ac","Am","Axyz"],["Ac","Am","Axy","Az","Bxy"],["Ac","Am","Axy","Bxy"],["Ac","Am","Axy","Bxy","Bzxy"],["Ac","Am","Ax","Ayz","Bxy"],["Ac","Am","Ax","Ayz"],["Ac","Am","Ayz","Bxy","Bzxy"],["Ac","Am","Ayz","C"],["Ac","Am","Axz","Ayz","C"],["Ac","Am","Bxyxzyz","C"],["Ac","Am","Axyz","Bphi","Bxyz","Byxz","Cxyz"],["Ac","Am","Axyz","Bzxy"],["Ac","Am","Axyz","Byxz","Bzxy"],["Ai","Acp","Ac","Ax","Ay","Az"],["Ai","Acp","Ac","Axyz"],["Ai","Acp","Ac","Ax","Ay"],["Ai","Acp","Ac","Az","Bphi"],["Ai","Acp","Ac","Ay","Az"],["Ai","Acp","Ac","Bphi1","Bphi2"],["Ai","Acp","Ac","Ay","Bphi"],["Ai","Acp","Ac","Ay"],["Ai","Acp","Ac","Az","Bphi"],["Ai","Acp","Ac","Bphi1","Bphi2"],["Ai","Acp","Ac","Ax"],["Ai","Acp","Ac","Bphi1","Bphi2","Bphi3","C"],["Ai","Acp","Ac","Az","Bphi"],["Ai","Acp","Ac","Bphi"],["Ai","Acp","Ac","C"],["Ai","Acp","Ac","Bphi1","Bphi2"],["Ai","Acp","Ac","Axy","Bxy"],["Ai","Acp","Ac","Axy","C"],["Ai","Acp","Ac","Axy","Az","Bxy"],["Ai","Acp","Ac","Axy","Bxy","Bzxy"],["Ai","Acp","Ac","Axy","Az"],["Ai","Acp","Ac","Axy","C"],["Ai","Acp","Ac","Axz","Ayz","C"],["Ai","Acp","Ac","Bxyxzyz","C"],["Ai","Acp","Ac","Axyz","Bphi","Bxyz","Byxz","Cxyz"],["Ai","Acp","Ac","Axyz","Bzxy"],["Ai","Acp","Ac","Axyz"],["Ai","Acp","Ac","Axyz","Byxz","Bzxy"],["Aq","Axy","Az","Bdelta","Bxy"],["Aq","Axy","Bxy"],["Aq","Axy","Az","Bxy"],["Aq","Axy","Bxy"],["Aq","Axyz","Bdelta","B2","B3","C1","C2"],["Aq","Axyz","Bxyz","CGAP"],["Aq","Axy","Az","Bdelta","Bxy"],["Aq","Axyz","Bdelta","B2","Bzxy","C1","C2"],["Ai","Aq","Axy","Az","Bdelta","Bxy"],["Ai","Aq","Axy","Bdelta","Bcz","Bxy","Bzxy"],["Ai","Aq","Az","Bdelta","Bcxy"],["Ai","Aq","Axyz","Bdelta"],["Ai","Aq","Axyz","Bdelta","Bphi","Bxyz","CGAP"],["Ai","Aq","Bdelta","Bxyz","C"],["Acp","Acpp","Axy","Az","Bdelta","Bxy"],["Acp","Acpp","Az","Bdelta","Bphi","CGAP"],["Acp","Acpp","Axy","Bxy"],["Acp","Acpp","Bphi","CGAP"],["Acp","Acpp","Axy","Az","Bxy"],["Acp","Acpp","Az","Bphi","CGAP"],["Acp","Acpp","Axy","Bxy"],["Acp","Acpp","Bphi","CGAP"],["Acp","Acpp","Axyz","Bdelta","B2","B3","C1","C2"],["Acp","Acpp","Axyz","Bxyz","CGAP"],["Amp","Am","Axy","Az","Bdelta","Bxy"],["Amp","Am","Az","Bdelta","Bphi","CGAP"],["Amp","Am","Axy","Bdelta","Bmz","Bxy"],["Amp","Am","Axyz","Bdelta","CGAP"],["Amp","Am","Axy","Bdelta","Bxy"],["Amp","Am","Bdelta","Bcxy","Bcxyz","C1GAP","C2GAP"],["Amp","Am","Axy","Bdelta","Bcz","Bxy","Bzxy"],["Amp","Am","Bdelta","Bphi1","Bphi2","C1","C2"],["Amp","Am","Axyz","Bdelta","Bphi","Bxyz","CGAP"],["Amp","Am","Axyz","Bdelta","Bxyz","D"],["Amp","Am","Bdelta","B2","C1","C2","D"],["Amp","Am","Bdelta","CGAP"],["Acp","Am","Axy","Az","Bdelta","Bxy"],["Acp","Am","Axy","Bdelta","Bxy","Bcz","Bzxy"],["Acp","Am","Az","Bdelta","Bphi","C"],["Acp","Am","Bdelta","Bcxy","Bcxyz","C1","C2"],["Acp","Am","Axy","Az","Bdelta","Bxy"],["Acp","Am","Axy","Bdelta","Bxy","Bcpz"],["Acp","Am","Az","Bdelta","Bphi","CGAP"],["Acp","Am","Axyz","Bdelta","CGAP"],["Acp","Am","Axyz","Bdelta","Bphi","Bzxy","C1","C2"],["Acp","Am","Axyz","Bdelta","Bzxy","D1","D2"],["Acp","Am","Axyz","Bdelta","Bxyz","Bphi","CGAP"],["Acp","Am","Bdelta","Bxyz","C"],["Ai","Am","Acp","Axy","Az","Bdelta","Bxy"],["Ai","Am","Acp","Axy","Bdelta","Bxy"],["Ai","Am","Acp","Az","Bdelta","Bcxy"],["Ai","Acp","Am","Bdelta","Bcmxy","Bcmxyz","CGAP"],["Ai","Am","Acp","Az","Bdelta","Bphi","CGAP"],["Ai","Am","Acp","Bdelta","Bcxy","Bcxyz","C1GAP","C2GAP"],["Ai","Am","Acp","Az","Bdelta","Bcxy"],["Ai","Am","Acp","Bdelta","Bcxy","D"],["Ai","Am","Acp","Axy","Bdelta","Bcz","Bxy","Bzxy"],["Ai","Am","Acp","Axy","Bdelta","Bmz","Bxy"],[],["Ai","Am","Acp","Axyz","Bdelta"],["Ai","Am","Acp","Bdelta","Bcxy","Bcz","CGAP"],["Ai","Am","Acp","Bdelta","Bcxy","Bpxyz","Bmz","CGAP1","CGAP2","D"],["Ai","Acp","Am","Bdelta","Bcxy","Bcz","CGAP"],["Ai","Am","Acp","Bdelta","Bmz","Bcxy","Bpxyz"],["Ai","Am","Acp","Axyz","Bdelta","Bphi","Bxyz","CGAP"],["Ai","Am","Acp","Axyz","Bdelta","Bzxy","D"],[],["Ai","Am","Acp","Bdelta","D"]];






#####################################################################
#Space Group No. 1 ( P1)
#####################################################################
Axin1:=function(g1)
local x1,y1,z1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];
return x1;
end;
#####################################################################
Ayin1:=function(g1)
local x1,y1,z1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];
return y1;
end;
#####################################################################
Azin1:=function(g1)
local x1,y1,z1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 2 ( P-1)
#####################################################################
Aiin2:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axin2:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1;
end;
#####################################################################
Ayin2:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return y1;
end;
#####################################################################
Azin2:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 3 ( P2)
#####################################################################
Acin3:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axin3:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1;
end;
#####################################################################
Ayin3:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return y1;
end;
#####################################################################
Azin3:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 4 ( P2_1)
#####################################################################
Acin4:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axin4:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1;
end;
#####################################################################
Azin4:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 5 ( C2)
#####################################################################
Acin5:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axyin5:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1 + y1;
end;
#####################################################################
Azin5:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
Bxyin5:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];
return x2*y1 + a1*x2*y1 + a1*x2*y2 + a1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 6 ( Pm)
#####################################################################
Amin6:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axin6:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1;
end;
#####################################################################
Ayin6:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return y1;
end;
#####################################################################
Azin6:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 7 ( Pc)
#####################################################################
Amin7:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axin7:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1;
end;
#####################################################################
Ayin7:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 8 ( Cm)
#####################################################################
Amin8:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axyin8:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1 + y1;
end;
#####################################################################
Azin8:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return z1;
end;
#####################################################################
Bxyin8:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];
return x2*y1 + a1*x2*y1 + a1*x2*y2 + a1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 9 ( Cc)
#####################################################################
Amin9:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return a1;
end;
#####################################################################
Axyin9:=function(g1)
local x1,y1,z1,a1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];
return x1 + y1;
end;
#####################################################################
Bxyin9:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];
return x2*y1 + a1*x2*y1 + a1*x2*y2 + a1*y1*y2;
end;
#####################################################################
Bzxyin9:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];
return a1*x2 + x2*z1 + y2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 10 ( P2/m)
#####################################################################
Acin10:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin10:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin10:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin10:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
Azin10:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 11 ( P2_1/m)
#####################################################################
Acin11:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin11:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin11:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Azin11:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 12 ( C2/m)
#####################################################################
Acin12:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin12:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin12:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin12:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bxyin12:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + a1*x2*y1 + a1*x2*y2 + a1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 13 ( P2/c)
#####################################################################
Acin13:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin13:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin13:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin13:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 14 ( P2_1/c)
#####################################################################
Acin14:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin14:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin14:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Bphiin14:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2*b1 + a1*b2 + a1*a2*b2 + b1*b2 + a2*b1*b2 + a1*a2*b1*b2 + a1*a2*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + a1*a2*y2 + b1*y2 + a1*b1*y2 + a1*b2*y2 + y1*y2 + a2*z1 + b2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 15 ( C2/c)
#####################################################################
Acin15:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Aiin15:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin15:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin15:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + a1*x2*y1 + a1*x2*y2 + a1*y1*y2;
end;
#####################################################################
Bzxyin15:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return b1*x2 + x2*z1 + y2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 16 ( P222)
#####################################################################
Acin16:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin16:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin16:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin16:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
Azin16:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 17 ( P222_1)
#####################################################################
Acin17:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin17:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin17:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin17:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 18 ( P2_12_12)
#####################################################################
Acin18:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin18:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Azin18:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bphiin18:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1 + a2*x1 + a2*b1*x1 + a1*x2 + a2*b1*x2 + x1*x2 + a2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 19 ( P2_12_12_1)
#####################################################################
Acin19:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin19:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Bphi1in19:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1 + a1*a2*b2 + a1*b1*b2 + a2*x1 + b2*x1 + a1*x2 + b1*x2 + b2*y1 + a1*y2 + b1*y2 + b2*z1;
end;
#####################################################################
Bphi2in19:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + a1*a2*b1 + a1*b2 + a2*b1*b2 + a1*a2*b1*b2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + b1*x2 + a1*b1*x2 + a2*b1*x2 + a1*b2*x2 + a1*a2*y1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + b1*b2*y1 + a1*a2*y2 + b1*y2 + a1*b1*y2 + a2*b1*y2 + a1*b2*y2 + b1*b2*y2 + y1*y2 + a2*z1 + a1*a2*z1 + b1*b2*z1 + y2*z1 + a1*z2 + a1*a2*z2 + b1*z2 + b1*b2*z2 + y1*z2 + z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 20 ( C222_1)
#####################################################################
Acin20:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin20:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin20:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin20:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 21 ( C222)
#####################################################################
Acin21:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin21:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin21:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin21:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bxyin21:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 22 ( F222)
#####################################################################
Acin22:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin22:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin22:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Axzin22:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + z1;
end;
#####################################################################
Cgamma1in22:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a2*b3*x1 + a3*b1*x1*x2 + a3*b1*b2*x1*x2 + a2*b1*b3*x1*x2 + a3*b1*b3*x1*x2 + (a3*b2*x1*(1 + x1)*x2)/2 + (b3*x1*(1 + x1)*x2)/2 + (a1*b3*x1*(1 + x1)*x2)/2 + (a2*b3*x1*(1 + x1)*x2)/2 + (a3*b3*x1*(1 + x1)*x2)/2 + (b1*b3*x1*(1 + x1)*x2)/2 + a2*a3*b1*x1*x3 + a2*b2*x1*x3 + a2*a3*b2*x1*x3 + b1*b2*x1*x3 + a2*b1*b2*x1*x3 + a2*a3*b3*x1*x3 + b2*b3*x1*x3 + a2*b2*b3*x1*x3 + b1*b2*b3*x1*x3 + (a1*b2*x1*(1 + x1)*x3)/2 + (a3*b2*x1*(1 + x1)*x3)/2 + (b1*b2*x1*(1 + x1)*x3)/2 + (a2*b3*x1*(1 + x1)*x3)/2 + a3*b1*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + a1*b3*x2*x3 + a1*b1*x1*x2*x3 + a3*b1*x1*x2*x3 + a1*a3*b1*x1*x2*x3 + a2*a3*b1*x1*x2*x3 + b2*x1*x2*x3 + a1*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + a1*a3*b2*x1*x2*x3 + a2*b1*b2*x1*x2*x3 + b3*x1*x2*x3 + a3*b3*x1*x2*x3 + b1*b3*x1*x2*x3 + a1*b1*b3*x1*x2*x3 + a1*b2*b3*x1*x2*x3 + b1*b2*b3*x1*x2*x3 + a1*a3*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a1*a3*b2*x1*y1 + a2*b3*x1*y1 + a1*a2*b3*x1*y1 + a2*a3*b3*x1*y1 + a3*b1*x2*y1 + a1*a3*b2*x2*y1 + a3*b1*b2*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a1*a2*b3*x2*y1 + a2*a3*b3*x2*y1 + a1*b1*b3*x2*y1 + a2*b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a3*b1*x1*x2*y1 + a1*a3*b2*x1*x2*y1 + a3*b1*b2*x1*x2*y1 + b3*x1*x2*y1 + a1*b3*x1*x2*y1 + a1*a2*b3*x1*x2*y1 + a2*b1*b3*x1*x2*y1 + a2*b1*x3*y1 + a1*a2*b1*x3*y1 + a2*a3*b1*x3*y1 + a2*b2*x3*y1 + a1*a3*b2*x3*y1 + a2*a3*b2*x3*y1 + a2*b3*x3*y1 + a2*a3*b1*x1*x3*y1 + a1*b2*x1*x3*y1 + a2*b2*x1*x3*y1 + a1*a2*b2*x1*x3*y1 + a1*a3*b2*x1*x3*y1 + a2*a3*b2*x1*x3*y1 + b1*b2*x1*x3*y1 + a2*b1*b2*x1*x3*y1 + a2*b3*x1*x3*y1 + a1*a2*b3*x1*x3*y1 + b2*b3*x1*x3*y1 + a2*b2*b3*x1*x3*y1 + b1*b2*b3*x1*x3*y1 + a2*b1*x2*x3*y1 + a3*b1*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + a2*b1*b2*x2*x3*y1 + b3*x2*x3*y1 + a1*b3*x2*x3*y1 + a2*b1*b3*x2*x3*y1 + a2*b2*b3*x2*x3*y1 + b1*b2*b3*x2*x3*y1 + (a3*b2*x2*y1*(1 + y1))/2 + (a1*b3*x2*y1*(1 + y1))/2 + (a2*b3*x2*y1*(1 + y1))/2 + (a3*b3*x2*y1*(1 + y1))/2 + (a1*b2*x3*y1*(1 + y1))/2 + (a2*b2*x3*y1*(1 + y1))/2 + (a3*b2*x3*y1*(1 + y1))/2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a2*a3*b3*x1*y2 + (b3*x1*(1 + x1)*y2)/2 + a3*b1*x1*x2*y2 + a3*b2*x1*x2*y2 + a1*a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a1*b3*x1*x2*y2 + a2*b3*x1*x2*y2 + a1*a2*b3*x1*x2*y2 + a3*b3*x1*x2*y2 + a1*b1*b3*x1*x2*y2 + a2*b1*b3*x1*x2*y2 + a2*b1*x3*y2 + a1*a2*b1*x3*y2 + a3*b1*x3*y2 + a1*a3*b1*x3*y2 + a1*a2*b2*x3*y2 + a1*a3*b2*x3*y2 + a1*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + b1*x1*x3*y2 + a1*b1*x1*x3*y2 + a1*a3*b1*x1*x3*y2 + a2*a3*b1*x1*x3*y2 + b2*x1*x3*y2 + a2*b2*x1*x3*y2 + a1*a2*b2*x1*x3*y2 + a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a1*b3*x1*x3*y2 + a2*b3*x1*x3*y2 + a1*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a1*b1*b3*x1*x3*y2 + a2*b1*b3*x1*x3*y2 + a1*b2*b3*x1*x3*y2 + a2*b2*b3*x1*x3*y2 + a1*b1*x2*x3*y2 + a1*a2*b1*x2*x3*y2 + a3*b1*x2*x3*y2 + a1*a3*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + a1*a3*b2*x2*x3*y2 + a1*b3*x2*x3*y2 + a1*b1*b3*x2*x3*y2 + a1*b2*b3*x2*x3*y2 + a1*a3*b2*y1*y2 + a1*b3*y1*y2 + a1*a2*b3*y1*y2 + a1*a3*b2*x1*y1*y2 + a1*b3*x1*y1*y2 + a1*a2*b3*x1*y1*y2 + a1*a3*b2*x2*y1*y2 + a1*b3*x2*y1*y2 + a1*a2*b3*x2*y1*y2 + a1*b2*x3*y1*y2 + a1*a2*b2*x3*y1*y2 + a1*a3*b2*x3*y1*y2 + a2*b3*x3*y1*y2 + a1*a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + a2*b1*x1*y3 + a2*a3*b1*x1*y3 + (a2*b2*x1*(1 + x1)*y3)/2 + (a2*b3*x1*(1 + x1)*y3)/2 + a1*b1*x1*x2*y3 + a2*b1*x1*x2*y3 + a1*a3*b1*x1*x2*y3 + a2*a3*b1*x1*x2*y3 + a1*a2*b2*x1*x2*y3 + a3*b2*x1*x2*y3 + a2*b1*b2*x1*x2*y3 + a1*a2*b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*b1*b3*x1*x2*y3 + a1*b2*x1*x3*y3 + a2*b2*x1*x3*y3 + a1*a2*b2*x1*x3*y3 + a3*b2*x1*x3*y3 + a1*a3*b2*x1*x3*y3 + a2*a3*b2*x1*x3*y3 + a2*b1*b2*x1*x3*y3 + a1*a2*b3*x1*x3*y3 + a2*b1*b3*x1*x3*y3 + a1*b1*x2*x3*y3 + a2*b1*x2*x3*y3 + a3*b1*x2*x3*y3 + a1*a2*b2*x2*x3*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a1*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*b1*b2*y1*y3 + a2*b3*y1*y3 + a2*a3*b3*y1*y3 + a2*b1*b3*y1*y3 + a2*b1*x1*y1*y3 + a2*a3*b1*x1*y1*y3 + a1*b2*x1*y1*y3 + a1*a2*b2*x1*y1*y3 + a1*a3*b2*x1*y1*y3 + a2*a3*b2*x1*y1*y3 + a2*b1*b2*x1*y1*y3 + a2*b3*x1*y1*y3 + a1*a2*b3*x1*y1*y3 + a2*b1*b3*x1*y1*y3 + a2*b1*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a1*a2*b2*x2*y1*y3 + a1*a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + a2*b1*b2*x2*y1*y3 + a1*a2*b3*x2*y1*y3 + a2*b1*b3*x2*y1*y3 + a2*b1*x3*y1*y3 + a1*b2*x3*y1*y3 + a2*b2*x3*y1*y3 + a1*a2*b2*x3*y1*y3 + a1*a3*b2*x3*y1*y3 + a2*a3*b2*x3*y1*y3 + a2*b1*b2*x3*y1*y3 + a1*a2*b3*x3*y1*y3 + a2*b1*b3*x3*y1*y3 + a1*b1*y2*y3 + a1*a2*b1*y2*y3 + a1*a3*b1*y2*y3 + a1*b2*y2*y3 + a1*a3*b2*y2*y3 + a1*b1*x1*y2*y3 + a2*b1*x1*y2*y3 + a1*a3*b1*x1*y2*y3 + a2*a3*b1*x1*y2*y3 + a1*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + a1*a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + a1*b1*x2*y2*y3 + a1*a2*b1*x2*y2*y3 + a1*a3*b1*x2*y2*y3 + a1*b2*x2*y2*y3 + a1*a3*b2*x2*y2*y3 + a1*a2*b2*x3*y2*y3 + a3*b2*x1*z1 + a1*a3*b2*x1*z1 + a1*a2*b3*x1*z1 + a2*a3*b3*x1*z1 + a3*b1*x2*z1 + a3*b1*b2*x2*z1 + b3*x2*z1 + a2*b3*x2*z1 + a3*b3*x2*z1 + a2*a3*b3*x2*z1 + a1*b1*b3*x2*z1 + a2*b1*b3*x2*z1 + a3*b2*x1*x2*z1 + a1*a3*b2*x1*x2*z1 + a3*b1*b2*x1*x2*z1 + a1*b3*x1*x2*z1 + a2*b3*x1*x2*z1 + a1*a2*b3*x1*x2*z1 + a3*b3*x1*x2*z1 + b1*b3*x1*x2*z1 + a2*b1*b3*x1*x2*z1 + a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a2*b2*x3*z1 + a2*a3*b2*x3*z1 + a1*a2*b3*x3*z1 + a2*a3*b3*x3*z1 + a2*a3*b1*x1*x3*z1 + a2*b2*x1*x3*z1 + a1*a2*b2*x1*x3*z1 + a1*a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + b1*b2*x1*x3*z1 + a1*a2*b3*x1*x3*z1 + a2*b1*b3*x1*x3*z1 + a2*b2*b3*x1*x3*z1 + a3*b1*x2*x3*z1 + a1*a3*b1*x2*x3*z1 + a2*a3*b1*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + a1*b3*x2*x3*z1 + a2*b3*x2*x3*z1 + a3*b3*x2*x3*z1 + a1*b1*b3*x2*x3*z1 + a2*b1*b3*x2*x3*z1 + a1*b2*b3*x2*x3*z1 + a2*b2*b3*x2*x3*z1 + a1*a3*b2*y1*z1 + a2*b3*y1*z1 + a1*a2*b3*y1*z1 + a2*a3*b3*y1*z1 + a3*b2*x1*y1*z1 + a2*b3*x1*y1*z1 + a3*b1*x2*y1*z1 + a1*a3*b2*x2*y1*z1 + a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*a2*b3*x2*y1*z1 + a3*b3*x2*y1*z1 + a2*b1*b3*x2*y1*z1 + a2*a3*b1*x3*y1*z1 + b2*x3*y1*z1 + a1*a2*b2*x3*y1*z1 + a1*a3*b2*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + a2*b3*x3*y1*z1 + a1*a2*b3*x3*y1*z1 + a2*b1*b3*x3*y1*z1 + a2*b2*b3*x3*y1*z1 + a1*b3*y2*z1 + a2*b3*y2*z1 + a2*a3*b3*y2*z1 + a3*b1*x1*y2*z1 + a3*b2*x1*y2*z1 + a1*a3*b2*x1*y2*z1 + b3*x1*y2*z1 + a2*b3*x1*y2*z1 + a1*a2*b3*x1*y2*z1 + a3*b1*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + b3*x2*y2*z1 + a1*b3*x2*y2*z1 + a3*b3*x2*y2*z1 + a1*b1*b3*x2*y2*z1 + a2*b1*b3*x2*y2*z1 + b1*x3*y2*z1 + a1*b1*x3*y2*z1 + a1*a3*b1*x3*y2*z1 + a2*a3*b1*x3*y2*z1 + b2*x3*y2*z1 + a1*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a1*b1*b3*x3*y2*z1 + a2*b1*b3*x3*y2*z1 + a1*b2*b3*x3*y2*z1 + a2*b2*b3*x3*y2*z1 + a1*a3*b2*y1*y2*z1 + a1*b3*y1*y2*z1 + a1*a2*b3*y1*y2*z1 + a1*a2*b1*y3*z1 + a2*a3*b1*y3*z1 + a1*a2*b2*y3*z1 + a2*a3*b2*y3*z1 + a1*a2*b3*y3*z1 + a2*a3*b3*y3*z1 + a2*b1*x1*y3*z1 + a2*a3*b1*x1*y3*z1 + a1*b2*x1*y3*z1 + a1*a2*b2*x1*y3*z1 + a1*a3*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a2*b3*x1*y3*z1 + a1*a2*b3*x1*y3*z1 + a2*b1*x2*y3*z1 + a3*b1*x2*y3*z1 + a1*a3*b1*x2*y3*z1 + a2*a3*b1*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a3*b2*x2*y3*z1 + a1*a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + a3*b3*x2*y3*z1 + a2*b1*x3*y3*z1 + a1*b2*x3*y3*z1 + a2*b2*x3*y3*z1 + a2*b1*y1*y3*z1 + a2*a3*b1*y1*y3*z1 + a1*b2*y1*y3*z1 + a2*b2*y1*y3*z1 + a1*a2*b2*y1*y3*z1 + a1*a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + a1*a2*b3*y1*y3*z1 + a1*b1*y2*y3*z1 + a2*b1*y2*y3*z1 + a1*a3*b1*y2*y3*z1 + a2*a3*b1*y2*y3*z1 + a1*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + a1*a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + (b1*b3*x2*z1*(1 + z1))/2 + (b2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + (b1*b2*x3*z1*(1 + z1))/2 + (a2*b3*x3*z1*(1 + z1))/2 + (b3*y2*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + (a2*b3*y3*z1*(1 + z1))/2 + a3*b2*x1*z2 + a1*a3*b2*x1*z2 + a1*b3*x1*z2 + a1*a2*b3*x1*z2 + a2*a3*b3*x1*z2 + b1*b3*x1*z2 + a1*b1*b3*x1*z2 + a3*b1*b3*x1*z2 + (a3*b2*x1*(1 + x1)*z2)/2 + (b3*x1*(1 + x1)*z2)/2 + (a1*b3*x1*(1 + x1)*z2)/2 + (a2*b3*x1*(1 + x1)*z2)/2 + (a3*b3*x1*(1 + x1)*z2)/2 + (b1*b3*x1*(1 + x1)*z2)/2 + a3*b2*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a3*b1*b2*x1*x2*z2 + a2*b3*x1*x2*z2 + a1*a2*b3*x1*x2*z2 + a3*b3*x1*x2*z2 + b1*b3*x1*x2*z2 + a1*b1*b3*x1*x2*z2 + a2*b1*b3*x1*x2*z2 + a1*b1*x3*z2 + a2*b1*x3*z2 + a3*b1*x3*z2 + a3*b1*x1*x3*z2 + a1*b2*x1*x3*z2 + a2*b2*x1*x3*z2 + a1*a2*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + b1*b2*x1*x3*z2 + a2*b1*b2*x1*x3*z2 + a1*b3*x1*x3*z2 + a1*a2*b3*x1*x3*z2 + a2*b1*b3*x1*x3*z2 + a2*b2*b3*x1*x3*z2 + b1*b2*b3*x1*x3*z2 + a2*b1*x2*x3*z2 + a1*a2*b1*x2*x3*z2 + a1*a3*b1*x2*x3*z2 + a1*a3*b2*x2*x3*z2 + a1*b3*x2*x3*z2 + b1*b3*x2*x3*z2 + a1*b1*b3*x2*x3*z2 + a1*b2*b3*x2*x3*z2 + a3*b2*y1*z2 + a1*a3*b2*y1*z2 + a3*b1*b2*y1*z2 + a1*a2*b3*y1*z2 + a3*b3*y1*z2 + a2*a3*b3*y1*z2 + a1*b1*b3*y1*z2 + a2*b1*b3*y1*z2 + a3*b1*b3*y1*z2 + a3*b2*x1*y1*z2 + a3*b1*b2*x1*y1*z2 + a2*b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a2*b1*b3*x1*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a1*b3*x2*y1*z2 + a2*b3*x2*y1*z2 + a1*a2*b3*x2*y1*z2 + b1*b3*x2*y1*z2 + b1*x3*y1*z2 + a2*b1*x3*y1*z2 + a3*b1*x3*y1*z2 + a1*b2*x3*y1*z2 + a2*b2*x3*y1*z2 + a1*a2*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + b1*b2*x3*y1*z2 + a2*b1*b2*x3*y1*z2 + b3*x3*y1*z2 + a1*b3*x3*y1*z2 + a1*a2*b3*x3*y1*z2 + a3*b3*x3*y1*z2 + b1*b3*x3*y1*z2 + a2*b1*b3*x3*y1*z2 + a2*b2*b3*x3*y1*z2 + b1*b2*b3*x3*y1*z2 + (a3*b2*y1*(1 + y1)*z2)/2 + (a1*b3*y1*(1 + y1)*z2)/2 + (a2*b3*y1*(1 + y1)*z2)/2 + (a3*b3*y1*(1 + y1)*z2)/2 + a1*a3*b2*x1*y2*z2 + a3*b1*b2*x1*y2*z2 + b3*x1*y2*z2 + a1*a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a2*b1*b3*x1*y2*z2 + a1*b3*x2*y2*z2 + a1*b1*x3*y2*z2 + a1*a2*b1*x3*y2*z2 + a3*b1*x3*y2*z2 + a1*a3*b1*x3*y2*z2 + a1*a3*b2*x3*y2*z2 + a1*b3*x3*y2*z2 + a1*b1*b3*x3*y2*z2 + a1*b2*b3*x3*y2*z2 + a1*a3*b2*y1*y2*z2 + a1*b3*y1*y2*z2 + a1*a2*b3*y1*y2*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a1*a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + a2*b1*b2*x1*y3*z2 + a1*a2*b3*x1*y3*z2 + a3*b3*x1*y3*z2 + a2*b1*b3*x1*y3*z2 + a2*b1*x2*y3*z2 + a1*a2*b1*x2*y3*z2 + a3*b1*x2*y3*z2 + a1*a3*b1*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*a3*b2*x2*y3*z2 + a1*b1*x3*y3*z2 + a2*b1*x3*y3*z2 + a3*b1*x3*y3*z2 + a1*b2*x3*y3*z2 + a2*b1*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a1*a2*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + a2*b1*b2*y1*y3*z2 + a1*a2*b3*y1*y3*z2 + a2*b1*b3*y1*y3*z2 + a1*b1*y2*y3*z2 + a1*a2*b1*y2*y3*z2 + a1*a3*b1*y2*y3*z2 + a1*b2*y2*y3*z2 + a1*a3*b2*y2*y3*z2 + a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + a1*b3*x1*z1*z2 + a2*b3*x1*z1*z2 + a3*b3*x1*z1*z2 + b1*b3*x1*z1*z2 + a2*b1*b3*x1*z1*z2 + a3*b2*x2*z1*z2 + a3*b1*b2*x2*z1*z2 + a2*b3*x2*z1*z2 + a3*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + b1*x3*z1*z2 + a1*b1*x3*z1*z2 + a3*b1*x3*z1*z2 + b2*x3*z1*z2 + a3*b2*x3*z1*z2 + a3*b3*x3*z1*z2 + a3*b2*y1*z1*z2 + a3*b1*b2*y1*z1*z2 + b3*y1*z1*z2 + a1*b3*y1*z1*z2 + a2*b3*y1*z1*z2 + a3*b3*y1*z1*z2 + a2*b1*b3*y1*z1*z2 + a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + b3*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + a1*b1*b3*y2*z1*z2 + a2*b1*b3*y2*z1*z2 + a1*b1*y3*z1*z2 + a3*b1*y3*z1*z2 + a3*b2*y3*z1*z2 + a3*b3*y3*z1*z2 + (b1*b3*z1*(1 + z1)*z2)/2 + b2*x1*z3 + a1*b2*x1*z3 + a2*b2*x1*z3 + a1*a2*b2*x1*z3 + a3*b2*x1*z3 + a1*a3*b2*x1*z3 + a2*b3*x1*z3 + a1*a2*b3*x1*z3 + a2*a3*b3*x1*z3 + a2*b1*b3*x1*z3 + a2*b2*b3*x1*z3 + b1*b2*b3*x1*z3 + (b2*x1*(1 + x1)*z3)/2 + (a1*b2*x1*(1 + x1)*z3)/2 + (a2*b2*x1*(1 + x1)*z3)/2 + (a3*b2*x1*(1 + x1)*z3)/2 + (b1*b2*x1*(1 + x1)*z3)/2 + b1*b3*x2*z3 + a1*b1*b3*x2*z3 + a1*b2*b3*x2*z3 + b1*b2*b3*x2*z3 + a1*b1*x1*x2*z3 + a2*b2*x1*x2*z3 + a1*a2*b2*x1*x2*z3 + a3*b2*x1*x2*z3 + a1*a3*b2*x1*x2*z3 + b1*b2*x1*x2*z3 + b3*x1*x2*z3 + a1*a2*b3*x1*x2*z3 + a2*b1*b3*x1*x2*z3 + b2*x1*x3*z3 + a1*b2*x1*x3*z3 + a1*a2*b2*x1*x3*z3 + a1*a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + b1*b2*x1*x3*z3 + a2*b1*b2*x1*x3*z3 + a2*b3*x1*x3*z3 + a1*a2*b3*x1*x3*z3 + a2*b1*b3*x1*x3*z3 + b2*b3*x1*x3*z3 + a1*b2*x2*x3*z3 + a1*a2*b2*x2*x3*z3 + a1*b3*x2*x3*z3 + b1*b3*x2*x3*z3 + a1*a2*b2*y1*z3 + a1*a3*b2*y1*z3 + a1*a2*b3*y1*z3 + a2*a3*b3*y1*z3 + b2*x1*y1*z3 + a2*b3*x1*y1*z3 + a2*b1*b3*x1*y1*z3 + a2*b2*b3*x1*y1*z3 + b1*b2*b3*x1*y1*z3 + b1*x2*y1*z3 + a1*b2*x2*y1*z3 + a1*a2*b2*x2*y1*z3 + a1*a3*b2*x2*y1*z3 + b1*b2*x2*y1*z3 + a2*b3*x2*y1*z3 + a1*a2*b3*x2*y1*z3 + a1*b1*b3*x2*y1*z3 + b2*b3*x2*y1*z3 + a1*b2*b3*x2*y1*z3 + a2*b2*b3*x2*y1*z3 + a2*b1*x3*y1*z3 + b2*x3*y1*z3 + a1*b2*x3*y1*z3 + a1*a2*b2*x3*y1*z3 + a3*b2*x3*y1*z3 + a1*a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + b1*b2*x3*y1*z3 + a2*b1*b2*x3*y1*z3 + a2*b3*x3*y1*z3 + a1*a2*b3*x3*y1*z3 + a2*b1*b3*x3*y1*z3 + b2*b3*x3*y1*z3 + (a1*b2*y1*(1 + y1)*z3)/2 + (a2*b2*y1*(1 + y1)*z3)/2 + (a3*b2*y1*(1 + y1)*z3)/2 + b1*x1*y2*z3 + a1*b1*x1*y2*z3 + b2*x1*y2*z3 + a2*b2*x1*y2*z3 + a1*a2*b2*x1*y2*z3 + a3*b2*x1*y2*z3 + a1*a3*b2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a1*a2*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + b1*b3*x1*y2*z3 + a2*b1*b3*x1*y2*z3 + b2*b3*x1*y2*z3 + a2*b2*b3*x1*y2*z3 + a1*b2*x2*y2*z3 + b1*b3*x2*y2*z3 + a1*b1*b3*x2*y2*z3 + a1*b2*b3*x2*y2*z3 + b1*b2*b3*x2*y2*z3 + b1*x3*y2*z3 + a1*b2*x3*y2*z3 + a1*a2*b2*x3*y2*z3 + a1*b3*x3*y2*z3 + b1*b3*x3*y2*z3 + a1*b2*y1*y2*z3 + a1*a2*b2*y1*y2*z3 + a1*a3*b2*y1*y2*z3 + a1*b3*y1*y2*z3 + a2*b3*y1*y2*z3 + a1*a2*b3*y1*y2*z3 + a3*b3*y1*y2*z3 + a1*b1*b3*y1*y2*z3 + a1*b2*b3*y1*y2*z3 + a1*b2*x1*y3*z3 + a2*b2*x1*y3*z3 + a1*a2*b2*x1*y3*z3 + a3*b2*x1*y3*z3 + a1*a3*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + a2*b1*b2*x1*y3*z3 + a1*a2*b3*x1*y3*z3 + a2*b1*b3*x1*y3*z3 + a1*a2*b2*x2*y3*z3 + a1*b2*x3*y3*z3 + a2*b1*y1*y3*z3 + a1*b2*y1*y3*z3 + a2*b2*y1*y3*z3 + a1*a2*b2*y1*y3*z3 + a1*a3*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + a2*b1*b2*y1*y3*z3 + a1*a2*b3*y1*y3*z3 + a2*b1*b3*y1*y3*z3 + a1*a2*b2*y2*y3*z3 + b2*x1*z1*z3 + a1*b2*x1*z1*z3 + b1*b2*x1*z1*z3 + a2*b1*b3*x1*z1*z3 + a2*b2*b3*x1*z1*z3 + b1*x2*z1*z3 + a1*b1*x2*z1*z3 + b2*x2*z1*z3 + a1*b1*b3*x2*z1*z3 + a2*b1*b3*x2*z1*z3 + a1*b2*b3*x2*z1*z3 + a2*b2*b3*x2*z1*z3 + a2*b1*x3*z1*z3 + a1*b2*x3*z1*z3 + a2*b2*x3*z1*z3 + b2*y1*z1*z3 + a1*b2*y1*z1*z3 + a2*b1*b3*y1*z1*z3 + a2*b2*b3*y1*z1*z3 + b1*y2*z1*z3 + a1*b1*y2*z1*z3 + b2*y2*z1*z3 + a1*b1*b3*y2*z1*z3 + a2*b1*b3*y2*z1*z3 + a1*b2*b3*y2*z1*z3 + a2*b2*b3*y2*z1*z3 + a2*b1*y3*z1*z3 + a1*b2*y3*z1*z3 + a2*b2*y3*z1*z3 + (b1*b2*z1*(1 + z1)*z3)/2 + b2*x1*z2*z3 + a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + a1*b3*x1*z2*z3 + a2*b3*x1*z2*z3 + a3*b3*x1*z2*z3 + b1*b3*x1*z2*z3 + a2*b2*b3*x1*z2*z3 + b1*b3*x2*z2*z3 + a1*b1*b3*x2*z2*z3 + a1*b2*b3*x2*z2*z3 + b1*b2*b3*x2*z2*z3 + b1*x3*z2*z3 + a1*b2*x3*z2*z3 + a2*b2*y1*z2*z3 + a3*b2*y1*z2*z3 + b3*y1*z2*z3 + a1*b3*y1*z2*z3 + a2*b3*y1*z2*z3 + a3*b3*y1*z2*z3 + a2*b2*b3*y1*z2*z3 + a1*b1*b3*y2*z2*z3 + a1*b2*b3*y2*z2*z3 + b1*b2*b3*y2*z2*z3 + a1*b2*y3*z2*z3 + (a1*x1*x2 + x1*y2 + a1*x1*y2 + a1*x2*y2)*(x3 + z3);
end;
#####################################################################
Cgamma2in22:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a2*a3*b1*x1 + a3*b2*x1 + a1*a3*b2*x1 + a2*a3*b2*x1 + a3*b1*b2*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + x1*(1 + x1) + (a2*a3*b1*x1*(1 + x1))/2 + (a2*a3*b2*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + (a1*a2*b3*x1*(1 + x1))/2 + (a2*a3*b3*x1*(1 + x1))/2 + a3*b1*b2*x2 + a2*a3*b1*b2*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b2*b3*x2 + a1*b1*b2*b3*x2 + a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a1*a3*x1*x2 + a3*b1*x1*x2 + a2*a3*b1*x1*x2 + a2*a3*b2*x1*x2 + 2*a3*b1*b2*x1*x2 + a1*a3*b1*b2*x1*x2 + a2*b3*x1*x2 + a1*a3*b3*x1*x2 + a2*a3*b3*x1*x2 + b1*b3*x1*x2 + a1*b1*b3*x1*x2 + 2*a2*b1*b3*x1*x2 + 2*a3*b1*b3*x1*x2 + a1*b2*b3*x1*x2 + a1*a2*b2*b3*x1*x2 + a1*a3*b2*b3*x1*x2 + a1*b1*b2*b3*x1*x2 + a2*b1*b2*b3*x1*x2 + a3*b1*b2*b3*x1*x2 + (a3*b2*x1*(1 + x1)*x2)/2 + (b3*x1*(1 + x1)*x2)/2 + (a1*b3*x1*(1 + x1)*x2)/2 + (a2*b3*x1*(1 + x1)*x2)/2 + (a3*b3*x1*(1 + x1)*x2)/2 + (b1*b3*x1*(1 + x1)*x2)/2 + (a1*a3*x2*(1 + x2))/2 + (a2*a3*b1*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*a2*b1*b3*x3 + a1*a3*b2*b3*x3 + a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*x1*x3 + a1*a2*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a1*a2*a3*b1*x1*x3 + 2*a2*b2*x1*x3 + a3*b2*x1*x3 + a1*a3*b2*x1*x3 + 2*a2*a3*b2*x1*x3 + b1*b2*x1*x3 + a2*b1*b2*x1*x3 + a2*b3*x1*x3 + a1*a2*b3*x1*x3 + 2*a2*a3*b3*x1*x3 + a2*b1*b3*x1*x3 + a1*a2*b1*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + b2*b3*x1*x3 + a2*b2*b3*x1*x3 + a3*b2*b3*x1*x3 + a1*a3*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + b1*b2*b3*x1*x3 + (a1*b2*x1*(1 + x1)*x3)/2 + (a3*b2*x1*(1 + x1)*x3)/2 + (b1*b2*x1*(1 + x1)*x3)/2 + (a2*b3*x1*(1 + x1)*x3)/2 + a1*b1*x2*x3 + a3*b1*x2*x3 + a2*a3*b1*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + a1*a3*b2*x2*x3 + a1*a2*b1*b2*x2*x3 + a1*b3*x2*x3 + a1*a3*b3*x2*x3 + a2*b1*b3*x2*x3 + a2*a3*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + a2*b1*b2*b3*x2*x3 + a3*b1*b2*b3*x2*x3 + a1*b1*x1*x2*x3 + a3*b1*x1*x2*x3 + a1*a3*b1*x1*x2*x3 + a2*a3*b1*x1*x2*x3 + b2*x1*x2*x3 + a1*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + a1*a3*b2*x1*x2*x3 + a2*b1*b2*x1*x2*x3 + b3*x1*x2*x3 + a3*b3*x1*x2*x3 + b1*b3*x1*x2*x3 + a1*b1*b3*x1*x2*x3 + a1*b2*b3*x1*x2*x3 + b1*b2*b3*x1*x2*x3 + (a2*b1*x3*(1 + x3))/2 + (a2*a3*b1*x3*(1 + x3))/2 + (a1*b2*x3*(1 + x3))/2 + (a1*a3*b2*x3*(1 + x3))/2 + (a1*b1*b2*x3*(1 + x3))/2 + a2*a3*b1*y1 + 2*a1*a3*b2*y1 + a2*a3*b2*y1 + a1*a3*b1*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a2*a3*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + a2*a3*b1*x1*y1 + a3*b2*x1*y1 + a1*a3*b2*x1*y1 + a2*a3*b2*x1*y1 + a3*b1*b2*x1*y1 + 2*a2*b3*x1*y1 + 2*a1*a2*b3*x1*y1 + 2*a2*a3*b3*x1*y1 + a2*b1*b3*x1*y1 + a3*b2*b3*x1*y1 + a1*a3*x2*y1 + a3*b1*x2*y1 + a2*a3*b1*x2*y1 + a1*a3*b2*x2*y1 + a2*a3*b2*x2*y1 + a3*b1*b2*x2*y1 + a1*a3*b1*b2*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a1*a2*b3*x2*y1 + a3*b3*x2*y1 + a1*a3*b3*x2*y1 + 2*a2*a3*b3*x2*y1 + a1*b1*b3*x2*y1 + a2*b1*b3*x2*y1 + 2*a3*b1*b3*x2*y1 + a1*b2*b3*x2*y1 + a1*a2*b2*b3*x2*y1 + a3*b2*b3*x2*y1 + a1*a3*b2*b3*x2*y1 + a1*b1*b2*b3*x2*y1 + a2*b1*b2*b3*x2*y1 + a3*b1*b2*b3*x2*y1 + a3*b1*x1*x2*y1 + a1*a3*b2*x1*x2*y1 + a3*b1*b2*x1*x2*y1 + b3*x1*x2*y1 + a1*b3*x1*x2*y1 + a1*a2*b3*x1*x2*y1 + a2*b1*b3*x1*x2*y1 + a2*a3*x3*y1 + a1*a2*a3*x3*y1 + a2*b1*x3*y1 + 2*a1*a2*b1*x3*y1 + 2*a2*a3*b1*x3*y1 + a1*a2*a3*b1*x3*y1 + a2*b2*x3*y1 + a1*a2*b2*x3*y1 + a3*b2*x3*y1 + 2*a1*a3*b2*x3*y1 + a2*a3*b2*x3*y1 + a2*b3*x3*y1 + a2*b1*b3*x3*y1 + a1*a2*b1*b3*x3*y1 + a2*a3*b1*b3*x3*y1 + a3*b2*b3*x3*y1 + a1*a3*b2*b3*x3*y1 + a2*a3*b2*b3*x3*y1 + a2*a3*b1*x1*x3*y1 + a1*b2*x1*x3*y1 + a2*b2*x1*x3*y1 + a1*a2*b2*x1*x3*y1 + a1*a3*b2*x1*x3*y1 + a2*a3*b2*x1*x3*y1 + b1*b2*x1*x3*y1 + a2*b1*b2*x1*x3*y1 + a2*b3*x1*x3*y1 + a1*a2*b3*x1*x3*y1 + b2*b3*x1*x3*y1 + a2*b2*b3*x1*x3*y1 + b1*b2*b3*x1*x3*y1 + a2*b1*x2*x3*y1 + a3*b1*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + a2*b1*b2*x2*x3*y1 + b3*x2*x3*y1 + a1*b3*x2*x3*y1 + a2*b1*b3*x2*x3*y1 + a2*b2*b3*x2*x3*y1 + b1*b2*b3*x2*x3*y1 + y1*(1 + y1) + (a2*a3*b1*y1*(1 + y1))/2 + (a2*a3*b2*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (a1*a2*b3*y1*(1 + y1))/2 + (a2*a3*b3*y1*(1 + y1))/2 + (a3*b2*x2*y1*(1 + y1))/2 + (a1*b3*x2*y1*(1 + y1))/2 + (a2*b3*x2*y1*(1 + y1))/2 + (a3*b3*x2*y1*(1 + y1))/2 + (a1*b2*x3*y1*(1 + y1))/2 + (a2*b2*x3*y1*(1 + y1))/2 + (a3*b2*x3*y1*(1 + y1))/2 - a2*a3*(x1 + y1) + a2*a3*b1*b2*y2 + a1*a2*b2*b3*y2 + a1*a3*x1*y2 + a2*a3*b1*x1*y2 + a3*b2*x1*y2 + a1*a3*b2*x1*y2 + a2*a3*b2*x1*y2 + a1*b3*x1*y2 + 2*a2*b3*x1*y2 + a1*a2*b3*x1*y2 + 2*a2*a3*b3*x1*y2 + a1*b1*b3*x1*y2 + a1*a2*b1*b3*x1*y2 + a3*b1*b3*x1*y2 + a1*a3*b1*b3*x1*y2 + a1*b2*b3*x1*y2 + a1*a2*b2*b3*x1*y2 + a3*b2*b3*x1*y2 + a1*a3*b2*b3*x1*y2 + (b3*x1*(1 + x1)*y2)/2 + a1*a3*x2*y2 + a2*a3*b1*x2*y2 + a1*a3*b2*x2*y2 + a3*b1*b2*x2*y2 + a1*a3*b3*x2*y2 + a1*b1*b3*x2*y2 + a2*b1*b3*x2*y2 + a1*b1*b2*b3*x2*y2 + a2*b1*b2*b3*x2*y2 + a3*b1*b2*b3*x2*y2 + a3*b1*x1*x2*y2 + a3*b2*x1*x2*y2 + a1*a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a1*b3*x1*x2*y2 + a2*b3*x1*x2*y2 + a1*a2*b3*x1*x2*y2 + a3*b3*x1*x2*y2 + a1*b1*b3*x1*x2*y2 + a2*b1*b3*x1*x2*y2 + a2*b1*x3*y2 + 2*a1*a2*b1*x3*y2 + a3*b1*x3*y2 + a1*a3*b1*x3*y2 + a2*a3*b1*x3*y2 + a1*a2*b2*x3*y2 + 2*a1*a3*b2*x3*y2 + a2*b1*b2*x3*y2 + a2*a3*b1*b2*x3*y2 + a1*a3*b3*x3*y2 + a1*b1*b3*x3*y2 + a2*b1*b3*x3*y2 + a1*a2*b1*b3*x3*y2 + a3*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + a1*a2*b2*b3*x3*y2 + a2*b1*b2*b3*x3*y2 + a3*b1*b2*b3*x3*y2 + b1*x1*x3*y2 + a1*b1*x1*x3*y2 + a1*a3*b1*x1*x3*y2 + a2*a3*b1*x1*x3*y2 + b2*x1*x3*y2 + a2*b2*x1*x3*y2 + a1*a2*b2*x1*x3*y2 + a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a1*b3*x1*x3*y2 + a2*b3*x1*x3*y2 + a1*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a1*b1*b3*x1*x3*y2 + a2*b1*b3*x1*x3*y2 + a1*b2*b3*x1*x3*y2 + a2*b2*b3*x1*x3*y2 + a1*b1*x2*x3*y2 + a1*a2*b1*x2*x3*y2 + a3*b1*x2*x3*y2 + a1*a3*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + a1*a3*b2*x2*x3*y2 + a1*b3*x2*x3*y2 + a1*b1*b3*x2*x3*y2 + a1*b2*b3*x2*x3*y2 + a1*a3*y1*y2 + a2*a3*b1*y1*y2 + a3*b2*y1*y2 + 2*a1*a3*b2*y1*y2 + a2*a3*b2*y1*y2 + a1*b3*y1*y2 + 2*a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a2*a3*b3*y1*y2 + a1*b1*b3*y1*y2 + a1*a2*b1*b3*y1*y2 + a1*a3*b1*b3*y1*y2 + a1*b2*b3*y1*y2 + a1*a2*b2*b3*y1*y2 + a1*a3*b2*b3*y1*y2 + a1*a3*b2*x1*y1*y2 + a1*b3*x1*y1*y2 + a1*a2*b3*x1*y1*y2 + a1*a3*b2*x2*y1*y2 + a1*b3*x2*y1*y2 + a1*a2*b3*x2*y1*y2 + a1*b2*x3*y1*y2 + a1*a2*b2*x3*y1*y2 + a1*a3*b2*x3*y1*y2 + a2*b3*x3*y1*y2 + a1*a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + (a1*a3*y2*(1 + y2))/2 + (a2*a3*b1*y2*(1 + y2))/2 + (a1*a3*b2*y2*(1 + y2))/2 + (a1*a3*b3*y2*(1 + y2))/2 + a2*a3*b1*b3*y3 + a1*a3*b2*b3*y3 + a2*x1*y3 + a1*a2*x1*y3 + a1*a2*a3*x1*y3 + 2*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a1*a2*a3*b1*x1*y3 + a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + a2*a3*b2*x1*y3 + a2*b3*x1*y3 + (a2*b2*x1*(1 + x1)*y3)/2 + (a2*b3*x1*(1 + x1)*y3)/2 + a2*a3*b1*x2*y3 + a1*a3*b2*x2*y3 + a2*b1*b2*x2*y3 + a1*a2*b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a2*b1*b3*x2*y3 + a1*a2*b1*b3*x2*y3 + a3*b1*b3*x2*y3 + a1*b1*x1*x2*y3 + a2*b1*x1*x2*y3 + a1*a3*b1*x1*x2*y3 + a2*a3*b1*x1*x2*y3 + a1*a2*b2*x1*x2*y3 + a3*b2*x1*x2*y3 + a2*b1*b2*x1*x2*y3 + a1*a2*b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*b1*b3*x1*x2*y3 + a1*a2*b1*x3*y3 + a2*a3*b1*x3*y3 + a1*a3*b2*x3*y3 + a2*b1*b2*x3*y3 + a2*a3*b1*b2*x3*y3 + a1*a2*b1*b3*x3*y3 + a2*a3*b1*b3*x3*y3 + a2*b1*b2*b3*x3*y3 + a3*b1*b2*b3*x3*y3 + a1*b2*x1*x3*y3 + a2*b2*x1*x3*y3 + a1*a2*b2*x1*x3*y3 + a3*b2*x1*x3*y3 + a1*a3*b2*x1*x3*y3 + a2*a3*b2*x1*x3*y3 + a2*b1*b2*x1*x3*y3 + a1*a2*b3*x1*x3*y3 + a2*b1*b3*x1*x3*y3 + a1*b1*x2*x3*y3 + a2*b1*x2*x3*y3 + a3*b1*x2*x3*y3 + a1*a2*b2*x2*x3*y3 + a2*a3*y1*y3 + a1*a2*a3*y1*y3 + 2*a1*a2*b1*y1*y3 + 2*a2*a3*b1*y1*y3 + a1*a2*a3*b1*y1*y3 + a1*b2*y1*y3 + a1*a2*b2*y1*y3 + a3*b2*y1*y3 + 2*a1*a3*b2*y1*y3 + a2*b1*b2*y1*y3 + a2*b3*y1*y3 + a1*a2*b3*y1*y3 + 2*a2*a3*b3*y1*y3 + a2*b1*b3*y1*y3 + a2*b1*x1*y1*y3 + a2*a3*b1*x1*y1*y3 + a1*b2*x1*y1*y3 + a1*a2*b2*x1*y1*y3 + a1*a3*b2*x1*y1*y3 + a2*a3*b2*x1*y1*y3 + a2*b1*b2*x1*y1*y3 + a2*b3*x1*y1*y3 + a1*a2*b3*x1*y1*y3 + a2*b1*b3*x1*y1*y3 + a2*b1*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a1*a2*b2*x2*y1*y3 + a1*a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + a2*b1*b2*x2*y1*y3 + a1*a2*b3*x2*y1*y3 + a2*b1*b3*x2*y1*y3 + a2*b1*x3*y1*y3 + a1*b2*x3*y1*y3 + a2*b2*x3*y1*y3 + a1*a2*b2*x3*y1*y3 + a1*a3*b2*x3*y1*y3 + a2*a3*b2*x3*y1*y3 + a2*b1*b2*x3*y1*y3 + a1*a2*b3*x3*y1*y3 + a2*b1*b3*x3*y1*y3 + a1*b1*y2*y3 + 2*a1*a2*b1*y2*y3 + a1*a3*b1*y2*y3 + a2*a3*b1*y2*y3 + a1*b2*y2*y3 + 2*a1*a3*b2*y2*y3 + a2*b1*b2*y2*y3 + a2*a3*b1*b2*y2*y3 + a2*b1*b3*y2*y3 + a2*a3*b1*b3*y2*y3 + a1*b1*x1*y2*y3 + a2*b1*x1*y2*y3 + a1*a3*b1*x1*y2*y3 + a2*a3*b1*x1*y2*y3 + a1*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + a1*a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + a1*b1*x2*y2*y3 + a1*a2*b1*x2*y2*y3 + a1*a3*b1*x2*y2*y3 + a1*b2*x2*y2*y3 + a1*a3*b2*x2*y2*y3 + a1*a2*b2*x3*y2*y3 + (a2*a3*b1*y3*(1 + y3))/2 + (a1*a3*b2*y3*(1 + y3))/2 + a3*b2*x1*z1 + a1*a3*b2*x1*z1 + a1*a2*b3*x1*z1 + a2*a3*b3*x1*z1 + a2*b1*b3*x1*z1 + a1*b2*b3*x1*z1 + a2*b2*b3*x1*z1 + a3*b1*x2*z1 + a3*b1*b2*x2*z1 + b3*x2*z1 + a2*b3*x2*z1 + a3*b3*x2*z1 + a2*a3*b3*x2*z1 + 2*a1*b1*b3*x2*z1 + 2*a2*b1*b3*x2*z1 + a1*b2*b3*x2*z1 + a2*b2*b3*x2*z1 + a3*b2*x1*x2*z1 + a1*a3*b2*x1*x2*z1 + a3*b1*b2*x1*x2*z1 + a1*b3*x1*x2*z1 + a2*b3*x1*x2*z1 + a1*a2*b3*x1*x2*z1 + a3*b3*x1*x2*z1 + b1*b3*x1*x2*z1 + a2*b1*b3*x1*x2*z1 + a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a2*b2*x3*z1 + a2*a3*b2*x3*z1 + a1*a2*b3*x3*z1 + a2*a3*b3*x3*z1 + a2*a3*b1*x1*x3*z1 + a2*b2*x1*x3*z1 + a1*a2*b2*x1*x3*z1 + a1*a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + b1*b2*x1*x3*z1 + a1*a2*b3*x1*x3*z1 + a2*b1*b3*x1*x3*z1 + a2*b2*b3*x1*x3*z1 + a3*b1*x2*x3*z1 + a1*a3*b1*x2*x3*z1 + a2*a3*b1*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + a1*b3*x2*x3*z1 + a2*b3*x2*x3*z1 + a3*b3*x2*x3*z1 + a1*b1*b3*x2*x3*z1 + a2*b1*b3*x2*x3*z1 + a1*b2*b3*x2*x3*z1 + a2*b2*b3*x2*x3*z1 + a1*a3*b2*y1*z1 + a2*b3*y1*z1 + a1*a2*b3*y1*z1 + a2*a3*b3*y1*z1 + a2*b1*b3*y1*z1 + a1*b2*b3*y1*z1 + a2*b2*b3*y1*z1 + a3*b2*x1*y1*z1 + a2*b3*x1*y1*z1 + a3*b1*x2*y1*z1 + a1*a3*b2*x2*y1*z1 + a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*a2*b3*x2*y1*z1 + a3*b3*x2*y1*z1 + a2*b1*b3*x2*y1*z1 + a2*a3*b1*x3*y1*z1 + b2*x3*y1*z1 + a1*a2*b2*x3*y1*z1 + a1*a3*b2*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + a2*b3*x3*y1*z1 + a1*a2*b3*x3*y1*z1 + a2*b1*b3*x3*y1*z1 + a2*b2*b3*x3*y1*z1 + a1*b3*y2*z1 + a2*b3*y2*z1 + a2*a3*b3*y2*z1 + a1*b1*b3*y2*z1 + a2*b1*b3*y2*z1 + a1*b2*b3*y2*z1 + a2*b2*b3*y2*z1 + a3*b1*x1*y2*z1 + a3*b2*x1*y2*z1 + a1*a3*b2*x1*y2*z1 + b3*x1*y2*z1 + a2*b3*x1*y2*z1 + a1*a2*b3*x1*y2*z1 + a3*b1*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + b3*x2*y2*z1 + a1*b3*x2*y2*z1 + a3*b3*x2*y2*z1 + a1*b1*b3*x2*y2*z1 + a2*b1*b3*x2*y2*z1 + b1*x3*y2*z1 + a1*b1*x3*y2*z1 + a1*a3*b1*x3*y2*z1 + a2*a3*b1*x3*y2*z1 + b2*x3*y2*z1 + a1*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a1*b1*b3*x3*y2*z1 + a2*b1*b3*x3*y2*z1 + a1*b2*b3*x3*y2*z1 + a2*b2*b3*x3*y2*z1 + a1*a3*b2*y1*y2*z1 + a1*b3*y1*y2*z1 + a1*a2*b3*y1*y2*z1 + a1*a2*b1*y3*z1 + a2*a3*b1*y3*z1 + a1*a2*b2*y3*z1 + a2*a3*b2*y3*z1 + a1*a2*b3*y3*z1 + a2*a3*b3*y3*z1 + a2*b1*x1*y3*z1 + a2*a3*b1*x1*y3*z1 + a1*b2*x1*y3*z1 + a1*a2*b2*x1*y3*z1 + a1*a3*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a2*b3*x1*y3*z1 + a1*a2*b3*x1*y3*z1 + a2*b1*x2*y3*z1 + a3*b1*x2*y3*z1 + a1*a3*b1*x2*y3*z1 + a2*a3*b1*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a3*b2*x2*y3*z1 + a1*a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + a3*b3*x2*y3*z1 + a2*b1*x3*y3*z1 + a1*b2*x3*y3*z1 + a2*b2*x3*y3*z1 + a2*b1*y1*y3*z1 + a2*a3*b1*y1*y3*z1 + a1*b2*y1*y3*z1 + a2*b2*y1*y3*z1 + a1*a2*b2*y1*y3*z1 + a1*a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + a1*a2*b3*y1*y3*z1 + a1*b1*y2*y3*z1 + a2*b1*y2*y3*z1 + a1*a3*b1*y2*y3*z1 + a2*a3*b1*y2*y3*z1 + a1*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + a1*a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + (b1*b3*x2*z1*(1 + z1))/2 + (b2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + (b1*b2*x3*z1*(1 + z1))/2 + (a2*b3*x3*z1*(1 + z1))/2 + (b3*y2*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + (a2*b3*y3*z1*(1 + z1))/2 - a2*b3*(x1 + z1) - b2*b3*(x1 + z1) + a3*x1*z2 + a1*a3*x1*z2 + a3*b1*x1*z2 + a1*a3*b1*x1*z2 + 2*a3*b2*x1*z2 + 2*a1*a3*b2*x1*z2 + a3*b1*b2*x1*z2 + a1*a3*b1*b2*x1*z2 + b3*x1*z2 + 2*a1*b3*x1*z2 + a2*b3*x1*z2 + 2*a1*a2*b3*x1*z2 + a3*b3*x1*z2 + a1*a3*b3*x1*z2 + a2*a3*b3*x1*z2 + 2*b1*b3*x1*z2 + 2*a1*b1*b3*x1*z2 + a1*a2*b1*b3*x1*z2 + 2*a3*b1*b3*x1*z2 + a1*a3*b1*b3*x1*z2 + a1*b2*b3*x1*z2 + a2*b2*b3*x1*z2 + a1*b1*b2*b3*x1*z2 + a2*b1*b2*b3*x1*z2 + a3*b1*b2*b3*x1*z2 + (a3*b2*x1*(1 + x1)*z2)/2 + (b3*x1*(1 + x1)*z2)/2 + (a1*b3*x1*(1 + x1)*z2)/2 + (a2*b3*x1*(1 + x1)*z2)/2 + (a3*b3*x1*(1 + x1)*z2)/2 + (b1*b3*x1*(1 + x1)*z2)/2 + a3*b1*b2*x2*z2 + b1*b3*x2*z2 + a1*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a1*b2*b3*x2*z2 + a1*b1*b2*b3*x2*z2 + a2*b1*b2*b3*x2*z2 + a3*b1*b2*b3*x2*z2 + a3*b2*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a3*b1*b2*x1*x2*z2 + a2*b3*x1*x2*z2 + a1*a2*b3*x1*x2*z2 + a3*b3*x1*x2*z2 + b1*b3*x1*x2*z2 + a1*b1*b3*x1*x2*z2 + a2*b1*b3*x1*x2*z2 + a1*b1*x3*z2 + a2*b1*x3*z2 + a3*b1*x3*z2 + a2*b1*b2*x3*z2 + a1*a2*b1*b2*x3*z2 + a2*a3*b1*b2*x3*z2 + a2*b1*b3*x3*z2 + a1*a2*b1*b3*x3*z2 + a2*a3*b1*b3*x3*z2 + a3*b1*x1*x3*z2 + a1*b2*x1*x3*z2 + a2*b2*x1*x3*z2 + a1*a2*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + b1*b2*x1*x3*z2 + a2*b1*b2*x1*x3*z2 + a1*b3*x1*x3*z2 + a1*a2*b3*x1*x3*z2 + a2*b1*b3*x1*x3*z2 + a2*b2*b3*x1*x3*z2 + b1*b2*b3*x1*x3*z2 + a2*b1*x2*x3*z2 + a1*a2*b1*x2*x3*z2 + a1*a3*b1*x2*x3*z2 + a1*a3*b2*x2*x3*z2 + a1*b3*x2*x3*z2 + b1*b3*x2*x3*z2 + a1*b1*b3*x2*x3*z2 + a1*b2*b3*x2*x3*z2 + a1*a3*y1*z2 + a1*a3*b1*y1*z2 + a3*b2*y1*z2 + 2*a1*a3*b2*y1*z2 + a3*b1*b2*y1*z2 + a1*a3*b1*b2*y1*z2 + 2*a1*a2*b3*y1*z2 + a3*b3*y1*z2 + a1*a3*b3*y1*z2 + a2*a3*b3*y1*z2 + a1*b1*b3*y1*z2 + 2*a2*b1*b3*y1*z2 + a1*a2*b1*b3*y1*z2 + a3*b1*b3*y1*z2 + a1*a3*b1*b3*y1*z2 + a1*b2*b3*y1*z2 + a2*b2*b3*y1*z2 + a1*b1*b2*b3*y1*z2 + a2*b1*b2*b3*y1*z2 + a3*b1*b2*b3*y1*z2 + a3*b2*x1*y1*z2 + a3*b1*b2*x1*y1*z2 + a2*b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a2*b1*b3*x1*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a1*b3*x2*y1*z2 + a2*b3*x2*y1*z2 + a1*a2*b3*x2*y1*z2 + b1*b3*x2*y1*z2 + b1*x3*y1*z2 + a2*b1*x3*y1*z2 + a3*b1*x3*y1*z2 + a1*b2*x3*y1*z2 + a2*b2*x3*y1*z2 + a1*a2*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + b1*b2*x3*y1*z2 + a2*b1*b2*x3*y1*z2 + b3*x3*y1*z2 + a1*b3*x3*y1*z2 + a1*a2*b3*x3*y1*z2 + a3*b3*x3*y1*z2 + b1*b3*x3*y1*z2 + a2*b1*b3*x3*y1*z2 + a2*b2*b3*x3*y1*z2 + b1*b2*b3*x3*y1*z2 + (a3*b2*y1*(1 + y1)*z2)/2 + (a1*b3*y1*(1 + y1)*z2)/2 + (a2*b3*y1*(1 + y1)*z2)/2 + (a3*b3*y1*(1 + y1)*z2)/2 + a2*b1*b3*y2*z2 + a1*b2*b3*y2*z2 + a1*b1*b2*b3*y2*z2 + a2*b1*b2*b3*y2*z2 + a3*b1*b2*b3*y2*z2 + a1*a3*b2*x1*y2*z2 + a3*b1*b2*x1*y2*z2 + b3*x1*y2*z2 + a1*a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a2*b1*b3*x1*y2*z2 + a1*b3*x2*y2*z2 + a1*b1*x3*y2*z2 + a1*a2*b1*x3*y2*z2 + a3*b1*x3*y2*z2 + a1*a3*b1*x3*y2*z2 + a1*a3*b2*x3*y2*z2 + a1*b3*x3*y2*z2 + a1*b1*b3*x3*y2*z2 + a1*b2*b3*x3*y2*z2 + a1*a3*b2*y1*y2*z2 + a1*b3*y1*y2*z2 + a1*a2*b3*y1*y2*z2 + a2*b1*b2*y3*z2 + a1*a2*b1*b2*y3*z2 + a2*a3*b1*b2*y3*z2 + a2*b1*b3*y3*z2 + a1*a2*b1*b3*y3*z2 + a2*a3*b1*b3*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a1*a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + a2*b1*b2*x1*y3*z2 + a1*a2*b3*x1*y3*z2 + a3*b3*x1*y3*z2 + a2*b1*b3*x1*y3*z2 + a2*b1*x2*y3*z2 + a1*a2*b1*x2*y3*z2 + a3*b1*x2*y3*z2 + a1*a3*b1*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*a3*b2*x2*y3*z2 + a1*b1*x3*y3*z2 + a2*b1*x3*y3*z2 + a3*b1*x3*y3*z2 + a1*b2*x3*y3*z2 + a2*b1*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a1*a2*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + a2*b1*b2*y1*y3*z2 + a1*a2*b3*y1*y3*z2 + a2*b1*b3*y1*y3*z2 + a1*b1*y2*y3*z2 + a1*a2*b1*y2*y3*z2 + a1*a3*b1*y2*y3*z2 + a1*b2*y2*y3*z2 + a1*a3*b2*y2*y3*z2 + a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + a1*b3*x1*z1*z2 + a2*b3*x1*z1*z2 + a3*b3*x1*z1*z2 + b1*b3*x1*z1*z2 + a2*b1*b3*x1*z1*z2 + a3*b2*x2*z1*z2 + a3*b1*b2*x2*z1*z2 + a2*b3*x2*z1*z2 + a3*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + b1*x3*z1*z2 + a1*b1*x3*z1*z2 + a3*b1*x3*z1*z2 + b2*x3*z1*z2 + a3*b2*x3*z1*z2 + a3*b3*x3*z1*z2 + a3*b2*y1*z1*z2 + a3*b1*b2*y1*z1*z2 + b3*y1*z1*z2 + a1*b3*y1*z1*z2 + a2*b3*y1*z1*z2 + a3*b3*y1*z1*z2 + a2*b1*b3*y1*z1*z2 + a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + b3*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + a1*b1*b3*y2*z1*z2 + a2*b1*b3*y2*z1*z2 + a1*b1*y3*z1*z2 + a3*b1*y3*z1*z2 + a3*b2*y3*z1*z2 + a3*b3*y3*z1*z2 + (b1*b3*z1*(1 + z1)*z2)/2 + a1*a2*b1*b2*z3 + a1*a2*x1*z3 + a2*a3*x1*z3 + a2*b1*x1*z3 + a1*a2*b1*x1*z3 + a2*a3*b1*x1*z3 + b2*x1*z3 + a1*b2*x1*z3 + a2*b2*x1*z3 + a1*a2*b2*x1*z3 + 2*a3*b2*x1*z3 + 2*a1*a3*b2*x1*z3 + a2*a3*b2*x1*z3 + a2*b3*x1*z3 + 2*a1*a2*b3*x1*z3 + 2*a2*a3*b3*x1*z3 + 2*a2*b1*b3*x1*z3 + a1*a2*b1*b3*x1*z3 + a2*a3*b1*b3*x1*z3 + a2*b2*b3*x1*z3 + a3*b2*b3*x1*z3 + a1*a3*b2*b3*x1*z3 + a2*a3*b2*b3*x1*z3 + b1*b2*b3*x1*z3 + (b2*x1*(1 + x1)*z3)/2 + (a1*b2*x1*(1 + x1)*z3)/2 + (a2*b2*x1*(1 + x1)*z3)/2 + (a3*b2*x1*(1 + x1)*z3)/2 + (b1*b2*x1*(1 + x1)*z3)/2 + a1*x2*z3 + a1*a2*x2*z3 + a1*b1*x2*z3 + a1*a2*b1*x2*z3 + a3*b1*x2*z3 + a2*a3*b1*x2*z3 + a1*b2*x2*z3 + a1*a2*b2*x2*z3 + a1*b3*x2*z3 + a1*a2*b3*x2*z3 + b1*b3*x2*z3 + a1*b1*b3*x2*z3 + a2*b1*b3*x2*z3 + a1*a2*b1*b3*x2*z3 + a2*a3*b1*b3*x2*z3 + 2*a1*b2*b3*x2*z3 + a1*a2*b2*b3*x2*z3 + b1*b2*b3*x2*z3 + a2*b1*b2*b3*x2*z3 + a3*b1*b2*b3*x2*z3 + a1*b1*x1*x2*z3 + a2*b2*x1*x2*z3 + a1*a2*b2*x1*x2*z3 + a3*b2*x1*x2*z3 + a1*a3*b2*x1*x2*z3 + b1*b2*x1*x2*z3 + b3*x1*x2*z3 + a1*a2*b3*x1*x2*z3 + a2*b1*b3*x1*x2*z3 + a1*b1*b2*x3*z3 + a2*b1*b2*x3*z3 + a2*a3*b1*b2*x3*z3 + a2*b1*b3*x3*z3 + a1*a2*b1*b3*x3*z3 + a2*a3*b1*b3*x3*z3 + a1*b2*b3*x3*z3 + a2*b1*b2*b3*x3*z3 + a3*b1*b2*b3*x3*z3 + b2*x1*x3*z3 + a1*b2*x1*x3*z3 + a1*a2*b2*x1*x3*z3 + a1*a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + b1*b2*x1*x3*z3 + a2*b1*b2*x1*x3*z3 + a2*b3*x1*x3*z3 + a1*a2*b3*x1*x3*z3 + a2*b1*b3*x1*x3*z3 + b2*b3*x1*x3*z3 + a1*b2*x2*x3*z3 + a1*a2*b2*x2*x3*z3 + a1*b3*x2*x3*z3 + b1*b3*x2*x3*z3 + a1*a2*y1*z3 + a2*a3*y1*z3 + a2*b1*y1*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + a1*a2*b2*y1*z3 + a3*b2*y1*z3 + 2*a1*a3*b2*y1*z3 + a2*a3*b2*y1*z3 + 2*a1*a2*b3*y1*z3 + 2*a2*a3*b3*y1*z3 + a2*b1*b3*y1*z3 + a1*a2*b1*b3*y1*z3 + a2*a3*b1*b3*y1*z3 + a3*b2*b3*y1*z3 + a1*a3*b2*b3*y1*z3 + a2*a3*b2*b3*y1*z3 + b2*x1*y1*z3 + a2*b3*x1*y1*z3 + a2*b1*b3*x1*y1*z3 + a2*b2*b3*x1*y1*z3 + b1*b2*b3*x1*y1*z3 + b1*x2*y1*z3 + a1*b2*x2*y1*z3 + a1*a2*b2*x2*y1*z3 + a1*a3*b2*x2*y1*z3 + b1*b2*x2*y1*z3 + a2*b3*x2*y1*z3 + a1*a2*b3*x2*y1*z3 + a1*b1*b3*x2*y1*z3 + b2*b3*x2*y1*z3 + a1*b2*b3*x2*y1*z3 + a2*b2*b3*x2*y1*z3 + a2*b1*x3*y1*z3 + b2*x3*y1*z3 + a1*b2*x3*y1*z3 + a1*a2*b2*x3*y1*z3 + a3*b2*x3*y1*z3 + a1*a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + b1*b2*x3*y1*z3 + a2*b1*b2*x3*y1*z3 + a2*b3*x3*y1*z3 + a1*a2*b3*x3*y1*z3 + a2*b1*b3*x3*y1*z3 + b2*b3*x3*y1*z3 + (a1*b2*y1*(1 + y1)*z3)/2 + (a2*b2*y1*(1 + y1)*z3)/2 + (a3*b2*y1*(1 + y1)*z3)/2 + a1*a2*y2*z3 + a2*b1*y2*z3 + a1*a2*b1*y2*z3 + a2*a3*b1*y2*z3 + a1*a2*b2*y2*z3 + a2*b1*b2*y2*z3 + a3*b1*b2*y2*z3 + a1*a2*b3*y2*z3 + a2*b1*b3*y2*z3 + a1*a2*b1*b3*y2*z3 + a2*a3*b1*b3*y2*z3 + a1*a2*b2*b3*y2*z3 + a2*b1*b2*b3*y2*z3 + a3*b1*b2*b3*y2*z3 + b1*x1*y2*z3 + a1*b1*x1*y2*z3 + b2*x1*y2*z3 + a2*b2*x1*y2*z3 + a1*a2*b2*x1*y2*z3 + a3*b2*x1*y2*z3 + a1*a3*b2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a1*a2*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + b1*b3*x1*y2*z3 + a2*b1*b3*x1*y2*z3 + b2*b3*x1*y2*z3 + a2*b2*b3*x1*y2*z3 + a1*b2*x2*y2*z3 + b1*b3*x2*y2*z3 + a1*b1*b3*x2*y2*z3 + a1*b2*b3*x2*y2*z3 + b1*b2*b3*x2*y2*z3 + b1*x3*y2*z3 + a1*b2*x3*y2*z3 + a1*a2*b2*x3*y2*z3 + a1*b3*x3*y2*z3 + b1*b3*x3*y2*z3 + a1*b2*y1*y2*z3 + a1*a2*b2*y1*y2*z3 + a1*a3*b2*y1*y2*z3 + a1*b3*y1*y2*z3 + a2*b3*y1*y2*z3 + a1*a2*b3*y1*y2*z3 + a3*b3*y1*y2*z3 + a1*b1*b3*y1*y2*z3 + a1*b2*b3*y1*y2*z3 + a3*b1*b2*y3*z3 + a2*a3*b1*b2*y3*z3 + a2*b1*b3*y3*z3 + a1*a2*b1*b3*y3*z3 + a2*a3*b1*b3*y3*z3 + a2*b1*b2*b3*y3*z3 + a3*b1*b2*b3*y3*z3 + a1*b2*x1*y3*z3 + a2*b2*x1*y3*z3 + a1*a2*b2*x1*y3*z3 + a3*b2*x1*y3*z3 + a1*a3*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + a2*b1*b2*x1*y3*z3 + a1*a2*b3*x1*y3*z3 + a2*b1*b3*x1*y3*z3 + a1*a2*b2*x2*y3*z3 + a1*b2*x3*y3*z3 + a2*b1*y1*y3*z3 + a1*b2*y1*y3*z3 + a2*b2*y1*y3*z3 + a1*a2*b2*y1*y3*z3 + a1*a3*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + a2*b1*b2*y1*y3*z3 + a1*a2*b3*y1*y3*z3 + a2*b1*b3*y1*y3*z3 + a1*a2*b2*y2*y3*z3 + b2*x1*z1*z3 + a1*b2*x1*z1*z3 + b1*b2*x1*z1*z3 + a2*b1*b3*x1*z1*z3 + a2*b2*b3*x1*z1*z3 + b1*x2*z1*z3 + a1*b1*x2*z1*z3 + b2*x2*z1*z3 + a1*b1*b3*x2*z1*z3 + a2*b1*b3*x2*z1*z3 + a1*b2*b3*x2*z1*z3 + a2*b2*b3*x2*z1*z3 + a2*b1*x3*z1*z3 + a1*b2*x3*z1*z3 + a2*b2*x3*z1*z3 + b2*y1*z1*z3 + a1*b2*y1*z1*z3 + a2*b1*b3*y1*z1*z3 + a2*b2*b3*y1*z1*z3 + b1*y2*z1*z3 + a1*b1*y2*z1*z3 + b2*y2*z1*z3 + a1*b1*b3*y2*z1*z3 + a2*b1*b3*y2*z1*z3 + a1*b2*b3*y2*z1*z3 + a2*b2*b3*y2*z1*z3 + a2*b1*y3*z1*z3 + a1*b2*y3*z1*z3 + a2*b2*y3*z1*z3 + (b1*b2*z1*(1 + z1)*z3)/2 + b2*x1*z2*z3 + a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + a1*b3*x1*z2*z3 + a2*b3*x1*z2*z3 + a3*b3*x1*z2*z3 + b1*b3*x1*z2*z3 + a2*b2*b3*x1*z2*z3 + b1*b3*x2*z2*z3 + a1*b1*b3*x2*z2*z3 + a1*b2*b3*x2*z2*z3 + b1*b2*b3*x2*z2*z3 + b1*x3*z2*z3 + a1*b2*x3*z2*z3 + a2*b2*y1*z2*z3 + a3*b2*y1*z2*z3 + b3*y1*z2*z3 + a1*b3*y1*z2*z3 + a2*b3*y1*z2*z3 + a3*b3*y1*z2*z3 + a2*b2*b3*y1*z2*z3 + a1*b1*b3*y2*z2*z3 + a1*b2*b3*y2*z2*z3 + b1*b2*b3*y2*z2*z3 + a1*b2*y3*z2*z3 + (a1*b1*b2*z3*(1 + z3))/2 + (a1*x1*x2 + x1*y2 + a1*x1*y2 + a1*x2*y2)*(x3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 23 ( I222)
#####################################################################
Acin23:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin23:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin23:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Bphiin23:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*y1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + a2*b1*z1 + a1*b2*z1 + a2*b2*z1;
end;
#####################################################################
Bxyzin23:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*x1*x2 + b1*x1*x2 + x1*y2 + a1*x1*y2 + b1*x1*y2 + a1*x2*y2 + b1*x2*y2 + x1*z2 + a1*x1*z2 + b1*x1*z2 + a1*x2*z2 + b1*x2*z2;
end;
#####################################################################
Byxzin23:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*x1*x2 + b1*x2*y1 + x1*y2 + a1*x1*y2 + a1*x2*y2 + b1*x2*y2 + b1*y1*y2 + a1*x1*z2 + a1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
Cxyzin23:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a1*a2*a3*x2 + a1*a2*a3*b1*x2 + (5*a1*a2*b1*b3*x2)/2 + (3*a1*a2*b2*b3*x2)/2 + a1*a2*b1*b2*b3*x2 + (3*a1*a3*x1*x2)/2 + (3*a1*a2*a3*x1*x2)/2 + 3*a3*b1*x1*x2 + a1*a3*b1*x1*x2 + (5*a2*a3*b1*x1*x2)/2 + 3*a1*a2*a3*b1*x1*x2 + (3*a1*a3*b2*x1*x2)/2 + a1*a2*a3*b2*x1*x2 + (5*a3*b1*b2*x1*x2)/2 + 4*a1*a3*b1*b2*x1*x2 + 2*a2*a3*b1*b2*x1*x2 + a1*a2*a3*b1*b2*x1*x2 + a1*b3*x1*x2 + a1*b1*b3*x1*x2 + (5*a2*b1*b3*x1*x2)/2 + (3*a1*a2*b1*b3*x1*x2)/2 + (3*a1*b2*b3*x1*x2)/2 + (a1*a2*b2*b3*x1*x2)/2 + (5*a1*b1*b2*b3*x1*x2)/2 + (3*a2*b1*b2*b3*x1*x2)/2 + a1*a2*b1*b2*b3*x1*x2 + (a1*a3*x1^2*x2)/2 + (a3*b1*x1^2*x2)/2 + (a1*a2*a3*b1*x1^2*x2)/2 + (a1*a2*a3*b2*x1^2*x2)/2 + (a1*a3*b1*b2*x1^2*x2)/2 + (a2*a3*b1*b2*x1^2*x2)/2 + (a1*a2*a3*x2^2)/2 + (a1*a2*b1*b3*x2^2)/2 + a1*a2*b2*b3*x2^2 + (a1*a2*b1*b2*b3*x2^2)/2 + (a1*a2*a3*x1*x2^2)/2 + (a3*b1*x1*x2^2)/2 + (a2*a3*b1*x1*x2^2)/2 + (a1*a2*a3*b1*x1*x2^2)/2 + (a1*a3*b2*x1*x2^2)/2 + (a1*a2*a3*b2*x1*x2^2)/2 + (a3*b1*b2*x1*x2^2)/2 + (a1*a3*b1*b2*x1*x2^2)/2 + (a2*a3*b1*b2*x1*x2^2)/2 + (a2*b1*b3*x1*x2^2)/2 + (a1*a2*b1*b3*x1*x2^2)/2 + (a1*b2*b3*x1*x2^2)/2 + (a1*a2*b2*b3*x1*x2^2)/2 + (a1*b1*b2*b3*x1*x2^2)/2 + (a2*b1*b2*b3*x1*x2^2)/2 + (a1*a2*a3*x2^3)/2 + (a1*a2*b2*b3*x2^3)/2 + (a1*a2*b1*b2*b3*x2^3)/2 + a2*x1*x3 + (3*a1*a2*x1*x3)/2 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + (a2*a3*b1*x1*x3)/2 + a1*a2*a3*b1*x1*x3 + (3*a1*b2*x1*x3)/2 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + (3*a1*a3*b2*x1*x3)/2 + a2*a3*b2*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + a1*a2*b1*b2*x1*x3 + a1*a3*b1*b2*x1*x3 + (3*a2*a3*b1*b2*x1*x3)/2 + a1*a2*a3*b1*b2*x1*x3 + (3*a1*a2*b3*x1*x3)/2 + a1*a2*a3*b3*x1*x3 + (3*a2*a3*b1*b3*x1*x3)/2 + a1*a2*a3*b1*b3*x1*x3 + (3*a1*a2*b2*b3*x1*x3)/2 + (3*a1*a3*b2*b3*x1*x3)/2 + (3*a1*a2*b1*b2*b3*x1*x3)/2 + (3*a1*a3*b1*b2*b3*x1*x3)/2 + (a1*a2*x1^2*x3)/2 + (a2*a3*b1*x1^2*x3)/2 + (a1*b2*x1^2*x3)/2 + (a1*a3*b2*x1^2*x3)/2 + (a2*a3*b1*b2*x1^2*x3)/2 + (a1*a2*b3*x1^2*x3)/2 + (a2*a3*b1*b3*x1^2*x3)/2 + (a1*a2*b2*b3*x1^2*x3)/2 + (a1*a3*b2*b3*x1^2*x3)/2 + (a1*a2*b1*b2*b3*x1^2*x3)/2 + (a1*a3*b1*b2*b3*x1^2*x3)/2 + a2*a3*b1*x2*x3 + a1*a2*x1*x2*x3 + a1*a3*x1*x2*x3 + a3*b1*x1*x2*x3 + a1*a3*b2*x1*x2*x3 + a2*a3*b2*x1*x2*x3 + a3*b1*b2*x1*x2*x3 + a1*a2*b3*x1*x2*x3 + a2*a3*b3*x1*x2*x3 + a2*a3*y1 + (3*a2*b1*b3*y1)/2 + (3*b2*b3*y1)/2 + (3*a1*b2*b3*y1)/2 + (3*a2*b2*b3*y1)/2 + (3*a2*a3*x1*y1)/2 + a2*a3*b1*x1*y1 + (3*a3*b2*x1*y1)/2 + a1*a3*b2*x1*y1 + a2*a3*b2*x1*y1 + (a2*b1*b3*x1*y1)/2 + b2*b3*x1*y1 + (a1*b2*b3*x1*y1)/2 + (a2*b2*b3*x1*y1)/2 + (a2*a3*b1*x1^2*y1)/2 + (a3*b2*x1^2*y1)/2 + (a1*a3*b2*x1^2*y1)/2 + (a2*a3*b2*x1^2*y1)/2 + 2*a3*x2*y1 + 2*a1*a3*x2*y1 + (3*a2*a3*x2*y1)/2 + (3*a1*a2*a3*x2*y1)/2 + (3*a3*b1*x2*y1)/2 + 4*a1*a3*b1*x2*y1 + (5*a2*a3*b1*x2*y1)/2 + 3*a1*a2*a3*b1*x2*y1 + (3*a3*b2*x2*y1)/2 + (3*a1*a3*b2*x2*y1)/2 + a2*a3*b2*x2*y1 + a1*a2*a3*b2*x2*y1 + (3*a3*b1*b2*x2*y1)/2 + 4*a1*a3*b1*b2*x2*y1 + 3*a2*a3*b1*b2*x2*y1 + a1*a2*a3*b1*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + (3*b1*b3*x2*y1)/2 + a1*b1*b3*x2*y1 + (3*a2*b1*b3*x2*y1)/2 + (3*a1*a2*b1*b3*x2*y1)/2 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + (a2*b2*b3*x2*y1)/2 + (3*a1*a2*b2*b3*x2*y1)/2 + (b1*b2*b3*x2*y1)/2 + 2*a1*a2*b1*b2*b3*x2*y1 + a1*a3*x1*x2*y1 + a1*a2*a3*x1*x2*y1 + a1*a3*b1*x1*x2*y1 + a3*b2*x1*x2*y1 + a2*a3*b2*x1*x2*y1 + b1*b3*x1*x2*y1 + a2*b1*b3*x1*x2*y1 + a1*a2*b1*b3*x1*x2*y1 + a1*b2*b3*x1*x2*y1 + a1*a2*b2*b3*x1*x2*y1 + a1*b1*b2*b3*x1*x2*y1 + a2*b1*b2*b3*x1*x2*y1 + (a3*x2^2*y1)/2 + (a1*a3*x2^2*y1)/2 + (a1*a2*a3*x2^2*y1)/2 + (a1*a3*b1*x2^2*y1)/2 + (a2*a3*b1*x2^2*y1)/2 + (a1*a2*a3*b1*x2^2*y1)/2 + (a3*b2*x2^2*y1)/2 + (a1*a3*b2*x2^2*y1)/2 + (a2*a3*b2*x2^2*y1)/2 + (a1*a2*a3*b2*x2^2*y1)/2 + (a1*a3*b1*b2*x2^2*y1)/2 + (a2*a3*b1*b2*x2^2*y1)/2 + (a1*a2*b1*b3*x2^2*y1)/2 + (a1*a2*b2*b3*x2^2*y1)/2 + (a2*x3*y1)/2 + (3*a1*a2*x3*y1)/2 + a1*a2*a3*x3*y1 + a2*b1*x3*y1 + (3*a2*a3*b1*x3*y1)/2 + a1*a2*a3*b1*x3*y1 + b2*x3*y1 + (a1*b2*x3*y1)/2 + (a2*b2*x3*y1)/2 + a3*b2*x3*y1 + (a1*a3*b2*x3*y1)/2 + a1*a2*a3*b2*x3*y1 + (b1*b2*x3*y1)/2 + a1*b1*b2*x3*y1 + (a2*b1*b2*x3*y1)/2 + a1*a2*b1*b2*x3*y1 + (a3*b1*b2*x3*y1)/2 + a1*a3*b1*b2*x3*y1 + (a2*a3*b1*b2*x3*y1)/2 + a1*a2*a3*b1*b2*x3*y1 + (3*a2*b3*x3*y1)/2 + (3*a1*a2*b3*x3*y1)/2 + a2*a3*b3*x3*y1 + a1*a2*a3*b3*x3*y1 + (a2*a3*b1*b3*x3*y1)/2 + a1*a2*a3*b1*b3*x3*y1 + (3*a2*b2*b3*x3*y1)/2 + (3*a1*a2*b2*b3*x3*y1)/2 + (3*a3*b2*b3*x3*y1)/2 + (3*a1*a3*b2*b3*x3*y1)/2 + (3*a2*b1*b2*b3*x3*y1)/2 + (3*a1*a2*b1*b2*b3*x3*y1)/2 + (3*a3*b1*b2*b3*x3*y1)/2 + (3*a1*a3*b1*b2*b3*x3*y1)/2 + a2*x1*x3*y1 + a2*a3*b1*x1*x3*y1 + a1*b2*x1*x3*y1 + a1*a2*b2*x1*x3*y1 + a3*b2*x1*x3*y1 + a1*a3*b2*x1*x3*y1 + a2*a3*b1*b2*x1*x3*y1 + a2*b3*x1*x3*y1 + a2*a3*b1*b3*x1*x3*y1 + a1*a2*b1*b2*b3*x1*x3*y1 + a1*a3*b1*b2*b3*x1*x3*y1 + a2*x2*x3*y1 + a1*a2*x2*x3*y1 + a3*x2*x3*y1 + a1*a3*x2*x3*y1 + a3*b1*x2*x3*y1 + a3*b2*x2*x3*y1 + a1*a3*b2*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + a3*b1*b2*x2*x3*y1 + a2*b3*x2*x3*y1 + a1*a2*b3*x2*x3*y1 + a2*a3*b3*x2*x3*y1 + (a2*a3*y1^2)/2 + a2*b1*b3*y1^2 + b2*b3*y1^2 + a1*b2*b3*y1^2 + a2*b2*b3*y1^2 + (a2*a3*x1*y1^2)/2 + (a2*a3*b1*x1*y1^2)/2 + (a1*a3*b2*x1*y1^2)/2 + (a2*a3*b2*x1*y1^2)/2 + (a2*b1*b3*x1*y1^2)/2 + (a1*b2*b3*x1*y1^2)/2 + (a2*b2*b3*x1*y1^2)/2 + (a3*x2*y1^2)/2 + (a1*a3*x2*y1^2)/2 + (a2*a3*x2*y1^2)/2 + (a3*b1*x2*y1^2)/2 + (a1*a3*b1*x2*y1^2)/2 + (a1*a2*a3*b1*x2*y1^2)/2 + (a2*a3*b2*x2*y1^2)/2 + (a1*a2*a3*b2*x2*y1^2)/2 + (a3*b1*b2*x2*y1^2)/2 + (a1*a3*b1*b2*x2*y1^2)/2 + (a2*a3*b1*b2*x2*y1^2)/2 + (b1*b3*x2*y1^2)/2 + (a2*b1*b3*x2*y1^2)/2 + (a2*b2*b3*x2*y1^2)/2 + (b1*b2*b3*x2*y1^2)/2 + (a2*x3*y1^2)/2 + (a1*a2*x3*y1^2)/2 + (a2*a3*b1*x3*y1^2)/2 + (a1*b2*x3*y1^2)/2 + (a2*b2*x3*y1^2)/2 + (a1*a3*b2*x3*y1^2)/2 + (b1*b2*x3*y1^2)/2 + (a2*b1*b2*x3*y1^2)/2 + (a3*b1*b2*x3*y1^2)/2 + (a2*a3*b1*b2*x3*y1^2)/2 + (a2*b3*x3*y1^2)/2 + (a1*a2*b3*x3*y1^2)/2 + (a2*a3*b1*b3*x3*y1^2)/2 + (a2*b2*b3*x3*y1^2)/2 + (a1*a2*b2*b3*x3*y1^2)/2 + (a3*b2*b3*x3*y1^2)/2 + (a1*a3*b2*b3*x3*y1^2)/2 + (a2*b1*b2*b3*x3*y1^2)/2 + (a1*a2*b1*b2*b3*x3*y1^2)/2 + (a3*b1*b2*b3*x3*y1^2)/2 + (a1*a3*b1*b2*b3*x3*y1^2)/2 + (a2*a3*y1^3)/2 + (a2*b1*b3*y1^3)/2 + (b2*b3*y1^3)/2 + (a1*b2*b3*y1^3)/2 + (a2*b2*b3*y1^3)/2 + a1*a3*y2 + a1*a2*a3*y2 + a3*b1*y2 + a1*a3*b1*y2 + a2*a3*b1*y2 + a1*a2*a3*b1*y2 + (5*b1*b3*y2)/2 + (5*a1*b1*b3*y2)/2 + (5*a2*b1*b3*y2)/2 + (5*a1*a2*b1*b3*y2)/2 + (3*a1*b2*b3*y2)/2 + (3*a1*a2*b2*b3*y2)/2 + b1*b2*b3*y2 + a1*b1*b2*b3*y2 + a2*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + 2*a3*x1*y2 + 2*a1*a3*x1*y2 + (3*a2*a3*x1*y2)/2 + (3*a1*a2*a3*x1*y2)/2 + 4*a3*b1*x1*y2 + 3*a1*a3*b1*x1*y2 + (5*a2*a3*b1*x1*y2)/2 + 3*a1*a2*a3*b1*x1*y2 + (3*a3*b2*x1*y2)/2 + (a1*a3*b2*x1*y2)/2 + a2*a3*b2*x1*y2 + a1*a2*a3*b2*x1*y2 + 3*a3*b1*b2*x1*y2 + 2*a1*a3*b1*b2*x1*y2 + 3*a2*a3*b1*b2*x1*y2 + a1*a2*a3*b1*b2*x1*y2 + b3*x1*y2 + (3*a1*b3*x1*y2)/2 + a1*a2*b3*x1*y2 + a1*a3*b3*x1*y2 + (3*b1*b3*x1*y2)/2 + (3*a1*b1*b3*x1*y2)/2 + (a2*b1*b3*x1*y2)/2 + (5*a1*a2*b1*b3*x1*y2)/2 + (3*a3*b1*b3*x1*y2)/2 + a1*a3*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + (a2*b2*b3*x1*y2)/2 + (a1*a2*b2*b3*x1*y2)/2 + (3*a1*b1*b2*b3*x1*y2)/2 + (5*a2*b1*b2*b3*x1*y2)/2 + a1*a2*b1*b2*b3*x1*y2 + (a3*x1^2*y2)/2 + (a1*a3*x1^2*y2)/2 + (a3*b1*x1^2*y2)/2 + (a1*a3*b1*x1^2*y2)/2 + (a2*a3*b1*x1^2*y2)/2 + (a1*a2*a3*b1*x1^2*y2)/2 + (a3*b2*x1^2*y2)/2 + (a1*a3*b2*x1^2*y2)/2 + (a2*a3*b2*x1^2*y2)/2 + (a1*a2*a3*b2*x1^2*y2)/2 + (a3*b1*b2*x1^2*y2)/2 + (a1*a3*b1*b2*x1^2*y2)/2 + (a2*a3*b1*b2*x1^2*y2)/2 + (a1*b3*x1^2*y2)/2 + (b1*b3*x1^2*y2)/2 + (a2*b1*b3*x1^2*y2)/2 + (a3*b1*b3*x1^2*y2)/2 + (a1*a3*x2*y2)/2 + a1*a2*a3*x2*y2 + (5*a3*b1*x2*y2)/2 + 2*a1*a3*b1*x2*y2 + a2*a3*b1*x2*y2 + 2*a3*b1*b2*x2*y2 + (3*b1*b3*x2*y2)/2 + a2*b1*b3*x2*y2 + (a1*b2*b3*x2*y2)/2 + a1*a2*b2*b3*x2*y2 + (3*b1*b2*b3*x2*y2)/2 + (5*a1*b1*b2*b3*x2*y2)/2 + (5*a2*b1*b2*b3*x2*y2)/2 + a1*a2*b1*b2*b3*x2*y2 + a3*x1*x2*y2 + a1*a3*b1*x1*x2*y2 + a2*a3*b1*x1*x2*y2 + a1*a3*b2*x1*x2*y2 + a2*a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a1*b3*x1*x2*y2 + a2*b3*x1*x2*y2 + a3*b3*x1*x2*y2 + b1*b3*x1*x2*y2 + (a1*a3*x2^2*y2)/2 + (a1*a2*a3*x2^2*y2)/2 + (a3*b1*x2^2*y2)/2 + (a1*a3*b1*x2^2*y2)/2 + (a3*b1*b2*x2^2*y2)/2 + (a2*b1*b3*x2^2*y2)/2 + (a1*b2*b3*x2^2*y2)/2 + (a1*a2*b2*b3*x2^2*y2)/2 + (a1*b1*b2*b3*x2^2*y2)/2 + (a2*b1*b2*b3*x2^2*y2)/2 + (a1*a2*b1*b2*b3*x2^2*y2)/2 + a3*b1*x3*y2 + a2*a3*b1*x3*y2 + x1*x3*y2 + a1*x1*x3*y2 + a2*x1*x3*y2 + a1*a2*x1*x3*y2 + a3*x1*x3*y2 + a1*a3*x1*x3*y2 + a3*b1*x1*x3*y2 + a1*a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a3*b1*b2*x1*x3*y2 + b3*x1*x3*y2 + a1*b3*x1*x3*y2 + a2*b3*x1*x3*y2 + a1*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a2*a3*b3*x1*x3*y2 + a3*y1*y2 + (3*a1*a3*y1*y2)/2 + a2*a3*y1*y2 + (3*a1*a2*a3*y1*y2)/2 + (7*a3*b1*y1*y2)/2 + (5*a2*a3*b1*y1*y2)/2 + 3*a1*a2*a3*b1*y1*y2 + a3*b2*y1*y2 + (a1*a3*b2*y1*y2)/2 + a1*a2*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + 2*a1*a3*b1*b2*y1*y2 + 2*a2*a3*b1*b2*y1*y2 + a1*a2*a3*b1*b2*y1*y2 + (b3*y1*y2)/2 + (3*a1*b3*y1*y2)/2 + a2*b3*y1*y2 + a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a1*a3*b3*y1*y2 + 3*b1*b3*y1*y2 + (3*a1*b1*b3*y1*y2)/2 + (5*a2*b1*b3*y1*y2)/2 + (5*a1*a2*b1*b3*y1*y2)/2 + (a3*b1*b3*y1*y2)/2 + a1*a3*b1*b3*y1*y2 + 2*b2*b3*y1*y2 + (a1*b2*b3*y1*y2)/2 + 2*a2*b2*b3*y1*y2 + (3*a1*a2*b2*b3*y1*y2)/2 + (5*b1*b2*b3*y1*y2)/2 + 2*a1*b1*b2*b3*y1*y2 + 2*a2*b1*b2*b3*y1*y2 + 2*a1*a2*b1*b2*b3*y1*y2 + a2*a3*x1*y1*y2 + a1*a2*a3*x1*y1*y2 + a1*a3*b1*x1*y1*y2 + a2*a3*b2*x1*y1*y2 + a3*b1*b2*x1*y1*y2 + b3*x1*y1*y2 + a1*b1*b3*x1*y1*y2 + a2*b1*b3*x1*y1*y2 + a1*a2*b1*b3*x1*y1*y2 + a3*b1*b3*x1*y1*y2 + a2*b2*b3*x1*y1*y2 + a1*a2*b2*b3*x1*y1*y2 + a1*b1*b2*b3*x1*y1*y2 + a2*b1*b2*b3*x1*y1*y2 + a3*x2*y1*y2 + a1*a3*x2*y1*y2 + a2*a3*x2*y1*y2 + a3*b1*x2*y1*y2 + a1*a3*b1*x2*y1*y2 + a2*a3*b1*x2*y1*y2 + a3*b2*x2*y1*y2 + a1*a3*b2*x2*y1*y2 + a2*a3*b2*x2*y1*y2 + a3*b1*b2*x2*y1*y2 + a1*b3*x2*y1*y2 + a2*b3*x2*y1*y2 + a3*b3*x2*y1*y2 + a1*b2*b3*x2*y1*y2 + a2*b2*b3*x2*y1*y2 + b1*b2*b3*x2*y1*y2 + a1*b1*b2*b3*x2*y1*y2 + a2*b1*b2*b3*x2*y1*y2 + a1*x3*y1*y2 + a1*a2*x3*y1*y2 + a1*a3*x3*y1*y2 + a3*b1*x3*y1*y2 + a3*b2*x3*y1*y2 + a1*a3*b2*x3*y1*y2 + a2*a3*b2*x3*y1*y2 + a3*b1*b2*x3*y1*y2 + a1*b3*x3*y1*y2 + a1*a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + a2*a3*b3*x3*y1*y2 + (a3*y1^2*y2)/2 + (a1*a3*y1^2*y2)/2 + (a2*a3*y1^2*y2)/2 + (a2*a3*b1*y1^2*y2)/2 + (a1*a2*a3*b1*y1^2*y2)/2 + (a1*a3*b2*y1^2*y2)/2 + (a1*a2*a3*b2*y1^2*y2)/2 + (a1*a3*b1*b2*y1^2*y2)/2 + (a2*a3*b1*b2*y1^2*y2)/2 + (b3*y1^2*y2)/2 + (a1*b3*y1^2*y2)/2 + (b1*b3*y1^2*y2)/2 + (a3*b1*b3*y1^2*y2)/2 + (b2*b3*y1^2*y2)/2 + (a2*b2*b3*y1^2*y2)/2 + (b1*b2*b3*y1^2*y2)/2 + (a1*a3*y2^2)/2 + (a1*a2*a3*y2^2)/2 + (b1*b3*y2^2)/2 + (a1*b1*b3*y2^2)/2 + (a2*b1*b3*y2^2)/2 + (a1*a2*b1*b3*y2^2)/2 + a1*b2*b3*y2^2 + a1*a2*b2*b3*y2^2 + (b1*b2*b3*y2^2)/2 + (a1*b1*b2*b3*y2^2)/2 + (a2*b1*b2*b3*y2^2)/2 + (a1*a2*b1*b2*b3*y2^2)/2 + (a3*x1*y2^2)/2 + (a1*a3*x1*y2^2)/2 + (a2*a3*x1*y2^2)/2 + (a1*a2*a3*x1*y2^2)/2 + (a3*b1*x1*y2^2)/2 + (a1*a3*b1*x1*y2^2)/2 + (a1*a2*a3*b1*x1*y2^2)/2 + (a2*a3*b2*x1*y2^2)/2 + (a1*a2*a3*b2*x1*y2^2)/2 + (a3*b1*b2*x1*y2^2)/2 + (a1*a3*b1*b2*x1*y2^2)/2 + (a2*a3*b1*b2*x1*y2^2)/2 + (a1*b1*b3*x1*y2^2)/2 + (a1*a2*b1*b3*x1*y2^2)/2 + (a2*b2*b3*x1*y2^2)/2 + (a1*a2*b2*b3*x1*y2^2)/2 + (a1*b1*b2*b3*x1*y2^2)/2 + (a2*b1*b2*b3*x1*y2^2)/2 + (a1*a2*a3*x2*y2^2)/2 + (a1*a3*b1*x2*y2^2)/2 + (a3*b1*b2*x2*y2^2)/2 + (b1*b3*x2*y2^2)/2 + (a2*b1*b3*x2*y2^2)/2 + (a1*a2*b2*b3*x2*y2^2)/2 + (b1*b2*b3*x2*y2^2)/2 + (a1*a2*b1*b2*b3*x2*y2^2)/2 + (a3*y1*y2^2)/2 + (a2*a3*y1*y2^2)/2 + (a1*a2*a3*y1*y2^2)/2 + (a3*b1*y1*y2^2)/2 + (a1*a2*a3*b1*y1*y2^2)/2 + (a1*a2*a3*b2*y1*y2^2)/2 + (a1*a3*b1*b2*y1*y2^2)/2 + (a2*a3*b1*b2*y1*y2^2)/2 + (b1*b3*y1*y2^2)/2 + (a1*b1*b3*y1*y2^2)/2 + (a2*b1*b3*y1*y2^2)/2 + (a1*a2*b1*b3*y1*y2^2)/2 + (b2*b3*y1*y2^2)/2 + (a1*b2*b3*y1*y2^2)/2 + (a2*b2*b3*y1*y2^2)/2 + (a1*a2*b2*b3*y1*y2^2)/2 + (a1*a3*y2^3)/2 + (a1*a2*a3*y2^3)/2 + (a1*b2*b3*y2^3)/2 + (a1*a2*b2*b3*y2^3)/2 + (b1*b2*b3*y2^3)/2 + (a1*b1*b2*b3*y2^3)/2 + (a2*b1*b2*b3*y2^3)/2 + (a1*a2*b1*b2*b3*y2^3)/2 + (a2*x1*y3)/2 + (a1*a2*x1*y3)/2 + a1*a2*a3*x1*y3 + (a2*b1*x1*y3)/2 + a1*a2*b1*x1*y3 + (3*a2*a3*b1*x1*y3)/2 + a1*a2*a3*b1*x1*y3 + (3*b2*x1*y3)/2 + a1*b2*x1*y3 + a2*b2*x1*y3 + (3*a3*b2*x1*y3)/2 + (3*a1*a3*b2*x1*y3)/2 + a1*a2*a3*b2*x1*y3 + (3*b1*b2*x1*y3)/2 + (3*a2*b1*b2*x1*y3)/2 + (3*a3*b1*b2*x1*y3)/2 + (3*a2*a3*b1*b2*x1*y3)/2 + a1*a2*a3*b1*b2*x1*y3 + (a2*b3*x1*y3)/2 + (a1*a2*b3*x1*y3)/2 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + (a2*b1*b3*x1*y3)/2 + a1*a2*b1*b3*x1*y3 + (a2*a3*b1*b3*x1*y3)/2 + a1*a2*a3*b1*b3*x1*y3 + (3*b2*b3*x1*y3)/2 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + (3*a1*a2*b2*b3*x1*y3)/2 + (3*a3*b2*b3*x1*y3)/2 + (a1*a3*b2*b3*x1*y3)/2 + a2*a3*b2*b3*x1*y3 + (3*a1*a2*b1*b2*b3*x1*y3)/2 + (3*a1*a3*b1*b2*b3*x1*y3)/2 + (a2*x1^2*y3)/2 + (a1*a2*x1^2*y3)/2 + (a2*b1*x1^2*y3)/2 + (a2*a3*b1*x1^2*y3)/2 + (b2*x1^2*y3)/2 + (a3*b2*x1^2*y3)/2 + (a1*a3*b2*x1^2*y3)/2 + (b1*b2*x1^2*y3)/2 + (a2*b1*b2*x1^2*y3)/2 + (a3*b1*b2*x1^2*y3)/2 + (a2*a3*b1*b2*x1^2*y3)/2 + (a2*b3*x1^2*y3)/2 + (a1*a2*b3*x1^2*y3)/2 + (a2*b1*b3*x1^2*y3)/2 + (a2*a3*b1*b3*x1^2*y3)/2 + (b2*b3*x1^2*y3)/2 + (a1*a2*b2*b3*x1^2*y3)/2 + (a3*b2*b3*x1^2*y3)/2 + (a1*a3*b2*b3*x1^2*y3)/2 + (a1*a2*b1*b2*b3*x1^2*y3)/2 + (a1*a3*b1*b2*b3*x1^2*y3)/2 + b1*x2*y3 + a3*b1*x2*y3 + a2*a3*b1*x2*y3 + b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a2*b1*b3*x2*y3 + b1*b2*b3*x2*y3 + a3*b1*b2*b3*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a1*a3*x1*x2*y3 + a1*b2*x1*x2*y3 + a2*b2*x1*x2*y3 + a1*a3*b2*x1*x2*y3 + a2*a3*b2*x1*x2*y3 + b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*a3*b3*x1*x2*y3 + b1*b3*x1*x2*y3 + a3*b1*b3*x1*x2*y3 + b2*b3*x1*x2*y3 + a3*b2*b3*x1*x2*y3 + b1*b2*b3*x1*x2*y3 + a3*b1*b2*b3*x1*x2*y3 + (a1*a2*y1*y3)/2 + a2*a3*y1*y3 + a1*a2*a3*y1*y3 + (3*a2*b1*y1*y3)/2 + a1*a2*b1*y1*y3 + (a2*a3*b1*y1*y3)/2 + a1*a2*a3*b1*y1*y3 + (3*a2*b2*y1*y3)/2 + a1*a2*b2*y1*y3 + (a3*b2*y1*y3)/2 + (a1*a3*b2*y1*y3)/2 + a2*a3*b2*y1*y3 + a1*a2*a3*b2*y1*y3 + (a2*a3*b1*b2*y1*y3)/2 + a1*a2*a3*b1*b2*y1*y3 + (a1*a2*b3*y1*y3)/2 + a1*a2*a3*b3*y1*y3 + (3*a2*b1*b3*y1*y3)/2 + a1*a2*b1*b3*y1*y3 + (3*a2*a3*b1*b3*y1*y3)/2 + a1*a2*a3*b1*b3*y1*y3 + (b2*b3*y1*y3)/2 + a1*b2*b3*y1*y3 + (a2*b2*b3*y1*y3)/2 + (3*a1*a2*b2*b3*y1*y3)/2 + a3*b2*b3*y1*y3 + (a1*a3*b2*b3*y1*y3)/2 + a2*a3*b2*b3*y1*y3 + (3*a2*b1*b2*b3*y1*y3)/2 + (3*a1*a2*b1*b2*b3*y1*y3)/2 + (3*a3*b1*b2*b3*y1*y3)/2 + (3*a1*a3*b1*b2*b3*y1*y3)/2 + a2*x1*y1*y3 + a2*b1*x1*y1*y3 + a2*a3*b1*x1*y1*y3 + a1*b2*x1*y1*y3 + a1*a2*b2*x1*y1*y3 + a1*a3*b2*x1*y1*y3 + b1*b2*x1*y1*y3 + a2*b1*b2*x1*y1*y3 + a3*b1*b2*x1*y1*y3 + a2*a3*b1*b2*x1*y1*y3 + a2*b3*x1*y1*y3 + a2*b1*b3*x1*y1*y3 + a2*a3*b1*b3*x1*y1*y3 + b2*b3*x1*y1*y3 + a3*b2*b3*x1*y1*y3 + a1*a2*b1*b2*b3*x1*y1*y3 + a1*a3*b1*b2*b3*x1*y1*y3 + x2*y1*y3 + a1*x2*y1*y3 + a2*x2*y1*y3 + a3*x2*y1*y3 + a1*a3*x2*y1*y3 + b2*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + a1*a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + b3*x2*y1*y3 + a3*b3*x2*y1*y3 + a2*a3*b3*x2*y1*y3 + b1*b3*x2*y1*y3 + a3*b1*b3*x2*y1*y3 + b2*b3*x2*y1*y3 + a3*b2*b3*x2*y1*y3 + b1*b2*b3*x2*y1*y3 + a3*b1*b2*b3*x2*y1*y3 + (a1*a2*y1^2*y3)/2 + (a2*b1*y1^2*y3)/2 + (a2*a3*b1*y1^2*y3)/2 + (a2*b2*y1^2*y3)/2 + (a3*b2*y1^2*y3)/2 + (a1*a3*b2*y1^2*y3)/2 + (a2*a3*b1*b2*y1^2*y3)/2 + (a1*a2*b3*y1^2*y3)/2 + (a2*b1*b3*y1^2*y3)/2 + (a2*a3*b1*b3*y1^2*y3)/2 + (b2*b3*y1^2*y3)/2 + (a2*b2*b3*y1^2*y3)/2 + (a1*a2*b2*b3*y1^2*y3)/2 + (a1*a3*b2*b3*y1^2*y3)/2 + (a2*b1*b2*b3*y1^2*y3)/2 + (a1*a2*b1*b2*b3*y1^2*y3)/2 + (a3*b1*b2*b3*y1^2*y3)/2 + (a1*a3*b1*b2*b3*y1^2*y3)/2 + b1*y2*y3 + a2*a3*b1*y2*y3 + b1*b2*y2*y3 + a3*b1*b2*y2*y3 + b1*b3*y2*y3 + a2*b1*b3*y2*y3 + b1*b2*b3*y2*y3 + a3*b1*b2*b3*y2*y3 + a1*x1*y2*y3 + a2*x1*y2*y3 + a3*x1*y2*y3 + a1*a3*x1*y2*y3 + a1*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + a1*a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + b3*x1*y2*y3 + a2*a3*b3*x1*y2*y3 + b1*b3*x1*y2*y3 + a3*b1*b3*x1*y2*y3 + b2*b3*x1*y2*y3 + a3*b2*b3*x1*y2*y3 + b1*b2*b3*x1*y2*y3 + a3*b1*b2*b3*x1*y2*y3 + y1*y2*y3 + a1*y1*y2*y3 + a2*y1*y2*y3 + a1*a3*y1*y2*y3 + b2*y1*y2*y3 + a1*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + a3*b2*y1*y2*y3 + a1*a3*b2*y1*y2*y3 + a2*a3*b2*y1*y2*y3 + b3*y1*y2*y3 + a2*a3*b3*y1*y2*y3 + b1*b3*y1*y2*y3 + a3*b1*b3*y1*y2*y3 + b2*b3*y1*y2*y3 + a3*b2*b3*y1*y2*y3 + b1*b2*b3*y1*y2*y3 + a3*b1*b2*b3*y1*y2*y3 + (3*a2*a3*x1*z1)/2 + 2*a2*a3*b1*x1*z1 + (a3*b2*x1*z1)/2 + 2*a1*a3*b2*x1*z1 + 2*a2*a3*b2*x1*z1 + a2*b3*x1*z1 + (3*a2*b1*b3*x1*z1)/2 + (3*a1*b2*b3*x1*z1)/2 + (3*a2*b2*b3*x1*z1)/2 + (a2*a3*x1^2*z1)/2 + (a2*a3*b1*x1^2*z1)/2 + (a1*a3*b2*x1^2*z1)/2 + (a2*a3*b2*x1^2*z1)/2 + (a3*x2*z1)/2 + 2*a1*a3*x2*z1 + (3*a2*a3*x2*z1)/2 + (a1*a2*a3*x2*z1)/2 + (a3*b1*x2*z1)/2 + 3*a1*a3*b1*x2*z1 + (7*a2*a3*b1*x2*z1)/2 + 3*a1*a2*a3*b1*x2*z1 + (a3*b2*x2*z1)/2 + (a1*a3*b2*x2*z1)/2 + 2*a2*a3*b2*x2*z1 + 2*a1*a2*a3*b2*x2*z1 + (a3*b1*b2*x2*z1)/2 + 3*a1*a3*b1*b2*x2*z1 + 4*a2*a3*b1*b2*x2*z1 + a1*a2*a3*b1*b2*x2*z1 + a2*b3*x2*z1 + (a1*b1*b3*x2*z1)/2 + a2*b1*b3*x2*z1 + 3*a1*a2*b1*b3*x2*z1 + a1*b2*b3*x2*z1 + (3*a2*b2*b3*x2*z1)/2 + 2*a1*a2*b2*b3*x2*z1 + (3*a1*b1*b2*b3*x2*z1)/2 + (3*a2*b1*b2*b3*x2*z1)/2 + a1*a2*b1*b2*b3*x2*z1 + a3*x1*x2*z1 + a2*a3*x1*x2*z1 + a3*b1*x1*x2*z1 + a1*a3*b1*x1*x2*z1 + a2*a3*b2*x1*x2*z1 + a3*b1*b2*x1*x2*z1 + a1*b3*x1*x2*z1 + a2*b1*b3*x1*x2*z1 + a1*a2*b1*b3*x1*x2*z1 + a1*b2*b3*x1*x2*z1 + a1*a2*b2*b3*x1*x2*z1 + a1*b1*b2*b3*x1*x2*z1 + a2*b1*b2*b3*x1*x2*z1 + (a1*a3*x2^2*z1)/2 + (a2*a3*x2^2*z1)/2 + (a1*a3*b1*x2^2*z1)/2 + (a2*a3*b1*x2^2*z1)/2 + (a1*a2*a3*b1*x2^2*z1)/2 + (a1*a3*b2*x2^2*z1)/2 + (a2*a3*b2*x2^2*z1)/2 + (a1*a2*a3*b2*x2^2*z1)/2 + (a1*a3*b1*b2*x2^2*z1)/2 + (a2*a3*b1*b2*x2^2*z1)/2 + (a1*a2*b1*b3*x2^2*z1)/2 + (a1*a2*b2*b3*x2^2*z1)/2 + (a1*a2*x3*z1)/2 + (a2*a3*x3*z1)/2 + a2*b1*x3*z1 + (3*a2*a3*b1*x3*z1)/2 + a1*a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + (a1*a2*b2*x3*z1)/2 + a1*a3*b2*x3*z1 + (3*a2*a3*b2*x3*z1)/2 + a1*b1*b2*x3*z1 + a1*a2*b1*b2*x3*z1 + a1*a3*b1*b2*x3*z1 + (a2*a3*b1*b2*x3*z1)/2 + a1*a2*a3*b1*b2*x3*z1 + (a1*a2*b3*x3*z1)/2 + (a2*a3*b3*x3*z1)/2 + (a2*a3*b1*b3*x3*z1)/2 + a1*a2*a3*b1*b3*x3*z1 + (a1*a2*b2*b3*x3*z1)/2 + (a1*a3*b2*b3*x3*z1)/2 + (a1*a2*b1*b2*b3*x3*z1)/2 + (a1*a3*b1*b2*b3*x3*z1)/2 + a1*a2*x1*x3*z1 + a2*a3*x1*x3*z1 + a1*a2*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + a1*a2*b3*x1*x3*z1 + a2*a3*b3*x1*x3*z1 + a1*a2*b2*b3*x1*x3*z1 + a1*a3*b2*b3*x1*x3*z1 + a1*a2*x2*x3*z1 + a3*x2*x3*z1 + a1*a3*x2*x3*z1 + a3*b1*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + a3*b1*b2*x2*x3*z1 + a1*a2*b3*x2*x3*z1 + a2*a3*b3*x2*x3*z1 + 2*a2*a3*y1*z1 + a3*b2*y1*z1 + a2*b3*y1*z1 + (a2*b1*b3*y1*z1)/2 + (3*b2*b3*y1*z1)/2 + (a1*b2*b3*y1*z1)/2 + (a2*b2*b3*y1*z1)/2 + a2*a3*x1*y1*z1 + a2*a3*b1*x1*y1*z1 + a3*b2*x1*y1*z1 + a1*a3*b2*x1*y1*z1 + a2*a3*b2*x1*y1*z1 + a2*b1*b3*x1*y1*z1 + a1*b2*b3*x1*y1*z1 + a2*b2*b3*x1*y1*z1 + a3*x2*y1*z1 + a2*a3*x2*y1*z1 + a1*a3*b1*x2*y1*z1 + a1*a2*a3*b1*x2*y1*z1 + a3*b2*x2*y1*z1 + a2*a3*b2*x2*y1*z1 + a1*a2*a3*b2*x2*y1*z1 + a1*a3*b1*b2*x2*y1*z1 + a2*a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*b3*x2*y1*z1 + b1*b3*x2*y1*z1 + a1*b1*b3*x2*y1*z1 + a2*b2*b3*x2*y1*z1 + a1*b1*b2*b3*x2*y1*z1 + a2*b1*b2*b3*x2*y1*z1 + a2*x3*y1*z1 + a2*a3*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + a2*b3*x3*y1*z1 + a2*a3*b3*x3*y1*z1 + (a2*a3*y1^2*z1)/2 + (a3*b2*y1^2*z1)/2 + (a2*b1*b3*y1^2*z1)/2 + (b2*b3*y1^2*z1)/2 + (a1*b2*b3*y1^2*z1)/2 + (a2*b2*b3*y1^2*z1)/2 + (3*a1*a3*y2*z1)/2 + 2*a2*a3*y2*z1 + (a1*a2*a3*y2*z1)/2 + (5*a3*b1*y2*z1)/2 + a1*a3*b1*y2*z1 + (3*a2*a3*b1*y2*z1)/2 + 3*a1*a2*a3*b1*y2*z1 + (a3*b2*y2*z1)/2 + (3*a1*a3*b2*y2*z1)/2 + 2*a1*a2*a3*b2*y2*z1 + 2*a3*b1*b2*y2*z1 + 3*a1*a3*b1*b2*y2*z1 + 3*a2*a3*b1*b2*y2*z1 + a1*a2*a3*b1*b2*y2*z1 + (3*b3*y2*z1)/2 + (a1*b3*y2*z1)/2 + (3*a2*b3*y2*z1)/2 + (a3*b3*y2*z1)/2 + 2*b1*b3*y2*z1 + (3*a1*b1*b3*y2*z1)/2 + (3*a2*b1*b3*y2*z1)/2 + 2*a1*a2*b1*b3*y2*z1 + (a3*b1*b3*y2*z1)/2 + a1*a3*b1*b3*y2*z1 + (3*b2*b3*y2*z1)/2 + a1*b2*b3*y2*z1 + (a2*b2*b3*y2*z1)/2 + 2*a1*a2*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + (5*a1*b1*b2*b3*y2*z1)/2 + (5*a2*b1*b2*b3*y2*z1)/2 + a1*a2*b1*b2*b3*y2*z1 + a3*x1*y2*z1 + a2*a3*x1*y2*z1 + a1*a3*b1*x1*y2*z1 + a2*a3*b2*x1*y2*z1 + a3*b1*b2*x1*y2*z1 + a2*b3*x1*y2*z1 + a3*b3*x1*y2*z1 + a1*b1*b3*x1*y2*z1 + a1*a2*b1*b3*x1*y2*z1 + a2*b2*b3*x1*y2*z1 + a1*a2*b2*b3*x1*y2*z1 + a1*b1*b2*b3*x1*y2*z1 + a2*b1*b2*b3*x1*y2*z1 + a3*x2*y2*z1 + a1*a3*x2*y2*z1 + a2*a3*x2*y2*z1 + a3*b1*x2*y2*z1 + a1*a3*b1*x2*y2*z1 + a2*a3*b1*x2*y2*z1 + a1*a3*b2*x2*y2*z1 + a2*a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + a1*b3*x2*y2*z1 + a2*b3*x2*y2*z1 + a3*b3*x2*y2*z1 + b1*b3*x2*y2*z1 + a1*b1*b3*x2*y2*z1 + a2*b1*b3*x2*y2*z1 + a1*b2*b3*x2*y2*z1 + a2*b2*b3*x2*y2*z1 + x3*y2*z1 + a1*x3*y2*z1 + a2*x3*y2*z1 + a1*a2*x3*y2*z1 + a1*a3*x3*y2*z1 + a3*b1*x3*y2*z1 + a3*b2*x3*y2*z1 + a1*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a3*b1*b2*x3*y2*z1 + b3*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a1*a2*b3*x3*y2*z1 + a3*b3*x3*y2*z1 + a2*a3*b3*x3*y2*z1 + a3*y1*y2*z1 + a2*a3*y1*y2*z1 + a2*a3*b1*y1*y2*z1 + a1*a2*a3*b1*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a1*a2*a3*b2*y1*y2*z1 + a1*a3*b1*b2*y1*y2*z1 + a2*a3*b1*b2*y1*y2*z1 + a1*b3*y1*y2*z1 + a2*b3*y1*y2*z1 + a3*b3*y1*y2*z1 + a1*b1*b3*y1*y2*z1 + b2*b3*y1*y2*z1 + a2*b2*b3*y1*y2*z1 + a1*b1*b2*b3*y1*y2*z1 + a2*b1*b2*b3*y1*y2*z1 + (a1*a3*y2^2*z1)/2 + (a2*a3*y2^2*z1)/2 + (a3*b1*y2^2*z1)/2 + (a1*a2*a3*b1*y2^2*z1)/2 + (a3*b2*y2^2*z1)/2 + (a1*a2*a3*b2*y2^2*z1)/2 + (a1*a3*b1*b2*y2^2*z1)/2 + (a2*a3*b1*b2*y2^2*z1)/2 + (b1*b3*y2^2*z1)/2 + (a1*b1*b3*y2^2*z1)/2 + (a2*b1*b3*y2^2*z1)/2 + (a1*a2*b1*b3*y2^2*z1)/2 + (b2*b3*y2^2*z1)/2 + (a1*b2*b3*y2^2*z1)/2 + (a2*b2*b3*y2^2*z1)/2 + (a1*a2*b2*b3*y2^2*z1)/2 + (a1*a2*y3*z1)/2 + (a2*a3*y3*z1)/2 + (3*a2*b1*y3*z1)/2 + a1*a2*b1*y3*z1 + (a2*a3*b1*y3*z1)/2 + a1*a2*a3*b1*y3*z1 + (3*a1*b2*y3*z1)/2 + (3*a2*b2*y3*z1)/2 + (a1*a2*b2*y3*z1)/2 + (a2*a3*b2*y3*z1)/2 + (b1*b2*y3*z1)/2 + (a2*b1*b2*y3*z1)/2 + (a3*b1*b2*y3*z1)/2 + (a2*a3*b1*b2*y3*z1)/2 + a1*a2*a3*b1*b2*y3*z1 + (a1*a2*b3*y3*z1)/2 + (a2*a3*b3*y3*z1)/2 + (3*a2*b1*b3*y3*z1)/2 + a1*a2*b1*b3*y3*z1 + (3*a2*a3*b1*b3*y3*z1)/2 + a1*a2*a3*b1*b3*y3*z1 + (b2*b3*y3*z1)/2 + a1*b2*b3*y3*z1 + a2*b2*b3*y3*z1 + (a1*a2*b2*b3*y3*z1)/2 + (a3*b2*b3*y3*z1)/2 + (3*a1*a3*b2*b3*y3*z1)/2 + a2*a3*b2*b3*y3*z1 + (a1*a2*b1*b2*b3*y3*z1)/2 + (a1*a3*b1*b2*b3*y3*z1)/2 + a1*a2*x1*y3*z1 + a2*a3*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + a1*a2*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a1*a2*b3*x1*y3*z1 + a2*a3*b3*x1*y3*z1 + a1*a2*b2*b3*x1*y3*z1 + a1*a3*b2*b3*x1*y3*z1 + a1*x2*y3*z1 + a2*x2*y3*z1 + a1*a3*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a1*a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + a2*a3*b3*x2*y3*z1 + b1*b3*x2*y3*z1 + a3*b1*b3*x2*y3*z1 + b1*b2*b3*x2*y3*z1 + a3*b1*b2*b3*x2*y3*z1 + a2*a3*y1*y3*z1 + b2*y1*y3*z1 + a2*b2*y1*y3*z1 + a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + a2*a3*b3*y1*y3*z1 + a1*y2*y3*z1 + a2*y2*y3*z1 + a3*y2*y3*z1 + a1*a3*y2*y3*z1 + a1*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + a1*a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + a3*b3*y2*y3*z1 + a2*a3*b3*y2*y3*z1 + b1*b3*y2*y3*z1 + a3*b1*b3*y2*y3*z1 + b1*b2*b3*y2*y3*z1 + a3*b1*b2*b3*y2*y3*z1 + (a2*a3*b1*x1*z1^2)/2 + (a3*b2*x1*z1^2)/2 + (a1*a3*b2*x1*z1^2)/2 + (a2*a3*b2*x1*z1^2)/2 + (a2*b1*b3*x1*z1^2)/2 + (a1*b2*b3*x1*z1^2)/2 + (a2*b2*b3*x1*z1^2)/2 + (a3*x2*z1^2)/2 + (a1*a3*x2*z1^2)/2 + (a1*a2*a3*x2*z1^2)/2 + (a3*b1*x2*z1^2)/2 + (a1*a3*b1*x2*z1^2)/2 + (a1*a2*a3*b1*x2*z1^2)/2 + (a3*b2*x2*z1^2)/2 + (a2*a3*b2*x2*z1^2)/2 + (a1*a2*a3*b2*x2*z1^2)/2 + (a3*b1*b2*x2*z1^2)/2 + (a1*a3*b1*b2*x2*z1^2)/2 + (a2*a3*b1*b2*x2*z1^2)/2 + (a1*b1*b3*x2*z1^2)/2 + (a1*a2*b1*b3*x2*z1^2)/2 + (a2*b2*b3*x2*z1^2)/2 + (a1*a2*b2*b3*x2*z1^2)/2 + (a1*b1*b2*b3*x2*z1^2)/2 + (a2*b1*b2*b3*x2*z1^2)/2 + (a1*a2*x3*z1^2)/2 + (a2*a3*x3*z1^2)/2 + (a2*a3*b1*x3*z1^2)/2 + (a1*a2*b2*x3*z1^2)/2 + (a2*a3*b2*x3*z1^2)/2 + (a2*a3*b1*b2*x3*z1^2)/2 + (a1*a2*b3*x3*z1^2)/2 + (a2*a3*b3*x3*z1^2)/2 + (a2*a3*b1*b3*x3*z1^2)/2 + (a1*a2*b2*b3*x3*z1^2)/2 + (a1*a3*b2*b3*x3*z1^2)/2 + (a1*a2*b1*b2*b3*x3*z1^2)/2 + (a1*a3*b1*b2*b3*x3*z1^2)/2 + (a2*a3*y1*z1^2)/2 + (a3*b2*y1*z1^2)/2 + (a2*a3*y2*z1^2)/2 + (a1*a2*a3*y2*z1^2)/2 + (a2*a3*b1*y2*z1^2)/2 + (a1*a2*a3*b1*y2*z1^2)/2 + (a1*a3*b2*y2*z1^2)/2 + (a1*a2*a3*b2*y2*z1^2)/2 + (a1*a3*b1*b2*y2*z1^2)/2 + (a2*a3*b1*b2*y2*z1^2)/2 + (b3*y2*z1^2)/2 + (a1*b3*y2*z1^2)/2 + (a2*b3*y2*z1^2)/2 + (a3*b3*y2*z1^2)/2 + (b1*b3*y2*z1^2)/2 + (a1*a2*b1*b3*y2*z1^2)/2 + (a3*b1*b3*y2*z1^2)/2 + (a1*b2*b3*y2*z1^2)/2 + (a1*a2*b2*b3*y2*z1^2)/2 + (a1*b1*b2*b3*y2*z1^2)/2 + (a2*b1*b2*b3*y2*z1^2)/2 + (a1*a2*y3*z1^2)/2 + (a2*a3*y3*z1^2)/2 + (a2*b1*y3*z1^2)/2 + (a2*a3*b1*y3*z1^2)/2 + (a1*b2*y3*z1^2)/2 + (a2*b2*y3*z1^2)/2 + (a1*a2*b2*y3*z1^2)/2 + (a2*a3*b2*y3*z1^2)/2 + (b1*b2*y3*z1^2)/2 + (a2*b1*b2*y3*z1^2)/2 + (a3*b1*b2*y3*z1^2)/2 + (a2*a3*b1*b2*y3*z1^2)/2 + (a1*a2*b3*y3*z1^2)/2 + (a2*a3*b3*y3*z1^2)/2 + (a2*b1*b3*y3*z1^2)/2 + (a2*a3*b1*b3*y3*z1^2)/2 + (b2*b3*y3*z1^2)/2 + (a1*a2*b2*b3*y3*z1^2)/2 + (a3*b2*b3*y3*z1^2)/2 + (a1*a3*b2*b3*y3*z1^2)/2 + (a1*a2*b1*b2*b3*y3*z1^2)/2 + (a1*a3*b1*b2*b3*y3*z1^2)/2 + a1*a2*a3*b1*z2 + (3*a1*a2*b1*b3*z2)/2 + (a1*a2*b2*b3*z2)/2 + 3*a1*a2*b1*b2*b3*z2 + (a3*x1*z2)/2 + (3*a2*a3*x1*z2)/2 + (a1*a2*a3*x1*z2)/2 + (a3*b1*x1*z2)/2 + (5*a1*a3*b1*x1*z2)/2 + (3*a2*a3*b1*x1*z2)/2 + 4*a1*a2*a3*b1*x1*z2 + (a3*b2*x1*z2)/2 + a1*a3*b2*x1*z2 + 2*a2*a3*b2*x1*z2 + 2*a1*a2*a3*b2*x1*z2 + (5*a3*b1*b2*x1*z2)/2 + (5*a1*a3*b1*b2*x1*z2)/2 + 4*a2*a3*b1*b2*x1*z2 + a1*a2*a3*b1*b2*x1*z2 + a1*b3*x1*z2 + a2*b3*x1*z2 + (3*a1*a2*b3*x1*z2)/2 + (3*a1*a3*b3*x1*z2)/2 + (3*a1*b1*b3*x1*z2)/2 + a2*b1*b3*x1*z2 + 2*a1*a2*b1*b3*x1*z2 + (3*a1*a3*b1*b3*x1*z2)/2 + a1*b2*b3*x1*z2 + (3*a2*b2*b3*x1*z2)/2 + (3*a1*a2*b2*b3*x1*z2)/2 + (5*a1*b1*b2*b3*x1*z2)/2 + (7*a2*b1*b2*b3*x1*z2)/2 + a1*a2*b1*b2*b3*x1*z2 + (a3*x1^2*z2)/2 + (a2*a3*x1^2*z2)/2 + (a3*b1*x1^2*z2)/2 + (a2*a3*b1*x1^2*z2)/2 + (a1*a2*a3*b1*x1^2*z2)/2 + (a2*a3*b2*x1^2*z2)/2 + (a1*a2*a3*b2*x1^2*z2)/2 + (a2*a3*b1*b2*x1^2*z2)/2 + (a1*a2*b3*x1^2*z2)/2 + (a1*a3*b3*x1^2*z2)/2 + (a1*a2*b1*b3*x1^2*z2)/2 + (a1*a3*b1*b3*x1^2*z2)/2 + (a1*a3*x2*z2)/2 + (5*a3*b1*x2*z2)/2 + 3*a1*a3*b1*x2*z2 + a2*a3*b1*x2*z2 + 3*a3*b1*b2*x2*z2 + (5*a1*b1*b3*x2*z2)/2 + (3*a2*b1*b3*x2*z2)/2 + (5*a1*a2*b1*b3*x2*z2)/2 + (a1*b2*b3*x2*z2)/2 + (a1*a2*b2*b3*x2*z2)/2 + 3*a1*b1*b2*b3*x2*z2 + 3*a2*b1*b2*b3*x2*z2 + 3*a1*a2*b1*b2*b3*x2*z2 + a3*x1*x2*z2 + a2*a3*x1*x2*z2 + a1*a2*a3*x1*x2*z2 + a1*a3*b1*x1*x2*z2 + a2*a3*b1*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a2*a3*b2*x1*x2*z2 + a1*b3*x1*x2*z2 + (a1*a3*x2^2*z2)/2 + (a3*b1*x2^2*z2)/2 + (a1*a3*b1*x2^2*z2)/2 + (a3*b1*b2*x2^2*z2)/2 + (a2*b1*b3*x2^2*z2)/2 + (a1*b2*b3*x2^2*z2)/2 + (a1*a2*b2*b3*x2^2*z2)/2 + (a1*b1*b2*b3*x2^2*z2)/2 + (a2*b1*b2*b3*x2^2*z2)/2 + (a1*a2*b1*b2*b3*x2^2*z2)/2 + a2*a3*b1*x3*z2 + a1*a2*x1*x3*z2 + a2*a3*x1*x3*z2 + a3*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + a3*b1*b2*x1*x3*z2 + a1*a2*b3*x1*x3*z2 + a2*a3*b3*x1*x3*z2 + (3*a1*a3*y1*z2)/2 + 2*a2*a3*y1*z2 + (a1*a2*a3*y1*z2)/2 + a3*b1*y1*z2 + (a1*a3*b1*y1*z2)/2 + (5*a2*a3*b1*y1*z2)/2 + 4*a1*a2*a3*b1*y1*z2 + (3*a3*b2*y1*z2)/2 + a1*a3*b2*y1*z2 + 2*a1*a2*a3*b2*y1*z2 + 2*a3*b1*b2*y1*z2 + (5*a1*a3*b1*b2*y1*z2)/2 + 3*a2*a3*b1*b2*y1*z2 + a1*a2*a3*b1*b2*y1*z2 + b3*y1*z2 + a1*b3*y1*z2 + (a2*b3*y1*z2)/2 + (3*a1*a2*b3*y1*z2)/2 + (3*a3*b3*y1*z2)/2 + (3*a1*a3*b3*y1*z2)/2 + b1*b3*y1*z2 + a1*b1*b3*y1*z2 + 3*a1*a2*b1*b3*y1*z2 + (3*a3*b1*b3*y1*z2)/2 + (3*a1*a3*b1*b3*y1*z2)/2 + (3*b2*b3*y1*z2)/2 + a1*b2*b3*y1*z2 + (a2*b2*b3*y1*z2)/2 + (3*a1*a2*b2*b3*y1*z2)/2 + (b1*b2*b3*y1*z2)/2 + 2*a1*a2*b1*b2*b3*y1*z2 + a1*a3*x1*y1*z2 + a2*a3*x1*y1*z2 + a1*a2*a3*x1*y1*z2 + a3*b2*x1*y1*z2 + a2*a3*b2*x1*y1*z2 + a1*a3*b1*b2*x1*y1*z2 + b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a1*b1*b3*x1*y1*z2 + a1*a3*b1*b3*x1*y1*z2 + a2*b2*b3*x1*y1*z2 + a1*a2*b2*b3*x1*y1*z2 + a1*b1*b2*b3*x1*y1*z2 + a2*b1*b2*b3*x1*y1*z2 + a3*x2*y1*z2 + a1*a3*x2*y1*z2 + a2*a3*x2*y1*z2 + a3*b1*x2*y1*z2 + a1*a3*b1*x2*y1*z2 + a2*a3*b1*x2*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a2*a3*b2*x2*y1*z2 + b3*x2*y1*z2 + a1*b3*x2*y1*z2 + a1*b1*b3*x2*y1*z2 + a2*b1*b3*x2*y1*z2 + a1*b2*b3*x2*y1*z2 + a2*b2*b3*x2*y1*z2 + a2*x3*y1*z2 + a1*a2*x3*y1*z2 + a2*a3*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + a3*b1*b2*x3*y1*z2 + a2*b3*x3*y1*z2 + a1*a2*b3*x3*y1*z2 + a2*a3*b3*x3*y1*z2 + (a1*a3*y1^2*z2)/2 + (a2*a3*y1^2*z2)/2 + (a1*a3*b1*y1^2*z2)/2 + (a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b2*y1^2*z2)/2 + (a2*a3*b1*b2*y1^2*z2)/2 + (a2*b3*y1^2*z2)/2 + (a1*a2*b3*y1^2*z2)/2 + (a3*b3*y1^2*z2)/2 + (a1*a3*b3*y1^2*z2)/2 + (a1*a2*b1*b3*y1^2*z2)/2 + (a3*b1*b3*y1^2*z2)/2 + (a1*a3*b1*b3*y1^2*z2)/2 + (b2*b3*y1^2*z2)/2 + (a2*b2*b3*y1^2*z2)/2 + (b1*b2*b3*y1^2*z2)/2 + (5*a1*a2*b1*b3*y2*z2)/2 + (a1*b2*b3*y2*z2)/2 + (a1*a2*b2*b3*y2*z2)/2 + (5*b1*b2*b3*y2*z2)/2 + (5*a1*b1*b2*b3*y2*z2)/2 + (5*a2*b1*b2*b3*y2*z2)/2 + 3*a1*a2*b1*b2*b3*y2*z2 + a3*x1*y2*z2 + a2*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + a1*a3*b1*x1*y2*z2 + a1*a2*a3*b1*x1*y2*z2 + a2*a3*b2*x1*y2*z2 + a1*a2*a3*b2*x1*y2*z2 + a1*a3*b1*b2*x1*y2*z2 + a2*a3*b1*b2*x1*y2*z2 + a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + b1*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a1*a2*b1*b3*x1*y2*z2 + a2*b2*b3*x1*y2*z2 + a1*a2*b2*b3*x1*y2*z2 + a1*b1*b2*b3*x1*y2*z2 + a2*b1*b2*b3*x1*y2*z2 + a1*a2*a3*x2*y2*z2 + a1*a3*b1*x2*y2*z2 + a3*b1*b2*x2*y2*z2 + a1*b1*b3*x2*y2*z2 + a1*a2*b2*b3*x2*y2*z2 + a1*b1*b2*b3*x2*y2*z2 + a2*b1*b2*b3*x2*y2*z2 + a1*a2*b1*b2*b3*x2*y2*z2 + a3*y1*y2*z2 + a2*a3*y1*y2*z2 + a1*a2*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + a1*a2*a3*b1*y1*y2*z2 + a1*a2*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a1*a3*b1*b2*y1*y2*z2 + a2*a3*b1*b2*y1*y2*z2 + a2*b3*y1*y2*z2 + a3*b3*y1*y2*z2 + b1*b3*y1*y2*z2 + a1*a2*b1*b3*y1*y2*z2 + b2*b3*y1*y2*z2 + a1*b2*b3*y1*y2*z2 + a2*b2*b3*y1*y2*z2 + a1*a2*b2*b3*y1*y2*z2 + b1*b2*b3*y1*y2*z2 + a1*b1*b2*b3*y1*y2*z2 + a2*b1*b2*b3*y1*y2*z2 + (a1*b2*b3*y2^2*z2)/2 + (a1*a2*b2*b3*y2^2*z2)/2 + (b1*b2*b3*y2^2*z2)/2 + (a1*b1*b2*b3*y2^2*z2)/2 + (a2*b1*b2*b3*y2^2*z2)/2 + (a1*a2*b1*b2*b3*y2^2*z2)/2 + a2*a3*b1*y3*z2 + b1*b2*y3*z2 + a3*b1*b2*y3*z2 + b1*b3*y3*z2 + a2*b1*b3*y3*z2 + a3*b1*b3*y3*z2 + b1*b2*b3*y3*z2 + a3*b1*b2*b3*y3*z2 + a2*a3*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + a2*a3*b3*x1*y3*z2 + b1*b2*b3*x1*y3*z2 + a3*b1*b2*b3*x1*y3*z2 + a2*a3*y1*y3*z2 + b2*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a3*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + a2*a3*b3*y1*y3*z2 + b1*b2*b3*y1*y3*z2 + a3*b1*b2*b3*y1*y3*z2 + (a1*a2*a3*z1*z2)/2 + (3*a1*a3*b1*z1*z2)/2 + (a2*a3*b1*z1*z2)/2 + 2*a1*a2*a3*b1*z1*z2 + a1*a2*a3*b2*z1*z2 + (a3*b1*b2*z1*z2)/2 + (5*a1*a3*b1*b2*z1*z2)/2 + 2*a2*a3*b1*b2*z1*z2 + a1*a2*a3*b1*b2*z1*z2 + (a1*a2*b3*z1*z2)/2 + (a1*a3*b3*z1*z2)/2 + a1*b1*b3*z1*z2 + (a2*b1*b3*z1*z2)/2 + (3*a1*a2*b1*b3*z1*z2)/2 + (a1*a3*b1*b3*z1*z2)/2 + (a1*b2*b3*z1*z2)/2 + a1*a2*b2*b3*z1*z2 + (3*a1*b1*b2*b3*z1*z2)/2 + (3*a2*b1*b2*b3*z1*z2)/2 + a1*a2*b1*b2*b3*z1*z2 + a1*a3*b1*x1*z1*z2 + a3*b2*x1*z1*z2 + a1*a3*b2*x1*z1*z2 + a2*a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + a1*b3*x1*z1*z2 + a1*a2*b3*x1*z1*z2 + a1*a3*b3*x1*z1*z2 + a1*b1*b3*x1*z1*z2 + a1*a2*b1*b3*x1*z1*z2 + a2*b2*b3*x1*z1*z2 + a1*a2*b2*b3*x1*z1*z2 + a1*b1*b2*b3*x1*z1*z2 + a2*b1*b2*b3*x1*z1*z2 + a3*x2*z1*z2 + a1*a3*x2*z1*z2 + a1*a2*a3*x2*z1*z2 + a3*b1*x2*z1*z2 + a1*a3*b1*x2*z1*z2 + a2*a3*b1*x2*z1*z2 + a3*b2*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a2*a3*b2*x2*z1*z2 + a1*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + a1*a2*b1*b3*x2*z1*z2 + a1*b2*b3*x2*z1*z2 + a2*b2*b3*x2*z1*z2 + a1*a2*b2*b3*x2*z1*z2 + a1*a2*x3*z1*z2 + a2*a3*x3*z1*z2 + a1*a3*b2*x3*z1*z2 + a2*a3*b2*x3*z1*z2 + a3*b1*b2*x3*z1*z2 + a1*a2*b3*x3*z1*z2 + a2*a3*b3*x3*z1*z2 + a2*a3*y1*z1*z2 + a2*a3*b1*y1*z1*z2 + a1*a2*a3*b1*y1*z1*z2 + a3*b2*y1*z1*z2 + a1*a3*b2*y1*z1*z2 + a1*a2*a3*b2*y1*z1*z2 + a1*a3*b1*b2*y1*z1*z2 + a2*a3*b1*b2*y1*z1*z2 + a1*b3*y1*z1*z2 + b1*b3*y1*z1*z2 + a2*b1*b3*y1*z1*z2 + a1*b2*b3*y1*z1*z2 + a1*b1*b2*b3*y1*z1*z2 + a2*b1*b2*b3*y1*z1*z2 + a2*a3*y2*z1*z2 + a1*a2*a3*y2*z1*z2 + a3*b1*y2*z1*z2 + a1*a2*a3*b1*y2*z1*z2 + a1*a2*a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + a1*a3*b1*b2*y2*z1*z2 + a2*a3*b1*b2*y2*z1*z2 + b3*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + b1*b3*y2*z1*z2 + a2*a3*y3*z1*z2 + a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a1*a3*b2*y3*z1*z2 + a2*a3*b2*y3*z1*z2 + a2*a3*b3*y3*z1*z2 + b2*b3*y3*z1*z2 + a3*b2*b3*y3*z1*z2 + b1*b2*b3*y3*z1*z2 + a3*b1*b2*b3*y3*z1*z2 + (a1*a2*a3*z1^2*z2)/2 + (a1*a3*b1*z1^2*z2)/2 + (a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b2*z1^2*z2)/2 + (a3*b1*b2*z1^2*z2)/2 + (a2*a3*b1*b2*z1^2*z2)/2 + (a1*a2*b3*z1^2*z2)/2 + (a1*a3*b3*z1^2*z2)/2 + (a2*b1*b3*z1^2*z2)/2 + (a1*a3*b1*b3*z1^2*z2)/2 + (a1*b2*b3*z1^2*z2)/2 + (a1*a2*b2*b3*z1^2*z2)/2 + (a1*b1*b2*b3*z1^2*z2)/2 + (a2*b1*b2*b3*z1^2*z2)/2 + (a1*a2*a3*z2^2)/2 + a1*a2*b1*b3*z2^2 + (a1*a2*b2*b3*z2^2)/2 + (a1*a2*b1*b2*b3*z2^2)/2 + (a1*a2*a3*x1*z2^2)/2 + (a1*a3*b1*x1*z2^2)/2 + (a1*a2*a3*b1*x1*z2^2)/2 + (a3*b2*x1*z2^2)/2 + (a2*a3*b2*x1*z2^2)/2 + (a1*a2*a3*b2*x1*z2^2)/2 + (a3*b1*b2*x1*z2^2)/2 + (a1*a3*b1*b2*x1*z2^2)/2 + (a2*a3*b1*b2*x1*z2^2)/2 + (a1*b1*b3*x1*z2^2)/2 + (a1*a2*b1*b3*x1*z2^2)/2 + (a2*b2*b3*x1*z2^2)/2 + (a1*a2*b2*b3*x1*z2^2)/2 + (a1*b1*b2*b3*x1*z2^2)/2 + (a2*b1*b2*b3*x1*z2^2)/2 + (a1*a3*b1*x2*z2^2)/2 + (a3*b1*b2*x2*z2^2)/2 + (a1*b1*b3*x2*z2^2)/2 + (a1*a2*b1*b3*x2*z2^2)/2 + (a1*b1*b2*b3*x2*z2^2)/2 + (a2*b1*b2*b3*x2*z2^2)/2 + (a1*a2*b1*b2*b3*x2*z2^2)/2 + (a2*a3*y1*z2^2)/2 + (a1*a2*a3*y1*z2^2)/2 + (a1*a2*a3*b1*y1*z2^2)/2 + (a3*b2*y1*z2^2)/2 + (a1*a2*a3*b2*y1*z2^2)/2 + (a1*a3*b1*b2*y1*z2^2)/2 + (a2*a3*b1*b2*y1*z2^2)/2 + (a1*a2*b1*b3*y1*z2^2)/2 + (a1*a2*b2*b3*y1*z2^2)/2 + (a1*a2*b1*b3*y2*z2^2)/2 + (a1*a2*b1*b2*b3*y2*z2^2)/2 + (a1*a2*a3*b1*z1*z2^2)/2 + (a1*a2*a3*b2*z1*z2^2)/2 + (a1*a3*b1*b2*z1*z2^2)/2 + (a2*a3*b1*b2*z1*z2^2)/2 + (a1*a2*b1*b3*z1*z2^2)/2 + (a1*a2*b2*b3*z1*z2^2)/2 + (a1*a2*a3*z2^3)/2 + (a1*a2*b1*b3*z2^3)/2 + (a1*a2*b1*b2*b3*z2^3)/2 + (3*a2*x1*z3)/2 + (a1*a2*x1*z3)/2 + a1*a2*a3*x1*z3 + (a1*a2*b1*x1*z3)/2 + a1*a2*a3*b1*x1*z3 + (a1*b2*x1*z3)/2 + (a1*a2*b2*x1*z3)/2 + (a1*a3*b2*x1*z3)/2 + (3*a2*a3*b2*x1*z3)/2 + a1*a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + (a1*a2*b1*b2*x1*z3)/2 + (a1*a3*b1*b2*x1*z3)/2 + (3*a2*a3*b1*b2*x1*z3)/2 + a1*a2*a3*b1*b2*x1*z3 + (3*a2*a3*b3*x1*z3)/2 + a1*a2*a3*b3*x1*z3 + (3*a1*a2*b1*b3*x1*z3)/2 + a1*a2*a3*b1*b3*x1*z3 + (3*a1*a2*b2*b3*x1*z3)/2 + (3*a2*a3*b2*b3*x1*z3)/2 + (3*a1*a2*b1*b2*b3*x1*z3)/2 + (3*a1*a3*b1*b2*b3*x1*z3)/2 + (a2*x1^2*z3)/2 + (a1*a2*x1^2*z3)/2 + (a1*a2*b1*x1^2*z3)/2 + (a1*b2*x1^2*z3)/2 + (a1*a2*b2*x1^2*z3)/2 + (a1*a3*b2*x1^2*z3)/2 + (a2*a3*b2*x1^2*z3)/2 + (a1*a2*b1*b2*x1^2*z3)/2 + (a1*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b3*x1^2*z3)/2 + (a1*a2*b1*b3*x1^2*z3)/2 + (a1*a2*b2*b3*x1^2*z3)/2 + (a2*a3*b2*b3*x1^2*z3)/2 + (a1*a2*b1*b2*b3*x1^2*z3)/2 + (a1*a3*b1*b2*b3*x1^2*z3)/2 + (3*a1*x2*z3)/2 + a1*a2*x2*z3 + (3*a1*a3*x2*z3)/2 + a1*a2*a3*x2*z3 + a1*b1*x2*z3 + (7*a2*b1*x2*z3)/2 + a1*a2*b1*x2*z3 + a1*a3*b1*x2*z3 + a2*a3*b1*x2*z3 + a1*a2*a3*b1*x2*z3 + (3*a1*b2*x2*z3)/2 + (3*a1*a3*b2*x2*z3)/2 + a1*b1*b2*x2*z3 + a1*a3*b1*b2*x2*z3 + a2*a3*b1*b2*x2*z3 + (7*a2*a3*b1*b3*x2*z3)/2 + a2*a3*b1*b2*b3*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + a1*a2*a3*x1*x2*z3 + a1*b1*x1*x2*z3 + a2*b1*x1*x2*z3 + a3*b1*x1*x2*z3 + a1*a3*b1*x1*x2*z3 + a2*a3*b1*x1*x2*z3 + a3*b1*b2*x1*x2*z3 + a1*a3*b1*b2*x1*x2*z3 + a2*a3*b1*b2*x1*x2*z3 + a1*a2*b3*x1*x2*z3 + a1*a2*a3*b3*x1*x2*z3 + a1*a3*b2*b3*x1*x2*z3 + a2*a3*b2*b3*x1*x2*z3 + a1*a3*b1*b2*b3*x1*x2*z3 + a2*a3*b1*b2*b3*x1*x2*z3 + (a1*x2^2*z3)/2 + (a1*a3*x2^2*z3)/2 + (a2*b1*x2^2*z3)/2 + (a1*b2*x2^2*z3)/2 + (a1*a3*b2*x2^2*z3)/2 + (a2*a3*b1*b3*x2^2*z3)/2 + (a2*y1*z3)/2 + (3*a1*a2*y1*z3)/2 + a1*a2*a3*y1*z3 + a2*b1*y1*z3 + (a1*a2*b1*y1*z3)/2 + a2*a3*b1*y1*z3 + a1*a2*a3*b1*y1*z3 + (3*b2*y1*z3)/2 + (3*a1*b2*y1*z3)/2 + (3*a1*a2*b2*y1*z3)/2 + (3*a3*b2*y1*z3)/2 + (3*a1*a3*b2*y1*z3)/2 + (a2*a3*b2*y1*z3)/2 + a1*a2*a3*b2*y1*z3 + (b1*b2*y1*z3)/2 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + (a1*a2*b1*b2*y1*z3)/2 + a3*b1*b2*y1*z3 + (a1*a3*b1*b2*y1*z3)/2 + (a2*a3*b1*b2*y1*z3)/2 + a1*a2*a3*b1*b2*y1*z3 + (a2*a3*b3*y1*z3)/2 + a1*a2*a3*b3*y1*z3 + (3*a2*b1*b3*y1*z3)/2 + (3*a1*a2*b1*b3*y1*z3)/2 + a2*a3*b1*b3*y1*z3 + a1*a2*a3*b1*b3*y1*z3 + (3*a2*b2*b3*y1*z3)/2 + (3*a1*a2*b2*b3*y1*z3)/2 + (3*a2*a3*b2*b3*y1*z3)/2 + (3*a2*b1*b2*b3*y1*z3)/2 + (3*a1*a2*b1*b2*b3*y1*z3)/2 + (3*a3*b1*b2*b3*y1*z3)/2 + (3*a1*a3*b1*b2*b3*y1*z3)/2 + a2*x1*y1*z3 + a1*a2*x1*y1*z3 + a2*a3*x1*y1*z3 + a1*a2*b1*x1*y1*z3 + a1*b2*x1*y1*z3 + a1*a2*b2*x1*y1*z3 + a3*b2*x1*y1*z3 + a2*a3*b2*x1*y1*z3 + a1*a2*b1*b2*x1*y1*z3 + a1*a3*b1*b2*x1*y1*z3 + a2*a3*b1*b2*x1*y1*z3 + a2*b3*x1*y1*z3 + a1*a2*b1*b3*x1*y1*z3 + a1*a3*b2*b3*x1*y1*z3 + a2*a3*b2*b3*x1*y1*z3 + a1*a2*b1*b2*b3*x1*y1*z3 + a1*a3*b1*b2*b3*x1*y1*z3 + a1*x2*y1*z3 + a2*x2*y1*z3 + a3*x2*y1*z3 + a2*a3*x2*y1*z3 + a1*a2*a3*x2*y1*z3 + a2*b1*x2*y1*z3 + a3*b1*x2*y1*z3 + a1*a3*b1*x2*y1*z3 + a2*a3*b1*x2*y1*z3 + a1*b2*x2*y1*z3 + a3*b2*x2*y1*z3 + a3*b1*b2*x2*y1*z3 + a1*a3*b1*b2*x2*y1*z3 + a2*a3*b1*b2*x2*y1*z3 + a2*b3*x2*y1*z3 + a1*a2*b3*x2*y1*z3 + a2*a3*b3*x2*y1*z3 + a1*a2*a3*b3*x2*y1*z3 + a1*a3*b1*b3*x2*y1*z3 + a2*a3*b2*b3*x2*y1*z3 + a1*a3*b1*b2*b3*x2*y1*z3 + a2*a3*b1*b2*b3*x2*y1*z3 + (a2*y1^2*z3)/2 + (a1*a2*y1^2*z3)/2 + (a1*a2*b1*y1^2*z3)/2 + (b2*y1^2*z3)/2 + (a1*b2*y1^2*z3)/2 + (a1*a2*b2*y1^2*z3)/2 + (a3*b2*y1^2*z3)/2 + (a1*a3*b2*y1^2*z3)/2 + (a2*a3*b2*y1^2*z3)/2 + (b1*b2*y1^2*z3)/2 + (a1*a2*b1*b2*y1^2*z3)/2 + (a1*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b3*y1^2*z3)/2 + (a2*b1*b3*y1^2*z3)/2 + (a1*a2*b1*b3*y1^2*z3)/2 + (a2*b2*b3*y1^2*z3)/2 + (a1*a2*b2*b3*y1^2*z3)/2 + (a2*a3*b2*b3*y1^2*z3)/2 + (a2*b1*b2*b3*y1^2*z3)/2 + (a1*a2*b1*b2*b3*y1^2*z3)/2 + (a3*b1*b2*b3*y1^2*z3)/2 + (a1*a3*b1*b2*b3*y1^2*z3)/2 + (a1*y2*z3)/2 + a1*a2*y2*z3 + (a1*a3*y2*z3)/2 + a1*a2*a3*y2*z3 + (3*b1*y2*z3)/2 + 2*a1*b1*y2*z3 + (5*a2*b1*y2*z3)/2 + a1*a2*b1*y2*z3 + a3*b1*y2*z3 + 2*a1*a3*b1*y2*z3 + 2*a2*a3*b1*y2*z3 + a1*a2*a3*b1*y2*z3 + (3*a1*b2*y2*z3)/2 + (3*a1*a3*b2*y2*z3)/2 + b1*b2*y2*z3 + a1*b1*b2*y2*z3 + a1*a3*b1*b2*y2*z3 + a2*a3*b1*b2*y2*z3 + (7*a3*b1*b3*y2*z3)/2 + (7*a2*a3*b1*b3*y2*z3)/2 + a3*b1*b2*b3*y2*z3 + a2*a3*b1*b2*b3*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + a3*x1*y2*z3 + a1*a3*x1*y2*z3 + a2*a3*x1*y2*z3 + a1*a2*a3*x1*y2*z3 + a1*b1*x1*y2*z3 + a2*b1*x1*y2*z3 + a3*b1*x1*y2*z3 + a1*a3*b1*x1*y2*z3 + a2*a3*b1*x1*y2*z3 + a3*b1*b2*x1*y2*z3 + a1*a3*b1*b2*x1*y2*z3 + a2*a3*b1*b2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a2*b3*x1*y2*z3 + a1*a2*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + a1*a3*b3*x1*y2*z3 + a2*a3*b3*x1*y2*z3 + a1*a2*a3*b3*x1*y2*z3 + a1*a3*b2*b3*x1*y2*z3 + a2*a3*b2*b3*x1*y2*z3 + a1*a3*b1*b2*b3*x1*y2*z3 + a2*a3*b1*b2*b3*x1*y2*z3 + a1*x2*y2*z3 + a1*a3*x2*y2*z3 + a1*b1*x2*y2*z3 + a2*b1*x2*y2*z3 + a1*a3*b2*x2*y2*z3 + a1*a3*b1*b3*x2*y2*z3 + a2*a3*b1*b3*x2*y2*z3 + a1*a3*b2*b3*x2*y2*z3 + a1*y1*y2*z3 + a2*y1*y2*z3 + a3*y1*y2*z3 + a1*a3*y1*y2*z3 + a1*a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a2*b1*y1*y2*z3 + a3*b1*y1*y2*z3 + a1*a3*b1*y1*y2*z3 + a2*a3*b1*y1*y2*z3 + b2*y1*y2*z3 + a1*b2*y1*y2*z3 + a3*b2*y1*y2*z3 + a3*b1*b2*y1*y2*z3 + a1*a3*b1*b2*y1*y2*z3 + a2*a3*b1*b2*y1*y2*z3 + a1*b3*y1*y2*z3 + a1*a2*b3*y1*y2*z3 + a1*a3*b3*y1*y2*z3 + a1*a2*a3*b3*y1*y2*z3 + a3*b1*b3*y1*y2*z3 + a1*a3*b1*b3*y1*y2*z3 + a3*b2*b3*y1*y2*z3 + a2*a3*b2*b3*y1*y2*z3 + a1*a3*b1*b2*b3*y1*y2*z3 + a2*a3*b1*b2*b3*y1*y2*z3 + (a1*y2^2*z3)/2 + (a1*a3*y2^2*z3)/2 + (b1*y2^2*z3)/2 + (a2*b1*y2^2*z3)/2 + (a1*b2*y2^2*z3)/2 + (a1*a3*b2*y2^2*z3)/2 + (a3*b1*b3*y2^2*z3)/2 + (a2*a3*b1*b3*y2^2*z3)/2 + (3*a1*a2*b1*z1*z3)/2 + a1*a2*a3*b1*z1*z3 + a1*b1*b2*z1*z3 + (3*a1*a2*b1*b2*z1*z3)/2 + (3*a1*a3*b1*b2*z1*z3)/2 + (a2*a3*b1*b2*z1*z3)/2 + a1*a2*a3*b1*b2*z1*z3 + (a1*a2*b1*b3*z1*z3)/2 + a1*a2*a3*b1*b3*z1*z3 + (a1*a2*b2*b3*z1*z3)/2 + (a2*a3*b2*b3*z1*z3)/2 + (a1*a2*b1*b2*b3*z1*z3)/2 + (a1*a3*b1*b2*b3*z1*z3)/2 + a3*b2*x1*z1*z3 + a1*a3*b2*x1*z1*z3 + a2*a3*b2*x1*z1*z3 + a1*a2*b2*b3*x1*z1*z3 + a1*a3*b2*b3*x1*z1*z3 + a3*x2*z1*z3 + a1*a3*x2*z1*z3 + a2*a3*x2*z1*z3 + a1*a2*a3*x2*z1*z3 + a3*b1*x2*z1*z3 + a1*a3*b1*x2*z1*z3 + a2*a3*b1*x2*z1*z3 + a3*b2*x2*z1*z3 + a1*a3*b2*x2*z1*z3 + a2*a3*b2*x2*z1*z3 + a3*b1*b2*x2*z1*z3 + a1*a3*b1*b2*x2*z1*z3 + a2*a3*b1*b2*x2*z1*z3 + a1*a2*b3*x2*z1*z3 + a1*a2*a3*b3*x2*z1*z3 + a1*a3*b1*b3*x2*z1*z3 + a2*a3*b1*b3*x2*z1*z3 + a1*a3*b1*b2*b3*x2*z1*z3 + a2*a3*b1*b2*b3*x2*z1*z3 + a2*a3*y1*z1*z3 + a2*a3*b2*y1*z1*z3 + a2*b3*y1*z1*z3 + a2*a3*b3*y1*z1*z3 + a1*a2*a3*y2*z1*z3 + a3*b1*y2*z1*z3 + a1*a3*b1*y2*z1*z3 + a2*a3*b1*y2*z1*z3 + a3*b2*y2*z1*z3 + a1*a3*b2*y2*z1*z3 + a2*a3*b2*y2*z1*z3 + a3*b1*b2*y2*z1*z3 + a1*a3*b1*b2*y2*z1*z3 + a2*a3*b1*b2*y2*z1*z3 + b3*y2*z1*z3 + a1*b3*y2*z1*z3 + a2*b3*y2*z1*z3 + a1*a2*b3*y2*z1*z3 + a3*b3*y2*z1*z3 + a1*a3*b3*y2*z1*z3 + a2*a3*b3*y2*z1*z3 + a1*a2*a3*b3*y2*z1*z3 + a1*a3*b1*b3*y2*z1*z3 + a2*a3*b1*b3*y2*z1*z3 + a1*a3*b1*b2*b3*y2*z1*z3 + a2*a3*b1*b2*b3*y2*z1*z3 + (a1*a2*b1*z1^2*z3)/2 + (a1*a2*b1*b2*z1^2*z3)/2 + (a1*a3*b1*b2*z1^2*z3)/2 + (a2*a3*b1*b2*z1^2*z3)/2 + (a1*a2*b1*b3*z1^2*z3)/2 + (a1*a2*b2*b3*z1^2*z3)/2 + (a2*a3*b2*b3*z1^2*z3)/2 + (a1*a2*b1*b2*b3*z1^2*z3)/2 + (a1*a3*b1*b2*b3*z1^2*z3)/2 + (3*a2*b1*z2*z3)/2 + a1*a2*b1*z2*z3 + a1*a2*a3*b1*z2*z3 + (a1*b2*z2*z3)/2 + (a1*a3*b2*z2*z3)/2 + a1*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + a2*a3*b1*b2*z2*z3 + (5*a2*a3*b1*b3*z2*z3)/2 + a2*a3*b1*b2*b3*z2*z3 + a1*a2*a3*x1*z2*z3 + a1*b1*x1*z2*z3 + a2*b1*x1*z2*z3 + a3*b2*x1*z2*z3 + a1*a3*b2*x1*z2*z3 + a2*a3*b2*x1*z2*z3 + a3*b1*b2*x1*z2*z3 + a1*a3*b1*b2*x1*z2*z3 + a2*a3*b1*b2*x1*z2*z3 + a1*a2*b3*x1*z2*z3 + a1*a2*a3*b3*x1*z2*z3 + a1*a3*b1*b3*x1*z2*z3 + a2*a3*b1*b3*x1*z2*z3 + a1*a3*b1*b2*b3*x1*z2*z3 + a2*a3*b1*b2*b3*x1*z2*z3 + a1*b1*x2*z2*z3 + a1*b2*x2*z2*z3 + a1*a3*b1*b3*x2*z2*z3 + a1*a3*b2*b3*x2*z2*z3 + a2*a3*y1*z2*z3 + a1*a2*a3*y1*z2*z3 + a2*b1*y1*z2*z3 + a1*b2*y1*z2*z3 + a1*a3*b2*y1*z2*z3 + a2*a3*b2*y1*z2*z3 + a3*b1*b2*y1*z2*z3 + a1*a3*b1*b2*y1*z2*z3 + a2*a3*b1*b2*y1*z2*z3 + a2*b3*y1*z2*z3 + a1*a2*b3*y1*z2*z3 + a2*a3*b3*y1*z2*z3 + a1*a2*a3*b3*y1*z2*z3 + a2*a3*b1*b3*y1*z2*z3 + a1*a3*b2*b3*y1*z2*z3 + a1*a3*b1*b2*b3*y1*z2*z3 + a2*a3*b1*b2*b3*y1*z2*z3 + a1*a2*a3*z1*z2*z3 + a3*b1*b2*z1*z2*z3 + a1*a3*b1*b2*z1*z2*z3 + a2*a3*b1*b2*z1*z2*z3 + a1*a2*b3*z1*z2*z3 + a1*a2*a3*b3*z1*z2*z3 + a1*a3*b2*b3*z1*z2*z3 + a2*a3*b2*b3*z1*z2*z3 + a1*a3*b1*b2*b3*z1*z2*z3 + a2*a3*b1*b2*b3*z1*z2*z3 + (a2*b1*z2^2*z3)/2 + (a1*b2*z2^2*z3)/2 + (a1*a3*b2*z2^2*z3)/2 + (a2*a3*b1*b3*z2^2*z3)/2;
end;
#####################################################################
#####################################################################
#Space Group No. 24 ( I2_12_12_1)
#####################################################################
Acin24:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Acpin24:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin24:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Byxzin24:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1*b2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a1*a2*x2 + b1*x2 + a1*b1*x2 + a1*a2*b2*x2 + b1*b2*x2 + a2*b1*y1 + x2*y1 + a1*x2*y1 + a1*y2 + a1*a2*y2 + a1*b2*y2 + a1*a2*b2*y2 + b1*b2*y2 + a1*x2*y2 + a1*y1*y2 + a2*b1*z1 + b2*z1 + a1*b2*z1 + a2*b2*z1 + a1*z2 + a1*a2*z2 + a1*b1*z2 + a1*a2*b2*z2 + b1*b2*z2 + y1*z2 + a1*y1*z2 + a1*y2*z2;
end;
#####################################################################
Bzxyin24:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a2*b1*b2 + a1*a2*b1*b2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a1*a2*x2 + a1*b2*x2 + a1*b1*b2*x2 + a2*b1*b2*x2 + a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a1*y2 + a1*a2*y2 + a1*b2*y2 + a1*b1*b2*y2 + a2*b1*b2*y2 + a2*b1*z1 + x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + a1*a2*z2 + a1*b1*z2 + a1*b1*b2*z2 + a2*b1*b2*z2 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 25 ( Pmm2)
#####################################################################
Acin25:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin25:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin25:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin25:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
Azin25:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 26 ( Pmc2_1)
#####################################################################
Acin26:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin26:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin26:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin26:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 27 ( Pcc2)
#####################################################################
Acin27:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin27:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin27:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayin27:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 28 ( Pma2)
#####################################################################
Acin28:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin28:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Ayin28:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
Azin28:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 29 ( Pca2_1)
#####################################################################
Acin29:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin29:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Ayin29:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 30 ( Pnc2)
#####################################################################
Acin30:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin30:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin30:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Bphiin30:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return b1*y2 + a2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 31 ( Pmn2_1)
#####################################################################
Acin31:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin31:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Ayin31:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1;
end;
#####################################################################
Bphiin31:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1 + a1*b2 + a1*a2*b2 + a2*b1*b2 + a1*a2*b1*b2 + a2*x1 + b2*x1 + a1*a2*z1 + a2*b1*z1 + b2*z1 + a1*b2*z1 + a2*b2*z1 + b1*b2*z1 + a1*a2*z2 + a1*b1*z2 + a2*b1*z2 + a1*b2*z2 + b1*b2*z2 + z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 32 ( Pba2)
#####################################################################
Acin32:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin32:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Azin32:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bphiin32:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1 + a1*b2 + a1*b1*b2 + a2*b1*b2 + a2*x1 + a2*b1*x1 + b1*b2*x1 + a1*x2 + a2*b1*x2 + b1*b2*x2 + x1*x2 + a2*y1 + b2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 33 ( Pna2_1)
#####################################################################
Acin33:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin33:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Bphi1in33:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*b2 + a1*a2*b2 + a1*b1*b2 + a2*b1*b2 + a2*x1 + a1*x2 + a2*y1 + a2*z1 + b2*z1 + a1*z2;
end;
#####################################################################
Bphi2in33:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + a1*a2*b1 + a1*b2 + a1*a2*b2 + b1*b2 + a1*b1*b2 + a1*a2*b1*b2 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a1*x2 + a1*b1*x2 + a2*b1*x2 + a1*b2*x2 + a1*a2*y1 + a2*b1*y1 + a1*y2 + a1*a2*y2 + a2*b1*y2 + y1*y2 + a2*z1 + a1*a2*z1 + b2*z1 + a1*b2*z1 + a2*b2*z1 + y2*z1 + a1*z2 + a1*a2*z2 + a1*b1*z2 + a1*b2*z2 + y1*z2 + z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 34 ( Pnn2)
#####################################################################
Acin34:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin34:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin34:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
#####################################################################
#Space Group No. 35 ( Cmm2)
#####################################################################
Acin35:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin35:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin35:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin35:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bxyin35:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 36 ( Cmc2_1)
#####################################################################
Acin36:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin36:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin36:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin36:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 37 ( Ccc2)
#####################################################################
Acin37:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin37:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin37:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin37:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
Bzxyin37:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return b1*x2 + x2*z1 + y2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 38 ( Amm2)
#####################################################################
Acin38:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin38:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin38:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayzin38:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1 + z1;
end;
#####################################################################
Bxyin38:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return y2*z1 + a1*y2*z1 + b1*y2*z1 + a1*y2*z2 + b1*y2*z2 + a1*z1*z2 + b1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 39 ( Aem2)
#####################################################################
Acin39:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin39:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axin39:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1;
end;
#####################################################################
Ayzin39:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1 + z1;
end;
#####################################################################
#####################################################################
#Space Group No. 40 ( Ama2)
#####################################################################
Acin40:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin40:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Ayzin40:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1 + z1;
end;
#####################################################################
Bxyin40:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return y2*z1 + a1*y2*z1 + b1*y2*z1 + a1*y2*z2 + b1*y2*z2 + a1*z1*z2 + b1*z1*z2;
end;
#####################################################################
Bzxyin40:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*y2 + b1*y2 + x1*y2 + a1*z2 + x1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 41 ( Aea2)
#####################################################################
Acin41:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin41:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Ayzin41:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1 + z1;
end;
#####################################################################
Cin41:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a2*a3*b1*b2 + a1*a2*a3*b1*y1 + a2*a3*b1*b2*y1 + a2*b3*y1 + a1*a2*b1*b3*y1 + b2*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + b1*b2*b3*y1 + a2*b1*b2*b3*y1 + b3*x2*y1 + a2*a3*b1*y2 + a2*a3*b1*b2*y2 + b1*b3*y2 + a2*b1*b3*y2 + a2*b1*b2*b3*y2 + a3*y1*y2 + a1*a2*a3*y1*y2 + a1*a3*b1*y1*y2 + a2*a3*b1*y1*y2 + a1*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + a1*b3*y1*y2 + a1*a2*b3*y1*y2 + b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a1*b2*b3*y1*y2 + b1*b2*b3*y1*y2 + a1*a2*y3 + a2*b1*y3 + a1*a2*b1*y3 + a1*a2*a3*b1*y3 + a2*b1*b2*y3 + a2*a3*b1*b2*y3 + b1*b2*b3*y3 + a2*x1*y3 + b1*x2*y3 + a1*a2*y1*y3 + a2*a3*y1*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + b2*y1*y3 + a1*b2*y1*y3 + a2*b2*y1*y3 + a3*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + a1*y2*y3 + a1*a2*y2*y3 + a1*a3*y2*y3 + a1*a2*a3*y2*y3 + b1*y2*y3 + a1*b1*y2*y3 + a3*b1*y2*y3 + a1*a3*b1*y2*y3 + b1*b2*y2*y3 + a3*b1*b2*y2*y3 + a2*a3*b1*z1 + a1*a2*a3*b1*z1 + a2*a3*b1*b2*z1 + a2*b3*z1 + a2*b1*b3*z1 + a1*a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + b1*b2*b3*z1 + a2*b1*b2*b3*z1 + b3*x2*z1 + a2*a3*y1*z1 + a3*b2*y1*z1 + a2*b3*y1*z1 + b2*b3*y1*z1 + a3*y2*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b1*y2*z1 + a1*a3*b1*y2*z1 + a2*a3*b1*y2*z1 + a3*b2*y2*z1 + a1*a3*b2*y2*z1 + a3*b1*b2*y2*z1 + b3*y2*z1 + a1*b3*y2*z1 + a2*b3*y2*z1 + a1*a2*b3*y2*z1 + b1*b3*y2*z1 + a2*b1*b3*y2*z1 + b2*b3*y2*z1 + a1*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a2*a3*b1*y3*z1 + a1*b2*y3*z1 + a2*b2*y3*z1 + a1*a3*b2*y3*z1 + a2*a3*b2*y3*z1 + a2*a3*b1*b2*z2 + a2*b1*b2*b3*z2 + a3*y1*z2 + a1*a3*y1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 + a2*a3*b1*y1*z2 + a3*b2*y1*z2 + a1*a3*b2*y1*z2 + a3*b1*b2*y1*z2 + a2*b3*y1*z2 + a1*a2*b3*y1*z2 + a2*b1*b3*y1*z2 + b2*b3*y1*z2 + a1*b2*b3*y1*z2 + b1*b2*b3*y1*z2 + a1*a2*y3*z2 + a1*a2*a3*y3*z2 + a1*b1*y3*z2 + a1*a3*b1*y3*z2 + b1*b2*y3*z2 + a3*b1*b2*y3*z2 + a1*a2*a3*z1*z2 + a1*a3*b1*z1*z2 + a2*a3*b1*z1*z2 + a1*a3*b2*z1*z2 + a3*b1*b2*z1*z2 + a1*a2*b3*z1*z2 + a2*b1*b3*z1*z2 + a1*b2*b3*z1*z2 + b1*b2*b3*z1*z2 + a1*a2*z3 + a2*b1*z3 + a1*a2*b1*z3 + a1*a2*a3*b1*z3 + a2*b1*b2*z3 + a2*a3*b1*b2*z3 + b1*b2*b3*z3 + a2*x1*z3 + b1*x2*z3 + a1*a2*y1*z3 + a2*a3*y1*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + b2*y1*z3 + a1*b2*y1*z3 + a2*b2*y1*z3 + a3*b2*y1*z3 + a1*a3*b2*y1*z3 + a2*a3*b2*y1*z3 + a1*y2*z3 + a1*a2*y2*z3 + a1*a3*y2*z3 + a1*a2*a3*y2*z3 + b1*y2*z3 + a1*b1*y2*z3 + a3*b1*y2*z3 + a1*a3*b1*y2*z3 + b1*b2*y2*z3 + a3*b1*b2*y2*z3 + a2*b1*z1*z3 + a1*a2*b1*z1*z3 + a2*a3*b1*z1*z3 + a1*b2*z1*z3 + a2*b2*z1*z3 + a1*a3*b2*z1*z3 + a2*a3*b2*z1*z3 + a1*a2*z2*z3 + a1*a2*a3*z2*z3 + a1*b1*z2*z3 + a1*a3*b1*z2*z3 + b1*b2*z2*z3 + a3*b1*b2*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 42 ( Fmm2)
#####################################################################
Acin42:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin42:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axzin42:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + z1;
end;
#####################################################################
Ayzin42:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return y1 + z1;
end;
#####################################################################
Cin42:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return (a2*a3*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + a3*b1*x2 + 2*a2*a3*b1*x2 - 2*a2*a3*b1^2*x2 + 2*a3*b1*b2*x2 - 2*a3*b1^2*b2*x2 + 2*a3*b1*b3*x2 - 2*a3*b1^2*b3*x2 + a3*x1*x2 + a1*a3*x1*x2 + a2*a3*x1*x2 + 3*a3*b1*x1*x2 + 3*a1*a3*b1*x1*x2 - 3*a3*b1^2*x1*x2 - 2*a1*a3*b1^2*x1*x2 + a2*b3*x1*x2 + (a3*x1*x2*(1 + x2))/2 + (a1*a3*x1*x2*(1 + x2))/2 + (a3*b1*x1*x2*(1 + x2))/2 + a1*a2*x1*x3 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + a1*a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a1*a2*b2*x1*x3 + a3*b2*x1*x3 + a2*a3*b2*x1*x3 + a2*b3*x1*x3 + (a2*x1*(1 + x1)*x3)/2 + (a2*a3*x1*(1 + x1)*x3)/2 + (a2*b2*x1*(1 + x1)*x3)/2 + (a3*b2*x1*(1 + x1)*x3)/2 + 4*b1*x2*x3 + 2*a2*b1*x2*x3 + a1*a2*b1*x2*x3 + 2*a3*b1*x2*x3 - 3*b1^2*x2*x3 - a2*b1^2*x2*x3 - 2*a3*b1^2*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + 2*b1*b2*x2*x3 + a1*b1*b2*x2*x3 + 2*a2*b1*b2*x2*x3 - b1^2*b2*x2*x3 - 2*a2*b1^2*b2*x2*x3 + 2*a2*b1*b3*x2*x3 - 2*a2*b1^2*b3*x2*x3 + 2*b1*b2*b3*x2*x3 - 2*b1^2*b2*b3*x2*x3 + x1*x2*x3 + a1*x1*x2*x3 + a3*x1*x2*x3 + a2*a3*x1*x2*x3 + b1*x1*x2*x3 + a1*b1*x1*x2*x3 + a1*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + a3*b2*x1*x2*x3 + b1*b2*x1*x2*x3 + (b1*x2*(1 + x2)*x3)/2 + (a2*b1*x2*(1 + x2)*x3)/2 + (b1*b2*x2*(1 + x2)*x3)/2 + a2*a3*x1*y1 + a2*b3*x1*y1 + a2*a3*x2*y1 + a3*b1*x2*y1 + 2*a1*a3*b1*x2*y1 - a3*b1^2*x2*y1 - 2*a1*a3*b1^2*x2*y1 + a2*b3*x2*y1 + a1*a3*x1*x2*y1 + a3*b1*x1*x2*y1 + (a1*a3*x2*(1 + x2)*y1)/2 + (a3*b1*x2*(1 + x2)*y1)/2 + a2*x3*y1 + a1*a2*x3*y1 + a2*a3*x3*y1 + a1*a2*a3*x3*y1 + a1*a2*b2*x3*y1 + a1*a3*b2*x3*y1 + a2*b3*x3*y1 + a2*x1*x3*y1 + a1*a2*x1*x3*y1 + a1*b2*x1*x3*y1 + a1*x2*x3*y1 + a1*a2*x2*x3*y1 + b2*x2*x3*y1 + a1*b2*x2*x3*y1 + (a2*a3*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (a3*b1*x2*y1*(1 + y1))/2 + (a2*x3*y1*(1 + y1))/2 + (a2*a3*x3*y1*(1 + y1))/2 + (a1*b2*x3*y1*(1 + y1))/2 + 2*a2*a3*b1*y2 - 2*a2*a3*b1^2*y2 + 2*a2*b1*b3*y2 - 2*a2*b1^2*b3*y2 + a3*x1*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a3*b1*x1*y2 + 2*a1*a3*b1*x1*y2 - 2*a1*a3*b1^2*x1*y2 + a2*b3*x1*y2 + (a3*x1*(1 + x1)*y2)/2 + (a3*b1*x1*(1 + x1)*y2)/2 + 2*a3*b1*b2*x2*y2 - 2*a3*b1^2*b2*x2*y2 + 2*a2*b1*b3*x2*y2 + 2*a3*b1*b3*x2*y2 - 2*a2*b1^2*b3*x2*y2 - 2*a3*b1^2*b3*x2*y2 + a3*b1*x1*x2*y2 + (a3*b1*x2*(1 + x2)*y2)/2 + 2*a1*b1*x3*y2 - a1*b1^2*x3*y2 + a1*b2*x3*y2 + 2*a1*b1*b2*x3*y2 - 2*a1*b1^2*b2*x3*y2 + 2*a2*b1*b3*x3*y2 + 2*a3*b1*b3*x3*y2 - 2*a2*b1^2*b3*x3*y2 - 2*a3*b1^2*b3*x3*y2 + a2*x1*x3*y2 + a1*b1*x1*x3*y2 + a1*b2*x1*x3*y2 + a1*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + a2*a3*y1*y2 + 2*a3*b1*y1*y2 + 3*a1*a3*b1*y1*y2 - 2*a3*b1^2*y1*y2 - 2*a1*a3*b1^2*y1*y2 + a2*b3*y1*y2 + a1*a3*x1*y1*y2 + a3*b1*x2*y1*y2 + a2*x3*y1*y2 + a1*a2*x3*y1*y2 + a2*a3*x3*y1*y2 + (a3*y1*(1 + y1)*y2)/2 + (a1*a3*x1*y2*(1 + y2))/2 + (a3*b1*x2*y2*(1 + y2))/2 + (a1*b1*x3*y2*(1 + y2))/2 + (a1*b2*x3*y2*(1 + y2))/2 + (a3*y1*y2*(1 + y2))/2 + (a1*a3*y1*y2*(1 + y2))/2 + a2*x1*y3 + a1*a2*x1*y3 + a1*a2*a3*x1*y3 + a2*b1*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a1*b2*x1*y3 + a3*b2*x1*y3 + a2*b3*x1*y3 + (a2*a3*x1*(1 + x1)*y3)/2 + (a1*b2*x1*(1 + x1)*y3)/2 + (a2*b2*x1*(1 + x1)*y3)/2 + (a3*b2*x1*(1 + x1)*y3)/2 + 4*b1*x2*y3 + 2*a1*b1*x2*y3 + 4*a2*b1*x2*y3 + 2*a3*b1*x2*y3 - 3*b1^2*x2*y3 - a1*b1^2*x2*y3 - 3*a2*b1^2*x2*y3 - 2*a3*b1^2*x2*y3 + a1*b2*x2*y3 + 2*a1*b1*b2*x2*y3 + 2*a2*b1*b2*x2*y3 - 2*a1*b1^2*b2*x2*y3 - 2*a2*b1^2*b2*x2*y3 + 2*a3*b1*b3*x2*y3 - 2*a3*b1^2*b3*x2*y3 + x1*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a3*x1*x2*y3 + a2*a3*x1*x2*y3 + b1*x1*x2*y3 + a1*b2*x1*x2*y3 + a2*b2*x1*x2*y3 + a3*b2*x1*x2*y3 + (b1*x2*(1 + x2)*y3)/2 + (a1*b1*x2*(1 + x2)*y3)/2 + (a2*b1*x2*(1 + x2)*y3)/2 + (a1*b2*x2*(1 + x2)*y3)/2 + a2*a3*x1*x3*y3 + a1*a2*b2*x1*x3*y3 + a2*a3*b2*x1*x3*y3 + a1*a2*b1*x2*x3*y3 + a1*b2*x2*x3*y3 + a1*a2*b2*x2*x3*y3 + a1*b1*b2*x2*x3*y3 + a1*a2*y1*y3 + a1*a2*a3*y1*y3 + a1*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + a2*b3*y1*y3 + a1*a2*x1*y1*y3 + a1*x2*y1*y3 + a2*x2*y1*y3 + a1*a2*x2*y1*y3 + a2*a3*x3*y1*y3 + a1*a2*b2*x3*y1*y3 + a2*a3*b2*x3*y1*y3 + (a2*a3*y1*(1 + y1)*y3)/2 + 2*a2*b1*y2*y3 + a1*a2*b1*y2*y3 - 2*a2*b1^2*y2*y3 + a1*a2*b2*y2*y3 + a1*a2*b1*x3*y2*y3 + a1*a2*b2*x3*y2*y3 + a1*a2*y1*y2*y3 + a2*a3*y1*y2*y3 + a1*a3*b1*x2*z1 + a3*x1*x2*z1 + a1*a3*x1*x2*z1 + a3*b1*x1*x2*z1 + a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a3*b2*x3*z1 + a2*a3*b2*x3*z1 + a2*x1*x3*z1 + a1*a2*x1*x3*z1 + a2*a3*x1*x3*z1 + a1*b2*x1*x3*z1 + a2*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a3*x2*x3*z1 + a2*a3*x2*x3*z1 + a1*b1*x2*x3*z1 + a2*b1*x2*x3*z1 + a1*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*x2*y1*z1 + a1*a2*x3*y1*z1 + a2*a3*x3*y1*z1 + a1*a3*b1*y2*z1 + a3*x1*y2*z1 + a1*a3*x1*y2*z1 + a3*b1*x1*y2*z1 + a2*a3*x3*y2*z1 + a1*a3*y1*y2*z1 + a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a2*a3*b1*y3*z1 + a1*b2*y3*z1 + a2*b2*y3*z1 + a1*a3*b2*y3*z1 + a2*a3*b2*y3*z1 + a2*x1*y3*z1 + a1*a2*x1*y3*z1 + a2*a3*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + a3*b2*x1*y3*z1 + a3*x2*y3*z1 + a2*a3*x2*y3*z1 + a1*b1*x2*y3*z1 + a2*b1*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a3*b2*x2*y3*z1 + a1*a2*y1*y3*z1 + a2*a3*y1*y3*z1 + a2*a3*y2*y3*z1 + (a3*b1*x2*z1*(1 + z1))/2 + (a1*b2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + (a3*b2*x3*z1*(1 + z1))/2 + (a3*b1*y2*z1*(1 + z1))/2 + (a1*b2*y3*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + (a3*b2*y3*z1*(1 + z1))/2 + 2*a3*b1*x1*z2 + a1*a3*b1*x1*z2 - a3*b1^2*x1*z2 + (a3*b1*x1*(1 + x1)*z2)/2 + 2*a3*b1*x2*z2 - 2*a3*b1^2*x2*z2 + 2*a3*b1*b2*x2*z2 - 2*a3*b1^2*b2*x2*z2 + 2*b1*b3*x2*z2 + 2*a2*b1*b3*x2*z2 + 2*a3*b1*b3*x2*z2 - 2*b1^2*b3*x2*z2 - 2*a2*b1^2*b3*x2*z2 - 2*a3*b1^2*b3*x2*z2 + a1*a3*x1*x2*z2 + (a3*b1*x2*(1 + x2)*z2)/2 + 2*b1*x3*z2 + 2*a1*b1*x3*z2 + a2*b1*x3*z2 + a1*a2*b1*x3*z2 + 2*a3*b1*x3*z2 - 2*b1^2*x3*z2 - a1*b1^2*x3*z2 - a2*b1^2*x3*z2 - 2*a3*b1^2*x3*z2 + a1*a2*b2*x3*z2 + 3*b1*b2*x3*z2 + 3*a1*b1*b2*x3*z2 + 2*a2*b1*b2*x3*z2 - 3*b1^2*b2*x3*z2 - 2*a1*b1^2*b2*x3*z2 - 2*a2*b1^2*b2*x3*z2 + 2*b1*b3*x3*z2 + 2*a3*b1*b3*x3*z2 - 2*b1^2*b3*x3*z2 - 2*a3*b1^2*b3*x3*z2 + 2*b1*b2*b3*x3*z2 - 2*b1^2*b2*b3*x3*z2 + a2*x1*x3*z2 + a1*a2*x1*x3*z2 + a3*x1*x3*z2 + a1*b2*x1*x3*z2 + b1*b2*x1*x3*z2 + a1*b1*x2*x3*z2 + a1*b2*x2*x3*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 - a3*b1^2*y1*z2 + a3*x1*y1*z2 + a3*b1*x1*y1*z2 + a3*x2*y1*z2 + a1*a3*x2*y1*z2 + a1*x3*y1*z2 + a1*a2*x3*y1*z2 + a3*x3*y1*z2 + a2*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + (a3*b1*y1*(1 + y1)*z2)/2 + 2*a3*b1*y2*z2 - 2*a3*b1^2*y2*z2 + 2*a3*b1*b2*y2*z2 - 2*a3*b1^2*b2*y2*z2 + 2*a2*b1*b3*y2*z2 + 2*a3*b1*b3*y2*z2 - 2*a2*b1^2*b3*y2*z2 - 2*a3*b1^2*b3*y2*z2 + a3*x1*y2*z2 + a1*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + a1*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + (a3*b1*y2*(1 + y2)*z2)/2 + b1*y3*z2 + a1*b1*y3*z2 + a2*b1*y3*z2 + a1*a2*b1*y3*z2 + 2*a3*b1*y3*z2 - b1^2*y3*z2 - a1*b1^2*y3*z2 - a2*b1^2*y3*z2 - 2*a3*b1^2*y3*z2 + a1*a2*b2*y3*z2 + 2*a1*b1*b2*y3*z2 + 2*a2*b1*b2*y3*z2 - 2*a1*b1^2*b2*y3*z2 - 2*a2*b1^2*b2*y3*z2 + 2*a3*b1*b3*y3*z2 - 2*a3*b1^2*b3*y3*z2 + a1*a2*x1*y3*z2 + b1*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*b1*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*b1*x3*y3*z2 + a1*b1*b2*x3*y3*z2 + a1*y1*y3*z2 + a2*y1*y3*z2 + a1*a2*y1*y3*z2 + a1*b1*x3*z1*z2 + a2*b1*x3*z1*z2 + a1*b2*x3*z1*z2 + a2*b2*x3*z1*z2 + a3*b2*x3*z1*z2 + a1*b1*y3*z1*z2 + a2*b1*y3*z1*z2 + a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a3*b2*y3*z1*z2 + (a3*b1*x1*z2*(1 + z2))/2 + (a3*b1*x2*z2*(1 + z2))/2 + (a1*b1*x3*z2*(1 + z2))/2 + (a2*b1*x3*z2*(1 + z2))/2 + (a1*b2*x3*z2*(1 + z2))/2 + (b1*b2*x3*z2*(1 + z2))/2 + (a3*b1*y1*z2*(1 + z2))/2 + (a3*b1*y2*z2*(1 + z2))/2 + (b1*y3*z2*(1 + z2))/2 + (a1*b1*y3*z2*(1 + z2))/2 + (a2*b1*y3*z2*(1 + z2))/2 + (a1*b2*y3*z2*(1 + z2))/2 + a1*b2*x1*z3 + (a1*b2*x1*(1 + x1)*z3)/2 + 4*b1*x2*z3 + 2*a1*b1*x2*z3 + 2*a2*b1*x2*z3 + 2*a3*b1*x2*z3 - 3*b1^2*x2*z3 - a1*b1^2*x2*z3 - 2*a2*b1^2*x2*z3 - 2*a3*b1^2*x2*z3 + a1*b2*x2*z3 + 4*b1*b2*x2*z3 + 2*a1*b1*b2*x2*z3 - 3*b1^2*b2*x2*z3 - 2*a1*b1^2*b2*x2*z3 + 2*b1*b3*x2*z3 + 2*a2*b1*b3*x2*z3 + 2*a3*b1*b3*x2*z3 - 2*b1^2*b3*x2*z3 - 2*a2*b1^2*b3*x2*z3 - 2*a3*b1^2*b3*x2*z3 + 2*b1*b2*b3*x2*z3 - 2*b1^2*b2*b3*x2*z3 + a1*x1*x2*z3 + b1*x1*x2*z3 + a1*b1*x1*x2*z3 + b1*b2*x1*x2*z3 + (b1*x2*(1 + x2)*z3)/2 + (a1*b1*x2*(1 + x2)*z3)/2 + (a1*b2*x2*(1 + x2)*z3)/2 + (b1*b2*x2*(1 + x2)*z3)/2 + a2*x1*x3*z3 + a1*a2*x1*x3*z3 + b2*x1*x3*z3 + a1*b2*x1*x3*z3 + a2*b2*x1*x3*z3 + a1*a2*b2*x1*x3*z3 + a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + a1*x2*x3*z3 + a1*a2*x2*x3*z3 + a1*a2*b1*x2*x3*z3 + a1*a2*b2*x2*x3*z3 + a1*b1*b2*x2*x3*z3 + a1*b2*y1*z3 + a1*b2*x1*y1*z3 + x2*y1*z3 + b2*x2*y1*z3 + a1*b2*x2*y1*z3 + a2*x3*y1*z3 + a1*a2*x3*y1*z3 + b2*x3*y1*z3 + a1*b2*x3*y1*z3 + a2*b2*x3*y1*z3 + a1*a2*b2*x3*y1*z3 + a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + (a1*b2*y1*(1 + y1)*z3)/2 + 2*a1*b1*y2*z3 + 2*a2*b1*y2*z3 + 2*a3*b1*y2*z3 - a1*b1^2*y2*z3 - 2*a2*b1^2*y2*z3 - 2*a3*b1^2*y2*z3 + a1*b2*y2*z3 + 2*a1*b1*b2*y2*z3 - 2*a1*b1^2*b2*y2*z3 + 2*a2*b1*b3*y2*z3 + 2*a3*b1*b3*y2*z3 - 2*a2*b1^2*b3*y2*z3 - 2*a3*b1^2*b3*y2*z3 + a1*b1*x1*y2*z3 + a1*b2*x1*y2*z3 + a1*b1*x2*y2*z3 + a1*b2*x2*y2*z3 + a1*a2*x3*y2*z3 + a1*b1*x3*y2*z3 + a1*a2*b1*x3*y2*z3 + a1*b2*x3*y2*z3 + a1*a2*b2*x3*y2*z3 + a1*y1*y2*z3 + (a1*b1*y2*(1 + y2)*z3)/2 + (a1*b2*y2*(1 + y2)*z3)/2 + a1*a2*x1*y3*z3 + a1*a2*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + a1*x2*y3*z3 + a1*a2*x2*y3*z3 + a1*b1*x2*y3*z3 + a1*a2*b1*x2*y3*z3 + a1*b2*x2*y3*z3 + a1*a2*b2*x2*y3*z3 + a1*b1*b2*x2*y3*z3 + a2*b1*x3*y3*z3 + a1*a2*y1*y3*z3 + a1*a2*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + a1*a2*y2*y3*z3 + a1*a2*b1*y2*y3*z3 + a1*a2*b2*y2*y3*z3 + b1*b2*z2*z3 - b1^2*b2*z2*z3 + 2*b1*b2*b3*z2*z3 - 2*b1^2*b2*b3*z2*z3 + a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + b1*b2*x1*z2*z3 + a1*b1*b2*x3*z2*z3 + a2*b2*y1*z2*z3 + a3*b2*y1*z2*z3 + a1*b1*b2*y3*z2*z3 + (b1*b2*z2*(1 + z2)*z3)/2;
end;
#####################################################################
#####################################################################
#Space Group No. 43 ( Fdd2)
#####################################################################
Acin43:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin43:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Bxyxzyzin43:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*b1 + b2*x1 + a1*b2*x1 + a2*b2*x1 + b1*x2 + b1*b2*x2 + x1*x2 + a1*b2*y1 + a2*b2*y1 + x2*y1 + b1*z2 + b1*b2*z2 + x1*z2 + y1*z2;
end;
#####################################################################
Cin43:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a1*a3*b2 + a1*a3*b1*b2 + a3*b1^2*b2 + a1*a3*b2^2 + a3*b1*b2^2 + a1*a3*b1*b2^2 + a1*a2*a3*b1*b2^2 + a1*a2*b3 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + 2*a1*a2*b2*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + 3*a1*b1*b2*b3 + 2*a2*b1*b2*b3 + a1*a2*b1*b2*b3 + a3*b1*b2*b3 + 2*a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + 2*a1*a2*a3*b1*b2*b3 + 2*a1*b1^2*b2*b3 + a2*b1^2*b2*b3 + a1*a2*b1^2*b2*b3 + a3*b1^2*b2*b3 + a1*a3*b1^2*b2*b3 + a1*b2^2*b3 + a1*a3*b2^2*b3 + a1*a2*a3*b2^2*b3 + 2*a1*b1*b2^2*b3 + a2*b1*b2^2*b3 + a1*a3*b1*b2^2*b3 + a2*a3*b1*b2^2*b3 + a1*b1^2*b2^2*b3 + a1*a2*b3^2 + a1*b2*b3^2 + a2*a3*x1 + 2*a2*a3*b1*x1 + a2*a3*b1^2*x1 + 2*a1*a3*b2*x1 + 2*a2*a3*b2*x1 + a3*b1*b2*x1 + 2*a1*a3*b1*b2*x1 + 2*a2*a3*b1*b2*x1 + a1*a2*a3*b1*b2*x1 + a2*a3*b1^2*b2*x1 + a2*a3*b2^2*x1 + a3*b1*b2^2*x1 + 2*a1*a2*b1*b3*x1 + 2*a2*a3*b1*b3*x1 + a1*a2*a3*b1*b3*x1 + a2*b1^2*b3*x1 + a2*a3*b1^2*b3*x1 + 2*a1*b2*b3*x1 + 2*a2*b2*b3*x1 + a3*b2*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + b1*b2*b3*x1 + a1*b1*b2*b3*x1 + a2*b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a2*a3*b1*b2*b3*x1 + a1*a2*a3*b1*b2*b3*x1 + b1^2*b2*b3*x1 + a2*a3*b2^2*b3*x1 + a1*a2*a3*b2^2*b3*x1 + a1*b1*b2^2*b3*x1 + a2*b1*b2^2*b3*x1 + (a2*b3*x1*(1 + x1))/2 + (b2*b3*x1*(1 + x1))/2 + a1*a2*a3*x2 + a3*b1*x2 + a2*a3*b1*x2 + a1*a2*a3*b1*x2 + a1*a3*b1^2*x2 + a1*a2*a3*b2*x2 + 2*a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a2*a3*b1*b2*x2 + a3*b1*b2^2*x2 + a1*a2*a3*b3*x2 + a2*b1*b3*x2 + a2*a3*b1*b3*x2 + b1^2*b3*x2 + a1*b1^2*b3*x2 + 2*a1*b2*b3*x2 + a1*a3*b2*b3*x2 + 2*b1*b2*b3*x2 + a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + b1^2*b2*b3*x2 + a1*a2*a3*b2^2*b3*x2 + b1*b2^2*b3*x2 + a2*b1*b2^2*b3*x2 + a1*a2*a3*x1*x2 + a1*a3*b1*x1*x2 + a2*a3*b1*x1*x2 + a1*a3*b1*b2*x1*x2 + a2*b3*x1*x2 + a1*a2*b3*x1*x2 + a2*b1*b3*x1*x2 + a1*a2*b1*b3*x1*x2 + a1*a3*b1*b3*x1*x2 + b2*b3*x1*x2 + (a1*a3*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a1*b3*x2*(1 + x2))/2 + (a1*a2*b3*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + (b1*b3*x2*(1 + x2))/2 + a1*a2*x3 + a1*a2*a3*x3 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*a2*b1^2*x3 + a2*a3*b1^2*x3 + a1*b2*x3 + 2*a1*a2*b2*x3 + 2*a1*a3*b2*x3 + 2*a1*a2*a3*b2*x3 + 2*b1*b2*x3 + 3*a1*b1*b2*x3 + 2*a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a2*a3*b1*b2*x3 + a1*b1^2*b2*x3 + a1*b2^2*x3 + b1*b2^2*x3 + a1*a2*b3*x3 + a2*b1*b3*x3 + a2*b1^2*b3*x3 + a1*b2*b3*x3 + 2*a1*a2*b2*b3*x3 + 2*a1*a3*b2*b3*x3 + a1*a2*a3*b2*b3*x3 + 3*b1*b2*b3*x3 + a1*b1*b2*b3*x3 + a2*b1*b2*b3*x3 + a1*a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a1*a2*a3*b1*b2*b3*x3 + b1^2*b2*b3*x3 + a1*b1^2*b2*b3*x3 + a2*b1^2*b2*b3*x3 + a1*b2^2*b3*x3 + b1*b2^2*b3*x3 + a2*x1*x3 + a1*a2*x1*x3 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a1*a2*b1*x1*x3 + a1*a2*a3*b1*x1*x3 + a1*b2*x1*x3 + a1*a2*b2*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + a2*b1*b2*x1*x3 + a1*a2*b3*x1*x3 + a1*a2*a3*b3*x1*x3 + a1*a2*b1*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + a2*b2*b3*x1*x3 + a1*a2*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + b1*b2*b3*x1*x3 + b1*x2*x3 + a1*b1*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + a1*a2*a3*b2*x2*x3 + b1*b2*x2*x3 + a2*b1*b2*x2*x3 + b1*b3*x2*x3 + a1*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + b1*b2*b3*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a1*a2*a3*x3*(1 + x3))/2 + (b1*b2*x3*(1 + x3))/2 + (a1*a2*b3*x3*(1 + x3))/2 + a1*a3*b2*y1 + a3*b1*b2*y1 + a1*a2*a3*b1*b2*y1 + a1*a3*b2^2*y1 + a3*b1*b2^2*y1 + a2*b3*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a1*a2*a3*b1*b3*y1 + 2*a1*b2*b3*y1 + 2*a2*b2*b3*y1 + a3*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + b1*b2*b3*y1 + a1*b1*b2*b3*y1 + a2*b1*b2*b3*y1 + a3*b1*b2*b3*y1 + b1^2*b2*b3*y1 + a1*b1*b2^2*b3*y1 + a2*b1*b2^2*b3*y1 + a2*a3*x1*y1 + a2*a3*b1*x1*y1 + a2*a3*b2*x1*y1 + a2*b3*x1*y1 + a1*a2*b3*x1*y1 + a2*a3*b3*x1*y1 + b2*b3*x1*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a1*a3*b2*x2*y1 + a2*a3*b2*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a1*a3*b3*x2*y1 + a2*a3*b3*x2*y1 + a1*b1*b3*x2*y1 + b2*b3*x2*y1 + a2*x3*y1 + a2*a3*x3*y1 + a1*b2*x3*y1 + a1*b1*b2*x3*y1 + a2*b1*b2*x3*y1 + b2*b3*x3*y1 + a1*b2*b3*x3*y1 + a2*b2*b3*x3*y1 + b1*b2*b3*x3*y1 + (b2*b3*y1*(1 + y1))/2 + a1*a2*a3*y2 + a1*a3*b1*y2 + a1*a2*a3*b1*y2 + a1*a3*b1^2*y2 + a1*a3*b2*y2 + a1*a2*a3*b2*y2 + a3*b1*b2*y2 + 2*a1*a3*b1*b2*y2 + a1*a3*b2^2*y2 + a3*b1*b2^2*y2 + a1*a2*b3*y2 + a1*a2*a3*b3*y2 + b1*b3*y2 + a1*b1*b3*y2 + a1*a3*b1*b3*y2 + b1^2*b3*y2 + a1*b1^2*b3*y2 + 2*a1*b2*b3*y2 + a1*a3*b2*b3*y2 + b1*b2*b3*y2 + a2*b1*b2*b3*y2 + a3*b1*b2*b3*y2 + b1^2*b2*b3*y2 + a2*b1*b2^2*b3*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a2*a3*b1*x1*y2 + a2*a3*b2*x1*y2 + a2*b3*x1*y2 + a2*a3*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*a2*x3*y2 + a1*a2*a3*x3*y2 + a1*b1*x3*y2 + a1*b2*x3*y2 + a2*b1*b2*x3*y2 + a1*a2*b3*x3*y2 + a1*a2*a3*b3*x3*y2 + a1*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + b1*b2*b3*x3*y2 + a1*a2*a3*y1*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + b2*b3*y1*y2 + (b1*b3*y2*(1 + y2))/2 + a1*a2*a3*y3 + a1*a2*b1*y3 + a2*a3*b1*y3 + a1*a2*b1^2*y3 + a2*a3*b1^2*y3 + 2*a1*a2*a3*b2*y3 + a1*b1*b2*y3 + a3*b1*b2*y3 + a1*b1^2*b2*y3 + a3*b1*b2^2*y3 + a2*b1*b3*y3 + a2*b1^2*b3*y3 + a1*b2*b3*y3 + a1*a2*a3*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a1*b1^2*b2*b3*y3 + a2*b1^2*b2*b3*y3 + a1*b2^2*b3*y3 + a1*a2*a3*x1*y3 + a2*a3*b1*x1*y3 + a1*a2*a3*b1*x1*y3 + a2*a3*b2*x1*y3 + a1*a2*a3*b2*x1*y3 + a1*b1*b2*x1*y3 + a2*b1*b2*x1*y3 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a1*a2*a3*x2*y3 + a1*a2*a3*b2*x2*y3 + b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a1*a2*a3*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a1*a2*a3*b3*x3*y3 + b1*b2*b3*x3*y3 + a2*a3*y1*y3 + a1*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a1*b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a2*b1*b2*y2*y3 + a1*b1*b3*y2*y3 + a1*b2*b3*y2*y3 + (a1*a2*a3*y3*(1 + y3))/2 + a2*a3*b1^2*(-a1 + z1) + a1*a3*b2*(-a1 + z1) + 2*a1*a3*b1*b2*(-a1 + z1) + a2*a3*b1*b2*(-a1 + z1) + a2*a3*b1^2*b2*(-a1 + z1) + a1*a3*b2^2*(-a1 + z1) + a2*a3*b2^2*(-a1 + z1) + a1*a2*b3*(-a1 + z1) + a2*a3*b3*(-a1 + z1) + a2*b1*b3*(-a1 + z1) + 2*a1*a2*b1*b3*(-a1 + z1) + a2*a3*b1*b3*(-a1 + z1) + a2*b1^2*b3*(-a1 + z1) + a2*a3*b1^2*b3*(-a1 + z1) + 2*a1*a3*b2*b3*(-a1 + z1) + a2*a3*b2*b3*(-a1 + z1) + a1*a2*a3*b2*b3*(-a1 + z1) + a2*a3*b1*b2*b3*(-a1 + z1) + a1*a2*a3*b1*b2*b3*(-a1 + z1) + a2*a3*b2^2*b3*(-a1 + z1) + a1*a2*a3*b2^2*b3*(-a1 + z1) + a2*a3*b1*x1*(-a1 + z1) + a2*a3*b2*x1*(-a1 + z1) + a2*b3*x1*(-a1 + z1) + a1*a2*b3*x1*(-a1 + z1) + a2*a3*b3*x1*(-a1 + z1) + a1*a3*b1*x2*(-a1 + z1) + a2*a3*b1*x2*(-a1 + z1) + a2*a3*b2*x2*(-a1 + z1) + a1*a3*b1*b2*x2*(-a1 + z1) + a2*b3*x2*(-a1 + z1) + a2*a3*b3*x2*(-a1 + z1) + a1*b1*b3*x2*(-a1 + z1) + a2*b1*b3*x2*(-a1 + z1) + a1*a2*b1*b3*x2*(-a1 + z1) + a1*a3*b1*b3*x2*(-a1 + z1) + a1*a2*b1*x3*(-a1 + z1) + a1*a2*a3*b1*x3*(-a1 + z1) + a1*a2*b2*x3*(-a1 + z1) + a1*a2*a3*b2*x3*(-a1 + z1) + a2*a3*b3*x3*(-a1 + z1) + a1*a2*a3*b3*x3*(-a1 + z1) + a1*a2*b1*b3*x3*(-a1 + z1) + a2*a3*b1*b3*x3*(-a1 + z1) + a1*a2*b2*b3*x3*(-a1 + z1) + a2*a3*b2*b3*x3*(-a1 + z1) + a2*a3*b1*y1*(-a1 + z1) + a2*a3*b2*y1*(-a1 + z1) + a2*b3*y1*(-a1 + z1) + a1*a2*b3*y1*(-a1 + z1) + a2*a3*b3*y1*(-a1 + z1) + a2*a3*b1*y2*(-a1 + z1) + a2*a3*b2*y2*(-a1 + z1) + a2*b3*y2*(-a1 + z1) + a2*a3*b3*y2*(-a1 + z1) + a2*a3*b1*y3*(-a1 + z1) + a1*a2*a3*b1*y3*(-a1 + z1) + a2*a3*b2*y3*(-a1 + z1) + a1*a2*a3*b2*y3*(-a1 + z1) + a2*a3*b3*y3*(-a1 + z1) + a1*a2*a3*b3*y3*(-a1 + z1) + (a2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + a1*a3*b2*(-a2 + z2) + a1*a3*b1*b2*(-a2 + z2) + a1*a3*b2^2*(-a2 + z2) + a1*b1*b3*(-a2 + z2) + a1*a3*b1*b3*(-a2 + z2) + 2*a1*a3*b2*b3*(-a2 + z2) + a1*a2*a3*b2*b3*(-a2 + z2) + a1*a2*a3*b2^2*b3*(-a2 + z2) + a1*a3*b2*x1*(-a2 + z2) + a2*a3*b2*x1*(-a2 + z2) + a1*a3*b1*b2*x1*(-a2 + z2) + a1*b3*x1*(-a2 + z2) + a2*b3*x1*(-a2 + z2) + a1*a3*b3*x1*(-a2 + z2) + a2*a3*b3*x1*(-a2 + z2) + a1*b1*b3*x1*(-a2 + z2) + a2*b1*b3*x1*(-a2 + z2) + a1*a2*b1*b3*x1*(-a2 + z2) + a1*a3*b1*b3*x1*(-a2 + z2) + a1*a2*b2*x3*(-a2 + z2) + a1*a2*a3*b2*x3*(-a2 + z2) + a1*a2*a3*b3*x3*(-a2 + z2) + a1*a2*b2*b3*x3*(-a2 + z2) + a1*a3*b2*y1*(-a2 + z2) + a2*a3*b2*y1*(-a2 + z2) + a1*b3*y1*(-a2 + z2) + a2*b3*y1*(-a2 + z2) + a1*a3*b3*y1*(-a2 + z2) + a2*a3*b3*y1*(-a2 + z2) + a1*a2*a3*b2*y3*(-a2 + z2) + a1*a2*a3*b3*y3*(-a2 + z2) + a1*a3*b2*(-a1 + z1)*(-a2 + z2) + a1*a3*b1*b2*(-a1 + z1)*(-a2 + z2) + a1*b3*(-a1 + z1)*(-a2 + z2) + a2*b3*(-a1 + z1)*(-a2 + z2) + a1*a2*b3*(-a1 + z1)*(-a2 + z2) + a1*a3*b3*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*(-a1 + z1)*(-a2 + z2) + a2*b1*b3*(-a1 + z1)*(-a2 + z2) + a1*a2*b1*b3*(-a1 + z1)*(-a2 + z2) + a1*a3*b1*b3*(-a1 + z1)*(-a2 + z2) + (a1*a3*b2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b3*(-a2 + z2)*(1 - a2 + z2))/2 + b1*b2*(-a3 + z3) + a3*b1*b2*(-a3 + z3) + b1*b2^2*(-a3 + z3) + a3*b1*b2^2*(-a3 + z3) + a1*a2*a3*b3*(-a3 + z3) + a1*a2*b1*b3*(-a3 + z3) + a1*a2*a3*b1*b3*(-a3 + z3) + 2*a1*a2*b2*b3*(-a3 + z3) + 2*a1*a3*b2*b3*(-a3 + z3) + a1*a2*a3*b2*b3*(-a3 + z3) + a1*a2*b1*b2*b3*(-a3 + z3) + a1*a2*a3*b1*b2*b3*(-a3 + z3) + a1*b2*x1*(-a3 + z3) + b1*b2*x1*(-a3 + z3) + a1*a2*b1*b3*x1*(-a3 + z3) + a2*a3*b1*b3*x1*(-a3 + z3) + a1*a2*b2*b3*x1*(-a3 + z3) + a2*a3*b2*b3*x1*(-a3 + z3) + b1*b2*b3*x1*(-a3 + z3) + b1*x2*(-a3 + z3) + a1*b1*x2*(-a3 + z3) + a1*b2*x2*(-a3 + z3) + b1*b2*x2*(-a3 + z3) + a1*a2*b3*x2*(-a3 + z3) + a1*a2*a3*b3*x2*(-a3 + z3) + a1*a2*b2*b3*x2*(-a3 + z3) + b1*b2*b3*x2*(-a3 + z3) + a1*a2*a3*b3*x3*(-a3 + z3) + b1*b2*b3*x3*(-a3 + z3) + a1*b2*y1*(-a3 + z3) + b1*b2*y1*(-a3 + z3) + b1*b2*b3*y1*(-a3 + z3) + a1*b1*y2*(-a3 + z3) + a1*b2*y2*(-a3 + z3) + b1*b2*y2*(-a3 + z3) + a1*a2*b3*y2*(-a3 + z3) + a1*a2*a3*b3*y2*(-a3 + z3) + b1*b2*b3*y2*(-a3 + z3) + b1*b2*y3*(-a3 + z3) + a1*a2*a3*b3*y3*(-a3 + z3) + b1*b2*b3*y3*(-a3 + z3) + a1*a2*b3*(-a1 + z1)*(-a3 + z3) + a2*a3*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b3*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b2*b3*(-a1 + z1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b3*(-a2 + z2)*(-a3 + z3) + a1*a2*b2*b3*(-a2 + z2)*(-a3 + z3) + (b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a2*b3*(-a3 + z3)*(1 - a3 + z3))/2;
end;
#####################################################################
#####################################################################
#Space Group No. 44 ( Imm2)
#####################################################################
Acin44:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin44:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin44:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Bphiin44:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*y1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + a2*b1*z1 + a1*b2*z1 + a2*b2*z1;
end;
#####################################################################
Bxyzin44:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*x1*x2 + b1*x1*x2 + x1*y2 + a1*x1*y2 + b1*x1*y2 + a1*x2*y2 + b1*x2*y2 + x1*z2 + a1*x1*z2 + b1*x1*z2 + a1*x2*z2 + b1*x2*z2;
end;
#####################################################################
Byxzin44:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*x1*x2 + b1*x2*y1 + x1*y2 + a1*x1*y2 + a1*x2*y2 + b1*x2*y2 + b1*y1*y2 + a1*x1*z2 + a1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
Cxyzin44:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a1*a2*a3*x2 + 2*a1*a2*a3*b1*x2 - 2*a1*a2*a3*b1^2*x2 + (5*a1*a2*b1*b3*x2)/2 - a1*a2*b1^2*b3*x2 + (3*a1*a2*b2*b3*x2)/2 + a1*a2*b1*b2*b3*x2 - a1*a2*b1^2*b2*b3*x2 + (3*a1*a3*x1*x2)/2 + (3*a1*a2*a3*x1*x2)/2 + 3*a3*b1*x1*x2 + a1*a3*b1*x1*x2 + (5*a2*a3*b1*x1*x2)/2 + 4*a1*a2*a3*b1*x1*x2 - a3*b1^2*x1*x2 - a2*a3*b1^2*x1*x2 - 3*a1*a2*a3*b1^2*x1*x2 + (3*a1*a3*b2*x1*x2)/2 + a1*a2*a3*b2*x1*x2 + (5*a3*b1*b2*x1*x2)/2 + 5*a1*a3*b1*b2*x1*x2 + 2*a2*a3*b1*b2*x1*x2 + 2*a1*a2*a3*b1*b2*x1*x2 - a3*b1^2*b2*x1*x2 - 3*a1*a3*b1^2*b2*x1*x2 - a2*a3*b1^2*b2*x1*x2 - 2*a1*a2*a3*b1^2*b2*x1*x2 + a1*b3*x1*x2 + a1*b1*b3*x1*x2 + (5*a2*b1*b3*x1*x2)/2 + (3*a1*a2*b1*b3*x1*x2)/2 - a2*b1^2*b3*x1*x2 - a1*a2*b1^2*b3*x1*x2 + (3*a1*b2*b3*x1*x2)/2 + (a1*a2*b2*b3*x1*x2)/2 + (7*a1*b1*b2*b3*x1*x2)/2 + (3*a2*b1*b2*b3*x1*x2)/2 + 2*a1*a2*b1*b2*b3*x1*x2 - 3*a1*b1^2*b2*b3*x1*x2 - a2*b1^2*b2*b3*x1*x2 - 2*a1*a2*b1^2*b2*b3*x1*x2 + (a1*a3*x1^2*x2)/2 + (a3*b1*x1^2*x2)/2 + (a1*a2*a3*b1*x1^2*x2)/2 + (a1*a2*a3*b2*x1^2*x2)/2 + (a1*a3*b1*b2*x1^2*x2)/2 + (a2*a3*b1*b2*x1^2*x2)/2 + (a1*a2*a3*x2^2)/2 + (a1*a2*b1*b3*x2^2)/2 + a1*a2*b2*b3*x2^2 + (a1*a2*b1*b2*b3*x2^2)/2 + (a1*a2*a3*x1*x2^2)/2 + (a3*b1*x1*x2^2)/2 + (a2*a3*b1*x1*x2^2)/2 + (a1*a2*a3*b1*x1*x2^2)/2 + (a1*a3*b2*x1*x2^2)/2 + (a1*a2*a3*b2*x1*x2^2)/2 + (a3*b1*b2*x1*x2^2)/2 + (a1*a3*b1*b2*x1*x2^2)/2 + (a2*a3*b1*b2*x1*x2^2)/2 + (a2*b1*b3*x1*x2^2)/2 + (a1*a2*b1*b3*x1*x2^2)/2 + (a1*b2*b3*x1*x2^2)/2 + (a1*a2*b2*b3*x1*x2^2)/2 + (a1*b1*b2*b3*x1*x2^2)/2 + (a2*b1*b2*b3*x1*x2^2)/2 + (a1*a2*a3*x2^3)/2 + (a1*a2*b2*b3*x2^3)/2 + (a1*a2*b1*b2*b3*x2^3)/2 + a2*x1*x3 + (3*a1*a2*x1*x3)/2 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + (a2*a3*b1*x1*x3)/2 + a1*a2*a3*b1*x1*x3 + (3*a1*b2*x1*x3)/2 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + (3*a1*a3*b2*x1*x3)/2 + a2*a3*b2*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + a1*a2*b1*b2*x1*x3 + a1*a3*b1*b2*x1*x3 + (3*a2*a3*b1*b2*x1*x3)/2 + a1*a2*a3*b1*b2*x1*x3 + (3*a1*a2*b3*x1*x3)/2 + a1*a2*a3*b3*x1*x3 + (3*a2*a3*b1*b3*x1*x3)/2 + a1*a2*a3*b1*b3*x1*x3 + (3*a1*a2*b2*b3*x1*x3)/2 + (3*a1*a3*b2*b3*x1*x3)/2 + (3*a1*a2*b1*b2*b3*x1*x3)/2 + (3*a1*a3*b1*b2*b3*x1*x3)/2 + (a1*a2*x1^2*x3)/2 + (a2*a3*b1*x1^2*x3)/2 + (a1*b2*x1^2*x3)/2 + (a1*a3*b2*x1^2*x3)/2 + (a2*a3*b1*b2*x1^2*x3)/2 + (a1*a2*b3*x1^2*x3)/2 + (a2*a3*b1*b3*x1^2*x3)/2 + (a1*a2*b2*b3*x1^2*x3)/2 + (a1*a3*b2*b3*x1^2*x3)/2 + (a1*a2*b1*b2*b3*x1^2*x3)/2 + (a1*a3*b1*b2*b3*x1^2*x3)/2 + 2*a2*a3*b1*x2*x3 - 2*a2*a3*b1^2*x2*x3 + a1*a2*x1*x2*x3 + a1*a3*x1*x2*x3 + a3*b1*x1*x2*x3 + a1*a3*b2*x1*x2*x3 + a2*a3*b2*x1*x2*x3 + a3*b1*b2*x1*x2*x3 + a1*a2*b3*x1*x2*x3 + a2*a3*b3*x1*x2*x3 + a2*a3*y1 + (3*a2*b1*b3*y1)/2 + (3*b2*b3*y1)/2 + (3*a1*b2*b3*y1)/2 + (3*a2*b2*b3*y1)/2 + (3*a2*a3*x1*y1)/2 + a2*a3*b1*x1*y1 + (3*a3*b2*x1*y1)/2 + a1*a3*b2*x1*y1 + a2*a3*b2*x1*y1 + (a2*b1*b3*x1*y1)/2 + b2*b3*x1*y1 + (a1*b2*b3*x1*y1)/2 + (a2*b2*b3*x1*y1)/2 + (a2*a3*b1*x1^2*y1)/2 + (a3*b2*x1^2*y1)/2 + (a1*a3*b2*x1^2*y1)/2 + (a2*a3*b2*x1^2*y1)/2 + 2*a3*x2*y1 + 2*a1*a3*x2*y1 + (3*a2*a3*x2*y1)/2 + (3*a1*a2*a3*x2*y1)/2 + (5*a3*b1*x2*y1)/2 + 5*a1*a3*b1*x2*y1 + (5*a2*a3*b1*x2*y1)/2 + 4*a1*a2*a3*b1*x2*y1 - 2*a3*b1^2*x2*y1 - 3*a1*a3*b1^2*x2*y1 - a2*a3*b1^2*x2*y1 - 3*a1*a2*a3*b1^2*x2*y1 + (3*a3*b2*x2*y1)/2 + (3*a1*a3*b2*x2*y1)/2 + a2*a3*b2*x2*y1 + a1*a2*a3*b2*x2*y1 + (5*a3*b1*b2*x2*y1)/2 + 5*a1*a3*b1*b2*x2*y1 + 4*a2*a3*b1*b2*x2*y1 + 2*a1*a2*a3*b1*b2*x2*y1 - 2*a3*b1^2*b2*x2*y1 - 3*a1*a3*b1^2*b2*x2*y1 - 3*a2*a3*b1^2*b2*x2*y1 - 2*a1*a2*a3*b1^2*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + (3*b1*b3*x2*y1)/2 + a1*b1*b3*x2*y1 + (3*a2*b1*b3*x2*y1)/2 + (3*a1*a2*b1*b3*x2*y1)/2 - a1*a2*b1^2*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + (a2*b2*b3*x2*y1)/2 + (3*a1*a2*b2*b3*x2*y1)/2 + (b1*b2*b3*x2*y1)/2 + 3*a1*a2*b1*b2*b3*x2*y1 - 2*a1*a2*b1^2*b2*b3*x2*y1 + a1*a3*x1*x2*y1 + a1*a2*a3*x1*x2*y1 + a1*a3*b1*x1*x2*y1 + a3*b2*x1*x2*y1 + a2*a3*b2*x1*x2*y1 + b1*b3*x1*x2*y1 + a2*b1*b3*x1*x2*y1 + a1*a2*b1*b3*x1*x2*y1 + a1*b2*b3*x1*x2*y1 + a1*a2*b2*b3*x1*x2*y1 + a1*b1*b2*b3*x1*x2*y1 + a2*b1*b2*b3*x1*x2*y1 + (a3*x2^2*y1)/2 + (a1*a3*x2^2*y1)/2 + (a1*a2*a3*x2^2*y1)/2 + (a1*a3*b1*x2^2*y1)/2 + (a2*a3*b1*x2^2*y1)/2 + (a1*a2*a3*b1*x2^2*y1)/2 + (a3*b2*x2^2*y1)/2 + (a1*a3*b2*x2^2*y1)/2 + (a2*a3*b2*x2^2*y1)/2 + (a1*a2*a3*b2*x2^2*y1)/2 + (a1*a3*b1*b2*x2^2*y1)/2 + (a2*a3*b1*b2*x2^2*y1)/2 + (a1*a2*b1*b3*x2^2*y1)/2 + (a1*a2*b2*b3*x2^2*y1)/2 + (a2*x3*y1)/2 + (3*a1*a2*x3*y1)/2 + a1*a2*a3*x3*y1 + a2*b1*x3*y1 + (3*a2*a3*b1*x3*y1)/2 + a1*a2*a3*b1*x3*y1 + b2*x3*y1 + (a1*b2*x3*y1)/2 + (a2*b2*x3*y1)/2 + a3*b2*x3*y1 + (a1*a3*b2*x3*y1)/2 + a1*a2*a3*b2*x3*y1 + (b1*b2*x3*y1)/2 + a1*b1*b2*x3*y1 + (a2*b1*b2*x3*y1)/2 + a1*a2*b1*b2*x3*y1 + (a3*b1*b2*x3*y1)/2 + a1*a3*b1*b2*x3*y1 + (a2*a3*b1*b2*x3*y1)/2 + a1*a2*a3*b1*b2*x3*y1 + (3*a2*b3*x3*y1)/2 + (3*a1*a2*b3*x3*y1)/2 + a2*a3*b3*x3*y1 + a1*a2*a3*b3*x3*y1 + (a2*a3*b1*b3*x3*y1)/2 + a1*a2*a3*b1*b3*x3*y1 + (3*a2*b2*b3*x3*y1)/2 + (3*a1*a2*b2*b3*x3*y1)/2 + (3*a3*b2*b3*x3*y1)/2 + (3*a1*a3*b2*b3*x3*y1)/2 + (3*a2*b1*b2*b3*x3*y1)/2 + (3*a1*a2*b1*b2*b3*x3*y1)/2 + (3*a3*b1*b2*b3*x3*y1)/2 + (3*a1*a3*b1*b2*b3*x3*y1)/2 + a2*x1*x3*y1 + a2*a3*b1*x1*x3*y1 + a1*b2*x1*x3*y1 + a1*a2*b2*x1*x3*y1 + a3*b2*x1*x3*y1 + a1*a3*b2*x1*x3*y1 + a2*a3*b1*b2*x1*x3*y1 + a2*b3*x1*x3*y1 + a2*a3*b1*b3*x1*x3*y1 + a1*a2*b1*b2*b3*x1*x3*y1 + a1*a3*b1*b2*b3*x1*x3*y1 + a2*x2*x3*y1 + a1*a2*x2*x3*y1 + a3*x2*x3*y1 + a1*a3*x2*x3*y1 + a3*b1*x2*x3*y1 + a3*b2*x2*x3*y1 + a1*a3*b2*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + a3*b1*b2*x2*x3*y1 + a2*b3*x2*x3*y1 + a1*a2*b3*x2*x3*y1 + a2*a3*b3*x2*x3*y1 + (a2*a3*y1^2)/2 + a2*b1*b3*y1^2 + b2*b3*y1^2 + a1*b2*b3*y1^2 + a2*b2*b3*y1^2 + (a2*a3*x1*y1^2)/2 + (a2*a3*b1*x1*y1^2)/2 + (a1*a3*b2*x1*y1^2)/2 + (a2*a3*b2*x1*y1^2)/2 + (a2*b1*b3*x1*y1^2)/2 + (a1*b2*b3*x1*y1^2)/2 + (a2*b2*b3*x1*y1^2)/2 + (a3*x2*y1^2)/2 + (a1*a3*x2*y1^2)/2 + (a2*a3*x2*y1^2)/2 + (a3*b1*x2*y1^2)/2 + (a1*a3*b1*x2*y1^2)/2 + (a1*a2*a3*b1*x2*y1^2)/2 + (a2*a3*b2*x2*y1^2)/2 + (a1*a2*a3*b2*x2*y1^2)/2 + (a3*b1*b2*x2*y1^2)/2 + (a1*a3*b1*b2*x2*y1^2)/2 + (a2*a3*b1*b2*x2*y1^2)/2 + (b1*b3*x2*y1^2)/2 + (a2*b1*b3*x2*y1^2)/2 + (a2*b2*b3*x2*y1^2)/2 + (b1*b2*b3*x2*y1^2)/2 + (a2*x3*y1^2)/2 + (a1*a2*x3*y1^2)/2 + (a2*a3*b1*x3*y1^2)/2 + (a1*b2*x3*y1^2)/2 + (a2*b2*x3*y1^2)/2 + (a1*a3*b2*x3*y1^2)/2 + (b1*b2*x3*y1^2)/2 + (a2*b1*b2*x3*y1^2)/2 + (a3*b1*b2*x3*y1^2)/2 + (a2*a3*b1*b2*x3*y1^2)/2 + (a2*b3*x3*y1^2)/2 + (a1*a2*b3*x3*y1^2)/2 + (a2*a3*b1*b3*x3*y1^2)/2 + (a2*b2*b3*x3*y1^2)/2 + (a1*a2*b2*b3*x3*y1^2)/2 + (a3*b2*b3*x3*y1^2)/2 + (a1*a3*b2*b3*x3*y1^2)/2 + (a2*b1*b2*b3*x3*y1^2)/2 + (a1*a2*b1*b2*b3*x3*y1^2)/2 + (a3*b1*b2*b3*x3*y1^2)/2 + (a1*a3*b1*b2*b3*x3*y1^2)/2 + (a2*a3*y1^3)/2 + (a2*b1*b3*y1^3)/2 + (b2*b3*y1^3)/2 + (a1*b2*b3*y1^3)/2 + (a2*b2*b3*y1^3)/2 + a1*a3*y2 + a1*a2*a3*y2 + 2*a3*b1*y2 + 2*a1*a3*b1*y2 + 2*a2*a3*b1*y2 + 2*a1*a2*a3*b1*y2 - 2*a3*b1^2*y2 - 2*a1*a3*b1^2*y2 - 2*a2*a3*b1^2*y2 - 2*a1*a2*a3*b1^2*y2 + (5*b1*b3*y2)/2 + (5*a1*b1*b3*y2)/2 + (5*a2*b1*b3*y2)/2 + (5*a1*a2*b1*b3*y2)/2 - b1^2*b3*y2 - a1*b1^2*b3*y2 - a2*b1^2*b3*y2 - a1*a2*b1^2*b3*y2 + (3*a1*b2*b3*y2)/2 + (3*a1*a2*b2*b3*y2)/2 + b1*b2*b3*y2 + a1*b1*b2*b3*y2 + a2*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 - b1^2*b2*b3*y2 - a1*b1^2*b2*b3*y2 - a2*b1^2*b2*b3*y2 - a1*a2*b1^2*b2*b3*y2 + 2*a3*x1*y2 + 2*a1*a3*x1*y2 + (3*a2*a3*x1*y2)/2 + (3*a1*a2*a3*x1*y2)/2 + 5*a3*b1*x1*y2 + 4*a1*a3*b1*x1*y2 + (7*a2*a3*b1*x1*y2)/2 + 4*a1*a2*a3*b1*x1*y2 - 3*a3*b1^2*x1*y2 - 3*a1*a3*b1^2*x1*y2 - 2*a2*a3*b1^2*x1*y2 - 3*a1*a2*a3*b1^2*x1*y2 + (3*a3*b2*x1*y2)/2 + (a1*a3*b2*x1*y2)/2 + a2*a3*b2*x1*y2 + a1*a2*a3*b2*x1*y2 + 3*a3*b1*b2*x1*y2 + 2*a1*a3*b1*b2*x1*y2 + 4*a2*a3*b1*b2*x1*y2 + 2*a1*a2*a3*b1*b2*x1*y2 - a3*b1^2*b2*x1*y2 - a1*a3*b1^2*b2*x1*y2 - 3*a2*a3*b1^2*b2*x1*y2 - 2*a1*a2*a3*b1^2*b2*x1*y2 + b3*x1*y2 + (3*a1*b3*x1*y2)/2 + a1*a2*b3*x1*y2 + a1*a3*b3*x1*y2 + (3*b1*b3*x1*y2)/2 + (3*a1*b1*b3*x1*y2)/2 + (a2*b1*b3*x1*y2)/2 + (5*a1*a2*b1*b3*x1*y2)/2 + (3*a3*b1*b3*x1*y2)/2 + a1*a3*b1*b3*x1*y2 - a1*b1^2*b3*x1*y2 - a1*a2*b1^2*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + (a2*b2*b3*x1*y2)/2 + (a1*a2*b2*b3*x1*y2)/2 + (3*a1*b1*b2*b3*x1*y2)/2 + (7*a2*b1*b2*b3*x1*y2)/2 + 2*a1*a2*b1*b2*b3*x1*y2 - a1*b1^2*b2*b3*x1*y2 - 3*a2*b1^2*b2*b3*x1*y2 - 2*a1*a2*b1^2*b2*b3*x1*y2 + (a3*x1^2*y2)/2 + (a1*a3*x1^2*y2)/2 + (a3*b1*x1^2*y2)/2 + (a1*a3*b1*x1^2*y2)/2 + (a2*a3*b1*x1^2*y2)/2 + (a1*a2*a3*b1*x1^2*y2)/2 + (a3*b2*x1^2*y2)/2 + (a1*a3*b2*x1^2*y2)/2 + (a2*a3*b2*x1^2*y2)/2 + (a1*a2*a3*b2*x1^2*y2)/2 + (a3*b1*b2*x1^2*y2)/2 + (a1*a3*b1*b2*x1^2*y2)/2 + (a2*a3*b1*b2*x1^2*y2)/2 + (a1*b3*x1^2*y2)/2 + (b1*b3*x1^2*y2)/2 + (a2*b1*b3*x1^2*y2)/2 + (a3*b1*b3*x1^2*y2)/2 + (a1*a3*x2*y2)/2 + a1*a2*a3*x2*y2 + (7*a3*b1*x2*y2)/2 + 3*a1*a3*b1*x2*y2 + 2*a2*a3*b1*x2*y2 - 3*a3*b1^2*x2*y2 - 2*a1*a3*b1^2*x2*y2 - 2*a2*a3*b1^2*x2*y2 + 3*a3*b1*b2*x2*y2 - 2*a3*b1^2*b2*x2*y2 + (3*b1*b3*x2*y2)/2 + a2*b1*b3*x2*y2 - b1^2*b3*x2*y2 + (a1*b2*b3*x2*y2)/2 + a1*a2*b2*b3*x2*y2 + (3*b1*b2*b3*x2*y2)/2 + (7*a1*b1*b2*b3*x2*y2)/2 + (7*a2*b1*b2*b3*x2*y2)/2 + a1*a2*b1*b2*b3*x2*y2 - b1^2*b2*b3*x2*y2 - 3*a1*b1^2*b2*b3*x2*y2 - 3*a2*b1^2*b2*b3*x2*y2 + a3*x1*x2*y2 + a1*a3*b1*x1*x2*y2 + a2*a3*b1*x1*x2*y2 + a1*a3*b2*x1*x2*y2 + a2*a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a1*b3*x1*x2*y2 + a2*b3*x1*x2*y2 + a3*b3*x1*x2*y2 + b1*b3*x1*x2*y2 + (a1*a3*x2^2*y2)/2 + (a1*a2*a3*x2^2*y2)/2 + (a3*b1*x2^2*y2)/2 + (a1*a3*b1*x2^2*y2)/2 + (a3*b1*b2*x2^2*y2)/2 + (a2*b1*b3*x2^2*y2)/2 + (a1*b2*b3*x2^2*y2)/2 + (a1*a2*b2*b3*x2^2*y2)/2 + (a1*b1*b2*b3*x2^2*y2)/2 + (a2*b1*b2*b3*x2^2*y2)/2 + (a1*a2*b1*b2*b3*x2^2*y2)/2 + 2*a3*b1*x3*y2 + 2*a2*a3*b1*x3*y2 - 2*a3*b1^2*x3*y2 - 2*a2*a3*b1^2*x3*y2 + x1*x3*y2 + a1*x1*x3*y2 + a2*x1*x3*y2 + a1*a2*x1*x3*y2 + a3*x1*x3*y2 + a1*a3*x1*x3*y2 + a3*b1*x1*x3*y2 + a1*a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a3*b1*b2*x1*x3*y2 + b3*x1*x3*y2 + a1*b3*x1*x3*y2 + a2*b3*x1*x3*y2 + a1*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a2*a3*b3*x1*x3*y2 + a3*y1*y2 + (3*a1*a3*y1*y2)/2 + a2*a3*y1*y2 + (3*a1*a2*a3*y1*y2)/2 + (9*a3*b1*y1*y2)/2 + (7*a2*a3*b1*y1*y2)/2 + 4*a1*a2*a3*b1*y1*y2 - 3*a3*b1^2*y1*y2 - 2*a2*a3*b1^2*y1*y2 - 3*a1*a2*a3*b1^2*y1*y2 + a3*b2*y1*y2 + (a1*a3*b2*y1*y2)/2 + a1*a2*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + 2*a1*a3*b1*b2*y1*y2 + 2*a2*a3*b1*b2*y1*y2 + 2*a1*a2*a3*b1*b2*y1*y2 - a1*a3*b1^2*b2*y1*y2 - a2*a3*b1^2*b2*y1*y2 - 2*a1*a2*a3*b1^2*b2*y1*y2 + (b3*y1*y2)/2 + (3*a1*b3*y1*y2)/2 + a2*b3*y1*y2 + a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a1*a3*b3*y1*y2 + 3*b1*b3*y1*y2 + (3*a1*b1*b3*y1*y2)/2 + (5*a2*b1*b3*y1*y2)/2 + (5*a1*a2*b1*b3*y1*y2)/2 + (a3*b1*b3*y1*y2)/2 + a1*a3*b1*b3*y1*y2 - b1^2*b3*y1*y2 - a1*b1^2*b3*y1*y2 - a2*b1^2*b3*y1*y2 - a1*a2*b1^2*b3*y1*y2 + 2*b2*b3*y1*y2 + (a1*b2*b3*y1*y2)/2 + 2*a2*b2*b3*y1*y2 + (3*a1*a2*b2*b3*y1*y2)/2 + (7*b1*b2*b3*y1*y2)/2 + 3*a1*b1*b2*b3*y1*y2 + 3*a2*b1*b2*b3*y1*y2 + 3*a1*a2*b1*b2*b3*y1*y2 - 2*b1^2*b2*b3*y1*y2 - 2*a1*b1^2*b2*b3*y1*y2 - 2*a2*b1^2*b2*b3*y1*y2 - 2*a1*a2*b1^2*b2*b3*y1*y2 + a2*a3*x1*y1*y2 + a1*a2*a3*x1*y1*y2 + a1*a3*b1*x1*y1*y2 + a2*a3*b2*x1*y1*y2 + a3*b1*b2*x1*y1*y2 + b3*x1*y1*y2 + a1*b1*b3*x1*y1*y2 + a2*b1*b3*x1*y1*y2 + a1*a2*b1*b3*x1*y1*y2 + a3*b1*b3*x1*y1*y2 + a2*b2*b3*x1*y1*y2 + a1*a2*b2*b3*x1*y1*y2 + a1*b1*b2*b3*x1*y1*y2 + a2*b1*b2*b3*x1*y1*y2 + a3*x2*y1*y2 + a1*a3*x2*y1*y2 + a2*a3*x2*y1*y2 + a3*b1*x2*y1*y2 + a1*a3*b1*x2*y1*y2 + a2*a3*b1*x2*y1*y2 + a3*b2*x2*y1*y2 + a1*a3*b2*x2*y1*y2 + a2*a3*b2*x2*y1*y2 + a3*b1*b2*x2*y1*y2 + a1*b3*x2*y1*y2 + a2*b3*x2*y1*y2 + a3*b3*x2*y1*y2 + a1*b2*b3*x2*y1*y2 + a2*b2*b3*x2*y1*y2 + b1*b2*b3*x2*y1*y2 + a1*b1*b2*b3*x2*y1*y2 + a2*b1*b2*b3*x2*y1*y2 + a1*x3*y1*y2 + a1*a2*x3*y1*y2 + a1*a3*x3*y1*y2 + a3*b1*x3*y1*y2 + a3*b2*x3*y1*y2 + a1*a3*b2*x3*y1*y2 + a2*a3*b2*x3*y1*y2 + a3*b1*b2*x3*y1*y2 + a1*b3*x3*y1*y2 + a1*a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + a2*a3*b3*x3*y1*y2 + (a3*y1^2*y2)/2 + (a1*a3*y1^2*y2)/2 + (a2*a3*y1^2*y2)/2 + (a2*a3*b1*y1^2*y2)/2 + (a1*a2*a3*b1*y1^2*y2)/2 + (a1*a3*b2*y1^2*y2)/2 + (a1*a2*a3*b2*y1^2*y2)/2 + (a1*a3*b1*b2*y1^2*y2)/2 + (a2*a3*b1*b2*y1^2*y2)/2 + (b3*y1^2*y2)/2 + (a1*b3*y1^2*y2)/2 + (b1*b3*y1^2*y2)/2 + (a3*b1*b3*y1^2*y2)/2 + (b2*b3*y1^2*y2)/2 + (a2*b2*b3*y1^2*y2)/2 + (b1*b2*b3*y1^2*y2)/2 + (a1*a3*y2^2)/2 + (a1*a2*a3*y2^2)/2 + (b1*b3*y2^2)/2 + (a1*b1*b3*y2^2)/2 + (a2*b1*b3*y2^2)/2 + (a1*a2*b1*b3*y2^2)/2 + a1*b2*b3*y2^2 + a1*a2*b2*b3*y2^2 + (b1*b2*b3*y2^2)/2 + (a1*b1*b2*b3*y2^2)/2 + (a2*b1*b2*b3*y2^2)/2 + (a1*a2*b1*b2*b3*y2^2)/2 + (a3*x1*y2^2)/2 + (a1*a3*x1*y2^2)/2 + (a2*a3*x1*y2^2)/2 + (a1*a2*a3*x1*y2^2)/2 + (a3*b1*x1*y2^2)/2 + (a1*a3*b1*x1*y2^2)/2 + (a1*a2*a3*b1*x1*y2^2)/2 + (a2*a3*b2*x1*y2^2)/2 + (a1*a2*a3*b2*x1*y2^2)/2 + (a3*b1*b2*x1*y2^2)/2 + (a1*a3*b1*b2*x1*y2^2)/2 + (a2*a3*b1*b2*x1*y2^2)/2 + (a1*b1*b3*x1*y2^2)/2 + (a1*a2*b1*b3*x1*y2^2)/2 + (a2*b2*b3*x1*y2^2)/2 + (a1*a2*b2*b3*x1*y2^2)/2 + (a1*b1*b2*b3*x1*y2^2)/2 + (a2*b1*b2*b3*x1*y2^2)/2 + (a1*a2*a3*x2*y2^2)/2 + (a1*a3*b1*x2*y2^2)/2 + (a3*b1*b2*x2*y2^2)/2 + (b1*b3*x2*y2^2)/2 + (a2*b1*b3*x2*y2^2)/2 + (a1*a2*b2*b3*x2*y2^2)/2 + (b1*b2*b3*x2*y2^2)/2 + (a1*a2*b1*b2*b3*x2*y2^2)/2 + (a3*y1*y2^2)/2 + (a2*a3*y1*y2^2)/2 + (a1*a2*a3*y1*y2^2)/2 + (a3*b1*y1*y2^2)/2 + (a1*a2*a3*b1*y1*y2^2)/2 + (a1*a2*a3*b2*y1*y2^2)/2 + (a1*a3*b1*b2*y1*y2^2)/2 + (a2*a3*b1*b2*y1*y2^2)/2 + (b1*b3*y1*y2^2)/2 + (a1*b1*b3*y1*y2^2)/2 + (a2*b1*b3*y1*y2^2)/2 + (a1*a2*b1*b3*y1*y2^2)/2 + (b2*b3*y1*y2^2)/2 + (a1*b2*b3*y1*y2^2)/2 + (a2*b2*b3*y1*y2^2)/2 + (a1*a2*b2*b3*y1*y2^2)/2 + (a1*a3*y2^3)/2 + (a1*a2*a3*y2^3)/2 + (a1*b2*b3*y2^3)/2 + (a1*a2*b2*b3*y2^3)/2 + (b1*b2*b3*y2^3)/2 + (a1*b1*b2*b3*y2^3)/2 + (a2*b1*b2*b3*y2^3)/2 + (a1*a2*b1*b2*b3*y2^3)/2 + (a2*x1*y3)/2 + (a1*a2*x1*y3)/2 + a1*a2*a3*x1*y3 + (a2*b1*x1*y3)/2 + a1*a2*b1*x1*y3 + (3*a2*a3*b1*x1*y3)/2 + a1*a2*a3*b1*x1*y3 + (3*b2*x1*y3)/2 + a1*b2*x1*y3 + a2*b2*x1*y3 + (3*a3*b2*x1*y3)/2 + (3*a1*a3*b2*x1*y3)/2 + a1*a2*a3*b2*x1*y3 + (3*b1*b2*x1*y3)/2 + (3*a2*b1*b2*x1*y3)/2 + (3*a3*b1*b2*x1*y3)/2 + (3*a2*a3*b1*b2*x1*y3)/2 + a1*a2*a3*b1*b2*x1*y3 + (a2*b3*x1*y3)/2 + (a1*a2*b3*x1*y3)/2 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + (a2*b1*b3*x1*y3)/2 + a1*a2*b1*b3*x1*y3 + (a2*a3*b1*b3*x1*y3)/2 + a1*a2*a3*b1*b3*x1*y3 + (3*b2*b3*x1*y3)/2 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + (3*a1*a2*b2*b3*x1*y3)/2 + (3*a3*b2*b3*x1*y3)/2 + (a1*a3*b2*b3*x1*y3)/2 + a2*a3*b2*b3*x1*y3 + (3*a1*a2*b1*b2*b3*x1*y3)/2 + (3*a1*a3*b1*b2*b3*x1*y3)/2 + (a2*x1^2*y3)/2 + (a1*a2*x1^2*y3)/2 + (a2*b1*x1^2*y3)/2 + (a2*a3*b1*x1^2*y3)/2 + (b2*x1^2*y3)/2 + (a3*b2*x1^2*y3)/2 + (a1*a3*b2*x1^2*y3)/2 + (b1*b2*x1^2*y3)/2 + (a2*b1*b2*x1^2*y3)/2 + (a3*b1*b2*x1^2*y3)/2 + (a2*a3*b1*b2*x1^2*y3)/2 + (a2*b3*x1^2*y3)/2 + (a1*a2*b3*x1^2*y3)/2 + (a2*b1*b3*x1^2*y3)/2 + (a2*a3*b1*b3*x1^2*y3)/2 + (b2*b3*x1^2*y3)/2 + (a1*a2*b2*b3*x1^2*y3)/2 + (a3*b2*b3*x1^2*y3)/2 + (a1*a3*b2*b3*x1^2*y3)/2 + (a1*a2*b1*b2*b3*x1^2*y3)/2 + (a1*a3*b1*b2*b3*x1^2*y3)/2 + 2*b1*x2*y3 + 2*a3*b1*x2*y3 + 2*a2*a3*b1*x2*y3 - 2*b1^2*x2*y3 - 2*a3*b1^2*x2*y3 - 2*a2*a3*b1^2*x2*y3 + 2*b1*b2*x2*y3 + 2*a3*b1*b2*x2*y3 - 2*b1^2*b2*x2*y3 - 2*a3*b1^2*b2*x2*y3 + 2*a2*b1*b3*x2*y3 - 2*a2*b1^2*b3*x2*y3 + 2*b1*b2*b3*x2*y3 + 2*a3*b1*b2*b3*x2*y3 - 2*b1^2*b2*b3*x2*y3 - 2*a3*b1^2*b2*b3*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a1*a3*x1*x2*y3 + a1*b2*x1*x2*y3 + a2*b2*x1*x2*y3 + a1*a3*b2*x1*x2*y3 + a2*a3*b2*x1*x2*y3 + b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*a3*b3*x1*x2*y3 + b1*b3*x1*x2*y3 + a3*b1*b3*x1*x2*y3 + b2*b3*x1*x2*y3 + a3*b2*b3*x1*x2*y3 + b1*b2*b3*x1*x2*y3 + a3*b1*b2*b3*x1*x2*y3 + (a1*a2*y1*y3)/2 + a2*a3*y1*y3 + a1*a2*a3*y1*y3 + (3*a2*b1*y1*y3)/2 + a1*a2*b1*y1*y3 + (a2*a3*b1*y1*y3)/2 + a1*a2*a3*b1*y1*y3 + (3*a2*b2*y1*y3)/2 + a1*a2*b2*y1*y3 + (a3*b2*y1*y3)/2 + (a1*a3*b2*y1*y3)/2 + a2*a3*b2*y1*y3 + a1*a2*a3*b2*y1*y3 + (a2*a3*b1*b2*y1*y3)/2 + a1*a2*a3*b1*b2*y1*y3 + (a1*a2*b3*y1*y3)/2 + a1*a2*a3*b3*y1*y3 + (3*a2*b1*b3*y1*y3)/2 + a1*a2*b1*b3*y1*y3 + (3*a2*a3*b1*b3*y1*y3)/2 + a1*a2*a3*b1*b3*y1*y3 + (b2*b3*y1*y3)/2 + a1*b2*b3*y1*y3 + (a2*b2*b3*y1*y3)/2 + (3*a1*a2*b2*b3*y1*y3)/2 + a3*b2*b3*y1*y3 + (a1*a3*b2*b3*y1*y3)/2 + a2*a3*b2*b3*y1*y3 + (3*a2*b1*b2*b3*y1*y3)/2 + (3*a1*a2*b1*b2*b3*y1*y3)/2 + (3*a3*b1*b2*b3*y1*y3)/2 + (3*a1*a3*b1*b2*b3*y1*y3)/2 + a2*x1*y1*y3 + a2*b1*x1*y1*y3 + a2*a3*b1*x1*y1*y3 + a1*b2*x1*y1*y3 + a1*a2*b2*x1*y1*y3 + a1*a3*b2*x1*y1*y3 + b1*b2*x1*y1*y3 + a2*b1*b2*x1*y1*y3 + a3*b1*b2*x1*y1*y3 + a2*a3*b1*b2*x1*y1*y3 + a2*b3*x1*y1*y3 + a2*b1*b3*x1*y1*y3 + a2*a3*b1*b3*x1*y1*y3 + b2*b3*x1*y1*y3 + a3*b2*b3*x1*y1*y3 + a1*a2*b1*b2*b3*x1*y1*y3 + a1*a3*b1*b2*b3*x1*y1*y3 + x2*y1*y3 + a1*x2*y1*y3 + a2*x2*y1*y3 + a3*x2*y1*y3 + a1*a3*x2*y1*y3 + b2*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + a1*a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + b3*x2*y1*y3 + a3*b3*x2*y1*y3 + a2*a3*b3*x2*y1*y3 + b1*b3*x2*y1*y3 + a3*b1*b3*x2*y1*y3 + b2*b3*x2*y1*y3 + a3*b2*b3*x2*y1*y3 + b1*b2*b3*x2*y1*y3 + a3*b1*b2*b3*x2*y1*y3 + (a1*a2*y1^2*y3)/2 + (a2*b1*y1^2*y3)/2 + (a2*a3*b1*y1^2*y3)/2 + (a2*b2*y1^2*y3)/2 + (a3*b2*y1^2*y3)/2 + (a1*a3*b2*y1^2*y3)/2 + (a2*a3*b1*b2*y1^2*y3)/2 + (a1*a2*b3*y1^2*y3)/2 + (a2*b1*b3*y1^2*y3)/2 + (a2*a3*b1*b3*y1^2*y3)/2 + (b2*b3*y1^2*y3)/2 + (a2*b2*b3*y1^2*y3)/2 + (a1*a2*b2*b3*y1^2*y3)/2 + (a1*a3*b2*b3*y1^2*y3)/2 + (a2*b1*b2*b3*y1^2*y3)/2 + (a1*a2*b1*b2*b3*y1^2*y3)/2 + (a3*b1*b2*b3*y1^2*y3)/2 + (a1*a3*b1*b2*b3*y1^2*y3)/2 + 2*b1*y2*y3 + 2*a2*a3*b1*y2*y3 - 2*b1^2*y2*y3 - 2*a2*a3*b1^2*y2*y3 + 2*b1*b2*y2*y3 + 2*a3*b1*b2*y2*y3 - 2*b1^2*b2*y2*y3 - 2*a3*b1^2*b2*y2*y3 + 2*b1*b3*y2*y3 + 2*a2*b1*b3*y2*y3 - 2*b1^2*b3*y2*y3 - 2*a2*b1^2*b3*y2*y3 + 2*b1*b2*b3*y2*y3 + 2*a3*b1*b2*b3*y2*y3 - 2*b1^2*b2*b3*y2*y3 - 2*a3*b1^2*b2*b3*y2*y3 + a1*x1*y2*y3 + a2*x1*y2*y3 + a3*x1*y2*y3 + a1*a3*x1*y2*y3 + a1*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + a1*a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + b3*x1*y2*y3 + a2*a3*b3*x1*y2*y3 + b1*b3*x1*y2*y3 + a3*b1*b3*x1*y2*y3 + b2*b3*x1*y2*y3 + a3*b2*b3*x1*y2*y3 + b1*b2*b3*x1*y2*y3 + a3*b1*b2*b3*x1*y2*y3 + y1*y2*y3 + a1*y1*y2*y3 + a2*y1*y2*y3 + a1*a3*y1*y2*y3 + b2*y1*y2*y3 + a1*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + a3*b2*y1*y2*y3 + a1*a3*b2*y1*y2*y3 + a2*a3*b2*y1*y2*y3 + b3*y1*y2*y3 + a2*a3*b3*y1*y2*y3 + b1*b3*y1*y2*y3 + a3*b1*b3*y1*y2*y3 + b2*b3*y1*y2*y3 + a3*b2*b3*y1*y2*y3 + b1*b2*b3*y1*y2*y3 + a3*b1*b2*b3*y1*y2*y3 + (3*a2*a3*x1*z1)/2 + 2*a2*a3*b1*x1*z1 + (a3*b2*x1*z1)/2 + 2*a1*a3*b2*x1*z1 + 2*a2*a3*b2*x1*z1 + a2*b3*x1*z1 + (3*a2*b1*b3*x1*z1)/2 + (3*a1*b2*b3*x1*z1)/2 + (3*a2*b2*b3*x1*z1)/2 + (a2*a3*x1^2*z1)/2 + (a2*a3*b1*x1^2*z1)/2 + (a1*a3*b2*x1^2*z1)/2 + (a2*a3*b2*x1^2*z1)/2 + (a3*x2*z1)/2 + 2*a1*a3*x2*z1 + (3*a2*a3*x2*z1)/2 + (a1*a2*a3*x2*z1)/2 + (a3*b1*x2*z1)/2 + 4*a1*a3*b1*x2*z1 + (9*a2*a3*b1*x2*z1)/2 + 3*a1*a2*a3*b1*x2*z1 - 3*a1*a3*b1^2*x2*z1 - 3*a2*a3*b1^2*x2*z1 - a1*a2*a3*b1^2*x2*z1 + (a3*b2*x2*z1)/2 + (a1*a3*b2*x2*z1)/2 + 2*a2*a3*b2*x2*z1 + 2*a1*a2*a3*b2*x2*z1 + (a3*b1*b2*x2*z1)/2 + 4*a1*a3*b1*b2*x2*z1 + 5*a2*a3*b1*b2*x2*z1 + 2*a1*a2*a3*b1*b2*x2*z1 - 3*a1*a3*b1^2*b2*x2*z1 - 3*a2*a3*b1^2*b2*x2*z1 - 2*a1*a2*a3*b1^2*b2*x2*z1 + a2*b3*x2*z1 + (a1*b1*b3*x2*z1)/2 + a2*b1*b3*x2*z1 + 3*a1*a2*b1*b3*x2*z1 - a1*a2*b1^2*b3*x2*z1 + a1*b2*b3*x2*z1 + (3*a2*b2*b3*x2*z1)/2 + 2*a1*a2*b2*b3*x2*z1 + (3*a1*b1*b2*b3*x2*z1)/2 + (3*a2*b1*b2*b3*x2*z1)/2 + 2*a1*a2*b1*b2*b3*x2*z1 - 2*a1*a2*b1^2*b2*b3*x2*z1 + a3*x1*x2*z1 + a2*a3*x1*x2*z1 + a3*b1*x1*x2*z1 + a1*a3*b1*x1*x2*z1 + a2*a3*b2*x1*x2*z1 + a3*b1*b2*x1*x2*z1 + a1*b3*x1*x2*z1 + a2*b1*b3*x1*x2*z1 + a1*a2*b1*b3*x1*x2*z1 + a1*b2*b3*x1*x2*z1 + a1*a2*b2*b3*x1*x2*z1 + a1*b1*b2*b3*x1*x2*z1 + a2*b1*b2*b3*x1*x2*z1 + (a1*a3*x2^2*z1)/2 + (a2*a3*x2^2*z1)/2 + (a1*a3*b1*x2^2*z1)/2 + (a2*a3*b1*x2^2*z1)/2 + (a1*a2*a3*b1*x2^2*z1)/2 + (a1*a3*b2*x2^2*z1)/2 + (a2*a3*b2*x2^2*z1)/2 + (a1*a2*a3*b2*x2^2*z1)/2 + (a1*a3*b1*b2*x2^2*z1)/2 + (a2*a3*b1*b2*x2^2*z1)/2 + (a1*a2*b1*b3*x2^2*z1)/2 + (a1*a2*b2*b3*x2^2*z1)/2 + (a1*a2*x3*z1)/2 + (a2*a3*x3*z1)/2 + a2*b1*x3*z1 + (3*a2*a3*b1*x3*z1)/2 + a1*a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + (a1*a2*b2*x3*z1)/2 + a1*a3*b2*x3*z1 + (3*a2*a3*b2*x3*z1)/2 + a1*b1*b2*x3*z1 + a1*a2*b1*b2*x3*z1 + a1*a3*b1*b2*x3*z1 + (a2*a3*b1*b2*x3*z1)/2 + a1*a2*a3*b1*b2*x3*z1 + (a1*a2*b3*x3*z1)/2 + (a2*a3*b3*x3*z1)/2 + (a2*a3*b1*b3*x3*z1)/2 + a1*a2*a3*b1*b3*x3*z1 + (a1*a2*b2*b3*x3*z1)/2 + (a1*a3*b2*b3*x3*z1)/2 + (a1*a2*b1*b2*b3*x3*z1)/2 + (a1*a3*b1*b2*b3*x3*z1)/2 + a1*a2*x1*x3*z1 + a2*a3*x1*x3*z1 + a1*a2*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + a1*a2*b3*x1*x3*z1 + a2*a3*b3*x1*x3*z1 + a1*a2*b2*b3*x1*x3*z1 + a1*a3*b2*b3*x1*x3*z1 + a1*a2*x2*x3*z1 + a3*x2*x3*z1 + a1*a3*x2*x3*z1 + a3*b1*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + a3*b1*b2*x2*x3*z1 + a1*a2*b3*x2*x3*z1 + a2*a3*b3*x2*x3*z1 + 2*a2*a3*y1*z1 + a3*b2*y1*z1 + a2*b3*y1*z1 + (a2*b1*b3*y1*z1)/2 + (3*b2*b3*y1*z1)/2 + (a1*b2*b3*y1*z1)/2 + (a2*b2*b3*y1*z1)/2 + a2*a3*x1*y1*z1 + a2*a3*b1*x1*y1*z1 + a3*b2*x1*y1*z1 + a1*a3*b2*x1*y1*z1 + a2*a3*b2*x1*y1*z1 + a2*b1*b3*x1*y1*z1 + a1*b2*b3*x1*y1*z1 + a2*b2*b3*x1*y1*z1 + a3*x2*y1*z1 + a2*a3*x2*y1*z1 + a1*a3*b1*x2*y1*z1 + a1*a2*a3*b1*x2*y1*z1 + a3*b2*x2*y1*z1 + a2*a3*b2*x2*y1*z1 + a1*a2*a3*b2*x2*y1*z1 + a1*a3*b1*b2*x2*y1*z1 + a2*a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*b3*x2*y1*z1 + b1*b3*x2*y1*z1 + a1*b1*b3*x2*y1*z1 + a2*b2*b3*x2*y1*z1 + a1*b1*b2*b3*x2*y1*z1 + a2*b1*b2*b3*x2*y1*z1 + a2*x3*y1*z1 + a2*a3*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + a2*b3*x3*y1*z1 + a2*a3*b3*x3*y1*z1 + (a2*a3*y1^2*z1)/2 + (a3*b2*y1^2*z1)/2 + (a2*b1*b3*y1^2*z1)/2 + (b2*b3*y1^2*z1)/2 + (a1*b2*b3*y1^2*z1)/2 + (a2*b2*b3*y1^2*z1)/2 + (3*a1*a3*y2*z1)/2 + 2*a2*a3*y2*z1 + (a1*a2*a3*y2*z1)/2 + (5*a3*b1*y2*z1)/2 + 2*a1*a3*b1*y2*z1 + (5*a2*a3*b1*y2*z1)/2 + 3*a1*a2*a3*b1*y2*z1 - a3*b1^2*y2*z1 - 2*a1*a3*b1^2*y2*z1 - 2*a2*a3*b1^2*y2*z1 - a1*a2*a3*b1^2*y2*z1 + (a3*b2*y2*z1)/2 + (3*a1*a3*b2*y2*z1)/2 + 2*a1*a2*a3*b2*y2*z1 + 3*a3*b1*b2*y2*z1 + 3*a1*a3*b1*b2*y2*z1 + 3*a2*a3*b1*b2*y2*z1 + 2*a1*a2*a3*b1*b2*y2*z1 - 2*a3*b1^2*b2*y2*z1 - a1*a3*b1^2*b2*y2*z1 - a2*a3*b1^2*b2*y2*z1 - 2*a1*a2*a3*b1^2*b2*y2*z1 + (3*b3*y2*z1)/2 + (a1*b3*y2*z1)/2 + (3*a2*b3*y2*z1)/2 + (a3*b3*y2*z1)/2 + 2*b1*b3*y2*z1 + (3*a1*b1*b3*y2*z1)/2 + (3*a2*b1*b3*y2*z1)/2 + 2*a1*a2*b1*b3*y2*z1 + (a3*b1*b3*y2*z1)/2 + a1*a3*b1*b3*y2*z1 - b1^2*b3*y2*z1 - a1*b1^2*b3*y2*z1 - a2*b1^2*b3*y2*z1 - a1*a2*b1^2*b3*y2*z1 + (3*b2*b3*y2*z1)/2 + a1*b2*b3*y2*z1 + (a2*b2*b3*y2*z1)/2 + 2*a1*a2*b2*b3*y2*z1 + 2*b1*b2*b3*y2*z1 + (7*a1*b1*b2*b3*y2*z1)/2 + (7*a2*b1*b2*b3*y2*z1)/2 + 2*a1*a2*b1*b2*b3*y2*z1 - 2*b1^2*b2*b3*y2*z1 - 2*a1*b1^2*b2*b3*y2*z1 - 2*a2*b1^2*b2*b3*y2*z1 - 2*a1*a2*b1^2*b2*b3*y2*z1 + a3*x1*y2*z1 + a2*a3*x1*y2*z1 + a1*a3*b1*x1*y2*z1 + a2*a3*b2*x1*y2*z1 + a3*b1*b2*x1*y2*z1 + a2*b3*x1*y2*z1 + a3*b3*x1*y2*z1 + a1*b1*b3*x1*y2*z1 + a1*a2*b1*b3*x1*y2*z1 + a2*b2*b3*x1*y2*z1 + a1*a2*b2*b3*x1*y2*z1 + a1*b1*b2*b3*x1*y2*z1 + a2*b1*b2*b3*x1*y2*z1 + a3*x2*y2*z1 + a1*a3*x2*y2*z1 + a2*a3*x2*y2*z1 + a3*b1*x2*y2*z1 + a1*a3*b1*x2*y2*z1 + a2*a3*b1*x2*y2*z1 + a1*a3*b2*x2*y2*z1 + a2*a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + a1*b3*x2*y2*z1 + a2*b3*x2*y2*z1 + a3*b3*x2*y2*z1 + b1*b3*x2*y2*z1 + a1*b1*b3*x2*y2*z1 + a2*b1*b3*x2*y2*z1 + a1*b2*b3*x2*y2*z1 + a2*b2*b3*x2*y2*z1 + x3*y2*z1 + a1*x3*y2*z1 + a2*x3*y2*z1 + a1*a2*x3*y2*z1 + a1*a3*x3*y2*z1 + a3*b1*x3*y2*z1 + a3*b2*x3*y2*z1 + a1*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a3*b1*b2*x3*y2*z1 + b3*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a1*a2*b3*x3*y2*z1 + a3*b3*x3*y2*z1 + a2*a3*b3*x3*y2*z1 + a3*y1*y2*z1 + a2*a3*y1*y2*z1 + a2*a3*b1*y1*y2*z1 + a1*a2*a3*b1*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a1*a2*a3*b2*y1*y2*z1 + a1*a3*b1*b2*y1*y2*z1 + a2*a3*b1*b2*y1*y2*z1 + a1*b3*y1*y2*z1 + a2*b3*y1*y2*z1 + a3*b3*y1*y2*z1 + a1*b1*b3*y1*y2*z1 + b2*b3*y1*y2*z1 + a2*b2*b3*y1*y2*z1 + a1*b1*b2*b3*y1*y2*z1 + a2*b1*b2*b3*y1*y2*z1 + (a1*a3*y2^2*z1)/2 + (a2*a3*y2^2*z1)/2 + (a3*b1*y2^2*z1)/2 + (a1*a2*a3*b1*y2^2*z1)/2 + (a3*b2*y2^2*z1)/2 + (a1*a2*a3*b2*y2^2*z1)/2 + (a1*a3*b1*b2*y2^2*z1)/2 + (a2*a3*b1*b2*y2^2*z1)/2 + (b1*b3*y2^2*z1)/2 + (a1*b1*b3*y2^2*z1)/2 + (a2*b1*b3*y2^2*z1)/2 + (a1*a2*b1*b3*y2^2*z1)/2 + (b2*b3*y2^2*z1)/2 + (a1*b2*b3*y2^2*z1)/2 + (a2*b2*b3*y2^2*z1)/2 + (a1*a2*b2*b3*y2^2*z1)/2 + (a1*a2*y3*z1)/2 + (a2*a3*y3*z1)/2 + (3*a2*b1*y3*z1)/2 + a1*a2*b1*y3*z1 + (a2*a3*b1*y3*z1)/2 + a1*a2*a3*b1*y3*z1 + (3*a1*b2*y3*z1)/2 + (3*a2*b2*y3*z1)/2 + (a1*a2*b2*y3*z1)/2 + (a2*a3*b2*y3*z1)/2 + (b1*b2*y3*z1)/2 + (a2*b1*b2*y3*z1)/2 + (a3*b1*b2*y3*z1)/2 + (a2*a3*b1*b2*y3*z1)/2 + a1*a2*a3*b1*b2*y3*z1 + (a1*a2*b3*y3*z1)/2 + (a2*a3*b3*y3*z1)/2 + (3*a2*b1*b3*y3*z1)/2 + a1*a2*b1*b3*y3*z1 + (3*a2*a3*b1*b3*y3*z1)/2 + a1*a2*a3*b1*b3*y3*z1 + (b2*b3*y3*z1)/2 + a1*b2*b3*y3*z1 + a2*b2*b3*y3*z1 + (a1*a2*b2*b3*y3*z1)/2 + (a3*b2*b3*y3*z1)/2 + (3*a1*a3*b2*b3*y3*z1)/2 + a2*a3*b2*b3*y3*z1 + (a1*a2*b1*b2*b3*y3*z1)/2 + (a1*a3*b1*b2*b3*y3*z1)/2 + a1*a2*x1*y3*z1 + a2*a3*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + a1*a2*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a1*a2*b3*x1*y3*z1 + a2*a3*b3*x1*y3*z1 + a1*a2*b2*b3*x1*y3*z1 + a1*a3*b2*b3*x1*y3*z1 + a1*x2*y3*z1 + a2*x2*y3*z1 + a1*a3*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a1*a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + a2*a3*b3*x2*y3*z1 + b1*b3*x2*y3*z1 + a3*b1*b3*x2*y3*z1 + b1*b2*b3*x2*y3*z1 + a3*b1*b2*b3*x2*y3*z1 + a2*a3*y1*y3*z1 + b2*y1*y3*z1 + a2*b2*y1*y3*z1 + a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + a2*a3*b3*y1*y3*z1 + a1*y2*y3*z1 + a2*y2*y3*z1 + a3*y2*y3*z1 + a1*a3*y2*y3*z1 + a1*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + a1*a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + a3*b3*y2*y3*z1 + a2*a3*b3*y2*y3*z1 + b1*b3*y2*y3*z1 + a3*b1*b3*y2*y3*z1 + b1*b2*b3*y2*y3*z1 + a3*b1*b2*b3*y2*y3*z1 + (a2*a3*b1*x1*z1^2)/2 + (a3*b2*x1*z1^2)/2 + (a1*a3*b2*x1*z1^2)/2 + (a2*a3*b2*x1*z1^2)/2 + (a2*b1*b3*x1*z1^2)/2 + (a1*b2*b3*x1*z1^2)/2 + (a2*b2*b3*x1*z1^2)/2 + (a3*x2*z1^2)/2 + (a1*a3*x2*z1^2)/2 + (a1*a2*a3*x2*z1^2)/2 + (a3*b1*x2*z1^2)/2 + (a1*a3*b1*x2*z1^2)/2 + (a1*a2*a3*b1*x2*z1^2)/2 + (a3*b2*x2*z1^2)/2 + (a2*a3*b2*x2*z1^2)/2 + (a1*a2*a3*b2*x2*z1^2)/2 + (a3*b1*b2*x2*z1^2)/2 + (a1*a3*b1*b2*x2*z1^2)/2 + (a2*a3*b1*b2*x2*z1^2)/2 + (a1*b1*b3*x2*z1^2)/2 + (a1*a2*b1*b3*x2*z1^2)/2 + (a2*b2*b3*x2*z1^2)/2 + (a1*a2*b2*b3*x2*z1^2)/2 + (a1*b1*b2*b3*x2*z1^2)/2 + (a2*b1*b2*b3*x2*z1^2)/2 + (a1*a2*x3*z1^2)/2 + (a2*a3*x3*z1^2)/2 + (a2*a3*b1*x3*z1^2)/2 + (a1*a2*b2*x3*z1^2)/2 + (a2*a3*b2*x3*z1^2)/2 + (a2*a3*b1*b2*x3*z1^2)/2 + (a1*a2*b3*x3*z1^2)/2 + (a2*a3*b3*x3*z1^2)/2 + (a2*a3*b1*b3*x3*z1^2)/2 + (a1*a2*b2*b3*x3*z1^2)/2 + (a1*a3*b2*b3*x3*z1^2)/2 + (a1*a2*b1*b2*b3*x3*z1^2)/2 + (a1*a3*b1*b2*b3*x3*z1^2)/2 + (a2*a3*y1*z1^2)/2 + (a3*b2*y1*z1^2)/2 + (a2*a3*y2*z1^2)/2 + (a1*a2*a3*y2*z1^2)/2 + (a2*a3*b1*y2*z1^2)/2 + (a1*a2*a3*b1*y2*z1^2)/2 + (a1*a3*b2*y2*z1^2)/2 + (a1*a2*a3*b2*y2*z1^2)/2 + (a1*a3*b1*b2*y2*z1^2)/2 + (a2*a3*b1*b2*y2*z1^2)/2 + (b3*y2*z1^2)/2 + (a1*b3*y2*z1^2)/2 + (a2*b3*y2*z1^2)/2 + (a3*b3*y2*z1^2)/2 + (b1*b3*y2*z1^2)/2 + (a1*a2*b1*b3*y2*z1^2)/2 + (a3*b1*b3*y2*z1^2)/2 + (a1*b2*b3*y2*z1^2)/2 + (a1*a2*b2*b3*y2*z1^2)/2 + (a1*b1*b2*b3*y2*z1^2)/2 + (a2*b1*b2*b3*y2*z1^2)/2 + (a1*a2*y3*z1^2)/2 + (a2*a3*y3*z1^2)/2 + (a2*b1*y3*z1^2)/2 + (a2*a3*b1*y3*z1^2)/2 + (a1*b2*y3*z1^2)/2 + (a2*b2*y3*z1^2)/2 + (a1*a2*b2*y3*z1^2)/2 + (a2*a3*b2*y3*z1^2)/2 + (b1*b2*y3*z1^2)/2 + (a2*b1*b2*y3*z1^2)/2 + (a3*b1*b2*y3*z1^2)/2 + (a2*a3*b1*b2*y3*z1^2)/2 + (a1*a2*b3*y3*z1^2)/2 + (a2*a3*b3*y3*z1^2)/2 + (a2*b1*b3*y3*z1^2)/2 + (a2*a3*b1*b3*y3*z1^2)/2 + (b2*b3*y3*z1^2)/2 + (a1*a2*b2*b3*y3*z1^2)/2 + (a3*b2*b3*y3*z1^2)/2 + (a1*a3*b2*b3*y3*z1^2)/2 + (a1*a2*b1*b2*b3*y3*z1^2)/2 + (a1*a3*b1*b2*b3*y3*z1^2)/2 + 2*a1*a2*a3*b1*z2 - 2*a1*a2*a3*b1^2*z2 + (3*a1*a2*b1*b3*z2)/2 + (a1*a2*b2*b3*z2)/2 + 4*a1*a2*b1*b2*b3*z2 - 3*a1*a2*b1^2*b2*b3*z2 + (a3*x1*z2)/2 + (3*a2*a3*x1*z2)/2 + (a1*a2*a3*x1*z2)/2 + (a3*b1*x1*z2)/2 + (5*a1*a3*b1*x1*z2)/2 + (3*a2*a3*b1*x1*z2)/2 + 5*a1*a2*a3*b1*x1*z2 - a1*a3*b1^2*x1*z2 - 3*a1*a2*a3*b1^2*x1*z2 + (a3*b2*x1*z2)/2 + a1*a3*b2*x1*z2 + 2*a2*a3*b2*x1*z2 + 2*a1*a2*a3*b2*x1*z2 + (7*a3*b1*b2*x1*z2)/2 + (5*a1*a3*b1*b2*x1*z2)/2 + 5*a2*a3*b1*b2*x1*z2 + 2*a1*a2*a3*b1*b2*x1*z2 - 3*a3*b1^2*b2*x1*z2 - a1*a3*b1^2*b2*x1*z2 - 3*a2*a3*b1^2*b2*x1*z2 - 2*a1*a2*a3*b1^2*b2*x1*z2 + a1*b3*x1*z2 + a2*b3*x1*z2 + (3*a1*a2*b3*x1*z2)/2 + (3*a1*a3*b3*x1*z2)/2 + (3*a1*b1*b3*x1*z2)/2 + a2*b1*b3*x1*z2 + 2*a1*a2*b1*b3*x1*z2 + (3*a1*a3*b1*b3*x1*z2)/2 - a1*b1^2*b3*x1*z2 - a1*a2*b1^2*b3*x1*z2 + a1*b2*b3*x1*z2 + (3*a2*b2*b3*x1*z2)/2 + (3*a1*a2*b2*b3*x1*z2)/2 + (5*a1*b1*b2*b3*x1*z2)/2 + (9*a2*b1*b2*b3*x1*z2)/2 + 2*a1*a2*b1*b2*b3*x1*z2 - a1*b1^2*b2*b3*x1*z2 - 3*a2*b1^2*b2*b3*x1*z2 - 2*a1*a2*b1^2*b2*b3*x1*z2 + (a3*x1^2*z2)/2 + (a2*a3*x1^2*z2)/2 + (a3*b1*x1^2*z2)/2 + (a2*a3*b1*x1^2*z2)/2 + (a1*a2*a3*b1*x1^2*z2)/2 + (a2*a3*b2*x1^2*z2)/2 + (a1*a2*a3*b2*x1^2*z2)/2 + (a2*a3*b1*b2*x1^2*z2)/2 + (a1*a2*b3*x1^2*z2)/2 + (a1*a3*b3*x1^2*z2)/2 + (a1*a2*b1*b3*x1^2*z2)/2 + (a1*a3*b1*b3*x1^2*z2)/2 + (a1*a3*x2*z2)/2 + (7*a3*b1*x2*z2)/2 + 4*a1*a3*b1*x2*z2 + 2*a2*a3*b1*x2*z2 - 3*a3*b1^2*x2*z2 - 2*a1*a3*b1^2*x2*z2 - 2*a2*a3*b1^2*x2*z2 + 4*a3*b1*b2*x2*z2 - 2*a3*b1^2*b2*x2*z2 + (5*a1*b1*b3*x2*z2)/2 + (3*a2*b1*b3*x2*z2)/2 + (5*a1*a2*b1*b3*x2*z2)/2 - a1*b1^2*b3*x2*z2 - a2*b1^2*b3*x2*z2 - a1*a2*b1^2*b3*x2*z2 + (a1*b2*b3*x2*z2)/2 + (a1*a2*b2*b3*x2*z2)/2 + 4*a1*b1*b2*b3*x2*z2 + 4*a2*b1*b2*b3*x2*z2 + 4*a1*a2*b1*b2*b3*x2*z2 - 2*a1*b1^2*b2*b3*x2*z2 - 2*a2*b1^2*b2*b3*x2*z2 - 2*a1*a2*b1^2*b2*b3*x2*z2 + a3*x1*x2*z2 + a2*a3*x1*x2*z2 + a1*a2*a3*x1*x2*z2 + a1*a3*b1*x1*x2*z2 + a2*a3*b1*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a2*a3*b2*x1*x2*z2 + a1*b3*x1*x2*z2 + (a1*a3*x2^2*z2)/2 + (a3*b1*x2^2*z2)/2 + (a1*a3*b1*x2^2*z2)/2 + (a3*b1*b2*x2^2*z2)/2 + (a2*b1*b3*x2^2*z2)/2 + (a1*b2*b3*x2^2*z2)/2 + (a1*a2*b2*b3*x2^2*z2)/2 + (a1*b1*b2*b3*x2^2*z2)/2 + (a2*b1*b2*b3*x2^2*z2)/2 + (a1*a2*b1*b2*b3*x2^2*z2)/2 + 2*a2*a3*b1*x3*z2 - 2*a2*a3*b1^2*x3*z2 + a1*a2*x1*x3*z2 + a2*a3*x1*x3*z2 + a3*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + a3*b1*b2*x1*x3*z2 + a1*a2*b3*x1*x3*z2 + a2*a3*b3*x1*x3*z2 + (3*a1*a3*y1*z2)/2 + 2*a2*a3*y1*z2 + (a1*a2*a3*y1*z2)/2 + a3*b1*y1*z2 + (a1*a3*b1*y1*z2)/2 + (7*a2*a3*b1*y1*z2)/2 + 5*a1*a2*a3*b1*y1*z2 - 2*a2*a3*b1^2*y1*z2 - 3*a1*a2*a3*b1^2*y1*z2 + (3*a3*b2*y1*z2)/2 + a1*a3*b2*y1*z2 + 2*a1*a2*a3*b2*y1*z2 + 3*a3*b1*b2*y1*z2 + (5*a1*a3*b1*b2*y1*z2)/2 + 3*a2*a3*b1*b2*y1*z2 + 2*a1*a2*a3*b1*b2*y1*z2 - 2*a3*b1^2*b2*y1*z2 - a1*a3*b1^2*b2*y1*z2 - a2*a3*b1^2*b2*y1*z2 - 2*a1*a2*a3*b1^2*b2*y1*z2 + b3*y1*z2 + a1*b3*y1*z2 + (a2*b3*y1*z2)/2 + (3*a1*a2*b3*y1*z2)/2 + (3*a3*b3*y1*z2)/2 + (3*a1*a3*b3*y1*z2)/2 + b1*b3*y1*z2 + a1*b1*b3*y1*z2 + 3*a1*a2*b1*b3*y1*z2 + (3*a3*b1*b3*y1*z2)/2 + (3*a1*a3*b1*b3*y1*z2)/2 - a1*a2*b1^2*b3*y1*z2 + (3*b2*b3*y1*z2)/2 + a1*b2*b3*y1*z2 + (a2*b2*b3*y1*z2)/2 + (3*a1*a2*b2*b3*y1*z2)/2 + (b1*b2*b3*y1*z2)/2 + 3*a1*a2*b1*b2*b3*y1*z2 - 2*a1*a2*b1^2*b2*b3*y1*z2 + a1*a3*x1*y1*z2 + a2*a3*x1*y1*z2 + a1*a2*a3*x1*y1*z2 + a3*b2*x1*y1*z2 + a2*a3*b2*x1*y1*z2 + a1*a3*b1*b2*x1*y1*z2 + b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a1*b1*b3*x1*y1*z2 + a1*a3*b1*b3*x1*y1*z2 + a2*b2*b3*x1*y1*z2 + a1*a2*b2*b3*x1*y1*z2 + a1*b1*b2*b3*x1*y1*z2 + a2*b1*b2*b3*x1*y1*z2 + a3*x2*y1*z2 + a1*a3*x2*y1*z2 + a2*a3*x2*y1*z2 + a3*b1*x2*y1*z2 + a1*a3*b1*x2*y1*z2 + a2*a3*b1*x2*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a2*a3*b2*x2*y1*z2 + b3*x2*y1*z2 + a1*b3*x2*y1*z2 + a1*b1*b3*x2*y1*z2 + a2*b1*b3*x2*y1*z2 + a1*b2*b3*x2*y1*z2 + a2*b2*b3*x2*y1*z2 + a2*x3*y1*z2 + a1*a2*x3*y1*z2 + a2*a3*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + a3*b1*b2*x3*y1*z2 + a2*b3*x3*y1*z2 + a1*a2*b3*x3*y1*z2 + a2*a3*b3*x3*y1*z2 + (a1*a3*y1^2*z2)/2 + (a2*a3*y1^2*z2)/2 + (a1*a3*b1*y1^2*z2)/2 + (a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b2*y1^2*z2)/2 + (a2*a3*b1*b2*y1^2*z2)/2 + (a2*b3*y1^2*z2)/2 + (a1*a2*b3*y1^2*z2)/2 + (a3*b3*y1^2*z2)/2 + (a1*a3*b3*y1^2*z2)/2 + (a1*a2*b1*b3*y1^2*z2)/2 + (a3*b1*b3*y1^2*z2)/2 + (a1*a3*b1*b3*y1^2*z2)/2 + (b2*b3*y1^2*z2)/2 + (a2*b2*b3*y1^2*z2)/2 + (b1*b2*b3*y1^2*z2)/2 + (5*a1*a2*b1*b3*y2*z2)/2 - a1*a2*b1^2*b3*y2*z2 + (a1*b2*b3*y2*z2)/2 + (a1*a2*b2*b3*y2*z2)/2 + (7*b1*b2*b3*y2*z2)/2 + (7*a1*b1*b2*b3*y2*z2)/2 + (7*a2*b1*b2*b3*y2*z2)/2 + 4*a1*a2*b1*b2*b3*y2*z2 - 3*b1^2*b2*b3*y2*z2 - 3*a1*b1^2*b2*b3*y2*z2 - 3*a2*b1^2*b2*b3*y2*z2 - 2*a1*a2*b1^2*b2*b3*y2*z2 + a3*x1*y2*z2 + a2*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + a1*a3*b1*x1*y2*z2 + a1*a2*a3*b1*x1*y2*z2 + a2*a3*b2*x1*y2*z2 + a1*a2*a3*b2*x1*y2*z2 + a1*a3*b1*b2*x1*y2*z2 + a2*a3*b1*b2*x1*y2*z2 + a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + b1*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a1*a2*b1*b3*x1*y2*z2 + a2*b2*b3*x1*y2*z2 + a1*a2*b2*b3*x1*y2*z2 + a1*b1*b2*b3*x1*y2*z2 + a2*b1*b2*b3*x1*y2*z2 + a1*a2*a3*x2*y2*z2 + a1*a3*b1*x2*y2*z2 + a3*b1*b2*x2*y2*z2 + a1*b1*b3*x2*y2*z2 + a1*a2*b2*b3*x2*y2*z2 + a1*b1*b2*b3*x2*y2*z2 + a2*b1*b2*b3*x2*y2*z2 + a1*a2*b1*b2*b3*x2*y2*z2 + a3*y1*y2*z2 + a2*a3*y1*y2*z2 + a1*a2*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + a1*a2*a3*b1*y1*y2*z2 + a1*a2*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a1*a3*b1*b2*y1*y2*z2 + a2*a3*b1*b2*y1*y2*z2 + a2*b3*y1*y2*z2 + a3*b3*y1*y2*z2 + b1*b3*y1*y2*z2 + a1*a2*b1*b3*y1*y2*z2 + b2*b3*y1*y2*z2 + a1*b2*b3*y1*y2*z2 + a2*b2*b3*y1*y2*z2 + a1*a2*b2*b3*y1*y2*z2 + b1*b2*b3*y1*y2*z2 + a1*b1*b2*b3*y1*y2*z2 + a2*b1*b2*b3*y1*y2*z2 + (a1*b2*b3*y2^2*z2)/2 + (a1*a2*b2*b3*y2^2*z2)/2 + (b1*b2*b3*y2^2*z2)/2 + (a1*b1*b2*b3*y2^2*z2)/2 + (a2*b1*b2*b3*y2^2*z2)/2 + (a1*a2*b1*b2*b3*y2^2*z2)/2 + 2*a2*a3*b1*y3*z2 - 2*a2*a3*b1^2*y3*z2 + 2*b1*b2*y3*z2 + 2*a3*b1*b2*y3*z2 - 2*b1^2*b2*y3*z2 - 2*a3*b1^2*b2*y3*z2 + 2*b1*b3*y3*z2 + 2*a2*b1*b3*y3*z2 + 2*a3*b1*b3*y3*z2 - 2*b1^2*b3*y3*z2 - 2*a2*b1^2*b3*y3*z2 - 2*a3*b1^2*b3*y3*z2 + 2*b1*b2*b3*y3*z2 + 2*a3*b1*b2*b3*y3*z2 - 2*b1^2*b2*b3*y3*z2 - 2*a3*b1^2*b2*b3*y3*z2 + a2*a3*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + a2*a3*b3*x1*y3*z2 + b1*b2*b3*x1*y3*z2 + a3*b1*b2*b3*x1*y3*z2 + a2*a3*y1*y3*z2 + b2*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a3*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + a2*a3*b3*y1*y3*z2 + b1*b2*b3*y1*y3*z2 + a3*b1*b2*b3*y1*y3*z2 + (a1*a2*a3*z1*z2)/2 + (3*a1*a3*b1*z1*z2)/2 + (a2*a3*b1*z1*z2)/2 + 2*a1*a2*a3*b1*z1*z2 - a1*a2*a3*b1^2*z1*z2 + a1*a2*a3*b2*z1*z2 + (a3*b1*b2*z1*z2)/2 + (5*a1*a3*b1*b2*z1*z2)/2 + 2*a2*a3*b1*b2*z1*z2 + 2*a1*a2*a3*b1*b2*z1*z2 - a1*a3*b1^2*b2*z1*z2 - a2*a3*b1^2*b2*z1*z2 - 2*a1*a2*a3*b1^2*b2*z1*z2 + (a1*a2*b3*z1*z2)/2 + (a1*a3*b3*z1*z2)/2 + a1*b1*b3*z1*z2 + (a2*b1*b3*z1*z2)/2 + (3*a1*a2*b1*b3*z1*z2)/2 + (a1*a3*b1*b3*z1*z2)/2 - a1*a2*b1^2*b3*z1*z2 + (a1*b2*b3*z1*z2)/2 + a1*a2*b2*b3*z1*z2 + (3*a1*b1*b2*b3*z1*z2)/2 + (3*a2*b1*b2*b3*z1*z2)/2 + 2*a1*a2*b1*b2*b3*z1*z2 - 2*a1*a2*b1^2*b2*b3*z1*z2 + a1*a3*b1*x1*z1*z2 + a3*b2*x1*z1*z2 + a1*a3*b2*x1*z1*z2 + a2*a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + a1*b3*x1*z1*z2 + a1*a2*b3*x1*z1*z2 + a1*a3*b3*x1*z1*z2 + a1*b1*b3*x1*z1*z2 + a1*a2*b1*b3*x1*z1*z2 + a2*b2*b3*x1*z1*z2 + a1*a2*b2*b3*x1*z1*z2 + a1*b1*b2*b3*x1*z1*z2 + a2*b1*b2*b3*x1*z1*z2 + a3*x2*z1*z2 + a1*a3*x2*z1*z2 + a1*a2*a3*x2*z1*z2 + a3*b1*x2*z1*z2 + a1*a3*b1*x2*z1*z2 + a2*a3*b1*x2*z1*z2 + a3*b2*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a2*a3*b2*x2*z1*z2 + a1*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + a1*a2*b1*b3*x2*z1*z2 + a1*b2*b3*x2*z1*z2 + a2*b2*b3*x2*z1*z2 + a1*a2*b2*b3*x2*z1*z2 + a1*a2*x3*z1*z2 + a2*a3*x3*z1*z2 + a1*a3*b2*x3*z1*z2 + a2*a3*b2*x3*z1*z2 + a3*b1*b2*x3*z1*z2 + a1*a2*b3*x3*z1*z2 + a2*a3*b3*x3*z1*z2 + a2*a3*y1*z1*z2 + a2*a3*b1*y1*z1*z2 + a1*a2*a3*b1*y1*z1*z2 + a3*b2*y1*z1*z2 + a1*a3*b2*y1*z1*z2 + a1*a2*a3*b2*y1*z1*z2 + a1*a3*b1*b2*y1*z1*z2 + a2*a3*b1*b2*y1*z1*z2 + a1*b3*y1*z1*z2 + b1*b3*y1*z1*z2 + a2*b1*b3*y1*z1*z2 + a1*b2*b3*y1*z1*z2 + a1*b1*b2*b3*y1*z1*z2 + a2*b1*b2*b3*y1*z1*z2 + a2*a3*y2*z1*z2 + a1*a2*a3*y2*z1*z2 + a3*b1*y2*z1*z2 + a1*a2*a3*b1*y2*z1*z2 + a1*a2*a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + a1*a3*b1*b2*y2*z1*z2 + a2*a3*b1*b2*y2*z1*z2 + b3*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + b1*b3*y2*z1*z2 + a2*a3*y3*z1*z2 + a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a1*a3*b2*y3*z1*z2 + a2*a3*b2*y3*z1*z2 + a2*a3*b3*y3*z1*z2 + b2*b3*y3*z1*z2 + a3*b2*b3*y3*z1*z2 + b1*b2*b3*y3*z1*z2 + a3*b1*b2*b3*y3*z1*z2 + (a1*a2*a3*z1^2*z2)/2 + (a1*a3*b1*z1^2*z2)/2 + (a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b2*z1^2*z2)/2 + (a3*b1*b2*z1^2*z2)/2 + (a2*a3*b1*b2*z1^2*z2)/2 + (a1*a2*b3*z1^2*z2)/2 + (a1*a3*b3*z1^2*z2)/2 + (a2*b1*b3*z1^2*z2)/2 + (a1*a3*b1*b3*z1^2*z2)/2 + (a1*b2*b3*z1^2*z2)/2 + (a1*a2*b2*b3*z1^2*z2)/2 + (a1*b1*b2*b3*z1^2*z2)/2 + (a2*b1*b2*b3*z1^2*z2)/2 + (a1*a2*a3*z2^2)/2 + a1*a2*b1*b3*z2^2 + (a1*a2*b2*b3*z2^2)/2 + (a1*a2*b1*b2*b3*z2^2)/2 + (a1*a2*a3*x1*z2^2)/2 + (a1*a3*b1*x1*z2^2)/2 + (a1*a2*a3*b1*x1*z2^2)/2 + (a3*b2*x1*z2^2)/2 + (a2*a3*b2*x1*z2^2)/2 + (a1*a2*a3*b2*x1*z2^2)/2 + (a3*b1*b2*x1*z2^2)/2 + (a1*a3*b1*b2*x1*z2^2)/2 + (a2*a3*b1*b2*x1*z2^2)/2 + (a1*b1*b3*x1*z2^2)/2 + (a1*a2*b1*b3*x1*z2^2)/2 + (a2*b2*b3*x1*z2^2)/2 + (a1*a2*b2*b3*x1*z2^2)/2 + (a1*b1*b2*b3*x1*z2^2)/2 + (a2*b1*b2*b3*x1*z2^2)/2 + (a1*a3*b1*x2*z2^2)/2 + (a3*b1*b2*x2*z2^2)/2 + (a1*b1*b3*x2*z2^2)/2 + (a1*a2*b1*b3*x2*z2^2)/2 + (a1*b1*b2*b3*x2*z2^2)/2 + (a2*b1*b2*b3*x2*z2^2)/2 + (a1*a2*b1*b2*b3*x2*z2^2)/2 + (a2*a3*y1*z2^2)/2 + (a1*a2*a3*y1*z2^2)/2 + (a1*a2*a3*b1*y1*z2^2)/2 + (a3*b2*y1*z2^2)/2 + (a1*a2*a3*b2*y1*z2^2)/2 + (a1*a3*b1*b2*y1*z2^2)/2 + (a2*a3*b1*b2*y1*z2^2)/2 + (a1*a2*b1*b3*y1*z2^2)/2 + (a1*a2*b2*b3*y1*z2^2)/2 + (a1*a2*b1*b3*y2*z2^2)/2 + (a1*a2*b1*b2*b3*y2*z2^2)/2 + (a1*a2*a3*b1*z1*z2^2)/2 + (a1*a2*a3*b2*z1*z2^2)/2 + (a1*a3*b1*b2*z1*z2^2)/2 + (a2*a3*b1*b2*z1*z2^2)/2 + (a1*a2*b1*b3*z1*z2^2)/2 + (a1*a2*b2*b3*z1*z2^2)/2 + (a1*a2*a3*z2^3)/2 + (a1*a2*b1*b3*z2^3)/2 + (a1*a2*b1*b2*b3*z2^3)/2 + (3*a2*x1*z3)/2 + (a1*a2*x1*z3)/2 + a1*a2*a3*x1*z3 + (a1*a2*b1*x1*z3)/2 + a1*a2*a3*b1*x1*z3 + (a1*b2*x1*z3)/2 + (a1*a2*b2*x1*z3)/2 + (a1*a3*b2*x1*z3)/2 + (3*a2*a3*b2*x1*z3)/2 + a1*a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + (a1*a2*b1*b2*x1*z3)/2 + (a1*a3*b1*b2*x1*z3)/2 + (3*a2*a3*b1*b2*x1*z3)/2 + a1*a2*a3*b1*b2*x1*z3 + (3*a2*a3*b3*x1*z3)/2 + a1*a2*a3*b3*x1*z3 + (3*a1*a2*b1*b3*x1*z3)/2 + a1*a2*a3*b1*b3*x1*z3 + (3*a1*a2*b2*b3*x1*z3)/2 + (3*a2*a3*b2*b3*x1*z3)/2 + (3*a1*a2*b1*b2*b3*x1*z3)/2 + (3*a1*a3*b1*b2*b3*x1*z3)/2 + (a2*x1^2*z3)/2 + (a1*a2*x1^2*z3)/2 + (a1*a2*b1*x1^2*z3)/2 + (a1*b2*x1^2*z3)/2 + (a1*a2*b2*x1^2*z3)/2 + (a1*a3*b2*x1^2*z3)/2 + (a2*a3*b2*x1^2*z3)/2 + (a1*a2*b1*b2*x1^2*z3)/2 + (a1*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b3*x1^2*z3)/2 + (a1*a2*b1*b3*x1^2*z3)/2 + (a1*a2*b2*b3*x1^2*z3)/2 + (a2*a3*b2*b3*x1^2*z3)/2 + (a1*a2*b1*b2*b3*x1^2*z3)/2 + (a1*a3*b1*b2*b3*x1^2*z3)/2 + (3*a1*x2*z3)/2 + a1*a2*x2*z3 + (3*a1*a3*x2*z3)/2 + a1*a2*a3*x2*z3 + 2*a1*b1*x2*z3 + (9*a2*b1*x2*z3)/2 + a1*a2*b1*x2*z3 + 2*a1*a3*b1*x2*z3 + 2*a2*a3*b1*x2*z3 + a1*a2*a3*b1*x2*z3 - 2*a1*b1^2*x2*z3 - 3*a2*b1^2*x2*z3 - 2*a1*a3*b1^2*x2*z3 - 2*a2*a3*b1^2*x2*z3 + (3*a1*b2*x2*z3)/2 + (3*a1*a3*b2*x2*z3)/2 + 2*a1*b1*b2*x2*z3 + 2*a1*a3*b1*b2*x2*z3 + 2*a2*a3*b1*b2*x2*z3 - 2*a1*b1^2*b2*x2*z3 - 2*a1*a3*b1^2*b2*x2*z3 - 2*a2*a3*b1^2*b2*x2*z3 + (9*a2*a3*b1*b3*x2*z3)/2 - 3*a2*a3*b1^2*b3*x2*z3 + 2*a2*a3*b1*b2*b3*x2*z3 - 2*a2*a3*b1^2*b2*b3*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + a1*a2*a3*x1*x2*z3 + a1*b1*x1*x2*z3 + a2*b1*x1*x2*z3 + a3*b1*x1*x2*z3 + a1*a3*b1*x1*x2*z3 + a2*a3*b1*x1*x2*z3 + a3*b1*b2*x1*x2*z3 + a1*a3*b1*b2*x1*x2*z3 + a2*a3*b1*b2*x1*x2*z3 + a1*a2*b3*x1*x2*z3 + a1*a2*a3*b3*x1*x2*z3 + a1*a3*b2*b3*x1*x2*z3 + a2*a3*b2*b3*x1*x2*z3 + a1*a3*b1*b2*b3*x1*x2*z3 + a2*a3*b1*b2*b3*x1*x2*z3 + (a1*x2^2*z3)/2 + (a1*a3*x2^2*z3)/2 + (a2*b1*x2^2*z3)/2 + (a1*b2*x2^2*z3)/2 + (a1*a3*b2*x2^2*z3)/2 + (a2*a3*b1*b3*x2^2*z3)/2 + (a2*y1*z3)/2 + (3*a1*a2*y1*z3)/2 + a1*a2*a3*y1*z3 + a2*b1*y1*z3 + (a1*a2*b1*y1*z3)/2 + a2*a3*b1*y1*z3 + a1*a2*a3*b1*y1*z3 + (3*b2*y1*z3)/2 + (3*a1*b2*y1*z3)/2 + (3*a1*a2*b2*y1*z3)/2 + (3*a3*b2*y1*z3)/2 + (3*a1*a3*b2*y1*z3)/2 + (a2*a3*b2*y1*z3)/2 + a1*a2*a3*b2*y1*z3 + (b1*b2*y1*z3)/2 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + (a1*a2*b1*b2*y1*z3)/2 + a3*b1*b2*y1*z3 + (a1*a3*b1*b2*y1*z3)/2 + (a2*a3*b1*b2*y1*z3)/2 + a1*a2*a3*b1*b2*y1*z3 + (a2*a3*b3*y1*z3)/2 + a1*a2*a3*b3*y1*z3 + (3*a2*b1*b3*y1*z3)/2 + (3*a1*a2*b1*b3*y1*z3)/2 + a2*a3*b1*b3*y1*z3 + a1*a2*a3*b1*b3*y1*z3 + (3*a2*b2*b3*y1*z3)/2 + (3*a1*a2*b2*b3*y1*z3)/2 + (3*a2*a3*b2*b3*y1*z3)/2 + (3*a2*b1*b2*b3*y1*z3)/2 + (3*a1*a2*b1*b2*b3*y1*z3)/2 + (3*a3*b1*b2*b3*y1*z3)/2 + (3*a1*a3*b1*b2*b3*y1*z3)/2 + a2*x1*y1*z3 + a1*a2*x1*y1*z3 + a2*a3*x1*y1*z3 + a1*a2*b1*x1*y1*z3 + a1*b2*x1*y1*z3 + a1*a2*b2*x1*y1*z3 + a3*b2*x1*y1*z3 + a2*a3*b2*x1*y1*z3 + a1*a2*b1*b2*x1*y1*z3 + a1*a3*b1*b2*x1*y1*z3 + a2*a3*b1*b2*x1*y1*z3 + a2*b3*x1*y1*z3 + a1*a2*b1*b3*x1*y1*z3 + a1*a3*b2*b3*x1*y1*z3 + a2*a3*b2*b3*x1*y1*z3 + a1*a2*b1*b2*b3*x1*y1*z3 + a1*a3*b1*b2*b3*x1*y1*z3 + a1*x2*y1*z3 + a2*x2*y1*z3 + a3*x2*y1*z3 + a2*a3*x2*y1*z3 + a1*a2*a3*x2*y1*z3 + a2*b1*x2*y1*z3 + a3*b1*x2*y1*z3 + a1*a3*b1*x2*y1*z3 + a2*a3*b1*x2*y1*z3 + a1*b2*x2*y1*z3 + a3*b2*x2*y1*z3 + a3*b1*b2*x2*y1*z3 + a1*a3*b1*b2*x2*y1*z3 + a2*a3*b1*b2*x2*y1*z3 + a2*b3*x2*y1*z3 + a1*a2*b3*x2*y1*z3 + a2*a3*b3*x2*y1*z3 + a1*a2*a3*b3*x2*y1*z3 + a1*a3*b1*b3*x2*y1*z3 + a2*a3*b2*b3*x2*y1*z3 + a1*a3*b1*b2*b3*x2*y1*z3 + a2*a3*b1*b2*b3*x2*y1*z3 + (a2*y1^2*z3)/2 + (a1*a2*y1^2*z3)/2 + (a1*a2*b1*y1^2*z3)/2 + (b2*y1^2*z3)/2 + (a1*b2*y1^2*z3)/2 + (a1*a2*b2*y1^2*z3)/2 + (a3*b2*y1^2*z3)/2 + (a1*a3*b2*y1^2*z3)/2 + (a2*a3*b2*y1^2*z3)/2 + (b1*b2*y1^2*z3)/2 + (a1*a2*b1*b2*y1^2*z3)/2 + (a1*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b3*y1^2*z3)/2 + (a2*b1*b3*y1^2*z3)/2 + (a1*a2*b1*b3*y1^2*z3)/2 + (a2*b2*b3*y1^2*z3)/2 + (a1*a2*b2*b3*y1^2*z3)/2 + (a2*a3*b2*b3*y1^2*z3)/2 + (a2*b1*b2*b3*y1^2*z3)/2 + (a1*a2*b1*b2*b3*y1^2*z3)/2 + (a3*b1*b2*b3*y1^2*z3)/2 + (a1*a3*b1*b2*b3*y1^2*z3)/2 + (a1*y2*z3)/2 + a1*a2*y2*z3 + (a1*a3*y2*z3)/2 + a1*a2*a3*y2*z3 + (3*b1*y2*z3)/2 + 3*a1*b1*y2*z3 + (7*a2*b1*y2*z3)/2 + a1*a2*b1*y2*z3 + a3*b1*y2*z3 + 3*a1*a3*b1*y2*z3 + 3*a2*a3*b1*y2*z3 + a1*a2*a3*b1*y2*z3 - b1^2*y2*z3 - 2*a1*b1^2*y2*z3 - 3*a2*b1^2*y2*z3 - 2*a1*a3*b1^2*y2*z3 - 2*a2*a3*b1^2*y2*z3 + (3*a1*b2*y2*z3)/2 + (3*a1*a3*b2*y2*z3)/2 + 2*b1*b2*y2*z3 + 2*a1*b1*b2*y2*z3 + 2*a1*a3*b1*b2*y2*z3 + 2*a2*a3*b1*b2*y2*z3 - 2*b1^2*b2*y2*z3 - 2*a1*b1^2*b2*y2*z3 - 2*a1*a3*b1^2*b2*y2*z3 - 2*a2*a3*b1^2*b2*y2*z3 + (9*a3*b1*b3*y2*z3)/2 + (9*a2*a3*b1*b3*y2*z3)/2 - 3*a3*b1^2*b3*y2*z3 - 3*a2*a3*b1^2*b3*y2*z3 + 2*a3*b1*b2*b3*y2*z3 + 2*a2*a3*b1*b2*b3*y2*z3 - 2*a3*b1^2*b2*b3*y2*z3 - 2*a2*a3*b1^2*b2*b3*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + a3*x1*y2*z3 + a1*a3*x1*y2*z3 + a2*a3*x1*y2*z3 + a1*a2*a3*x1*y2*z3 + a1*b1*x1*y2*z3 + a2*b1*x1*y2*z3 + a3*b1*x1*y2*z3 + a1*a3*b1*x1*y2*z3 + a2*a3*b1*x1*y2*z3 + a3*b1*b2*x1*y2*z3 + a1*a3*b1*b2*x1*y2*z3 + a2*a3*b1*b2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a2*b3*x1*y2*z3 + a1*a2*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + a1*a3*b3*x1*y2*z3 + a2*a3*b3*x1*y2*z3 + a1*a2*a3*b3*x1*y2*z3 + a1*a3*b2*b3*x1*y2*z3 + a2*a3*b2*b3*x1*y2*z3 + a1*a3*b1*b2*b3*x1*y2*z3 + a2*a3*b1*b2*b3*x1*y2*z3 + a1*x2*y2*z3 + a1*a3*x2*y2*z3 + a1*b1*x2*y2*z3 + a2*b1*x2*y2*z3 + a1*a3*b2*x2*y2*z3 + a1*a3*b1*b3*x2*y2*z3 + a2*a3*b1*b3*x2*y2*z3 + a1*a3*b2*b3*x2*y2*z3 + a1*y1*y2*z3 + a2*y1*y2*z3 + a3*y1*y2*z3 + a1*a3*y1*y2*z3 + a1*a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a2*b1*y1*y2*z3 + a3*b1*y1*y2*z3 + a1*a3*b1*y1*y2*z3 + a2*a3*b1*y1*y2*z3 + b2*y1*y2*z3 + a1*b2*y1*y2*z3 + a3*b2*y1*y2*z3 + a3*b1*b2*y1*y2*z3 + a1*a3*b1*b2*y1*y2*z3 + a2*a3*b1*b2*y1*y2*z3 + a1*b3*y1*y2*z3 + a1*a2*b3*y1*y2*z3 + a1*a3*b3*y1*y2*z3 + a1*a2*a3*b3*y1*y2*z3 + a3*b1*b3*y1*y2*z3 + a1*a3*b1*b3*y1*y2*z3 + a3*b2*b3*y1*y2*z3 + a2*a3*b2*b3*y1*y2*z3 + a1*a3*b1*b2*b3*y1*y2*z3 + a2*a3*b1*b2*b3*y1*y2*z3 + (a1*y2^2*z3)/2 + (a1*a3*y2^2*z3)/2 + (b1*y2^2*z3)/2 + (a2*b1*y2^2*z3)/2 + (a1*b2*y2^2*z3)/2 + (a1*a3*b2*y2^2*z3)/2 + (a3*b1*b3*y2^2*z3)/2 + (a2*a3*b1*b3*y2^2*z3)/2 + (3*a1*a2*b1*z1*z3)/2 + a1*a2*a3*b1*z1*z3 + a1*b1*b2*z1*z3 + (3*a1*a2*b1*b2*z1*z3)/2 + (3*a1*a3*b1*b2*z1*z3)/2 + (a2*a3*b1*b2*z1*z3)/2 + a1*a2*a3*b1*b2*z1*z3 + (a1*a2*b1*b3*z1*z3)/2 + a1*a2*a3*b1*b3*z1*z3 + (a1*a2*b2*b3*z1*z3)/2 + (a2*a3*b2*b3*z1*z3)/2 + (a1*a2*b1*b2*b3*z1*z3)/2 + (a1*a3*b1*b2*b3*z1*z3)/2 + a3*b2*x1*z1*z3 + a1*a3*b2*x1*z1*z3 + a2*a3*b2*x1*z1*z3 + a1*a2*b2*b3*x1*z1*z3 + a1*a3*b2*b3*x1*z1*z3 + a3*x2*z1*z3 + a1*a3*x2*z1*z3 + a2*a3*x2*z1*z3 + a1*a2*a3*x2*z1*z3 + a3*b1*x2*z1*z3 + a1*a3*b1*x2*z1*z3 + a2*a3*b1*x2*z1*z3 + a3*b2*x2*z1*z3 + a1*a3*b2*x2*z1*z3 + a2*a3*b2*x2*z1*z3 + a3*b1*b2*x2*z1*z3 + a1*a3*b1*b2*x2*z1*z3 + a2*a3*b1*b2*x2*z1*z3 + a1*a2*b3*x2*z1*z3 + a1*a2*a3*b3*x2*z1*z3 + a1*a3*b1*b3*x2*z1*z3 + a2*a3*b1*b3*x2*z1*z3 + a1*a3*b1*b2*b3*x2*z1*z3 + a2*a3*b1*b2*b3*x2*z1*z3 + a2*a3*y1*z1*z3 + a2*a3*b2*y1*z1*z3 + a2*b3*y1*z1*z3 + a2*a3*b3*y1*z1*z3 + a1*a2*a3*y2*z1*z3 + a3*b1*y2*z1*z3 + a1*a3*b1*y2*z1*z3 + a2*a3*b1*y2*z1*z3 + a3*b2*y2*z1*z3 + a1*a3*b2*y2*z1*z3 + a2*a3*b2*y2*z1*z3 + a3*b1*b2*y2*z1*z3 + a1*a3*b1*b2*y2*z1*z3 + a2*a3*b1*b2*y2*z1*z3 + b3*y2*z1*z3 + a1*b3*y2*z1*z3 + a2*b3*y2*z1*z3 + a1*a2*b3*y2*z1*z3 + a3*b3*y2*z1*z3 + a1*a3*b3*y2*z1*z3 + a2*a3*b3*y2*z1*z3 + a1*a2*a3*b3*y2*z1*z3 + a1*a3*b1*b3*y2*z1*z3 + a2*a3*b1*b3*y2*z1*z3 + a1*a3*b1*b2*b3*y2*z1*z3 + a2*a3*b1*b2*b3*y2*z1*z3 + (a1*a2*b1*z1^2*z3)/2 + (a1*a2*b1*b2*z1^2*z3)/2 + (a1*a3*b1*b2*z1^2*z3)/2 + (a2*a3*b1*b2*z1^2*z3)/2 + (a1*a2*b1*b3*z1^2*z3)/2 + (a1*a2*b2*b3*z1^2*z3)/2 + (a2*a3*b2*b3*z1^2*z3)/2 + (a1*a2*b1*b2*b3*z1^2*z3)/2 + (a1*a3*b1*b2*b3*z1^2*z3)/2 + (3*a2*b1*z2*z3)/2 + a1*a2*b1*z2*z3 + a1*a2*a3*b1*z2*z3 - a2*b1^2*z2*z3 + (a1*b2*z2*z3)/2 + (a1*a3*b2*z2*z3)/2 + 2*a1*b1*b2*z2*z3 + 2*a1*a3*b1*b2*z2*z3 + 2*a2*a3*b1*b2*z2*z3 - 2*a1*b1^2*b2*z2*z3 - 2*a1*a3*b1^2*b2*z2*z3 - 2*a2*a3*b1^2*b2*z2*z3 + (7*a2*a3*b1*b3*z2*z3)/2 - 3*a2*a3*b1^2*b3*z2*z3 + 2*a2*a3*b1*b2*b3*z2*z3 - 2*a2*a3*b1^2*b2*b3*z2*z3 + a1*a2*a3*x1*z2*z3 + a1*b1*x1*z2*z3 + a2*b1*x1*z2*z3 + a3*b2*x1*z2*z3 + a1*a3*b2*x1*z2*z3 + a2*a3*b2*x1*z2*z3 + a3*b1*b2*x1*z2*z3 + a1*a3*b1*b2*x1*z2*z3 + a2*a3*b1*b2*x1*z2*z3 + a1*a2*b3*x1*z2*z3 + a1*a2*a3*b3*x1*z2*z3 + a1*a3*b1*b3*x1*z2*z3 + a2*a3*b1*b3*x1*z2*z3 + a1*a3*b1*b2*b3*x1*z2*z3 + a2*a3*b1*b2*b3*x1*z2*z3 + a1*b1*x2*z2*z3 + a1*b2*x2*z2*z3 + a1*a3*b1*b3*x2*z2*z3 + a1*a3*b2*b3*x2*z2*z3 + a2*a3*y1*z2*z3 + a1*a2*a3*y1*z2*z3 + a2*b1*y1*z2*z3 + a1*b2*y1*z2*z3 + a1*a3*b2*y1*z2*z3 + a2*a3*b2*y1*z2*z3 + a3*b1*b2*y1*z2*z3 + a1*a3*b1*b2*y1*z2*z3 + a2*a3*b1*b2*y1*z2*z3 + a2*b3*y1*z2*z3 + a1*a2*b3*y1*z2*z3 + a2*a3*b3*y1*z2*z3 + a1*a2*a3*b3*y1*z2*z3 + a2*a3*b1*b3*y1*z2*z3 + a1*a3*b2*b3*y1*z2*z3 + a1*a3*b1*b2*b3*y1*z2*z3 + a2*a3*b1*b2*b3*y1*z2*z3 + a1*a2*a3*z1*z2*z3 + a3*b1*b2*z1*z2*z3 + a1*a3*b1*b2*z1*z2*z3 + a2*a3*b1*b2*z1*z2*z3 + a1*a2*b3*z1*z2*z3 + a1*a2*a3*b3*z1*z2*z3 + a1*a3*b2*b3*z1*z2*z3 + a2*a3*b2*b3*z1*z2*z3 + a1*a3*b1*b2*b3*z1*z2*z3 + a2*a3*b1*b2*b3*z1*z2*z3 + (a2*b1*z2^2*z3)/2 + (a1*b2*z2^2*z3)/2 + (a1*a3*b2*z2^2*z3)/2 + (a2*a3*b1*b3*z2^2*z3)/2;
end;
#####################################################################
#####################################################################
#Space Group No. 45 ( Iba2)
#####################################################################
Acin45:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin45:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin45:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Bzxyin45:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 46 ( Ima2)
#####################################################################
Acin46:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1;
end;
#####################################################################
Amin46:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin46:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Byxzin46:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a2*x1 + b2*x1 + a1*x2 + a1*a2*x2 + b1*x2 + a2*b1*x2 + a1*b2*x2 + b1*b2*x2 + a1*x1*x2 + b1*x1*x2 + a1*a2*y2 + a2*b1*y2 + a1*b2*y2 + b1*b2*y2 + x1*y2 + a1*x1*y2 + b1*x1*y2 + a1*x2*y2 + b1*x2*y2 + a1*a2*z2 + a2*b1*z2 + a1*b2*z2 + b1*b2*z2 + x1*z2 + a1*x1*z2 + b1*x1*z2 + a1*x2*z2 + b1*x2*z2;
end;
#####################################################################
Bzxyin46:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + a2*b1 + a1*b2 + a2*b1*b2 + a2*x1 + b2*x1 + a1*x2 + a2*b1*x2 + a1*a2*b1*x2 + a1*b2*x2 + b1*b2*x2 + a1*b1*b2*x2 + a2*y1 + a2*b1*y1 + b1*b2*y1 + x2*y1 + a1*x2*y1 + a1*y2 + a1*a2*b1*y2 + a1*b2*y2 + a1*b1*b2*y2 + a1*x2*y2 + a1*y1*y2 + a2*b1*z2 + a1*a2*b1*z2 + a1*b2*z2 + b1*b2*z2 + a1*b1*b2*z2 + y1*z2 + a1*y1*z2 + a1*y2*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 47 ( Pmmm)
#####################################################################
Aiin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1;
end;
#####################################################################
Ayin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1;
end;
#####################################################################
Azin47:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 48 ( Pnnn)
#####################################################################
Aiin48:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin48:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin48:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyzin48:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
#####################################################################
#Space Group No. 49 ( Pccm)
#####################################################################
Aiin49:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin49:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin49:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axin49:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1;
end;
#####################################################################
Ayin49:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 50 ( Pban)
#####################################################################
Aiin50:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin50:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin50:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Azin50:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bphiin50:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b2*c1 + 2*c1*c2 + a2*c1*c2 + b2*c1*c2 + a2*x1 + c2*x1 + c1*x2 + a2*y1 + b2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 51 ( Pmma)
#####################################################################
Aiin51:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin51:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin51:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Ayin51:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1;
end;
#####################################################################
Azin51:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 52 ( Pnna)
#####################################################################
Aiin52:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin52:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin52:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bphi1in52:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a1*a2*c1 + a2*b1*c1 + a1*a2*b1*c1 + a1*a2*b2*c1 + a1*b1*b2*c1 + a2*b1*b2*c1 + a2*b1*c2 + b1*b2*c2 + c1*c2 + a2*c1*c2 + a1*a2*c1*c2 + a2*b1*c1*c2 + b2*c1*c2 + a1*b2*c1*c2 + b1*b2*c1*c2 + a2*x1 + a2*b1*x1 + b2*x1 + a1*b2*x1 + a2*b2*x1 + a1*c2*x1 + a2*c2*x1 + b1*c2*x1 + b2*c2*x1 + a1*b1*x2 + a2*b1*x2 + a1*b2*x2 + c1*x2 + a1*c1*x2 + b1*c1*x2 + a1*c2*x2 + b1*c2*x2 + x1*x2 + c2*y1 + a2*z1 + b2*z1 + c2*z1;
end;
#####################################################################
Bphi2in52:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a2*c1 + a1*a2*c1 + a2*b1*c1 + a1*a2*b1*c1 + b2*c1 + a1*b2*c1 + a1*a2*b2*c1 + b1*b2*c1 + a1*b1*b2*c1 + a2*b1*b2*c1 + a1*b1*c2 + a2*b1*c2 + a1*b2*c2 + 2*b1*b2*c2 + 3*c1*c2 + a2*c1*c2 + a1*a2*c1*c2 + a2*b1*c1*c2 + b2*c1*c2 + a1*b2*c1*c2 + b1*b2*c1*c2 + a2*x1 + a2*b1*x1 + 2*b2*x1 + a1*b2*x1 + a2*b2*x1 + a1*c2*x1 + a2*c2*x1 + b1*c2*x1 + b2*c2*x1 + a1*b1*x2 + a2*b1*x2 + a1*b2*x2 + c1*x2 + a1*c1*x2 + b1*c1*x2 + a1*c2*x2 + b1*c2*x2 + x1*x2 + 2*c2*y1 + c1*y2 + 2*a2*z1 + 2*b2*z1 + 2*c2*z1 + c1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 53 ( Pmna)
#####################################################################
Aiin53:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin53:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin53:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Ayin53:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1;
end;
#####################################################################
Bphiin53:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2*b2 + a2*b1*b2 + a1*a2*c1 + a2*b1*c1 + b2*c1 + a1*b2*c1 + b1*b2*c1 + a1*c2 + a1*a2*c2 + b1*c2 + a2*b1*c2 + a1*a2*b2*c2 + a2*b1*b2*c2 + c1*c2 + a2*c1*c2 + a1*a2*c1*c2 + a2*b1*c1*c2 + b2*c1*c2 + a1*b2*c1*c2 + b1*b2*c1*c2 + a2*x1 + c2*x1 + a1*a2*z1 + a2*b1*z1 + b2*z1 + c2*z1 + a1*c2*z1 + a2*c2*z1 + b1*c2*z1 + b2*c2*z1 + a1*a2*z2 + a2*b1*z2 + c1*z2 + a1*c1*z2 + b1*c1*z2 + a1*c2*z2 + b1*c2*z2 + z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 54 ( Pcca)
#####################################################################
Aiin54:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin54:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin54:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Ayin54:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1;
end;
#####################################################################
#####################################################################
#Space Group No. 55 ( Pbam)
#####################################################################
Aiin55:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin55:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin55:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Azin55:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bphiin55:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*a2*b1 + b1*c2 + a1*b1*c2 + a1*b2*c2 + b1*b2*c2 + a2*b1*b2*c2 + b2*c1*c2 + b1*b2*c1*c2 + a2*x1 + a2*b1*x1 + c2*x1 + b1*c2*x1 + b2*c2*x1 + a1*x2 + a2*b1*x2 + c1*x2 + b1*c1*x2 + b1*c2*x2 + x1*x2 + a2*y1 + c2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 56 ( Pccn)
#####################################################################
Aiin56:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin56:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin56:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bphi1in56:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c1 + a1*c2 + b1*c2 + a1*b1*c2 + a2*b1*c2 + a1*b2*c2 + a2*x1 + b2*x1 + a2*y1 + b2*y1 + b1*y2;
end;
#####################################################################
Bphi2in56:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*a2*b1 + a1*a2*c1 + a2*b1*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c1 + a1*c2 + b1*c2 + a1*b1*c2 + a2*b1*c2 + a1*b2*c2 + b1*b2*c2 + a2*x1 + c2*x1 + a1*x2 + c2*y1 + b2*z1 + c2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 57 ( Pbcm)
#####################################################################
Aiin57:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin57:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin57:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axin57:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1;
end;
#####################################################################
#####################################################################
#Space Group No. 58 ( Pnnm)
#####################################################################
Aiin58:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin58:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin58:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bphi1in58:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*b2 + a2*x1 + b1*x2 + a2*y1 + b1*z2;
end;
#####################################################################
Bphi2in58:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*b2*x1 + b1*b2*x2 + x1*x2 + b1*b2*y1 + x2*y1 + b1*b2*y2 + x1*y2 + y1*y2;
end;
#####################################################################
Bphi3in58:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2*b1 + a1*a2*b1*b2 + a2*x1 + b1*b2*x1 + b1*x2 + b1*b2*x2 + x1*x2 + a1*b2*y1 + a2*b2*y1 + x2*y1 + a1*b1*y2 + a1*b2*y2 + x1*y2 + a2*z1 + a1*b2*z1 + a2*b2*z1 + b1*b2*z1 + y2*z1 + b1*z2 + a1*b1*z2 + a1*b2*z2 + b1*b2*z2 + y1*z2 + z1*z2;
end;
#####################################################################
Cin58:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b2 + a3*b1*b2 + a1*a3*b1*b2 + a1*a2*a3*b1*b2 + a1*a2*a3*b1*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + a2*b1*b2*b3 + a2*a3*b1*b2*b3 + a2*a3*b2*c1 + a3*b1*b2*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a3*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a1*a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a3*b2*c1*x1 + a1*a3*b1*x2 + a1*a3*b2*x2 + a1*a2*b3*x2 + b1*b3*x2 + a2*b1*b3*x2 + a3*b1*b3*x2 + a1*b2*b3*x2 + b3*c1*x2 + a2*b3*c1*x2 + a3*b3*c1*x2 + a1*a2*b1*x3 + a1*a2*a3*b1*x3 + a1*a2*b2*x3 + a1*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*a2*a3*b1*b2*x3 + a1*a2*b3*x3 + a2*b1*b3*x3 + a1*b2*b3*x3 + a2*b2*c1*x3 + a1*a3*b2*c1*x3 + a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*a3*b1*b2*c1*x3 + a2*a3*b1*b2*c1*x3 + a2*b3*c1*x3 + a3*b1*b2*y1 + a1*a3*b1*b2*y1 + a1*a2*a3*b1*b2*y1 + b2*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a3*b2*b3*y1 + a3*b2*c1*y1 + b2*b3*c1*y1 + a1*a3*b1*x2*y1 + a1*a2*b1*x3*y1 + a2*a3*b1*x3*y1 + a1*a3*b2*x3*y1 + a2*a3*b2*x3*y1 + a1*b2*b3*y2 + b1*b2*b3*y2 + b2*b3*c1*y2 + a1*a3*b1*x3*y2 + a2*a3*b1*x3*y2 + a1*a3*b2*x3*y2 + c1*x3*y2 + b1*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*b2*b3*y3 + b1*b2*b3*y3 + b1*b2*c1*y3 + b2*b3*c1*y3 + b1*y2*y3 + a2*a3*z1 + a1*a3*b2*z1 + a3*b1*b2*z1 + a1*a2*b3*z1 + a2*a3*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + a1*a3*b1*z2 + a1*a3*b2*z2 + a3*b1*b2*z2 + a1*a2*b3*z2 + a1*b1*b3*z2 + a2*b1*b3*z2 + a3*b1*b3*z2 + a1*b2*b3*z2 + a2*b3*c1*z2 + a3*b3*c1*z2 + a3*x1*z2 + b1*x3*z2 + c1*x3*z2 + a3*y1*z2 + a1*a3*b1*y1*z2 + b3*y1*z2 + a1*a2*b1*z3 + a1*a2*a3*b1*z3 + a1*a2*b2*z3 + b1*b2*z3 + a2*b1*b2*z3 + a2*a3*b1*b2*z3 + a1*a2*a3*b1*b2*z3 + a1*a2*b3*z3 + a2*b1*b3*z3 + b1*b2*b3*z3 + a2*b2*c1*z3 + a1*a3*b2*c1*z3 + a2*a3*b2*c1*z3 + a1*a3*b1*b2*c1*z3 + a2*a3*b1*b2*c1*z3 + a2*b3*c1*z3 + b2*b3*c1*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + a1*a3*b2*y1*z3 + a2*a3*b2*y1*z3 + b1*y2*z3 + a1*a3*b1*y2*z3 + a2*a3*b1*y2*z3 + a1*a3*b2*y2*z3 + c1*y2*z3 + b1*z2*z3 + c1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 59 ( Pmmn)
#####################################################################
Aiin59:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin59:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin59:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Azin59:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bphiin59:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c1 + a1*c2 + b1*c2 + a1*b1*c2 + a2*b1*c2 + a1*b2*c2 + a2*x1 + b2*x1 + a2*y1 + b2*y1 + b1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 60 ( Pbcn)
#####################################################################
Aiin60:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin60:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin60:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bphiin60:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*a2*b1 + a2*b1*b2 + a1*a2*b1*b2 + a1*a2*c1 + a2*b1*c1 + b2*c1 + a1*a2*b2*c1 + a1*a2*b1*c2 + c1*c2 + a2*c1*c2 + a1*a2*c1*c2 + a2*x1 + a1*b2*x1 + a2*b2*x1 + c2*x1 + a1*c2*x1 + a2*c2*x1 + b1*x2 + a1*b1*x2 + a1*b2*x2 + c1*x2 + a1*c1*x2 + a1*c2*x2 + x1*x2 + b2*y1 + c2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 61 ( Pbca)
#####################################################################
Aiin61:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin61:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin61:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Cin61:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b1 + a2*a3*b1*b2 + a2*a3*b1*b3 + a2*b1*b2*b3 + a3*b1*b2*b3 + a1*a2*a3*c1 + a1*a2*a3*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*a3*b1*b2*c1 + a2*a3*b3*c1 + a2*b2*b3*c1 + a3*b2*b3*c1 + a2*a3*b1*x1 + a1*a2*a3*b1*x1 + a2*b3*x1 + b2*b3*x1 + a2*a3*c1*x1 + a1*a2*a3*c1*x1 + a1*a3*b2*c1*x1 + a2*a3*b2*c1*x1 + a1*a2*a3*b1*x2 + a2*b1*b3*x2 + a3*b1*b3*x2 + b1*b2*b3*x2 + a1*a2*a3*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a2*b3*c1*x2 + a3*b3*c1*x2 + b2*b3*c1*x2 + a2*a3*b1*x3 + a2*b1*b2*x3 + a2*b1*b3*x3 + b1*b2*b3*x3 + a2*a3*c1*x3 + a2*b2*c1*x3 + a2*b3*c1*x3 + b2*b3*c1*x3 + b1*x2*x3 + c1*x2*x3 + a2*a3*b1*y2 + a2*b1*b3*y2 + a3*b1*b3*y2 + b1*b2*b3*y2 + a2*a3*c1*y2 + a2*b3*c1*y2 + a3*b3*c1*y2 + b2*b3*c1*y2 + b1*x3*y2 + c1*x3*y2 + a2*a3*b1*y3 + a2*b1*b2*y3 + a2*b1*b3*y3 + b1*b2*b3*y3 + a2*a3*c1*y3 + a2*b2*c1*y3 + a2*b3*c1*y3 + b2*b3*c1*y3 + b1*x2*y3 + c1*x2*y3 + b1*y2*y3 + c1*y2*y3 + a2*a3*b1*z1 + a1*a2*a3*b1*z1 + a2*a3*c1*z1 + a1*a2*a3*c1*z1 + a2*a3*x1*z1 + a1*a3*x2*z1 + a2*a3*x2*z1 + a1*a2*a3*b1*z2 + a2*b1*b3*z2 + a3*b1*b3*z2 + b1*b2*b3*z2 + a1*a2*a3*c1*z2 + a2*b3*c1*z2 + a3*b3*c1*z2 + b2*b3*c1*z2 + a1*a3*x1*z2 + a2*a3*x1*z2 + a1*a3*x2*z2 + b1*x3*z2 + c1*x3*z2 + b1*y3*z2 + c1*y3*z2 + a2*a3*b1*z3 + a2*b1*b2*z3 + a2*b1*b3*z3 + b1*b2*b3*z3 + a2*a3*c1*z3 + a2*b2*c1*z3 + a2*b3*c1*z3 + b2*b3*c1*z3 + b1*x2*z3 + c1*x2*z3 + b1*y2*z3 + c1*y2*z3 + b1*z2*z3 + c1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 62 ( Pnma)
#####################################################################
Aiin62:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin62:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin62:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bphi1in62:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*a2*b1 + a1*a2*b2 + a1*b1*b2 + a1*a2*c1 + a2*b1*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c2 + a2*c1*c2 + b2*c1*c2 + a2*x1 + b2*x1 + c2*x1 + a1*x2 + b1*x2 + c1*x2 + b2*y1 + c2*y1 + a1*y2 + b1*y2 + c1*y2 + b2*z1;
end;
#####################################################################
Bphi2in62:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*a2*b1 + a1*b2 + a2*b1*b2 + a1*a2*b1*b2 + a1*a2*b1*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c1 + a1*b1*b2*c1 + a2*b1*c2 + b1*b2*c2 + b2*c1*c2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*c1*x1 + a1*c2*x1 + a2*c2*x1 + b1*x2 + a1*b1*x2 + a2*b1*x2 + a1*b2*x2 + c1*x2 + a1*c1*x2 + a2*c1*x2 + a1*c2*x2 + a1*a2*y1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + b1*b2*y1 + a2*c1*y1 + b2*c1*y1 + c2*y1 + a1*a2*y2 + b1*y2 + a1*b1*y2 + a2*b1*y2 + a1*b2*y2 + b1*b2*y2 + a2*c1*y2 + b2*c1*y2 + y1*y2 + a2*z1 + a1*a2*z1 + b1*b2*z1 + b2*c1*z1 + a1*c2*z1 + a2*c2*z1 + y2*z1 + a1*z2 + a1*a2*z2 + b1*z2 + b1*b2*z2 + a1*c1*z2 + b2*c1*z2 + a1*c2*z2 + y1*z2 + z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 63 ( Cmcm)
#####################################################################
Aiin63:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin63:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin63:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin63:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bxyin63:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 64 ( Cmce)
#####################################################################
Aiin64:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin64:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin64:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin64:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Cin64:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a2*a3*b1 + a1*a2*a3*b1 + a1*a3*b1*b2 + a2*b1*b3 + a2*a3*b1*b3 + a1*a2*a3*b1*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + a1*a2*a3*b1*b2*b3 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a3*b2*c1 + a1*a3*b2*c1 + a2*a3*b2*c1 + a1*a2*a3*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*a3*b1*b2*c1 + a2*b3*c1 + a1*a2*b3*c1 + a2*a3*b3*c1 + a1*a2*a3*b1*b3*c1 + b2*b3*c1 + a1*b2*b3*c1 + a3*b2*b3*c1 + b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a2*a3*x1 + a3*b2*x1 + a2*a3*b2*x1 + a3*b1*b2*x1 + a2*a3*b1*b2*x1 + a1*a2*a3*b1*b2*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a2*a3*b1*b3*x1 + b2*b3*x1 + a3*b2*b3*x1 + a1*a2*b1*b2*b3*x1 + a2*a3*b1*b2*b3*x1 + a1*a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a1*a2*a3*b1*c1*x1 + a3*b2*c1*x1 + a2*a3*b2*c1*x1 + a1*a2*a3*b2*c1*x1 + a1*a3*b1*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a1*a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + b2*b3*c1*x1 + a1*a2*b2*b3*c1*x1 + a3*b2*b3*c1*x1 + a2*a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a2*b1*b2*b3*c1*x1 + a3*b1*b2*b3*c1*x1 + a1*a2*a3*x2 + a2*a3*b1*x2 + a1*a3*b2*x2 + a1*a2*a3*b2*x2 + a3*b1*b2*x2 + a1*a2*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a1*a2*a3*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + b1*b2*b3*x2 + a1*a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a2*a3*b1*b2*b3*x2 + a2*a3*c1*x2 + a1*a2*a3*c1*x2 + a2*a3*b1*c1*x2 + a1*a2*a3*b2*c1*x2 + a2*a3*b1*b2*c1*x2 + b3*c1*x2 + a1*a2*b3*c1*x2 + a3*b3*c1*x2 + a2*a3*b3*c1*x2 + b2*b3*c1*x2 + a1*a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a2*a3*b2*b3*c1*x2 + a3*b1*x1*x2 + a1*a3*b1*b2*x1*x2 + b1*b3*x1*x2 + a1*a2*b1*b3*x1*x2 + a3*b1*b3*x1*x2 + a2*a3*b1*b3*x1*x2 + b1*b2*b3*x1*x2 + a1*b1*b2*b3*x1*x2 + a2*b1*b2*b3*x1*x2 + a3*b1*b2*b3*x1*x2 + a2*b1*x3 + a2*a3*b1*x3 + a1*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*a3*b1*b2*x3 + a1*a2*b1*b3*x3 + a1*b2*b3*x3 + a1*a3*b2*b3*x3 + a1*a2*a3*b2*b3*x3 + b1*b2*b3*x3 + a2*b1*c1*x3 + a2*b2*c1*x3 + b1*b2*c1*x3 + a2*a3*b3*c1*x3 + a1*a2*b1*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + a1*a2*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + a1*x2*x3 + a1*a2*b2*x2*x3 + a1*a3*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a1*a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a3*b1*b2*x2*x3 + a1*b2*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + b1*b2*b3*x2*x3 + b2*b3*c1*x2*x3 + a2*a3*b1*y1 + a1*a2*a3*b1*y1 + a1*a2*a3*b1*b2*y1 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a1*a2*b1*b2*b3*y1 + a2*a3*b1*b2*b3*y1 + a2*a3*c1*y1 + a1*a2*a3*b1*c1*y1 + a1*a3*b2*c1*y1 + a2*a3*b2*c1*y1 + a1*a2*a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a1*a3*b1*b2*c1*y1 + a2*a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a2*a3*b3*c1*y1 + a1*a2*b1*b3*c1*y1 + a2*a3*b1*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a1*a2*b2*b3*c1*y1 + a2*a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a1*a3*b2*x1*y1 + a3*b1*b2*x1*y1 + a2*b3*x1*y1 + a1*a2*b3*x1*y1 + a2*a3*b3*x1*y1 + b2*b3*x1*y1 + a1*b2*b3*x1*y1 + a2*b2*b3*x1*y1 + a3*b2*b3*x1*y1 + a3*x2*y1 + a3*b1*x2*y1 + a3*b2*x2*y1 + a1*a3*b2*x2*y1 + a3*b1*b2*x2*y1 + a1*a3*b1*b2*x2*y1 + b3*x2*y1 + a1*a2*b3*x2*y1 + a3*b3*x2*y1 + a2*a3*b3*x2*y1 + b1*b3*x2*y1 + a1*a2*b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a2*a3*b1*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + a2*b2*b3*x2*y1 + a3*b2*b3*x2*y1 + b1*b2*b3*x2*y1 + a1*b1*b2*b3*x2*y1 + a2*b1*b2*b3*x2*y1 + a3*b1*b2*b3*x2*y1 + a1*a2*b3*x3*y1 + a2*a3*b3*x3*y1 + a1*a2*b1*b3*x3*y1 + a2*a3*b1*b3*x3*y1 + a1*a2*b2*b3*x3*y1 + a2*a3*b2*b3*x3*y1 + a1*a3*b1*y2 + a2*a3*b1*y2 + a3*b1*b2*y2 + a2*a3*b1*b2*y2 + a1*a2*a3*b1*b2*y2 + a1*b3*y2 + a1*b1*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a3*b1*b3*y2 + a2*a3*b1*b3*y2 + b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + a3*b1*b2*b3*y2 + a2*a3*b1*b2*b3*y2 + a2*a3*c1*y2 + a3*b2*c1*y2 + a1*a3*b2*c1*y2 + a1*a2*a3*b2*c1*y2 + a3*b1*b2*c1*y2 + a2*a3*b1*b2*c1*y2 + a3*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a1*a2*b2*b3*c1*y2 + a2*a3*b2*b3*c1*y2 + a3*x1*y2 + a1*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b1*x1*y2 + a1*a3*b2*x1*y2 + a1*a3*b1*b2*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a1*a2*b3*x1*y2 + a2*a3*b3*x1*y2 + a1*b1*b3*x1*y2 + a2*b1*b3*x1*y2 + a1*a2*b1*b3*x1*y2 + a2*a3*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + a2*b2*b3*x1*y2 + a3*b2*b3*x1*y2 + b1*b2*b3*x1*y2 + a1*b1*b2*b3*x1*y2 + a2*b1*b2*b3*x1*y2 + a3*b1*b2*b3*x1*y2 + a1*a3*b1*x2*y2 + a1*a3*b2*x2*y2 + a3*b1*b2*x2*y2 + a1*a2*b3*x2*y2 + b1*b3*x2*y2 + a1*b2*b3*x2*y2 + b3*c1*x2*y2 + a1*x3*y2 + a1*a2*b1*x3*y2 + a1*a3*b1*x3*y2 + a1*a2*b1*b2*x3*y2 + a1*a3*b1*b2*x3*y2 + a1*a2*b3*x3*y2 + b1*b3*x3*y2 + a1*a2*b2*b3*x3*y2 + b1*b2*b3*x3*y2 + b3*c1*x3*y2 + b2*b3*c1*x3*y2 + a1*a3*b1*y1*y2 + a3*b1*b2*y1*y2 + a1*a3*b1*b2*y1*y2 + a1*b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a1*a2*b1*b3*y1*y2 + a2*a3*b1*b3*y1*y2 + b1*b2*b3*y1*y2 + a1*b1*b2*b3*y1*y2 + a2*b1*b2*b3*y1*y2 + a3*b1*b2*b3*y1*y2 + a2*a3*b1*y3 + a1*a2*a3*b1*y3 + a1*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a3*b1*b2*y3 + a1*a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*a3*b1*b2*y3 + a2*b1*b3*y3 + a2*a3*b1*b3*y3 + a1*b2*b3*y3 + a1*a3*b2*b3*y3 + a1*a2*a3*b2*b3*y3 + b1*b2*b3*y3 + a1*a2*c1*y3 + a2*a3*c1*y3 + a1*a2*a3*c1*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + b2*c1*y3 + a1*a2*b2*c1*y3 + a1*a3*b2*c1*y3 + b1*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b3*c1*y3 + a1*a2*b3*c1*y3 + a1*b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a3*b2*b3*c1*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a1*a2*b2*x1*y3 + a2*a3*b2*x1*y3 + a1*a2*b3*x1*y3 + a2*a3*b3*x1*y3 + a1*a2*b1*b3*x1*y3 + a2*a3*b1*b3*x1*y3 + a1*a2*b2*b3*x1*y3 + a2*a3*b2*b3*x1*y3 + a1*a3*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a1*a2*b1*x2*y3 + a3*b1*x2*y3 + a1*a3*b1*x2*y3 + a1*b2*x2*y3 + a1*a3*b2*x2*y3 + b1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a1*a2*b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a1*a3*b1*b2*x2*y3 + a1*b3*x2*y3 + a1*a2*b3*x2*y3 + b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a1*a2*b2*b3*x2*y3 + b1*b2*b3*x2*y3 + c1*x2*y3 + b2*c1*x2*y3 + b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a1*a2*b1*x3*y3 + a2*a3*b1*x3*y3 + a1*a2*b2*x3*y3 + a1*b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a3*b1*b2*x3*y3 + a1*a2*b3*x3*y3 + a1*b2*b3*x3*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a1*a2*b2*y1*y3 + a2*a3*b2*y1*y3 + a1*a2*b1*b3*y1*y3 + a2*a3*b1*b3*y1*y3 + a1*a2*b2*b3*y1*y3 + a2*a3*b2*b3*y1*y3 + a1*y2*y3 + a1*a2*b2*y2*y3 + b1*b2*y2*y3 + a1*a2*b1*b2*y2*y3 + a1*a3*b1*b2*y2*y3 + a1*a2*b2*b3*y2*y3 + b1*b2*b3*y2*y3 + b2*c1*y2*y3 + b2*b3*c1*y2*y3 + a1*a2*a3*b1*z1 + a2*a3*b2*z1 + a3*b1*b2*z1 + a1*a3*b1*b2*z1 + a2*a3*b1*b2*z1 + a1*a2*b3*z1 + a2*a3*b3*z1 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + a1*a3*b2*b3*z1 + a2*a3*b2*b3*z1 + a1*a2*a3*c1*z1 + a2*a3*b1*c1*z1 + a1*a3*b2*c1*z1 + a3*b1*b2*c1*z1 + a2*b3*c1*z1 + a1*a2*b3*c1*z1 + a2*a3*b3*c1*z1 + a1*b2*b3*c1*z1 + a2*b2*b3*c1*z1 + a3*b2*b3*c1*z1 + a2*a3*x1*z1 + a2*a3*b1*x1*z1 + a2*a3*b2*x1*z1 + a1*a2*b3*x1*z1 + a2*a3*b3*x1*z1 + a3*x2*z1 + a1*a3*x2*z1 + a2*a3*x2*z1 + a3*b1*x2*z1 + a3*b2*x2*z1 + a2*a3*b2*x2*z1 + a1*b3*x2*z1 + a2*b3*x2*z1 + a1*a2*b3*x2*z1 + a3*b3*x2*z1 + a2*a3*b3*x2*z1 + a1*a2*b2*x3*z1 + a1*a3*b2*x3*z1 + a1*b1*b2*x3*z1 + a2*b1*b2*x3*z1 + a3*b1*b2*x3*z1 + a1*a2*b3*x3*z1 + a2*a3*b3*x3*z1 + a1*b2*b3*x3*z1 + a2*b2*b3*x3*z1 + a3*b2*b3*x3*z1 + a2*a3*b1*y1*z1 + a2*a3*b2*y1*z1 + a1*a2*b3*y1*z1 + a2*a3*b3*y1*z1 + a2*a3*b2*y2*z1 + a1*a2*b3*y2*z1 + a2*a3*b3*y2*z1 + a1*a2*b2*y3*z1 + a1*a3*b2*y3*z1 + a1*b1*b2*y3*z1 + a2*b1*b2*y3*z1 + a3*b1*b2*y3*z1 + a1*a2*b3*y3*z1 + a2*a3*b3*y3*z1 + a1*b2*b3*y3*z1 + a2*b2*b3*y3*z1 + a3*b2*b3*y3*z1 + a3*b1*z2 + a2*a3*b1*z2 + a1*a2*a3*b1*z2 + a3*b1*b2*z2 + a2*a3*b1*b2*z2 + a1*a2*b3*z2 + a2*b1*b3*z2 + a1*a2*b1*b3*z2 + a1*a3*b1*b3*z2 + a1*b2*b3*z2 + a1*a3*b2*b3*z2 + a3*c1*z2 + a2*a3*c1*z2 + a1*a2*a3*c1*z2 + a2*a3*b1*c1*z2 + a1*a3*b2*c1*z2 + a3*b1*b2*c1*z2 + b3*c1*z2 + a2*b3*c1*z2 + a1*a2*b3*c1*z2 + a2*a3*b3*c1*z2 + a1*b2*b3*c1*z2 + a2*b2*b3*c1*z2 + a3*b2*b3*c1*z2 + a2*a3*x1*z2 + a2*a3*b1*x1*z2 + a2*a3*b2*x1*z2 + a1*a2*b3*x1*z2 + a2*a3*b3*x1*z2 + a1*a3*x2*z2 + a3*b1*x2*z2 + a1*a3*b1*x2*z2 + a1*b3*x2*z2 + a1*a2*b3*x2*z2 + b1*b3*x2*z2 + b3*c1*x2*z2 + b1*x3*z2 + a1*a2*b1*x3*z2 + a1*a3*b1*x3*z2 + a1*a2*b2*x3*z2 + a1*a3*b2*x3*z2 + a1*b1*b2*x3*z2 + a2*b1*b2*x3*z2 + a3*b1*b2*x3*z2 + a1*a2*b3*x3*z2 + b1*b3*x3*z2 + a1*b2*b3*x3*z2 + b3*c1*x3*z2 + a2*a3*b1*y1*z2 + a2*a3*b2*y1*z2 + a1*a2*b3*y1*z2 + a2*a3*b3*y1*z2 + a1*a3*b1*y2*z2 + a1*a2*b3*y2*z2 + b1*b3*y2*z2 + b3*c1*y2*z2 + a1*a2*b1*y3*z2 + a1*a3*b1*y3*z2 + a1*a2*b2*y3*z2 + a1*a3*b2*y3*z2 + a1*b1*b2*y3*z2 + a2*b1*b2*y3*z2 + a3*b1*b2*y3*z2 + a1*a2*b3*y3*z2 + b1*b3*y3*z2 + a1*b2*b3*y3*z2 + c1*y3*z2 + b3*c1*y3*z2 + a2*b1*z3 + a1*a2*b1*z3 + a2*a3*b1*z3 + a1*a2*a3*b1*z3 + a1*a2*b2*z3 + b1*b2*z3 + a1*b1*b2*z3 + a1*a2*b1*b2*z3 + a3*b1*b2*z3 + a2*a3*b1*b2*z3 + a1*a2*b3*z3 + a2*b1*b3*z3 + a1*a2*b1*b3*z3 + a2*a3*b1*b3*z3 + a1*b2*b3*z3 + a1*a2*c1*z3 + a2*a3*c1*z3 + a1*a2*a3*c1*z3 + a2*b1*c1*z3 + a1*a2*b1*c1*z3 + a2*a3*b1*c1*z3 + b2*c1*z3 + a2*b2*c1*z3 + a1*a2*b2*c1*z3 + a1*a3*b2*c1*z3 + a1*b1*b2*c1*z3 + a2*b1*b2*c1*z3 + a3*b1*b2*c1*z3 + a2*b3*c1*z3 + a1*a2*b3*c1*z3 + a2*a3*b3*c1*z3 + a1*b2*b3*c1*z3 + a2*b2*b3*c1*z3 + a3*b2*b3*c1*z3 + a1*a2*x1*z3 + a2*a3*x1*z3 + a1*a2*b1*x1*z3 + a2*a3*b1*x1*z3 + a1*a2*b2*x1*z3 + a2*a3*b2*x1*z3 + a1*a2*b3*x1*z3 + a2*a3*b3*x1*z3 + a1*x2*z3 + a1*a3*x2*z3 + b1*x2*z3 + a1*b1*x2*z3 + a2*b1*x2*z3 + a1*a2*b1*x2*z3 + a3*b1*x2*z3 + a1*a3*b1*x2*z3 + a1*b2*x2*z3 + a1*a2*b2*x2*z3 + b1*b2*x2*z3 + a1*b3*x2*z3 + a1*a2*b3*x2*z3 + b1*b3*x2*z3 + c1*x2*z3 + b2*c1*x2*z3 + b3*c1*x2*z3 + a1*a2*b1*x3*z3 + a2*a3*b1*x3*z3 + a1*a2*b2*x3*z3 + a1*b1*b2*x3*z3 + a2*b1*b2*x3*z3 + a3*b1*b2*x3*z3 + a1*a2*b3*x3*z3 + a1*b2*b3*x3*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + a1*a2*b2*y1*z3 + a2*a3*b2*y1*z3 + a1*a2*b3*y1*z3 + a2*a3*b3*y1*z3 + a1*a2*b1*y2*z3 + a1*a3*b1*y2*z3 + a1*a2*b2*y2*z3 + b1*b2*y2*z3 + a1*a2*b3*y2*z3 + b1*b3*y2*z3 + b2*c1*y2*z3 + b3*c1*y2*z3 + a1*a2*b1*y3*z3 + a2*a3*b1*y3*z3 + a1*a2*b2*y3*z3 + a1*b1*b2*y3*z3 + a2*b1*b2*y3*z3 + a3*b1*b2*y3*z3 + a1*a2*b3*y3*z3 + a1*b2*b3*y3*z3 + b1*z2*z3 + c1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 65 ( Cmmm)
#####################################################################
Aiin65:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin65:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin65:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin65:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin65:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bxyin65:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 66 ( Cccm)
#####################################################################
Aiin66:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin66:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin66:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin66:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bxyin66:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
Bzxyin66:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return c1*x2 + x2*z1 + y2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 67 ( Cmme)
#####################################################################
Aiin67:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin67:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin67:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin67:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin67:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
#####################################################################
#Space Group No. 68 ( Ccce)
#####################################################################
Aiin68:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin68:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin68:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyin68:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Cin68:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b2 + a1*a2*b3 + a1*b2*b3 + a1*a2*a3*c1 + a3*b2*c1 + a2*a3*b2*c1 + a2*b3*c1 + a1*a2*b3*c1 + a2*a3*b1*b3*c1 + a2*b2*b3*c1 + a3*b2*b3*c1 + a2*a3*b2*b3*c1 + a2*a3*b1*x1 + a3*b2*x1 + a2*a3*b2*x1 + a3*b1*b2*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + a3*b2*c1*x1 + a2*b1*b3*c1*x1 + a2*b2*b3*c1*x1 + a1*a3*x2 + a1*a3*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a3*b1*b3*x2 + a1*a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*b2*b3*x2 + a1*a3*b2*b3*x2 + a3*b1*b2*b3*x2 + a3*b2*c1*x2 + b3*c1*x2 + a2*b2*b3*c1*x2 + a3*x1*x2 + a1*a3*x1*x2 + a3*b1*x1*x2 + a1*a3*b1*x1*x2 + b3*x1*x2 + a1*b3*x1*x2 + a1*b1*b3*x1*x2 + b1*b2*b3*x1*x2 + a1*a2*x3 + a2*c1*x3 + a2*a3*c1*x3 + a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a3*b2*c1*x3 + a2*a3*b2*c1*x3 + a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a2*b2*b3*c1*x3 + a1*a2*x1*x3 + a2*a3*x1*x3 + a1*a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a2*b2*x1*x3 + a3*b2*x1*x3 + a1*a3*b2*x1*x3 + a2*a3*b2*x1*x3 + b1*b2*x1*x3 + a1*b1*b2*x1*x3 + a2*b3*x1*x3 + a2*b1*b3*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + a2*b2*b3*x1*x3 + a1*x2*x3 + a1*a3*x2*x3 + b1*x2*x3 + a1*b1*x2*x3 + a2*b1*x2*x3 + a3*b1*x2*x3 + a1*a3*b1*x2*x3 + a2*a3*b1*x2*x3 + a1*b2*x2*x3 + a1*a3*b2*x2*x3 + b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*b3*x2*x3 + b1*b3*x2*x3 + a1*b1*b3*x2*x3 + a2*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + b1*b2*b3*x2*x3 + a2*a3*y1 + a2*a3*b1*y1 + a2*a3*b2*y1 + a1*a3*b1*b2*y1 + a2*b3*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a2*a3*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + a3*b2*c1*y1 + a2*b3*c1*y1 + a2*b1*b3*c1*y1 + a2*b2*b3*c1*y1 + b2*b3*x1*y1 + a1*a3*x2*y1 + a1*a3*b1*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + b1*b3*x2*y1 + a1*b1*b3*x2*y1 + b2*b3*x2*y1 + b1*b2*b3*x2*y1 + a2*x3*y1 + a1*a2*x3*y1 + a2*a3*x3*y1 + a2*b1*x3*y1 + a1*a2*b1*x3*y1 + a2*a3*b1*x3*y1 + a2*b2*x3*y1 + a1*a3*b2*x3*y1 + a2*a3*b2*x3*y1 + a1*b1*b2*x3*y1 + a2*b3*x3*y1 + a2*b1*b3*x3*y1 + a1*b2*b3*x3*y1 + a2*b2*b3*x3*y1 + a1*a3*b2*y2 + a1*a3*b3*y2 + a1*a3*b1*b3*y2 + a2*a3*b1*b3*y2 + a1*b2*b3*y2 + a1*a3*b2*b3*y2 + a3*b1*b2*b3*y2 + a3*b2*c1*y2 + a2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*x1*y2 + a1*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b1*x1*y2 + b3*x1*y2 + a1*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + b2*b3*x1*y2 + b1*b2*b3*x1*y2 + a1*x3*y2 + a1*a3*x3*y2 + a1*b1*x3*y2 + a2*b1*x3*y2 + a1*a3*b1*x3*y2 + a2*a3*b1*x3*y2 + a1*b2*x3*y2 + a1*a3*b2*x3*y2 + b1*b2*x3*y2 + a3*b1*b2*x3*y2 + a1*b3*x3*y2 + a1*b1*b3*x3*y2 + a2*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + b1*b2*b3*x3*y2 + a1*a3*y1*y2 + a1*a3*b1*y1*y2 + a1*b3*y1*y2 + a1*b1*b3*y1*y2 + b1*b2*b3*y1*y2 + a1*a2*y3 + a2*c1*y3 + a2*a3*c1*y3 + a2*b1*c1*y3 + a2*a3*b1*c1*y3 + a1*b2*c1*y3 + a2*b2*c1*y3 + a3*b2*c1*y3 + a2*a3*b2*c1*y3 + a2*b1*b3*c1*y3 + b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + a2*a3*b2*x1*y3 + b1*b2*x1*y3 + a1*b1*b2*x1*y3 + a2*b3*x1*y3 + a2*b1*b3*x1*y3 + b2*b3*x1*y3 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a1*x2*y3 + a1*a3*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b2*x2*y3 + a1*a3*b2*x2*y3 + b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a1*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + b1*b2*b3*x2*y3 + a2*y1*y3 + a1*a2*y1*y3 + a2*a3*y1*y3 + a2*b1*y1*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a2*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + a1*b1*b2*y1*y3 + a2*b3*y1*y3 + a2*b1*b3*y1*y3 + a1*b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a1*y2*y3 + a1*a3*y2*y3 + a1*b1*y2*y3 + a2*b1*y2*y3 + a1*a3*b1*y2*y3 + a2*a3*b1*y2*y3 + a1*b2*y2*y3 + a1*a3*b2*y2*y3 + b1*b2*y2*y3 + a3*b1*b2*y2*y3 + a1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + a1*b2*b3*y2*y3 + b1*b2*b3*y2*y3 + a2*a3*z1 + a3*b2*z1 + a2*x3*z1 + b2*x3*z1 + a2*y3*z1 + b2*y3*z1 + a3*x1*z2 + a1*x3*z2 + a3*y1*z2 + a1*y3*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 69 ( Fmmm)
#####################################################################
Aiin69:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin69:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin69:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axzin69:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + z1;
end;
#####################################################################
Ayzin69:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return y1 + z1;
end;
#####################################################################
Cin69:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return (a2*a3*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + a3*b1*x2 + a2*a3*b1*x2 + a3*b1*b2*x2 + a3*b1*b3*x2 + a2*a3*c1*x2 - 2*a2*a3*b1*c1*x2 + a3*b2*c1*x2 - 2*a3*b1*b2*c1*x2 + a3*b3*c1*x2 - 2*a3*b1*b3*c1*x2 + a3*x1*x2 + a1*a3*x1*x2 + a2*a3*x1*x2 + 2*a3*b1*x1*x2 + 2*a1*a3*b1*x1*x2 + a2*b3*x1*x2 + a3*c1*x1*x2 + a1*a3*c1*x1*x2 - 3*a3*b1*c1*x1*x2 - 2*a1*a3*b1*c1*x1*x2 + (a3*x1*x2*(1 + x2))/2 + (a1*a3*x1*x2*(1 + x2))/2 + (a3*b1*x1*x2*(1 + x2))/2 + a1*a2*x1*x3 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + a1*a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a1*a2*b2*x1*x3 + a3*b2*x1*x3 + a2*a3*b2*x1*x3 + a2*b3*x1*x3 + (a2*x1*(1 + x1)*x3)/2 + (a2*a3*x1*(1 + x1)*x3)/2 + (a2*b2*x1*(1 + x1)*x3)/2 + (a3*b2*x1*(1 + x1)*x3)/2 + 3*b1*x2*x3 + 2*a2*b1*x2*x3 + a1*a2*b1*x2*x3 + a3*b1*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + 2*b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a2*b1*b3*x2*x3 + b1*b2*b3*x2*x3 + c1*x2*x3 + a3*c1*x2*x3 - 3*b1*c1*x2*x3 - a2*b1*c1*x2*x3 - 2*a3*b1*c1*x2*x3 + a2*b2*c1*x2*x3 - b1*b2*c1*x2*x3 - 2*a2*b1*b2*c1*x2*x3 + a2*b3*c1*x2*x3 - 2*a2*b1*b3*c1*x2*x3 + b2*b3*c1*x2*x3 - 2*b1*b2*b3*c1*x2*x3 + x1*x2*x3 + a1*x1*x2*x3 + a3*x1*x2*x3 + a2*a3*x1*x2*x3 + b1*x1*x2*x3 + a1*b1*x1*x2*x3 + a1*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + a3*b2*x1*x2*x3 + b1*b2*x1*x2*x3 + (b1*x2*(1 + x2)*x3)/2 + (a2*b1*x2*(1 + x2)*x3)/2 + (b1*b2*x2*(1 + x2)*x3)/2 + a2*a3*x1*y1 + a2*b3*x1*y1 + a2*a3*x2*y1 + a3*b1*x2*y1 + a1*a3*b1*x2*y1 + a2*b3*x2*y1 + a1*a3*c1*x2*y1 - a3*b1*c1*x2*y1 - 2*a1*a3*b1*c1*x2*y1 + a1*a3*x1*x2*y1 + a3*b1*x1*x2*y1 + (a1*a3*x2*(1 + x2)*y1)/2 + (a3*b1*x2*(1 + x2)*y1)/2 + a2*x3*y1 + a1*a2*x3*y1 + a2*a3*x3*y1 + a1*a2*a3*x3*y1 + a1*a2*b2*x3*y1 + a1*a3*b2*x3*y1 + a2*b3*x3*y1 + a2*x1*x3*y1 + a1*a2*x1*x3*y1 + a1*b2*x1*x3*y1 + a1*x2*x3*y1 + a1*a2*x2*x3*y1 + b2*x2*x3*y1 + a1*b2*x2*x3*y1 + (a2*a3*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (a3*b1*x2*y1*(1 + y1))/2 + (a2*x3*y1*(1 + y1))/2 + (a2*a3*x3*y1*(1 + y1))/2 + (a1*b2*x3*y1*(1 + y1))/2 + a2*a3*b1*y2 + a2*b1*b3*y2 + a2*a3*c1*y2 - 2*a2*a3*b1*c1*y2 + a2*b3*c1*y2 - 2*a2*b1*b3*c1*y2 + a3*x1*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b1*x1*y2 + a2*b3*x1*y2 + a1*a3*c1*x1*y2 - 2*a1*a3*b1*c1*x1*y2 + (a3*x1*(1 + x1)*y2)/2 + (a3*b1*x1*(1 + x1)*y2)/2 + a3*b1*b2*x2*y2 + a2*b1*b3*x2*y2 + a3*b1*b3*x2*y2 + a3*b2*c1*x2*y2 - 2*a3*b1*b2*c1*x2*y2 + a2*b3*c1*x2*y2 + a3*b3*c1*x2*y2 - 2*a2*b1*b3*c1*x2*y2 - 2*a3*b1*b3*c1*x2*y2 + a3*b1*x1*x2*y2 + (a3*b1*x2*(1 + x2)*y2)/2 + 2*a1*b1*x3*y2 + a1*b2*x3*y2 + a1*b1*b2*x3*y2 + a2*b1*b3*x3*y2 + a3*b1*b3*x3*y2 - a1*b1*c1*x3*y2 + a1*b2*c1*x3*y2 - 2*a1*b1*b2*c1*x3*y2 + a2*b3*c1*x3*y2 + a3*b3*c1*x3*y2 - 2*a2*b1*b3*c1*x3*y2 - 2*a3*b1*b3*c1*x3*y2 + a2*x1*x3*y2 + a1*b1*x1*x3*y2 + a1*b2*x1*x3*y2 + a1*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + a2*a3*y1*y2 + a3*b1*y1*y2 + 2*a1*a3*b1*y1*y2 + a2*b3*y1*y2 + a3*c1*y1*y2 + a1*a3*c1*y1*y2 - 2*a3*b1*c1*y1*y2 - 2*a1*a3*b1*c1*y1*y2 + a1*a3*x1*y1*y2 + a3*b1*x2*y1*y2 + a2*x3*y1*y2 + a1*a2*x3*y1*y2 + a2*a3*x3*y1*y2 + (a3*y1*(1 + y1)*y2)/2 + (a1*a3*x1*y2*(1 + y2))/2 + (a3*b1*x2*y2*(1 + y2))/2 + (a1*b1*x3*y2*(1 + y2))/2 + (a1*b2*x3*y2*(1 + y2))/2 + (a3*y1*y2*(1 + y2))/2 + (a1*a3*y1*y2*(1 + y2))/2 + a2*x1*y3 + a1*a2*x1*y3 + a1*a2*a3*x1*y3 + a2*b1*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a1*b2*x1*y3 + a3*b2*x1*y3 + a2*b3*x1*y3 + (a2*a3*x1*(1 + x1)*y3)/2 + (a1*b2*x1*(1 + x1)*y3)/2 + (a2*b2*x1*(1 + x1)*y3)/2 + (a3*b2*x1*(1 + x1)*y3)/2 + 3*b1*x2*y3 + 2*a1*b1*x2*y3 + 3*a2*b1*x2*y3 + a3*b1*x2*y3 + a1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a3*b1*b3*x2*y3 + c1*x2*y3 + a2*c1*x2*y3 + a3*c1*x2*y3 - 3*b1*c1*x2*y3 - a1*b1*c1*x2*y3 - 3*a2*b1*c1*x2*y3 - 2*a3*b1*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 - 2*a1*b1*b2*c1*x2*y3 - 2*a2*b1*b2*c1*x2*y3 + a3*b3*c1*x2*y3 - 2*a3*b1*b3*c1*x2*y3 + x1*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a3*x1*x2*y3 + a2*a3*x1*x2*y3 + b1*x1*x2*y3 + a1*b2*x1*x2*y3 + a2*b2*x1*x2*y3 + a3*b2*x1*x2*y3 + (b1*x2*(1 + x2)*y3)/2 + (a1*b1*x2*(1 + x2)*y3)/2 + (a2*b1*x2*(1 + x2)*y3)/2 + (a1*b2*x2*(1 + x2)*y3)/2 + a2*a3*x1*x3*y3 + a1*a2*b2*x1*x3*y3 + a2*a3*b2*x1*x3*y3 + a1*a2*b1*x2*x3*y3 + a1*b2*x2*x3*y3 + a1*a2*b2*x2*x3*y3 + a1*b1*b2*x2*x3*y3 + a1*a2*y1*y3 + a1*a2*a3*y1*y3 + a1*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + a2*b3*y1*y3 + a1*a2*x1*y1*y3 + a1*x2*y1*y3 + a2*x2*y1*y3 + a1*a2*x2*y1*y3 + a2*a3*x3*y1*y3 + a1*a2*b2*x3*y1*y3 + a2*a3*b2*x3*y1*y3 + (a2*a3*y1*(1 + y1)*y3)/2 + a2*b1*y2*y3 + a1*a2*b1*y2*y3 + a1*a2*b2*y2*y3 + a2*c1*y2*y3 - 2*a2*b1*c1*y2*y3 + a1*a2*b1*x3*y2*y3 + a1*a2*b2*x3*y2*y3 + a1*a2*y1*y2*y3 + a2*a3*y1*y2*y3 + a1*a3*b1*x2*z1 + a3*x1*x2*z1 + a1*a3*x1*x2*z1 + a3*b1*x1*x2*z1 + a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a3*b2*x3*z1 + a2*a3*b2*x3*z1 + a2*x1*x3*z1 + a1*a2*x1*x3*z1 + a2*a3*x1*x3*z1 + a1*b2*x1*x3*z1 + a2*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a3*x2*x3*z1 + a2*a3*x2*x3*z1 + a1*b1*x2*x3*z1 + a2*b1*x2*x3*z1 + a1*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*x2*y1*z1 + a1*a2*x3*y1*z1 + a2*a3*x3*y1*z1 + a1*a3*b1*y2*z1 + a3*x1*y2*z1 + a1*a3*x1*y2*z1 + a3*b1*x1*y2*z1 + a2*a3*x3*y2*z1 + a1*a3*y1*y2*z1 + a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a2*a3*b1*y3*z1 + a1*b2*y3*z1 + a2*b2*y3*z1 + a1*a3*b2*y3*z1 + a2*a3*b2*y3*z1 + a2*x1*y3*z1 + a1*a2*x1*y3*z1 + a2*a3*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + a3*b2*x1*y3*z1 + a3*x2*y3*z1 + a2*a3*x2*y3*z1 + a1*b1*x2*y3*z1 + a2*b1*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a3*b2*x2*y3*z1 + a1*a2*y1*y3*z1 + a2*a3*y1*y3*z1 + a2*a3*y2*y3*z1 + (a3*b1*x2*z1*(1 + z1))/2 + (a1*b2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + (a3*b2*x3*z1*(1 + z1))/2 + (a3*b1*y2*z1*(1 + z1))/2 + (a1*b2*y3*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + (a3*b2*y3*z1*(1 + z1))/2 + 2*a3*b1*x1*z2 + a1*a3*b1*x1*z2 - a3*b1*c1*x1*z2 + (a3*b1*x1*(1 + x1)*z2)/2 + a3*b1*x2*z2 + a3*b1*b2*x2*z2 + b1*b3*x2*z2 + a2*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a3*c1*x2*z2 - 2*a3*b1*c1*x2*z2 + a3*b2*c1*x2*z2 - 2*a3*b1*b2*c1*x2*z2 + b3*c1*x2*z2 + a2*b3*c1*x2*z2 + a3*b3*c1*x2*z2 - 2*b1*b3*c1*x2*z2 - 2*a2*b1*b3*c1*x2*z2 - 2*a3*b1*b3*c1*x2*z2 + a1*a3*x1*x2*z2 + (a3*b1*x2*(1 + x2)*z2)/2 + b1*x3*z2 + 2*a1*b1*x3*z2 + a2*b1*x3*z2 + a1*a2*b1*x3*z2 + a3*b1*x3*z2 + a1*a2*b2*x3*z2 + 2*b1*b2*x3*z2 + 2*a1*b1*b2*x3*z2 + a2*b1*b2*x3*z2 + b1*b3*x3*z2 + a3*b1*b3*x3*z2 + b1*b2*b3*x3*z2 + c1*x3*z2 + a3*c1*x3*z2 - 2*b1*c1*x3*z2 - a1*b1*c1*x3*z2 - a2*b1*c1*x3*z2 - 2*a3*b1*c1*x3*z2 + b2*c1*x3*z2 + a1*b2*c1*x3*z2 + a2*b2*c1*x3*z2 - 3*b1*b2*c1*x3*z2 - 2*a1*b1*b2*c1*x3*z2 - 2*a2*b1*b2*c1*x3*z2 + b3*c1*x3*z2 + a3*b3*c1*x3*z2 - 2*b1*b3*c1*x3*z2 - 2*a3*b1*b3*c1*x3*z2 + b2*b3*c1*x3*z2 - 2*b1*b2*b3*c1*x3*z2 + a2*x1*x3*z2 + a1*a2*x1*x3*z2 + a3*x1*x3*z2 + a1*b2*x1*x3*z2 + b1*b2*x1*x3*z2 + a1*b1*x2*x3*z2 + a1*b2*x2*x3*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 - a3*b1*c1*y1*z2 + a3*x1*y1*z2 + a3*b1*x1*y1*z2 + a3*x2*y1*z2 + a1*a3*x2*y1*z2 + a1*x3*y1*z2 + a1*a2*x3*y1*z2 + a3*x3*y1*z2 + a2*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + (a3*b1*y1*(1 + y1)*z2)/2 + a3*b1*y2*z2 + a3*b1*b2*y2*z2 + a2*b1*b3*y2*z2 + a3*b1*b3*y2*z2 + a3*c1*y2*z2 - 2*a3*b1*c1*y2*z2 + a3*b2*c1*y2*z2 - 2*a3*b1*b2*c1*y2*z2 + a2*b3*c1*y2*z2 + a3*b3*c1*y2*z2 - 2*a2*b1*b3*c1*y2*z2 - 2*a3*b1*b3*c1*y2*z2 + a3*x1*y2*z2 + a1*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + a1*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + (a3*b1*y2*(1 + y2)*z2)/2 + b1*y3*z2 + a1*b1*y3*z2 + a2*b1*y3*z2 + a1*a2*b1*y3*z2 + a3*b1*y3*z2 + a1*a2*b2*y3*z2 + a1*b1*b2*y3*z2 + a2*b1*b2*y3*z2 + a3*b1*b3*y3*z2 + a3*c1*y3*z2 - b1*c1*y3*z2 - a1*b1*c1*y3*z2 - a2*b1*c1*y3*z2 - 2*a3*b1*c1*y3*z2 + a1*b2*c1*y3*z2 + a2*b2*c1*y3*z2 - 2*a1*b1*b2*c1*y3*z2 - 2*a2*b1*b2*c1*y3*z2 + a3*b3*c1*y3*z2 - 2*a3*b1*b3*c1*y3*z2 + a1*a2*x1*y3*z2 + b1*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*b1*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*b1*x3*y3*z2 + a1*b1*b2*x3*y3*z2 + a1*y1*y3*z2 + a2*y1*y3*z2 + a1*a2*y1*y3*z2 + a1*b1*x3*z1*z2 + a2*b1*x3*z1*z2 + a1*b2*x3*z1*z2 + a2*b2*x3*z1*z2 + a3*b2*x3*z1*z2 + a1*b1*y3*z1*z2 + a2*b1*y3*z1*z2 + a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a3*b2*y3*z1*z2 + (a3*b1*x1*z2*(1 + z2))/2 + (a3*b1*x2*z2*(1 + z2))/2 + (a1*b1*x3*z2*(1 + z2))/2 + (a2*b1*x3*z2*(1 + z2))/2 + (a1*b2*x3*z2*(1 + z2))/2 + (b1*b2*x3*z2*(1 + z2))/2 + (a3*b1*y1*z2*(1 + z2))/2 + (a3*b1*y2*z2*(1 + z2))/2 + (b1*y3*z2*(1 + z2))/2 + (a1*b1*y3*z2*(1 + z2))/2 + (a2*b1*y3*z2*(1 + z2))/2 + (a1*b2*y3*z2*(1 + z2))/2 + a1*b2*x1*z3 + (a1*b2*x1*(1 + x1)*z3)/2 + 3*b1*x2*z3 + 2*a1*b1*x2*z3 + a2*b1*x2*z3 + a3*b1*x2*z3 + a1*b2*x2*z3 + 3*b1*b2*x2*z3 + a1*b1*b2*x2*z3 + b1*b3*x2*z3 + a2*b1*b3*x2*z3 + a3*b1*b3*x2*z3 + b1*b2*b3*x2*z3 + c1*x2*z3 + a2*c1*x2*z3 + a3*c1*x2*z3 - 3*b1*c1*x2*z3 - a1*b1*c1*x2*z3 - 2*a2*b1*c1*x2*z3 - 2*a3*b1*c1*x2*z3 + b2*c1*x2*z3 + a1*b2*c1*x2*z3 - 3*b1*b2*c1*x2*z3 - 2*a1*b1*b2*c1*x2*z3 + b3*c1*x2*z3 + a2*b3*c1*x2*z3 + a3*b3*c1*x2*z3 - 2*b1*b3*c1*x2*z3 - 2*a2*b1*b3*c1*x2*z3 - 2*a3*b1*b3*c1*x2*z3 + b2*b3*c1*x2*z3 - 2*b1*b2*b3*c1*x2*z3 + a1*x1*x2*z3 + b1*x1*x2*z3 + a1*b1*x1*x2*z3 + b1*b2*x1*x2*z3 + (b1*x2*(1 + x2)*z3)/2 + (a1*b1*x2*(1 + x2)*z3)/2 + (a1*b2*x2*(1 + x2)*z3)/2 + (b1*b2*x2*(1 + x2)*z3)/2 + a2*x1*x3*z3 + a1*a2*x1*x3*z3 + b2*x1*x3*z3 + a1*b2*x1*x3*z3 + a2*b2*x1*x3*z3 + a1*a2*b2*x1*x3*z3 + a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + a1*x2*x3*z3 + a1*a2*x2*x3*z3 + a1*a2*b1*x2*x3*z3 + a1*a2*b2*x2*x3*z3 + a1*b1*b2*x2*x3*z3 + a1*b2*y1*z3 + a1*b2*x1*y1*z3 + x2*y1*z3 + b2*x2*y1*z3 + a1*b2*x2*y1*z3 + a2*x3*y1*z3 + a1*a2*x3*y1*z3 + b2*x3*y1*z3 + a1*b2*x3*y1*z3 + a2*b2*x3*y1*z3 + a1*a2*b2*x3*y1*z3 + a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + (a1*b2*y1*(1 + y1)*z3)/2 + 2*a1*b1*y2*z3 + a2*b1*y2*z3 + a3*b1*y2*z3 + a1*b2*y2*z3 + a1*b1*b2*y2*z3 + a2*b1*b3*y2*z3 + a3*b1*b3*y2*z3 + a2*c1*y2*z3 + a3*c1*y2*z3 - a1*b1*c1*y2*z3 - 2*a2*b1*c1*y2*z3 - 2*a3*b1*c1*y2*z3 + a1*b2*c1*y2*z3 - 2*a1*b1*b2*c1*y2*z3 + a2*b3*c1*y2*z3 + a3*b3*c1*y2*z3 - 2*a2*b1*b3*c1*y2*z3 - 2*a3*b1*b3*c1*y2*z3 + a1*b1*x1*y2*z3 + a1*b2*x1*y2*z3 + a1*b1*x2*y2*z3 + a1*b2*x2*y2*z3 + a1*a2*x3*y2*z3 + a1*b1*x3*y2*z3 + a1*a2*b1*x3*y2*z3 + a1*b2*x3*y2*z3 + a1*a2*b2*x3*y2*z3 + a1*y1*y2*z3 + (a1*b1*y2*(1 + y2)*z3)/2 + (a1*b2*y2*(1 + y2)*z3)/2 + a1*a2*x1*y3*z3 + a1*a2*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + a1*x2*y3*z3 + a1*a2*x2*y3*z3 + a1*b1*x2*y3*z3 + a1*a2*b1*x2*y3*z3 + a1*b2*x2*y3*z3 + a1*a2*b2*x2*y3*z3 + a1*b1*b2*x2*y3*z3 + a2*b1*x3*y3*z3 + a1*a2*y1*y3*z3 + a1*a2*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + a1*a2*y2*y3*z3 + a1*a2*b1*y2*y3*z3 + a1*a2*b2*y2*y3*z3 + b1*b2*z2*z3 + b1*b2*b3*z2*z3 - b1*b2*c1*z2*z3 + b2*b3*c1*z2*z3 - 2*b1*b2*b3*c1*z2*z3 + a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + b1*b2*x1*z2*z3 + a1*b1*b2*x3*z2*z3 + a2*b2*y1*z2*z3 + a3*b2*y1*z2*z3 + a1*b1*b2*y3*z2*z3 + (b1*b2*z2*(1 + z2)*z3)/2;
end;
#####################################################################
#####################################################################
#Space Group No. 70 ( Fddd)
#####################################################################
Aiin70:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin70:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin70:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Bxyxzyzin70:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a2*b1*c1 + a2*b1*b2*c1 + a2*x1 + a2*b1*x1 + b2*x1 + a1*b2*x1 + a2*b2*x1 + a2*c1*x1 + a2*b1*x2 + b1*b2*x2 + c1*x2 + a2*c1*x2 + x1*x2 + a2*y1 + a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a2*c1*y1 + x2*y1 + a2*b1*y2 + a2*c1*y2 + b1*z2 + b1*b2*z2 + x1*z2 + y1*z2;
end;
#####################################################################
Cin70:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b2 + a1*a2*b3 + a1*a3*b2*c1 + a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b2*c2 + a3*b1*b2*c2 + a1*a2*b3*c2 + a1*a2*a3*b3*c2 + a1*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*a2*a3*b2*b3*c2 + a1*b1*b2*b3*c2 + a1*a3*b2*c1*c2 + a1*a2*a3*b2*c1*c2 + a1*a3*b3*c1*c2 + a1*a2*a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a1*b2*b3*c1*c2 + a2*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a1*a2*b2*c3 + a1*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a2*b3*c3 + a1*b2*b3*c3 + a2*a3*x1 + a2*a3*b1*x1 + a1*a3*b2*x1 + a2*a3*b2*x1 + a3*b1*b2*x1 + a1*a3*b1*b2*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a2*a3*b2*c1*x1 + a1*a2*a3*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a1*a2*b3*c1*x1 + a2*a3*b3*c1*x1 + a1*a2*a3*b3*c1*x1 + a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*a3*c2*x1 + a2*a3*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a2*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + a1*a2*a3*b1*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + a1*a2*a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a2*b1*b2*b3*c2*x1 + (a2*b3*x1*(1 + x1))/2 + (b2*b3*x1*(1 + x1))/2 + a1*a2*a3*x2 + a3*b1*x2 + a3*b1*b2*x2 + a1*a2*a3*b3*x2 + a1*b2*b3*x2 + a1*a3*b2*b3*x2 + b1*b2*b3*x2 + a2*a3*c1*x2 + a1*a2*a3*c1*x2 + a1*a3*b1*c1*x2 + a2*a3*b2*c1*x2 + a2*b3*c1*x2 + a2*a3*b3*c1*x2 + b1*b3*c1*x2 + a1*b1*b3*c1*x2 + b1*b2*b3*c1*x2 + a1*a2*a3*c2*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*b3*c2*x2 + b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a2*a3*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a1*a2*a3*x1*x2 + a1*a3*b1*x1*x2 + a2*a3*b1*x1*x2 + a1*a3*b1*b2*x1*x2 + a2*b3*x1*x2 + a1*a2*b3*x1*x2 + a2*b1*b3*x1*x2 + a1*a2*b1*b3*x1*x2 + a1*a3*b1*b3*x1*x2 + b2*b3*x1*x2 + (a1*a3*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a1*b3*x2*(1 + x2))/2 + (a1*a2*b3*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + (b1*b3*x2*(1 + x2))/2 + a1*a2*x3 + a1*a2*a3*x3 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + a1*a2*a3*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a1*a2*b3*x3 + a2*b1*b3*x3 + a1*b2*b3*x3 + a1*a2*b2*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a1*a2*b2*c1*x3 + a1*a2*a3*b2*c1*x3 + a1*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a1*a2*b2*b3*c1*x3 + a1*a2*a3*b2*b3*c1*x3 + b1*b2*b3*c1*x3 + a1*b1*b2*b3*c1*x3 + a2*b1*b2*b3*c1*x3 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*a2*a3*c2*x3 + b1*c2*x3 + a1*b1*c2*x3 + a2*b1*c2*x3 + a3*b1*c2*x3 + a1*b2*c2*x3 + b1*b2*c2*x3 + a1*a2*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*a2*a3*b3*c2*x3 + b1*b3*c2*x3 + a1*b1*b3*c2*x3 + a2*b1*b3*c2*x3 + a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + b1*b2*b3*c2*x3 + a2*x1*x3 + a1*a2*x1*x3 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a1*a2*b1*x1*x3 + a1*a2*a3*b1*x1*x3 + a1*b2*x1*x3 + a1*a2*b2*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + a2*b1*b2*x1*x3 + a1*a2*b3*x1*x3 + a1*a2*a3*b3*x1*x3 + a1*a2*b1*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + a2*b2*b3*x1*x3 + a1*a2*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + b1*b2*b3*x1*x3 + b1*x2*x3 + a1*b1*x2*x3 + a1*b2*x2*x3 + a1*a2*b2*x2*x3 + a1*a2*a3*b2*x2*x3 + b1*b2*x2*x3 + a2*b1*b2*x2*x3 + b1*b3*x2*x3 + a1*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + b1*b2*b3*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a1*a2*a3*x3*(1 + x3))/2 + (b1*b2*x3*(1 + x3))/2 + (a1*a2*b3*x3*(1 + x3))/2 + a1*a3*b2*y1 + a3*b1*b2*y1 + a2*b3*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a3*b2*b3*y1 + a1*a2*a3*b2*c1*y1 + a1*a2*a3*b3*c1*y1 + b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + a1*a3*b3*c2*y1 + a2*a3*b3*c2*y1 + a1*b1*b3*c2*y1 + a2*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a2*a3*x1*y1 + a2*a3*b1*x1*y1 + a2*a3*b2*x1*y1 + a2*b3*x1*y1 + a1*a2*b3*x1*y1 + a2*a3*b3*x1*y1 + b2*b3*x1*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a1*a3*b2*x2*y1 + a2*a3*b2*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a1*a3*b3*x2*y1 + a2*a3*b3*x2*y1 + a1*b1*b3*x2*y1 + b2*b3*x2*y1 + a2*x3*y1 + a2*a3*x3*y1 + a1*b2*x3*y1 + a1*b1*b2*x3*y1 + a2*b1*b2*x3*y1 + b2*b3*x3*y1 + a1*b2*b3*x3*y1 + a2*b2*b3*x3*y1 + b1*b2*b3*x3*y1 + (b2*b3*y1*(1 + y1))/2 + a1*a2*a3*y2 + a3*b1*b2*y2 + a1*a2*b3*y2 + a1*a2*a3*b3*y2 + b1*b3*y2 + a1*b2*b3*y2 + b1*b2*b3*y2 + a1*a3*c1*y2 + a1*a2*a3*c1*y2 + a1*a3*b1*c1*y2 + a1*a3*b2*c1*y2 + a1*b3*c1*y2 + a1*a3*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*a3*c2*y2 + a1*a2*a3*c2*y2 + a1*a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a3*b1*b2*c2*y2 + a1*b3*c2*y2 + a1*a3*b3*c2*y2 + a2*b1*b3*c2*y2 + a3*b1*b3*c2*y2 + a2*b1*b2*b3*c2*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a2*a3*b1*x1*y2 + a2*a3*b2*x1*y2 + a2*b3*x1*y2 + a2*a3*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*a2*x3*y2 + a1*a2*a3*x3*y2 + a1*b1*x3*y2 + a1*b2*x3*y2 + a2*b1*b2*x3*y2 + a1*a2*b3*x3*y2 + a1*a2*a3*b3*x3*y2 + a1*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + b1*b2*b3*x3*y2 + a1*a2*a3*y1*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + b2*b3*y1*y2 + (b1*b3*y2*(1 + y2))/2 + a1*a2*a3*y3 + a1*a2*b1*y3 + a2*a3*b1*y3 + a1*a2*a3*b2*y3 + a1*b1*b2*y3 + a3*b1*b2*y3 + a2*b1*b3*y3 + a1*b2*b3*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*b1*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + a1*a2*a3*c2*y3 + a3*b1*b2*c2*y3 + a1*a2*a3*b3*c2*y3 + a1*b1*b3*c2*y3 + a2*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*a2*a3*x1*y3 + a2*a3*b1*x1*y3 + a1*a2*a3*b1*x1*y3 + a2*a3*b2*x1*y3 + a1*a2*a3*b2*x1*y3 + a1*b1*b2*x1*y3 + a2*b1*b2*x1*y3 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a1*a2*a3*x2*y3 + a1*a2*a3*b2*x2*y3 + b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a1*a2*a3*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a1*a2*a3*b3*x3*y3 + b1*b2*b3*x3*y3 + a2*a3*y1*y3 + a1*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a1*b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a2*b1*b2*y2*y3 + a1*b1*b3*y2*y3 + a1*b2*b3*y2*y3 + (a1*a2*a3*y3*(1 + y3))/2 + a1*a3*b2*z1 + a1*a3*b1*b2*z1 + a1*a2*b3*z1 + a2*a3*b3*z1 + a1*a2*b1*b3*z1 + a2*a3*b1*b3*z1 + a1*a3*b2*b3*z1 + a2*a3*b2*b3*z1 + a2*a3*b1*c1*z1 + a2*a3*b1*b2*c1*z1 + a2*b3*c1*z1 + a1*a2*b3*c1*z1 + a2*b1*b3*c1*z1 + a2*a3*b1*b3*c1*z1 + a1*a3*b1*c2*z1 + a2*a3*b1*c2*z1 + a1*a3*b2*c2*z1 + a2*a3*b2*c2*z1 + a1*a3*b3*c2*z1 + a1*a2*a3*b3*c2*z1 + a2*a3*b1*b3*c2*z1 + a1*a2*a3*b1*b3*c2*z1 + a2*a3*b2*b3*c2*z1 + a1*a2*a3*b2*b3*c2*z1 + a2*a3*b1*x1*z1 + a2*a3*b2*x1*z1 + a2*b3*x1*z1 + a1*a2*b3*x1*z1 + a2*a3*b3*x1*z1 + a1*a3*b1*x2*z1 + a2*a3*b1*x2*z1 + a2*a3*b2*x2*z1 + a1*a3*b1*b2*x2*z1 + a2*b3*x2*z1 + a2*a3*b3*x2*z1 + a1*b1*b3*x2*z1 + a2*b1*b3*x2*z1 + a1*a2*b1*b3*x2*z1 + a1*a3*b1*b3*x2*z1 + a1*a2*b1*x3*z1 + a1*a2*a3*b1*x3*z1 + a1*a2*b2*x3*z1 + a1*a2*a3*b2*x3*z1 + a2*a3*b3*x3*z1 + a1*a2*a3*b3*x3*z1 + a1*a2*b1*b3*x3*z1 + a2*a3*b1*b3*x3*z1 + a1*a2*b2*b3*x3*z1 + a2*a3*b2*b3*x3*z1 + a2*a3*b1*y1*z1 + a2*a3*b2*y1*z1 + a2*b3*y1*z1 + a1*a2*b3*y1*z1 + a2*a3*b3*y1*z1 + a2*a3*b1*y2*z1 + a2*a3*b2*y2*z1 + a2*b3*y2*z1 + a2*a3*b3*y2*z1 + a2*a3*b1*y3*z1 + a1*a2*a3*b1*y3*z1 + a2*a3*b2*y3*z1 + a1*a2*a3*b2*y3*z1 + a2*a3*b3*y3*z1 + a1*a2*a3*b3*y3*z1 + (a2*b3*z1*(1 + z1))/2 + a1*a3*b2*z2 + a1*a3*b2*b3*z2 + a1*a3*b2*c1*z2 + a1*b3*c1*z2 + a1*a3*b3*c1*z2 + a1*a3*b2*c2*z2 + a1*a3*b3*c2*z2 + a1*a2*a3*b3*c2*z2 + a1*a2*a3*b2*b3*c2*z2 + a1*a3*b2*x1*z2 + a2*a3*b2*x1*z2 + a1*a3*b1*b2*x1*z2 + a1*b3*x1*z2 + a2*b3*x1*z2 + a1*a3*b3*x1*z2 + a2*a3*b3*x1*z2 + a1*b1*b3*x1*z2 + a2*b1*b3*x1*z2 + a1*a2*b1*b3*x1*z2 + a1*a3*b1*b3*x1*z2 + a1*a2*b2*x3*z2 + a1*a2*a3*b2*x3*z2 + a1*a2*a3*b3*x3*z2 + a1*a2*b2*b3*x3*z2 + a1*a3*b2*y1*z2 + a2*a3*b2*y1*z2 + a1*b3*y1*z2 + a2*b3*y1*z2 + a1*a3*b3*y1*z2 + a2*a3*b3*y1*z2 + a1*a2*a3*b2*y3*z2 + a1*a2*a3*b3*y3*z2 + a1*a3*b2*z1*z2 + a1*a3*b1*b2*z1*z2 + a1*b3*z1*z2 + a2*b3*z1*z2 + a1*a2*b3*z1*z2 + a1*a3*b3*z1*z2 + a1*b1*b3*z1*z2 + a2*b1*b3*z1*z2 + a1*a2*b1*b3*z1*z2 + a1*a3*b1*b3*z1*z2 + (a1*a3*b2*z2*(1 + z2))/2 + (a1*b3*z2*(1 + z2))/2 + (a1*a2*b3*z2*(1 + z2))/2 + (a1*a3*b3*z2*(1 + z2))/2 + b1*b2*z3 + a3*b1*b2*z3 + a1*a2*a3*b3*z3 + a1*a2*b2*b3*z3 + a1*a3*b2*b3*z3 + a1*a2*b3*c1*z3 + a1*a2*a3*b3*c1*z3 + a1*a2*b2*b3*c1*z3 + a1*a2*a3*b2*b3*c1*z3 + b1*b2*c2*z3 + a3*b1*b2*c2*z3 + a1*a2*b3*c2*z3 + a1*a3*b3*c2*z3 + a1*a2*a3*b3*c2*z3 + a1*b2*x1*z3 + b1*b2*x1*z3 + a1*a2*b1*b3*x1*z3 + a2*a3*b1*b3*x1*z3 + a1*a2*b2*b3*x1*z3 + a2*a3*b2*b3*x1*z3 + b1*b2*b3*x1*z3 + b1*x2*z3 + a1*b1*x2*z3 + a1*b2*x2*z3 + b1*b2*x2*z3 + a1*a2*b3*x2*z3 + a1*a2*a3*b3*x2*z3 + a1*a2*b2*b3*x2*z3 + b1*b2*b3*x2*z3 + a1*a2*a3*b3*x3*z3 + b1*b2*b3*x3*z3 + a1*b2*y1*z3 + b1*b2*y1*z3 + b1*b2*b3*y1*z3 + a1*b1*y2*z3 + a1*b2*y2*z3 + b1*b2*y2*z3 + a1*a2*b3*y2*z3 + a1*a2*a3*b3*y2*z3 + b1*b2*b3*y2*z3 + b1*b2*y3*z3 + a1*a2*a3*b3*y3*z3 + b1*b2*b3*y3*z3 + a1*a2*b3*z1*z3 + a2*a3*b3*z1*z3 + a1*a2*b1*b3*z1*z3 + a2*a3*b1*b3*z1*z3 + a1*a2*b2*b3*z1*z3 + a2*a3*b2*b3*z1*z3 + a1*a2*b3*z2*z3 + a1*a2*b2*b3*z2*z3 + (b1*b2*z3*(1 + z3))/2 + (a1*a2*b3*z3*(1 + z3))/2;
end;
#####################################################################
#####################################################################
#Space Group No. 71 ( Immm)
#####################################################################
Aiin71:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin71:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin71:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyzin71:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bphiin71:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*y1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + a2*b1*z1 + a1*b2*z1 + a2*b2*z1;
end;
#####################################################################
Bxyzin71:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*x1*x2 + b1*x1*x2 + x1*y2 + a1*x1*y2 + b1*x1*y2 + a1*x2*y2 + b1*x2*y2 + x1*z2 + a1*x1*z2 + b1*x1*z2 + a1*x2*z2 + b1*x2*z2;
end;
#####################################################################
Byxzin71:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*x1*x2 + b1*x2*y1 + x1*y2 + a1*x1*y2 + a1*x2*y2 + b1*x2*y2 + b1*y1*y2 + a1*x1*z2 + a1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
Cxyzin71:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*x2 + a1*a2*a3*b1*x2 + (5*a1*a2*b1*b3*x2)/2 + (3*a1*a2*b2*b3*x2)/2 + a1*a2*b1*b2*b3*x2 + a1*a2*a3*c1*x2 - 2*a1*a2*a3*b1*c1*x2 - a1*a2*b1*b3*c1*x2 - a1*a2*b1*b2*b3*c1*x2 + (3*a1*a3*x1*x2)/2 + (3*a1*a2*a3*x1*x2)/2 + 3*a3*b1*x1*x2 + a1*a3*b1*x1*x2 + (5*a2*a3*b1*x1*x2)/2 + 3*a1*a2*a3*b1*x1*x2 + (3*a1*a3*b2*x1*x2)/2 + a1*a2*a3*b2*x1*x2 + (5*a3*b1*b2*x1*x2)/2 + 4*a1*a3*b1*b2*x1*x2 + 2*a2*a3*b1*b2*x1*x2 + a1*a2*a3*b1*b2*x1*x2 + a1*b3*x1*x2 + a1*b1*b3*x1*x2 + (5*a2*b1*b3*x1*x2)/2 + (3*a1*a2*b1*b3*x1*x2)/2 + (3*a1*b2*b3*x1*x2)/2 + (a1*a2*b2*b3*x1*x2)/2 + (5*a1*b1*b2*b3*x1*x2)/2 + (3*a2*b1*b2*b3*x1*x2)/2 + a1*a2*b1*b2*b3*x1*x2 + a1*a2*a3*c1*x1*x2 - a3*b1*c1*x1*x2 - a2*a3*b1*c1*x1*x2 - 3*a1*a2*a3*b1*c1*x1*x2 + a1*a3*b2*c1*x1*x2 + a1*a2*a3*b2*c1*x1*x2 - a3*b1*b2*c1*x1*x2 - 3*a1*a3*b1*b2*c1*x1*x2 - a2*a3*b1*b2*c1*x1*x2 - 2*a1*a2*a3*b1*b2*c1*x1*x2 - a2*b1*b3*c1*x1*x2 - a1*a2*b1*b3*c1*x1*x2 + a1*b2*b3*c1*x1*x2 + a1*a2*b2*b3*c1*x1*x2 - 3*a1*b1*b2*b3*c1*x1*x2 - a2*b1*b2*b3*c1*x1*x2 - 2*a1*a2*b1*b2*b3*c1*x1*x2 + (a1*a3*x1^2*x2)/2 + (a3*b1*x1^2*x2)/2 + (a1*a2*a3*b1*x1^2*x2)/2 + (a1*a2*a3*b2*x1^2*x2)/2 + (a1*a3*b1*b2*x1^2*x2)/2 + (a2*a3*b1*b2*x1^2*x2)/2 + (a1*a2*a3*x2^2)/2 + (a1*a2*b1*b3*x2^2)/2 + a1*a2*b2*b3*x2^2 + (a1*a2*b1*b2*b3*x2^2)/2 + (a1*a2*a3*x1*x2^2)/2 + (a3*b1*x1*x2^2)/2 + (a2*a3*b1*x1*x2^2)/2 + (a1*a2*a3*b1*x1*x2^2)/2 + (a1*a3*b2*x1*x2^2)/2 + (a1*a2*a3*b2*x1*x2^2)/2 + (a3*b1*b2*x1*x2^2)/2 + (a1*a3*b1*b2*x1*x2^2)/2 + (a2*a3*b1*b2*x1*x2^2)/2 + (a2*b1*b3*x1*x2^2)/2 + (a1*a2*b1*b3*x1*x2^2)/2 + (a1*b2*b3*x1*x2^2)/2 + (a1*a2*b2*b3*x1*x2^2)/2 + (a1*b1*b2*b3*x1*x2^2)/2 + (a2*b1*b2*b3*x1*x2^2)/2 + (a1*a2*a3*x2^3)/2 + (a1*a2*b2*b3*x2^3)/2 + (a1*a2*b1*b2*b3*x2^3)/2 + a2*x1*x3 + (3*a1*a2*x1*x3)/2 + a2*a3*x1*x3 + a1*a2*a3*x1*x3 + a2*b1*x1*x3 + (a2*a3*b1*x1*x3)/2 + a1*a2*a3*b1*x1*x3 + (3*a1*b2*x1*x3)/2 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + (3*a1*a3*b2*x1*x3)/2 + a2*a3*b2*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + a1*a2*b1*b2*x1*x3 + a1*a3*b1*b2*x1*x3 + (3*a2*a3*b1*b2*x1*x3)/2 + a1*a2*a3*b1*b2*x1*x3 + (3*a1*a2*b3*x1*x3)/2 + a1*a2*a3*b3*x1*x3 + (3*a2*a3*b1*b3*x1*x3)/2 + a1*a2*a3*b1*b3*x1*x3 + (3*a1*a2*b2*b3*x1*x3)/2 + (3*a1*a3*b2*b3*x1*x3)/2 + (3*a1*a2*b1*b2*b3*x1*x3)/2 + (3*a1*a3*b1*b2*b3*x1*x3)/2 + (a1*a2*x1^2*x3)/2 + (a2*a3*b1*x1^2*x3)/2 + (a1*b2*x1^2*x3)/2 + (a1*a3*b2*x1^2*x3)/2 + (a2*a3*b1*b2*x1^2*x3)/2 + (a1*a2*b3*x1^2*x3)/2 + (a2*a3*b1*b3*x1^2*x3)/2 + (a1*a2*b2*b3*x1^2*x3)/2 + (a1*a3*b2*b3*x1^2*x3)/2 + (a1*a2*b1*b2*b3*x1^2*x3)/2 + (a1*a3*b1*b2*b3*x1^2*x3)/2 + a2*a3*b1*x2*x3 + a2*a3*c1*x2*x3 - 2*a2*a3*b1*c1*x2*x3 + a1*a2*x1*x2*x3 + a1*a3*x1*x2*x3 + a3*b1*x1*x2*x3 + a1*a3*b2*x1*x2*x3 + a2*a3*b2*x1*x2*x3 + a3*b1*b2*x1*x2*x3 + a1*a2*b3*x1*x2*x3 + a2*a3*b3*x1*x2*x3 + a2*a3*y1 + (3*a2*b1*b3*y1)/2 + (3*b2*b3*y1)/2 + (3*a1*b2*b3*y1)/2 + (3*a2*b2*b3*y1)/2 + (3*a2*a3*x1*y1)/2 + a2*a3*b1*x1*y1 + (3*a3*b2*x1*y1)/2 + a1*a3*b2*x1*y1 + a2*a3*b2*x1*y1 + (a2*b1*b3*x1*y1)/2 + b2*b3*x1*y1 + (a1*b2*b3*x1*y1)/2 + (a2*b2*b3*x1*y1)/2 + (a2*a3*b1*x1^2*y1)/2 + (a3*b2*x1^2*y1)/2 + (a1*a3*b2*x1^2*y1)/2 + (a2*a3*b2*x1^2*y1)/2 + 2*a3*x2*y1 + 2*a1*a3*x2*y1 + (3*a2*a3*x2*y1)/2 + (3*a1*a2*a3*x2*y1)/2 + (3*a3*b1*x2*y1)/2 + 4*a1*a3*b1*x2*y1 + (5*a2*a3*b1*x2*y1)/2 + 3*a1*a2*a3*b1*x2*y1 + (3*a3*b2*x2*y1)/2 + (3*a1*a3*b2*x2*y1)/2 + a2*a3*b2*x2*y1 + a1*a2*a3*b2*x2*y1 + (3*a3*b1*b2*x2*y1)/2 + 4*a1*a3*b1*b2*x2*y1 + 3*a2*a3*b1*b2*x2*y1 + a1*a2*a3*b1*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + (3*b1*b3*x2*y1)/2 + a1*b1*b3*x2*y1 + (3*a2*b1*b3*x2*y1)/2 + (3*a1*a2*b1*b3*x2*y1)/2 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + (a2*b2*b3*x2*y1)/2 + (3*a1*a2*b2*b3*x2*y1)/2 + (b1*b2*b3*x2*y1)/2 + 2*a1*a2*b1*b2*b3*x2*y1 + a3*c1*x2*y1 + a1*a3*c1*x2*y1 + a1*a2*a3*c1*x2*y1 - 2*a3*b1*c1*x2*y1 - 3*a1*a3*b1*c1*x2*y1 - a2*a3*b1*c1*x2*y1 - 3*a1*a2*a3*b1*c1*x2*y1 + a3*b2*c1*x2*y1 + a1*a3*b2*c1*x2*y1 + a2*a3*b2*c1*x2*y1 + a1*a2*a3*b2*c1*x2*y1 - 2*a3*b1*b2*c1*x2*y1 - 3*a1*a3*b1*b2*c1*x2*y1 - 3*a2*a3*b1*b2*c1*x2*y1 - 2*a1*a2*a3*b1*b2*c1*x2*y1 - a1*a2*b1*b3*c1*x2*y1 + a1*a2*b2*b3*c1*x2*y1 - 2*a1*a2*b1*b2*b3*c1*x2*y1 + a1*a3*x1*x2*y1 + a1*a2*a3*x1*x2*y1 + a1*a3*b1*x1*x2*y1 + a3*b2*x1*x2*y1 + a2*a3*b2*x1*x2*y1 + b1*b3*x1*x2*y1 + a2*b1*b3*x1*x2*y1 + a1*a2*b1*b3*x1*x2*y1 + a1*b2*b3*x1*x2*y1 + a1*a2*b2*b3*x1*x2*y1 + a1*b1*b2*b3*x1*x2*y1 + a2*b1*b2*b3*x1*x2*y1 + (a3*x2^2*y1)/2 + (a1*a3*x2^2*y1)/2 + (a1*a2*a3*x2^2*y1)/2 + (a1*a3*b1*x2^2*y1)/2 + (a2*a3*b1*x2^2*y1)/2 + (a1*a2*a3*b1*x2^2*y1)/2 + (a3*b2*x2^2*y1)/2 + (a1*a3*b2*x2^2*y1)/2 + (a2*a3*b2*x2^2*y1)/2 + (a1*a2*a3*b2*x2^2*y1)/2 + (a1*a3*b1*b2*x2^2*y1)/2 + (a2*a3*b1*b2*x2^2*y1)/2 + (a1*a2*b1*b3*x2^2*y1)/2 + (a1*a2*b2*b3*x2^2*y1)/2 + (a2*x3*y1)/2 + (3*a1*a2*x3*y1)/2 + a1*a2*a3*x3*y1 + a2*b1*x3*y1 + (3*a2*a3*b1*x3*y1)/2 + a1*a2*a3*b1*x3*y1 + b2*x3*y1 + (a1*b2*x3*y1)/2 + (a2*b2*x3*y1)/2 + a3*b2*x3*y1 + (a1*a3*b2*x3*y1)/2 + a1*a2*a3*b2*x3*y1 + (b1*b2*x3*y1)/2 + a1*b1*b2*x3*y1 + (a2*b1*b2*x3*y1)/2 + a1*a2*b1*b2*x3*y1 + (a3*b1*b2*x3*y1)/2 + a1*a3*b1*b2*x3*y1 + (a2*a3*b1*b2*x3*y1)/2 + a1*a2*a3*b1*b2*x3*y1 + (3*a2*b3*x3*y1)/2 + (3*a1*a2*b3*x3*y1)/2 + a2*a3*b3*x3*y1 + a1*a2*a3*b3*x3*y1 + (a2*a3*b1*b3*x3*y1)/2 + a1*a2*a3*b1*b3*x3*y1 + (3*a2*b2*b3*x3*y1)/2 + (3*a1*a2*b2*b3*x3*y1)/2 + (3*a3*b2*b3*x3*y1)/2 + (3*a1*a3*b2*b3*x3*y1)/2 + (3*a2*b1*b2*b3*x3*y1)/2 + (3*a1*a2*b1*b2*b3*x3*y1)/2 + (3*a3*b1*b2*b3*x3*y1)/2 + (3*a1*a3*b1*b2*b3*x3*y1)/2 + a2*x1*x3*y1 + a2*a3*b1*x1*x3*y1 + a1*b2*x1*x3*y1 + a1*a2*b2*x1*x3*y1 + a3*b2*x1*x3*y1 + a1*a3*b2*x1*x3*y1 + a2*a3*b1*b2*x1*x3*y1 + a2*b3*x1*x3*y1 + a2*a3*b1*b3*x1*x3*y1 + a1*a2*b1*b2*b3*x1*x3*y1 + a1*a3*b1*b2*b3*x1*x3*y1 + a2*x2*x3*y1 + a1*a2*x2*x3*y1 + a3*x2*x3*y1 + a1*a3*x2*x3*y1 + a3*b1*x2*x3*y1 + a3*b2*x2*x3*y1 + a1*a3*b2*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + a3*b1*b2*x2*x3*y1 + a2*b3*x2*x3*y1 + a1*a2*b3*x2*x3*y1 + a2*a3*b3*x2*x3*y1 + (a2*a3*y1^2)/2 + a2*b1*b3*y1^2 + b2*b3*y1^2 + a1*b2*b3*y1^2 + a2*b2*b3*y1^2 + (a2*a3*x1*y1^2)/2 + (a2*a3*b1*x1*y1^2)/2 + (a1*a3*b2*x1*y1^2)/2 + (a2*a3*b2*x1*y1^2)/2 + (a2*b1*b3*x1*y1^2)/2 + (a1*b2*b3*x1*y1^2)/2 + (a2*b2*b3*x1*y1^2)/2 + (a3*x2*y1^2)/2 + (a1*a3*x2*y1^2)/2 + (a2*a3*x2*y1^2)/2 + (a3*b1*x2*y1^2)/2 + (a1*a3*b1*x2*y1^2)/2 + (a1*a2*a3*b1*x2*y1^2)/2 + (a2*a3*b2*x2*y1^2)/2 + (a1*a2*a3*b2*x2*y1^2)/2 + (a3*b1*b2*x2*y1^2)/2 + (a1*a3*b1*b2*x2*y1^2)/2 + (a2*a3*b1*b2*x2*y1^2)/2 + (b1*b3*x2*y1^2)/2 + (a2*b1*b3*x2*y1^2)/2 + (a2*b2*b3*x2*y1^2)/2 + (b1*b2*b3*x2*y1^2)/2 + (a2*x3*y1^2)/2 + (a1*a2*x3*y1^2)/2 + (a2*a3*b1*x3*y1^2)/2 + (a1*b2*x3*y1^2)/2 + (a2*b2*x3*y1^2)/2 + (a1*a3*b2*x3*y1^2)/2 + (b1*b2*x3*y1^2)/2 + (a2*b1*b2*x3*y1^2)/2 + (a3*b1*b2*x3*y1^2)/2 + (a2*a3*b1*b2*x3*y1^2)/2 + (a2*b3*x3*y1^2)/2 + (a1*a2*b3*x3*y1^2)/2 + (a2*a3*b1*b3*x3*y1^2)/2 + (a2*b2*b3*x3*y1^2)/2 + (a1*a2*b2*b3*x3*y1^2)/2 + (a3*b2*b3*x3*y1^2)/2 + (a1*a3*b2*b3*x3*y1^2)/2 + (a2*b1*b2*b3*x3*y1^2)/2 + (a1*a2*b1*b2*b3*x3*y1^2)/2 + (a3*b1*b2*b3*x3*y1^2)/2 + (a1*a3*b1*b2*b3*x3*y1^2)/2 + (a2*a3*y1^3)/2 + (a2*b1*b3*y1^3)/2 + (b2*b3*y1^3)/2 + (a1*b2*b3*y1^3)/2 + (a2*b2*b3*y1^3)/2 + a1*a3*y2 + a1*a2*a3*y2 + a3*b1*y2 + a1*a3*b1*y2 + a2*a3*b1*y2 + a1*a2*a3*b1*y2 + (5*b1*b3*y2)/2 + (5*a1*b1*b3*y2)/2 + (5*a2*b1*b3*y2)/2 + (5*a1*a2*b1*b3*y2)/2 + (3*a1*b2*b3*y2)/2 + (3*a1*a2*b2*b3*y2)/2 + b1*b2*b3*y2 + a1*b1*b2*b3*y2 + a2*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + a3*c1*y2 + a1*a3*c1*y2 + a2*a3*c1*y2 + a1*a2*a3*c1*y2 - 2*a3*b1*c1*y2 - 2*a1*a3*b1*c1*y2 - 2*a2*a3*b1*c1*y2 - 2*a1*a2*a3*b1*c1*y2 - b1*b3*c1*y2 - a1*b1*b3*c1*y2 - a2*b1*b3*c1*y2 - a1*a2*b1*b3*c1*y2 - b1*b2*b3*c1*y2 - a1*b1*b2*b3*c1*y2 - a2*b1*b2*b3*c1*y2 - a1*a2*b1*b2*b3*c1*y2 + 2*a3*x1*y2 + 2*a1*a3*x1*y2 + (3*a2*a3*x1*y2)/2 + (3*a1*a2*a3*x1*y2)/2 + 4*a3*b1*x1*y2 + 3*a1*a3*b1*x1*y2 + (5*a2*a3*b1*x1*y2)/2 + 3*a1*a2*a3*b1*x1*y2 + (3*a3*b2*x1*y2)/2 + (a1*a3*b2*x1*y2)/2 + a2*a3*b2*x1*y2 + a1*a2*a3*b2*x1*y2 + 3*a3*b1*b2*x1*y2 + 2*a1*a3*b1*b2*x1*y2 + 3*a2*a3*b1*b2*x1*y2 + a1*a2*a3*b1*b2*x1*y2 + b3*x1*y2 + (3*a1*b3*x1*y2)/2 + a1*a2*b3*x1*y2 + a1*a3*b3*x1*y2 + (3*b1*b3*x1*y2)/2 + (3*a1*b1*b3*x1*y2)/2 + (a2*b1*b3*x1*y2)/2 + (5*a1*a2*b1*b3*x1*y2)/2 + (3*a3*b1*b3*x1*y2)/2 + a1*a3*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + (a2*b2*b3*x1*y2)/2 + (a1*a2*b2*b3*x1*y2)/2 + (3*a1*b1*b2*b3*x1*y2)/2 + (5*a2*b1*b2*b3*x1*y2)/2 + a1*a2*b1*b2*b3*x1*y2 + a3*c1*x1*y2 + a1*a3*c1*x1*y2 + a2*a3*c1*x1*y2 + a1*a2*a3*c1*x1*y2 - 3*a3*b1*c1*x1*y2 - 3*a1*a3*b1*c1*x1*y2 - 2*a2*a3*b1*c1*x1*y2 - 3*a1*a2*a3*b1*c1*x1*y2 + a2*a3*b2*c1*x1*y2 + a1*a2*a3*b2*c1*x1*y2 - a3*b1*b2*c1*x1*y2 - a1*a3*b1*b2*c1*x1*y2 - 3*a2*a3*b1*b2*c1*x1*y2 - 2*a1*a2*a3*b1*b2*c1*x1*y2 - a1*b1*b3*c1*x1*y2 - a1*a2*b1*b3*c1*x1*y2 + a2*b2*b3*c1*x1*y2 + a1*a2*b2*b3*c1*x1*y2 - a1*b1*b2*b3*c1*x1*y2 - 3*a2*b1*b2*b3*c1*x1*y2 - 2*a1*a2*b1*b2*b3*c1*x1*y2 + (a3*x1^2*y2)/2 + (a1*a3*x1^2*y2)/2 + (a3*b1*x1^2*y2)/2 + (a1*a3*b1*x1^2*y2)/2 + (a2*a3*b1*x1^2*y2)/2 + (a1*a2*a3*b1*x1^2*y2)/2 + (a3*b2*x1^2*y2)/2 + (a1*a3*b2*x1^2*y2)/2 + (a2*a3*b2*x1^2*y2)/2 + (a1*a2*a3*b2*x1^2*y2)/2 + (a3*b1*b2*x1^2*y2)/2 + (a1*a3*b1*b2*x1^2*y2)/2 + (a2*a3*b1*b2*x1^2*y2)/2 + (a1*b3*x1^2*y2)/2 + (b1*b3*x1^2*y2)/2 + (a2*b1*b3*x1^2*y2)/2 + (a3*b1*b3*x1^2*y2)/2 + (a1*a3*x2*y2)/2 + a1*a2*a3*x2*y2 + (5*a3*b1*x2*y2)/2 + 2*a1*a3*b1*x2*y2 + a2*a3*b1*x2*y2 + 2*a3*b1*b2*x2*y2 + (3*b1*b3*x2*y2)/2 + a2*b1*b3*x2*y2 + (a1*b2*b3*x2*y2)/2 + a1*a2*b2*b3*x2*y2 + (3*b1*b2*b3*x2*y2)/2 + (5*a1*b1*b2*b3*x2*y2)/2 + (5*a2*b1*b2*b3*x2*y2)/2 + a1*a2*b1*b2*b3*x2*y2 + a3*c1*x2*y2 + a1*a3*c1*x2*y2 + a2*a3*c1*x2*y2 - 3*a3*b1*c1*x2*y2 - 2*a1*a3*b1*c1*x2*y2 - 2*a2*a3*b1*c1*x2*y2 + a3*b2*c1*x2*y2 - 2*a3*b1*b2*c1*x2*y2 - b1*b3*c1*x2*y2 + a1*b2*b3*c1*x2*y2 + a2*b2*b3*c1*x2*y2 - b1*b2*b3*c1*x2*y2 - 3*a1*b1*b2*b3*c1*x2*y2 - 3*a2*b1*b2*b3*c1*x2*y2 + a3*x1*x2*y2 + a1*a3*b1*x1*x2*y2 + a2*a3*b1*x1*x2*y2 + a1*a3*b2*x1*x2*y2 + a2*a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a1*b3*x1*x2*y2 + a2*b3*x1*x2*y2 + a3*b3*x1*x2*y2 + b1*b3*x1*x2*y2 + (a1*a3*x2^2*y2)/2 + (a1*a2*a3*x2^2*y2)/2 + (a3*b1*x2^2*y2)/2 + (a1*a3*b1*x2^2*y2)/2 + (a3*b1*b2*x2^2*y2)/2 + (a2*b1*b3*x2^2*y2)/2 + (a1*b2*b3*x2^2*y2)/2 + (a1*a2*b2*b3*x2^2*y2)/2 + (a1*b1*b2*b3*x2^2*y2)/2 + (a2*b1*b2*b3*x2^2*y2)/2 + (a1*a2*b1*b2*b3*x2^2*y2)/2 + a3*b1*x3*y2 + a2*a3*b1*x3*y2 + a3*c1*x3*y2 + a2*a3*c1*x3*y2 - 2*a3*b1*c1*x3*y2 - 2*a2*a3*b1*c1*x3*y2 + x1*x3*y2 + a1*x1*x3*y2 + a2*x1*x3*y2 + a1*a2*x1*x3*y2 + a3*x1*x3*y2 + a1*a3*x1*x3*y2 + a3*b1*x1*x3*y2 + a1*a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a3*b1*b2*x1*x3*y2 + b3*x1*x3*y2 + a1*b3*x1*x3*y2 + a2*b3*x1*x3*y2 + a1*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a2*a3*b3*x1*x3*y2 + a3*y1*y2 + (3*a1*a3*y1*y2)/2 + a2*a3*y1*y2 + (3*a1*a2*a3*y1*y2)/2 + (7*a3*b1*y1*y2)/2 + (5*a2*a3*b1*y1*y2)/2 + 3*a1*a2*a3*b1*y1*y2 + a3*b2*y1*y2 + (a1*a3*b2*y1*y2)/2 + a1*a2*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + 2*a1*a3*b1*b2*y1*y2 + 2*a2*a3*b1*b2*y1*y2 + a1*a2*a3*b1*b2*y1*y2 + (b3*y1*y2)/2 + (3*a1*b3*y1*y2)/2 + a2*b3*y1*y2 + a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a1*a3*b3*y1*y2 + 3*b1*b3*y1*y2 + (3*a1*b1*b3*y1*y2)/2 + (5*a2*b1*b3*y1*y2)/2 + (5*a1*a2*b1*b3*y1*y2)/2 + (a3*b1*b3*y1*y2)/2 + a1*a3*b1*b3*y1*y2 + 2*b2*b3*y1*y2 + (a1*b2*b3*y1*y2)/2 + 2*a2*b2*b3*y1*y2 + (3*a1*a2*b2*b3*y1*y2)/2 + (5*b1*b2*b3*y1*y2)/2 + 2*a1*b1*b2*b3*y1*y2 + 2*a2*b1*b2*b3*y1*y2 + 2*a1*a2*b1*b2*b3*y1*y2 + a3*c1*y1*y2 + a2*a3*c1*y1*y2 + a1*a2*a3*c1*y1*y2 - 3*a3*b1*c1*y1*y2 - 2*a2*a3*b1*c1*y1*y2 - 3*a1*a2*a3*b1*c1*y1*y2 + a1*a2*a3*b2*c1*y1*y2 - a1*a3*b1*b2*c1*y1*y2 - a2*a3*b1*b2*c1*y1*y2 - 2*a1*a2*a3*b1*b2*c1*y1*y2 - b1*b3*c1*y1*y2 - a1*b1*b3*c1*y1*y2 - a2*b1*b3*c1*y1*y2 - a1*a2*b1*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + a1*b2*b3*c1*y1*y2 + a2*b2*b3*c1*y1*y2 + a1*a2*b2*b3*c1*y1*y2 - 2*b1*b2*b3*c1*y1*y2 - 2*a1*b1*b2*b3*c1*y1*y2 - 2*a2*b1*b2*b3*c1*y1*y2 - 2*a1*a2*b1*b2*b3*c1*y1*y2 + a2*a3*x1*y1*y2 + a1*a2*a3*x1*y1*y2 + a1*a3*b1*x1*y1*y2 + a2*a3*b2*x1*y1*y2 + a3*b1*b2*x1*y1*y2 + b3*x1*y1*y2 + a1*b1*b3*x1*y1*y2 + a2*b1*b3*x1*y1*y2 + a1*a2*b1*b3*x1*y1*y2 + a3*b1*b3*x1*y1*y2 + a2*b2*b3*x1*y1*y2 + a1*a2*b2*b3*x1*y1*y2 + a1*b1*b2*b3*x1*y1*y2 + a2*b1*b2*b3*x1*y1*y2 + a3*x2*y1*y2 + a1*a3*x2*y1*y2 + a2*a3*x2*y1*y2 + a3*b1*x2*y1*y2 + a1*a3*b1*x2*y1*y2 + a2*a3*b1*x2*y1*y2 + a3*b2*x2*y1*y2 + a1*a3*b2*x2*y1*y2 + a2*a3*b2*x2*y1*y2 + a3*b1*b2*x2*y1*y2 + a1*b3*x2*y1*y2 + a2*b3*x2*y1*y2 + a3*b3*x2*y1*y2 + a1*b2*b3*x2*y1*y2 + a2*b2*b3*x2*y1*y2 + b1*b2*b3*x2*y1*y2 + a1*b1*b2*b3*x2*y1*y2 + a2*b1*b2*b3*x2*y1*y2 + a1*x3*y1*y2 + a1*a2*x3*y1*y2 + a1*a3*x3*y1*y2 + a3*b1*x3*y1*y2 + a3*b2*x3*y1*y2 + a1*a3*b2*x3*y1*y2 + a2*a3*b2*x3*y1*y2 + a3*b1*b2*x3*y1*y2 + a1*b3*x3*y1*y2 + a1*a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + a2*a3*b3*x3*y1*y2 + (a3*y1^2*y2)/2 + (a1*a3*y1^2*y2)/2 + (a2*a3*y1^2*y2)/2 + (a2*a3*b1*y1^2*y2)/2 + (a1*a2*a3*b1*y1^2*y2)/2 + (a1*a3*b2*y1^2*y2)/2 + (a1*a2*a3*b2*y1^2*y2)/2 + (a1*a3*b1*b2*y1^2*y2)/2 + (a2*a3*b1*b2*y1^2*y2)/2 + (b3*y1^2*y2)/2 + (a1*b3*y1^2*y2)/2 + (b1*b3*y1^2*y2)/2 + (a3*b1*b3*y1^2*y2)/2 + (b2*b3*y1^2*y2)/2 + (a2*b2*b3*y1^2*y2)/2 + (b1*b2*b3*y1^2*y2)/2 + (a1*a3*y2^2)/2 + (a1*a2*a3*y2^2)/2 + (b1*b3*y2^2)/2 + (a1*b1*b3*y2^2)/2 + (a2*b1*b3*y2^2)/2 + (a1*a2*b1*b3*y2^2)/2 + a1*b2*b3*y2^2 + a1*a2*b2*b3*y2^2 + (b1*b2*b3*y2^2)/2 + (a1*b1*b2*b3*y2^2)/2 + (a2*b1*b2*b3*y2^2)/2 + (a1*a2*b1*b2*b3*y2^2)/2 + (a3*x1*y2^2)/2 + (a1*a3*x1*y2^2)/2 + (a2*a3*x1*y2^2)/2 + (a1*a2*a3*x1*y2^2)/2 + (a3*b1*x1*y2^2)/2 + (a1*a3*b1*x1*y2^2)/2 + (a1*a2*a3*b1*x1*y2^2)/2 + (a2*a3*b2*x1*y2^2)/2 + (a1*a2*a3*b2*x1*y2^2)/2 + (a3*b1*b2*x1*y2^2)/2 + (a1*a3*b1*b2*x1*y2^2)/2 + (a2*a3*b1*b2*x1*y2^2)/2 + (a1*b1*b3*x1*y2^2)/2 + (a1*a2*b1*b3*x1*y2^2)/2 + (a2*b2*b3*x1*y2^2)/2 + (a1*a2*b2*b3*x1*y2^2)/2 + (a1*b1*b2*b3*x1*y2^2)/2 + (a2*b1*b2*b3*x1*y2^2)/2 + (a1*a2*a3*x2*y2^2)/2 + (a1*a3*b1*x2*y2^2)/2 + (a3*b1*b2*x2*y2^2)/2 + (b1*b3*x2*y2^2)/2 + (a2*b1*b3*x2*y2^2)/2 + (a1*a2*b2*b3*x2*y2^2)/2 + (b1*b2*b3*x2*y2^2)/2 + (a1*a2*b1*b2*b3*x2*y2^2)/2 + (a3*y1*y2^2)/2 + (a2*a3*y1*y2^2)/2 + (a1*a2*a3*y1*y2^2)/2 + (a3*b1*y1*y2^2)/2 + (a1*a2*a3*b1*y1*y2^2)/2 + (a1*a2*a3*b2*y1*y2^2)/2 + (a1*a3*b1*b2*y1*y2^2)/2 + (a2*a3*b1*b2*y1*y2^2)/2 + (b1*b3*y1*y2^2)/2 + (a1*b1*b3*y1*y2^2)/2 + (a2*b1*b3*y1*y2^2)/2 + (a1*a2*b1*b3*y1*y2^2)/2 + (b2*b3*y1*y2^2)/2 + (a1*b2*b3*y1*y2^2)/2 + (a2*b2*b3*y1*y2^2)/2 + (a1*a2*b2*b3*y1*y2^2)/2 + (a1*a3*y2^3)/2 + (a1*a2*a3*y2^3)/2 + (a1*b2*b3*y2^3)/2 + (a1*a2*b2*b3*y2^3)/2 + (b1*b2*b3*y2^3)/2 + (a1*b1*b2*b3*y2^3)/2 + (a2*b1*b2*b3*y2^3)/2 + (a1*a2*b1*b2*b3*y2^3)/2 + (a2*x1*y3)/2 + (a1*a2*x1*y3)/2 + a1*a2*a3*x1*y3 + (a2*b1*x1*y3)/2 + a1*a2*b1*x1*y3 + (3*a2*a3*b1*x1*y3)/2 + a1*a2*a3*b1*x1*y3 + (3*b2*x1*y3)/2 + a1*b2*x1*y3 + a2*b2*x1*y3 + (3*a3*b2*x1*y3)/2 + (3*a1*a3*b2*x1*y3)/2 + a1*a2*a3*b2*x1*y3 + (3*b1*b2*x1*y3)/2 + (3*a2*b1*b2*x1*y3)/2 + (3*a3*b1*b2*x1*y3)/2 + (3*a2*a3*b1*b2*x1*y3)/2 + a1*a2*a3*b1*b2*x1*y3 + (a2*b3*x1*y3)/2 + (a1*a2*b3*x1*y3)/2 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + (a2*b1*b3*x1*y3)/2 + a1*a2*b1*b3*x1*y3 + (a2*a3*b1*b3*x1*y3)/2 + a1*a2*a3*b1*b3*x1*y3 + (3*b2*b3*x1*y3)/2 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + (3*a1*a2*b2*b3*x1*y3)/2 + (3*a3*b2*b3*x1*y3)/2 + (a1*a3*b2*b3*x1*y3)/2 + a2*a3*b2*b3*x1*y3 + (3*a1*a2*b1*b2*b3*x1*y3)/2 + (3*a1*a3*b1*b2*b3*x1*y3)/2 + (a2*x1^2*y3)/2 + (a1*a2*x1^2*y3)/2 + (a2*b1*x1^2*y3)/2 + (a2*a3*b1*x1^2*y3)/2 + (b2*x1^2*y3)/2 + (a3*b2*x1^2*y3)/2 + (a1*a3*b2*x1^2*y3)/2 + (b1*b2*x1^2*y3)/2 + (a2*b1*b2*x1^2*y3)/2 + (a3*b1*b2*x1^2*y3)/2 + (a2*a3*b1*b2*x1^2*y3)/2 + (a2*b3*x1^2*y3)/2 + (a1*a2*b3*x1^2*y3)/2 + (a2*b1*b3*x1^2*y3)/2 + (a2*a3*b1*b3*x1^2*y3)/2 + (b2*b3*x1^2*y3)/2 + (a1*a2*b2*b3*x1^2*y3)/2 + (a3*b2*b3*x1^2*y3)/2 + (a1*a3*b2*b3*x1^2*y3)/2 + (a1*a2*b1*b2*b3*x1^2*y3)/2 + (a1*a3*b1*b2*b3*x1^2*y3)/2 + b1*x2*y3 + a3*b1*x2*y3 + a2*a3*b1*x2*y3 + b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a2*b1*b3*x2*y3 + b1*b2*b3*x2*y3 + a3*b1*b2*b3*x2*y3 + c1*x2*y3 + a3*c1*x2*y3 + a2*a3*c1*x2*y3 - 2*b1*c1*x2*y3 - 2*a3*b1*c1*x2*y3 - 2*a2*a3*b1*c1*x2*y3 + b2*c1*x2*y3 + a3*b2*c1*x2*y3 - 2*b1*b2*c1*x2*y3 - 2*a3*b1*b2*c1*x2*y3 + a2*b3*c1*x2*y3 - 2*a2*b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a3*b2*b3*c1*x2*y3 - 2*b1*b2*b3*c1*x2*y3 - 2*a3*b1*b2*b3*c1*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a1*a3*x1*x2*y3 + a1*b2*x1*x2*y3 + a2*b2*x1*x2*y3 + a1*a3*b2*x1*x2*y3 + a2*a3*b2*x1*x2*y3 + b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*a3*b3*x1*x2*y3 + b1*b3*x1*x2*y3 + a3*b1*b3*x1*x2*y3 + b2*b3*x1*x2*y3 + a3*b2*b3*x1*x2*y3 + b1*b2*b3*x1*x2*y3 + a3*b1*b2*b3*x1*x2*y3 + (a1*a2*y1*y3)/2 + a2*a3*y1*y3 + a1*a2*a3*y1*y3 + (3*a2*b1*y1*y3)/2 + a1*a2*b1*y1*y3 + (a2*a3*b1*y1*y3)/2 + a1*a2*a3*b1*y1*y3 + (3*a2*b2*y1*y3)/2 + a1*a2*b2*y1*y3 + (a3*b2*y1*y3)/2 + (a1*a3*b2*y1*y3)/2 + a2*a3*b2*y1*y3 + a1*a2*a3*b2*y1*y3 + (a2*a3*b1*b2*y1*y3)/2 + a1*a2*a3*b1*b2*y1*y3 + (a1*a2*b3*y1*y3)/2 + a1*a2*a3*b3*y1*y3 + (3*a2*b1*b3*y1*y3)/2 + a1*a2*b1*b3*y1*y3 + (3*a2*a3*b1*b3*y1*y3)/2 + a1*a2*a3*b1*b3*y1*y3 + (b2*b3*y1*y3)/2 + a1*b2*b3*y1*y3 + (a2*b2*b3*y1*y3)/2 + (3*a1*a2*b2*b3*y1*y3)/2 + a3*b2*b3*y1*y3 + (a1*a3*b2*b3*y1*y3)/2 + a2*a3*b2*b3*y1*y3 + (3*a2*b1*b2*b3*y1*y3)/2 + (3*a1*a2*b1*b2*b3*y1*y3)/2 + (3*a3*b1*b2*b3*y1*y3)/2 + (3*a1*a3*b1*b2*b3*y1*y3)/2 + a2*x1*y1*y3 + a2*b1*x1*y1*y3 + a2*a3*b1*x1*y1*y3 + a1*b2*x1*y1*y3 + a1*a2*b2*x1*y1*y3 + a1*a3*b2*x1*y1*y3 + b1*b2*x1*y1*y3 + a2*b1*b2*x1*y1*y3 + a3*b1*b2*x1*y1*y3 + a2*a3*b1*b2*x1*y1*y3 + a2*b3*x1*y1*y3 + a2*b1*b3*x1*y1*y3 + a2*a3*b1*b3*x1*y1*y3 + b2*b3*x1*y1*y3 + a3*b2*b3*x1*y1*y3 + a1*a2*b1*b2*b3*x1*y1*y3 + a1*a3*b1*b2*b3*x1*y1*y3 + x2*y1*y3 + a1*x2*y1*y3 + a2*x2*y1*y3 + a3*x2*y1*y3 + a1*a3*x2*y1*y3 + b2*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + a1*a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + b3*x2*y1*y3 + a3*b3*x2*y1*y3 + a2*a3*b3*x2*y1*y3 + b1*b3*x2*y1*y3 + a3*b1*b3*x2*y1*y3 + b2*b3*x2*y1*y3 + a3*b2*b3*x2*y1*y3 + b1*b2*b3*x2*y1*y3 + a3*b1*b2*b3*x2*y1*y3 + (a1*a2*y1^2*y3)/2 + (a2*b1*y1^2*y3)/2 + (a2*a3*b1*y1^2*y3)/2 + (a2*b2*y1^2*y3)/2 + (a3*b2*y1^2*y3)/2 + (a1*a3*b2*y1^2*y3)/2 + (a2*a3*b1*b2*y1^2*y3)/2 + (a1*a2*b3*y1^2*y3)/2 + (a2*b1*b3*y1^2*y3)/2 + (a2*a3*b1*b3*y1^2*y3)/2 + (b2*b3*y1^2*y3)/2 + (a2*b2*b3*y1^2*y3)/2 + (a1*a2*b2*b3*y1^2*y3)/2 + (a1*a3*b2*b3*y1^2*y3)/2 + (a2*b1*b2*b3*y1^2*y3)/2 + (a1*a2*b1*b2*b3*y1^2*y3)/2 + (a3*b1*b2*b3*y1^2*y3)/2 + (a1*a3*b1*b2*b3*y1^2*y3)/2 + b1*y2*y3 + a2*a3*b1*y2*y3 + b1*b2*y2*y3 + a3*b1*b2*y2*y3 + b1*b3*y2*y3 + a2*b1*b3*y2*y3 + b1*b2*b3*y2*y3 + a3*b1*b2*b3*y2*y3 + c1*y2*y3 + a2*a3*c1*y2*y3 - 2*b1*c1*y2*y3 - 2*a2*a3*b1*c1*y2*y3 + b2*c1*y2*y3 + a3*b2*c1*y2*y3 - 2*b1*b2*c1*y2*y3 - 2*a3*b1*b2*c1*y2*y3 + b3*c1*y2*y3 + a2*b3*c1*y2*y3 - 2*b1*b3*c1*y2*y3 - 2*a2*b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + a3*b2*b3*c1*y2*y3 - 2*b1*b2*b3*c1*y2*y3 - 2*a3*b1*b2*b3*c1*y2*y3 + a1*x1*y2*y3 + a2*x1*y2*y3 + a3*x1*y2*y3 + a1*a3*x1*y2*y3 + a1*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + a1*a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + b3*x1*y2*y3 + a2*a3*b3*x1*y2*y3 + b1*b3*x1*y2*y3 + a3*b1*b3*x1*y2*y3 + b2*b3*x1*y2*y3 + a3*b2*b3*x1*y2*y3 + b1*b2*b3*x1*y2*y3 + a3*b1*b2*b3*x1*y2*y3 + y1*y2*y3 + a1*y1*y2*y3 + a2*y1*y2*y3 + a1*a3*y1*y2*y3 + b2*y1*y2*y3 + a1*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + a3*b2*y1*y2*y3 + a1*a3*b2*y1*y2*y3 + a2*a3*b2*y1*y2*y3 + b3*y1*y2*y3 + a2*a3*b3*y1*y2*y3 + b1*b3*y1*y2*y3 + a3*b1*b3*y1*y2*y3 + b2*b3*y1*y2*y3 + a3*b2*b3*y1*y2*y3 + b1*b2*b3*y1*y2*y3 + a3*b1*b2*b3*y1*y2*y3 + (3*a2*a3*x1*z1)/2 + 2*a2*a3*b1*x1*z1 + (a3*b2*x1*z1)/2 + 2*a1*a3*b2*x1*z1 + 2*a2*a3*b2*x1*z1 + a2*b3*x1*z1 + (3*a2*b1*b3*x1*z1)/2 + (3*a1*b2*b3*x1*z1)/2 + (3*a2*b2*b3*x1*z1)/2 + (a2*a3*x1^2*z1)/2 + (a2*a3*b1*x1^2*z1)/2 + (a1*a3*b2*x1^2*z1)/2 + (a2*a3*b2*x1^2*z1)/2 + (a3*x2*z1)/2 + 2*a1*a3*x2*z1 + (3*a2*a3*x2*z1)/2 + (a1*a2*a3*x2*z1)/2 + (a3*b1*x2*z1)/2 + 3*a1*a3*b1*x2*z1 + (7*a2*a3*b1*x2*z1)/2 + 3*a1*a2*a3*b1*x2*z1 + (a3*b2*x2*z1)/2 + (a1*a3*b2*x2*z1)/2 + 2*a2*a3*b2*x2*z1 + 2*a1*a2*a3*b2*x2*z1 + (a3*b1*b2*x2*z1)/2 + 3*a1*a3*b1*b2*x2*z1 + 4*a2*a3*b1*b2*x2*z1 + a1*a2*a3*b1*b2*x2*z1 + a2*b3*x2*z1 + (a1*b1*b3*x2*z1)/2 + a2*b1*b3*x2*z1 + 3*a1*a2*b1*b3*x2*z1 + a1*b2*b3*x2*z1 + (3*a2*b2*b3*x2*z1)/2 + 2*a1*a2*b2*b3*x2*z1 + (3*a1*b1*b2*b3*x2*z1)/2 + (3*a2*b1*b2*b3*x2*z1)/2 + a1*a2*b1*b2*b3*x2*z1 + a1*a3*c1*x2*z1 + a2*a3*c1*x2*z1 - 3*a1*a3*b1*c1*x2*z1 - 3*a2*a3*b1*c1*x2*z1 - a1*a2*a3*b1*c1*x2*z1 + a1*a3*b2*c1*x2*z1 + a2*a3*b2*c1*x2*z1 + a1*a2*a3*b2*c1*x2*z1 - 3*a1*a3*b1*b2*c1*x2*z1 - 3*a2*a3*b1*b2*c1*x2*z1 - 2*a1*a2*a3*b1*b2*c1*x2*z1 - a1*a2*b1*b3*c1*x2*z1 + a1*a2*b2*b3*c1*x2*z1 - 2*a1*a2*b1*b2*b3*c1*x2*z1 + a3*x1*x2*z1 + a2*a3*x1*x2*z1 + a3*b1*x1*x2*z1 + a1*a3*b1*x1*x2*z1 + a2*a3*b2*x1*x2*z1 + a3*b1*b2*x1*x2*z1 + a1*b3*x1*x2*z1 + a2*b1*b3*x1*x2*z1 + a1*a2*b1*b3*x1*x2*z1 + a1*b2*b3*x1*x2*z1 + a1*a2*b2*b3*x1*x2*z1 + a1*b1*b2*b3*x1*x2*z1 + a2*b1*b2*b3*x1*x2*z1 + (a1*a3*x2^2*z1)/2 + (a2*a3*x2^2*z1)/2 + (a1*a3*b1*x2^2*z1)/2 + (a2*a3*b1*x2^2*z1)/2 + (a1*a2*a3*b1*x2^2*z1)/2 + (a1*a3*b2*x2^2*z1)/2 + (a2*a3*b2*x2^2*z1)/2 + (a1*a2*a3*b2*x2^2*z1)/2 + (a1*a3*b1*b2*x2^2*z1)/2 + (a2*a3*b1*b2*x2^2*z1)/2 + (a1*a2*b1*b3*x2^2*z1)/2 + (a1*a2*b2*b3*x2^2*z1)/2 + (a1*a2*x3*z1)/2 + (a2*a3*x3*z1)/2 + a2*b1*x3*z1 + (3*a2*a3*b1*x3*z1)/2 + a1*a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + (a1*a2*b2*x3*z1)/2 + a1*a3*b2*x3*z1 + (3*a2*a3*b2*x3*z1)/2 + a1*b1*b2*x3*z1 + a1*a2*b1*b2*x3*z1 + a1*a3*b1*b2*x3*z1 + (a2*a3*b1*b2*x3*z1)/2 + a1*a2*a3*b1*b2*x3*z1 + (a1*a2*b3*x3*z1)/2 + (a2*a3*b3*x3*z1)/2 + (a2*a3*b1*b3*x3*z1)/2 + a1*a2*a3*b1*b3*x3*z1 + (a1*a2*b2*b3*x3*z1)/2 + (a1*a3*b2*b3*x3*z1)/2 + (a1*a2*b1*b2*b3*x3*z1)/2 + (a1*a3*b1*b2*b3*x3*z1)/2 + a1*a2*x1*x3*z1 + a2*a3*x1*x3*z1 + a1*a2*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + a1*a2*b3*x1*x3*z1 + a2*a3*b3*x1*x3*z1 + a1*a2*b2*b3*x1*x3*z1 + a1*a3*b2*b3*x1*x3*z1 + a1*a2*x2*x3*z1 + a3*x2*x3*z1 + a1*a3*x2*x3*z1 + a3*b1*x2*x3*z1 + a3*b2*x2*x3*z1 + a1*a3*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + a3*b1*b2*x2*x3*z1 + a1*a2*b3*x2*x3*z1 + a2*a3*b3*x2*x3*z1 + 2*a2*a3*y1*z1 + a3*b2*y1*z1 + a2*b3*y1*z1 + (a2*b1*b3*y1*z1)/2 + (3*b2*b3*y1*z1)/2 + (a1*b2*b3*y1*z1)/2 + (a2*b2*b3*y1*z1)/2 + a2*a3*x1*y1*z1 + a2*a3*b1*x1*y1*z1 + a3*b2*x1*y1*z1 + a1*a3*b2*x1*y1*z1 + a2*a3*b2*x1*y1*z1 + a2*b1*b3*x1*y1*z1 + a1*b2*b3*x1*y1*z1 + a2*b2*b3*x1*y1*z1 + a3*x2*y1*z1 + a2*a3*x2*y1*z1 + a1*a3*b1*x2*y1*z1 + a1*a2*a3*b1*x2*y1*z1 + a3*b2*x2*y1*z1 + a2*a3*b2*x2*y1*z1 + a1*a2*a3*b2*x2*y1*z1 + a1*a3*b1*b2*x2*y1*z1 + a2*a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*b3*x2*y1*z1 + b1*b3*x2*y1*z1 + a1*b1*b3*x2*y1*z1 + a2*b2*b3*x2*y1*z1 + a1*b1*b2*b3*x2*y1*z1 + a2*b1*b2*b3*x2*y1*z1 + a2*x3*y1*z1 + a2*a3*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + a2*b3*x3*y1*z1 + a2*a3*b3*x3*y1*z1 + (a2*a3*y1^2*z1)/2 + (a3*b2*y1^2*z1)/2 + (a2*b1*b3*y1^2*z1)/2 + (b2*b3*y1^2*z1)/2 + (a1*b2*b3*y1^2*z1)/2 + (a2*b2*b3*y1^2*z1)/2 + (3*a1*a3*y2*z1)/2 + 2*a2*a3*y2*z1 + (a1*a2*a3*y2*z1)/2 + (5*a3*b1*y2*z1)/2 + a1*a3*b1*y2*z1 + (3*a2*a3*b1*y2*z1)/2 + 3*a1*a2*a3*b1*y2*z1 + (a3*b2*y2*z1)/2 + (3*a1*a3*b2*y2*z1)/2 + 2*a1*a2*a3*b2*y2*z1 + 2*a3*b1*b2*y2*z1 + 3*a1*a3*b1*b2*y2*z1 + 3*a2*a3*b1*b2*y2*z1 + a1*a2*a3*b1*b2*y2*z1 + (3*b3*y2*z1)/2 + (a1*b3*y2*z1)/2 + (3*a2*b3*y2*z1)/2 + (a3*b3*y2*z1)/2 + 2*b1*b3*y2*z1 + (3*a1*b1*b3*y2*z1)/2 + (3*a2*b1*b3*y2*z1)/2 + 2*a1*a2*b1*b3*y2*z1 + (a3*b1*b3*y2*z1)/2 + a1*a3*b1*b3*y2*z1 + (3*b2*b3*y2*z1)/2 + a1*b2*b3*y2*z1 + (a2*b2*b3*y2*z1)/2 + 2*a1*a2*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + (5*a1*b1*b2*b3*y2*z1)/2 + (5*a2*b1*b2*b3*y2*z1)/2 + a1*a2*b1*b2*b3*y2*z1 + a1*a3*c1*y2*z1 + a2*a3*c1*y2*z1 - a3*b1*c1*y2*z1 - 2*a1*a3*b1*c1*y2*z1 - 2*a2*a3*b1*c1*y2*z1 - a1*a2*a3*b1*c1*y2*z1 + a3*b2*c1*y2*z1 + a1*a2*a3*b2*c1*y2*z1 - 2*a3*b1*b2*c1*y2*z1 - a1*a3*b1*b2*c1*y2*z1 - a2*a3*b1*b2*c1*y2*z1 - 2*a1*a2*a3*b1*b2*c1*y2*z1 - b1*b3*c1*y2*z1 - a1*b1*b3*c1*y2*z1 - a2*b1*b3*c1*y2*z1 - a1*a2*b1*b3*c1*y2*z1 + b2*b3*c1*y2*z1 + a1*b2*b3*c1*y2*z1 + a2*b2*b3*c1*y2*z1 + a1*a2*b2*b3*c1*y2*z1 - 2*b1*b2*b3*c1*y2*z1 - 2*a1*b1*b2*b3*c1*y2*z1 - 2*a2*b1*b2*b3*c1*y2*z1 - 2*a1*a2*b1*b2*b3*c1*y2*z1 + a3*x1*y2*z1 + a2*a3*x1*y2*z1 + a1*a3*b1*x1*y2*z1 + a2*a3*b2*x1*y2*z1 + a3*b1*b2*x1*y2*z1 + a2*b3*x1*y2*z1 + a3*b3*x1*y2*z1 + a1*b1*b3*x1*y2*z1 + a1*a2*b1*b3*x1*y2*z1 + a2*b2*b3*x1*y2*z1 + a1*a2*b2*b3*x1*y2*z1 + a1*b1*b2*b3*x1*y2*z1 + a2*b1*b2*b3*x1*y2*z1 + a3*x2*y2*z1 + a1*a3*x2*y2*z1 + a2*a3*x2*y2*z1 + a3*b1*x2*y2*z1 + a1*a3*b1*x2*y2*z1 + a2*a3*b1*x2*y2*z1 + a1*a3*b2*x2*y2*z1 + a2*a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + a1*b3*x2*y2*z1 + a2*b3*x2*y2*z1 + a3*b3*x2*y2*z1 + b1*b3*x2*y2*z1 + a1*b1*b3*x2*y2*z1 + a2*b1*b3*x2*y2*z1 + a1*b2*b3*x2*y2*z1 + a2*b2*b3*x2*y2*z1 + x3*y2*z1 + a1*x3*y2*z1 + a2*x3*y2*z1 + a1*a2*x3*y2*z1 + a1*a3*x3*y2*z1 + a3*b1*x3*y2*z1 + a3*b2*x3*y2*z1 + a1*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a3*b1*b2*x3*y2*z1 + b3*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a1*a2*b3*x3*y2*z1 + a3*b3*x3*y2*z1 + a2*a3*b3*x3*y2*z1 + a3*y1*y2*z1 + a2*a3*y1*y2*z1 + a2*a3*b1*y1*y2*z1 + a1*a2*a3*b1*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a1*a2*a3*b2*y1*y2*z1 + a1*a3*b1*b2*y1*y2*z1 + a2*a3*b1*b2*y1*y2*z1 + a1*b3*y1*y2*z1 + a2*b3*y1*y2*z1 + a3*b3*y1*y2*z1 + a1*b1*b3*y1*y2*z1 + b2*b3*y1*y2*z1 + a2*b2*b3*y1*y2*z1 + a1*b1*b2*b3*y1*y2*z1 + a2*b1*b2*b3*y1*y2*z1 + (a1*a3*y2^2*z1)/2 + (a2*a3*y2^2*z1)/2 + (a3*b1*y2^2*z1)/2 + (a1*a2*a3*b1*y2^2*z1)/2 + (a3*b2*y2^2*z1)/2 + (a1*a2*a3*b2*y2^2*z1)/2 + (a1*a3*b1*b2*y2^2*z1)/2 + (a2*a3*b1*b2*y2^2*z1)/2 + (b1*b3*y2^2*z1)/2 + (a1*b1*b3*y2^2*z1)/2 + (a2*b1*b3*y2^2*z1)/2 + (a1*a2*b1*b3*y2^2*z1)/2 + (b2*b3*y2^2*z1)/2 + (a1*b2*b3*y2^2*z1)/2 + (a2*b2*b3*y2^2*z1)/2 + (a1*a2*b2*b3*y2^2*z1)/2 + (a1*a2*y3*z1)/2 + (a2*a3*y3*z1)/2 + (3*a2*b1*y3*z1)/2 + a1*a2*b1*y3*z1 + (a2*a3*b1*y3*z1)/2 + a1*a2*a3*b1*y3*z1 + (3*a1*b2*y3*z1)/2 + (3*a2*b2*y3*z1)/2 + (a1*a2*b2*y3*z1)/2 + (a2*a3*b2*y3*z1)/2 + (b1*b2*y3*z1)/2 + (a2*b1*b2*y3*z1)/2 + (a3*b1*b2*y3*z1)/2 + (a2*a3*b1*b2*y3*z1)/2 + a1*a2*a3*b1*b2*y3*z1 + (a1*a2*b3*y3*z1)/2 + (a2*a3*b3*y3*z1)/2 + (3*a2*b1*b3*y3*z1)/2 + a1*a2*b1*b3*y3*z1 + (3*a2*a3*b1*b3*y3*z1)/2 + a1*a2*a3*b1*b3*y3*z1 + (b2*b3*y3*z1)/2 + a1*b2*b3*y3*z1 + a2*b2*b3*y3*z1 + (a1*a2*b2*b3*y3*z1)/2 + (a3*b2*b3*y3*z1)/2 + (3*a1*a3*b2*b3*y3*z1)/2 + a2*a3*b2*b3*y3*z1 + (a1*a2*b1*b2*b3*y3*z1)/2 + (a1*a3*b1*b2*b3*y3*z1)/2 + a1*a2*x1*y3*z1 + a2*a3*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + a1*a2*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a1*a2*b3*x1*y3*z1 + a2*a3*b3*x1*y3*z1 + a1*a2*b2*b3*x1*y3*z1 + a1*a3*b2*b3*x1*y3*z1 + a1*x2*y3*z1 + a2*x2*y3*z1 + a1*a3*x2*y3*z1 + a1*b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a1*a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + a2*a3*b3*x2*y3*z1 + b1*b3*x2*y3*z1 + a3*b1*b3*x2*y3*z1 + b1*b2*b3*x2*y3*z1 + a3*b1*b2*b3*x2*y3*z1 + a2*a3*y1*y3*z1 + b2*y1*y3*z1 + a2*b2*y1*y3*z1 + a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + a2*a3*b3*y1*y3*z1 + a1*y2*y3*z1 + a2*y2*y3*z1 + a3*y2*y3*z1 + a1*a3*y2*y3*z1 + a1*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + a1*a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + a3*b3*y2*y3*z1 + a2*a3*b3*y2*y3*z1 + b1*b3*y2*y3*z1 + a3*b1*b3*y2*y3*z1 + b1*b2*b3*y2*y3*z1 + a3*b1*b2*b3*y2*y3*z1 + (a2*a3*b1*x1*z1^2)/2 + (a3*b2*x1*z1^2)/2 + (a1*a3*b2*x1*z1^2)/2 + (a2*a3*b2*x1*z1^2)/2 + (a2*b1*b3*x1*z1^2)/2 + (a1*b2*b3*x1*z1^2)/2 + (a2*b2*b3*x1*z1^2)/2 + (a3*x2*z1^2)/2 + (a1*a3*x2*z1^2)/2 + (a1*a2*a3*x2*z1^2)/2 + (a3*b1*x2*z1^2)/2 + (a1*a3*b1*x2*z1^2)/2 + (a1*a2*a3*b1*x2*z1^2)/2 + (a3*b2*x2*z1^2)/2 + (a2*a3*b2*x2*z1^2)/2 + (a1*a2*a3*b2*x2*z1^2)/2 + (a3*b1*b2*x2*z1^2)/2 + (a1*a3*b1*b2*x2*z1^2)/2 + (a2*a3*b1*b2*x2*z1^2)/2 + (a1*b1*b3*x2*z1^2)/2 + (a1*a2*b1*b3*x2*z1^2)/2 + (a2*b2*b3*x2*z1^2)/2 + (a1*a2*b2*b3*x2*z1^2)/2 + (a1*b1*b2*b3*x2*z1^2)/2 + (a2*b1*b2*b3*x2*z1^2)/2 + (a1*a2*x3*z1^2)/2 + (a2*a3*x3*z1^2)/2 + (a2*a3*b1*x3*z1^2)/2 + (a1*a2*b2*x3*z1^2)/2 + (a2*a3*b2*x3*z1^2)/2 + (a2*a3*b1*b2*x3*z1^2)/2 + (a1*a2*b3*x3*z1^2)/2 + (a2*a3*b3*x3*z1^2)/2 + (a2*a3*b1*b3*x3*z1^2)/2 + (a1*a2*b2*b3*x3*z1^2)/2 + (a1*a3*b2*b3*x3*z1^2)/2 + (a1*a2*b1*b2*b3*x3*z1^2)/2 + (a1*a3*b1*b2*b3*x3*z1^2)/2 + (a2*a3*y1*z1^2)/2 + (a3*b2*y1*z1^2)/2 + (a2*a3*y2*z1^2)/2 + (a1*a2*a3*y2*z1^2)/2 + (a2*a3*b1*y2*z1^2)/2 + (a1*a2*a3*b1*y2*z1^2)/2 + (a1*a3*b2*y2*z1^2)/2 + (a1*a2*a3*b2*y2*z1^2)/2 + (a1*a3*b1*b2*y2*z1^2)/2 + (a2*a3*b1*b2*y2*z1^2)/2 + (b3*y2*z1^2)/2 + (a1*b3*y2*z1^2)/2 + (a2*b3*y2*z1^2)/2 + (a3*b3*y2*z1^2)/2 + (b1*b3*y2*z1^2)/2 + (a1*a2*b1*b3*y2*z1^2)/2 + (a3*b1*b3*y2*z1^2)/2 + (a1*b2*b3*y2*z1^2)/2 + (a1*a2*b2*b3*y2*z1^2)/2 + (a1*b1*b2*b3*y2*z1^2)/2 + (a2*b1*b2*b3*y2*z1^2)/2 + (a1*a2*y3*z1^2)/2 + (a2*a3*y3*z1^2)/2 + (a2*b1*y3*z1^2)/2 + (a2*a3*b1*y3*z1^2)/2 + (a1*b2*y3*z1^2)/2 + (a2*b2*y3*z1^2)/2 + (a1*a2*b2*y3*z1^2)/2 + (a2*a3*b2*y3*z1^2)/2 + (b1*b2*y3*z1^2)/2 + (a2*b1*b2*y3*z1^2)/2 + (a3*b1*b2*y3*z1^2)/2 + (a2*a3*b1*b2*y3*z1^2)/2 + (a1*a2*b3*y3*z1^2)/2 + (a2*a3*b3*y3*z1^2)/2 + (a2*b1*b3*y3*z1^2)/2 + (a2*a3*b1*b3*y3*z1^2)/2 + (b2*b3*y3*z1^2)/2 + (a1*a2*b2*b3*y3*z1^2)/2 + (a3*b2*b3*y3*z1^2)/2 + (a1*a3*b2*b3*y3*z1^2)/2 + (a1*a2*b1*b2*b3*y3*z1^2)/2 + (a1*a3*b1*b2*b3*y3*z1^2)/2 + a1*a2*a3*b1*z2 + (3*a1*a2*b1*b3*z2)/2 + (a1*a2*b2*b3*z2)/2 + 3*a1*a2*b1*b2*b3*z2 + a1*a2*a3*c1*z2 - 2*a1*a2*a3*b1*c1*z2 + a1*a2*b2*b3*c1*z2 - 3*a1*a2*b1*b2*b3*c1*z2 + (a3*x1*z2)/2 + (3*a2*a3*x1*z2)/2 + (a1*a2*a3*x1*z2)/2 + (a3*b1*x1*z2)/2 + (5*a1*a3*b1*x1*z2)/2 + (3*a2*a3*b1*x1*z2)/2 + 4*a1*a2*a3*b1*x1*z2 + (a3*b2*x1*z2)/2 + a1*a3*b2*x1*z2 + 2*a2*a3*b2*x1*z2 + 2*a1*a2*a3*b2*x1*z2 + (5*a3*b1*b2*x1*z2)/2 + (5*a1*a3*b1*b2*x1*z2)/2 + 4*a2*a3*b1*b2*x1*z2 + a1*a2*a3*b1*b2*x1*z2 + a1*b3*x1*z2 + a2*b3*x1*z2 + (3*a1*a2*b3*x1*z2)/2 + (3*a1*a3*b3*x1*z2)/2 + (3*a1*b1*b3*x1*z2)/2 + a2*b1*b3*x1*z2 + 2*a1*a2*b1*b3*x1*z2 + (3*a1*a3*b1*b3*x1*z2)/2 + a1*b2*b3*x1*z2 + (3*a2*b2*b3*x1*z2)/2 + (3*a1*a2*b2*b3*x1*z2)/2 + (5*a1*b1*b2*b3*x1*z2)/2 + (7*a2*b1*b2*b3*x1*z2)/2 + a1*a2*b1*b2*b3*x1*z2 + a1*a2*a3*c1*x1*z2 - a1*a3*b1*c1*x1*z2 - 3*a1*a2*a3*b1*c1*x1*z2 + a3*b2*c1*x1*z2 + a2*a3*b2*c1*x1*z2 + a1*a2*a3*b2*c1*x1*z2 - 3*a3*b1*b2*c1*x1*z2 - a1*a3*b1*b2*c1*x1*z2 - 3*a2*a3*b1*b2*c1*x1*z2 - 2*a1*a2*a3*b1*b2*c1*x1*z2 - a1*b1*b3*c1*x1*z2 - a1*a2*b1*b3*c1*x1*z2 + a2*b2*b3*c1*x1*z2 + a1*a2*b2*b3*c1*x1*z2 - a1*b1*b2*b3*c1*x1*z2 - 3*a2*b1*b2*b3*c1*x1*z2 - 2*a1*a2*b1*b2*b3*c1*x1*z2 + (a3*x1^2*z2)/2 + (a2*a3*x1^2*z2)/2 + (a3*b1*x1^2*z2)/2 + (a2*a3*b1*x1^2*z2)/2 + (a1*a2*a3*b1*x1^2*z2)/2 + (a2*a3*b2*x1^2*z2)/2 + (a1*a2*a3*b2*x1^2*z2)/2 + (a2*a3*b1*b2*x1^2*z2)/2 + (a1*a2*b3*x1^2*z2)/2 + (a1*a3*b3*x1^2*z2)/2 + (a1*a2*b1*b3*x1^2*z2)/2 + (a1*a3*b1*b3*x1^2*z2)/2 + (a1*a3*x2*z2)/2 + (5*a3*b1*x2*z2)/2 + 3*a1*a3*b1*x2*z2 + a2*a3*b1*x2*z2 + 3*a3*b1*b2*x2*z2 + (5*a1*b1*b3*x2*z2)/2 + (3*a2*b1*b3*x2*z2)/2 + (5*a1*a2*b1*b3*x2*z2)/2 + (a1*b2*b3*x2*z2)/2 + (a1*a2*b2*b3*x2*z2)/2 + 3*a1*b1*b2*b3*x2*z2 + 3*a2*b1*b2*b3*x2*z2 + 3*a1*a2*b1*b2*b3*x2*z2 + a3*c1*x2*z2 + a1*a3*c1*x2*z2 + a2*a3*c1*x2*z2 - 3*a3*b1*c1*x2*z2 - 2*a1*a3*b1*c1*x2*z2 - 2*a2*a3*b1*c1*x2*z2 + a3*b2*c1*x2*z2 - 2*a3*b1*b2*c1*x2*z2 - a1*b1*b3*c1*x2*z2 - a2*b1*b3*c1*x2*z2 - a1*a2*b1*b3*c1*x2*z2 + a1*b2*b3*c1*x2*z2 + a2*b2*b3*c1*x2*z2 + a1*a2*b2*b3*c1*x2*z2 - 2*a1*b1*b2*b3*c1*x2*z2 - 2*a2*b1*b2*b3*c1*x2*z2 - 2*a1*a2*b1*b2*b3*c1*x2*z2 + a3*x1*x2*z2 + a2*a3*x1*x2*z2 + a1*a2*a3*x1*x2*z2 + a1*a3*b1*x1*x2*z2 + a2*a3*b1*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a2*a3*b2*x1*x2*z2 + a1*b3*x1*x2*z2 + (a1*a3*x2^2*z2)/2 + (a3*b1*x2^2*z2)/2 + (a1*a3*b1*x2^2*z2)/2 + (a3*b1*b2*x2^2*z2)/2 + (a2*b1*b3*x2^2*z2)/2 + (a1*b2*b3*x2^2*z2)/2 + (a1*a2*b2*b3*x2^2*z2)/2 + (a1*b1*b2*b3*x2^2*z2)/2 + (a2*b1*b2*b3*x2^2*z2)/2 + (a1*a2*b1*b2*b3*x2^2*z2)/2 + a2*a3*b1*x3*z2 + a2*a3*c1*x3*z2 - 2*a2*a3*b1*c1*x3*z2 + a1*a2*x1*x3*z2 + a2*a3*x1*x3*z2 + a3*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + a3*b1*b2*x1*x3*z2 + a1*a2*b3*x1*x3*z2 + a2*a3*b3*x1*x3*z2 + (3*a1*a3*y1*z2)/2 + 2*a2*a3*y1*z2 + (a1*a2*a3*y1*z2)/2 + a3*b1*y1*z2 + (a1*a3*b1*y1*z2)/2 + (5*a2*a3*b1*y1*z2)/2 + 4*a1*a2*a3*b1*y1*z2 + (3*a3*b2*y1*z2)/2 + a1*a3*b2*y1*z2 + 2*a1*a2*a3*b2*y1*z2 + 2*a3*b1*b2*y1*z2 + (5*a1*a3*b1*b2*y1*z2)/2 + 3*a2*a3*b1*b2*y1*z2 + a1*a2*a3*b1*b2*y1*z2 + b3*y1*z2 + a1*b3*y1*z2 + (a2*b3*y1*z2)/2 + (3*a1*a2*b3*y1*z2)/2 + (3*a3*b3*y1*z2)/2 + (3*a1*a3*b3*y1*z2)/2 + b1*b3*y1*z2 + a1*b1*b3*y1*z2 + 3*a1*a2*b1*b3*y1*z2 + (3*a3*b1*b3*y1*z2)/2 + (3*a1*a3*b1*b3*y1*z2)/2 + (3*b2*b3*y1*z2)/2 + a1*b2*b3*y1*z2 + (a2*b2*b3*y1*z2)/2 + (3*a1*a2*b2*b3*y1*z2)/2 + (b1*b2*b3*y1*z2)/2 + 2*a1*a2*b1*b2*b3*y1*z2 + a2*a3*c1*y1*z2 + a1*a2*a3*c1*y1*z2 - 2*a2*a3*b1*c1*y1*z2 - 3*a1*a2*a3*b1*c1*y1*z2 + a3*b2*c1*y1*z2 + a1*a2*a3*b2*c1*y1*z2 - 2*a3*b1*b2*c1*y1*z2 - a1*a3*b1*b2*c1*y1*z2 - a2*a3*b1*b2*c1*y1*z2 - 2*a1*a2*a3*b1*b2*c1*y1*z2 - a1*a2*b1*b3*c1*y1*z2 + a1*a2*b2*b3*c1*y1*z2 - 2*a1*a2*b1*b2*b3*c1*y1*z2 + a1*a3*x1*y1*z2 + a2*a3*x1*y1*z2 + a1*a2*a3*x1*y1*z2 + a3*b2*x1*y1*z2 + a2*a3*b2*x1*y1*z2 + a1*a3*b1*b2*x1*y1*z2 + b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a1*b1*b3*x1*y1*z2 + a1*a3*b1*b3*x1*y1*z2 + a2*b2*b3*x1*y1*z2 + a1*a2*b2*b3*x1*y1*z2 + a1*b1*b2*b3*x1*y1*z2 + a2*b1*b2*b3*x1*y1*z2 + a3*x2*y1*z2 + a1*a3*x2*y1*z2 + a2*a3*x2*y1*z2 + a3*b1*x2*y1*z2 + a1*a3*b1*x2*y1*z2 + a2*a3*b1*x2*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a2*a3*b2*x2*y1*z2 + b3*x2*y1*z2 + a1*b3*x2*y1*z2 + a1*b1*b3*x2*y1*z2 + a2*b1*b3*x2*y1*z2 + a1*b2*b3*x2*y1*z2 + a2*b2*b3*x2*y1*z2 + a2*x3*y1*z2 + a1*a2*x3*y1*z2 + a2*a3*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + a3*b1*b2*x3*y1*z2 + a2*b3*x3*y1*z2 + a1*a2*b3*x3*y1*z2 + a2*a3*b3*x3*y1*z2 + (a1*a3*y1^2*z2)/2 + (a2*a3*y1^2*z2)/2 + (a1*a3*b1*y1^2*z2)/2 + (a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b1*y1^2*z2)/2 + (a1*a2*a3*b2*y1^2*z2)/2 + (a2*a3*b1*b2*y1^2*z2)/2 + (a2*b3*y1^2*z2)/2 + (a1*a2*b3*y1^2*z2)/2 + (a3*b3*y1^2*z2)/2 + (a1*a3*b3*y1^2*z2)/2 + (a1*a2*b1*b3*y1^2*z2)/2 + (a3*b1*b3*y1^2*z2)/2 + (a1*a3*b1*b3*y1^2*z2)/2 + (b2*b3*y1^2*z2)/2 + (a2*b2*b3*y1^2*z2)/2 + (b1*b2*b3*y1^2*z2)/2 + (5*a1*a2*b1*b3*y2*z2)/2 + (a1*b2*b3*y2*z2)/2 + (a1*a2*b2*b3*y2*z2)/2 + (5*b1*b2*b3*y2*z2)/2 + (5*a1*b1*b2*b3*y2*z2)/2 + (5*a2*b1*b2*b3*y2*z2)/2 + 3*a1*a2*b1*b2*b3*y2*z2 - a1*a2*b1*b3*c1*y2*z2 + b2*b3*c1*y2*z2 + a1*b2*b3*c1*y2*z2 + a2*b2*b3*c1*y2*z2 + a1*a2*b2*b3*c1*y2*z2 - 3*b1*b2*b3*c1*y2*z2 - 3*a1*b1*b2*b3*c1*y2*z2 - 3*a2*b1*b2*b3*c1*y2*z2 - 2*a1*a2*b1*b2*b3*c1*y2*z2 + a3*x1*y2*z2 + a2*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + a1*a3*b1*x1*y2*z2 + a1*a2*a3*b1*x1*y2*z2 + a2*a3*b2*x1*y2*z2 + a1*a2*a3*b2*x1*y2*z2 + a1*a3*b1*b2*x1*y2*z2 + a2*a3*b1*b2*x1*y2*z2 + a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + b1*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a1*a2*b1*b3*x1*y2*z2 + a2*b2*b3*x1*y2*z2 + a1*a2*b2*b3*x1*y2*z2 + a1*b1*b2*b3*x1*y2*z2 + a2*b1*b2*b3*x1*y2*z2 + a1*a2*a3*x2*y2*z2 + a1*a3*b1*x2*y2*z2 + a3*b1*b2*x2*y2*z2 + a1*b1*b3*x2*y2*z2 + a1*a2*b2*b3*x2*y2*z2 + a1*b1*b2*b3*x2*y2*z2 + a2*b1*b2*b3*x2*y2*z2 + a1*a2*b1*b2*b3*x2*y2*z2 + a3*y1*y2*z2 + a2*a3*y1*y2*z2 + a1*a2*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + a1*a2*a3*b1*y1*y2*z2 + a1*a2*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a1*a3*b1*b2*y1*y2*z2 + a2*a3*b1*b2*y1*y2*z2 + a2*b3*y1*y2*z2 + a3*b3*y1*y2*z2 + b1*b3*y1*y2*z2 + a1*a2*b1*b3*y1*y2*z2 + b2*b3*y1*y2*z2 + a1*b2*b3*y1*y2*z2 + a2*b2*b3*y1*y2*z2 + a1*a2*b2*b3*y1*y2*z2 + b1*b2*b3*y1*y2*z2 + a1*b1*b2*b3*y1*y2*z2 + a2*b1*b2*b3*y1*y2*z2 + (a1*b2*b3*y2^2*z2)/2 + (a1*a2*b2*b3*y2^2*z2)/2 + (b1*b2*b3*y2^2*z2)/2 + (a1*b1*b2*b3*y2^2*z2)/2 + (a2*b1*b2*b3*y2^2*z2)/2 + (a1*a2*b1*b2*b3*y2^2*z2)/2 + a2*a3*b1*y3*z2 + b1*b2*y3*z2 + a3*b1*b2*y3*z2 + b1*b3*y3*z2 + a2*b1*b3*y3*z2 + a3*b1*b3*y3*z2 + b1*b2*b3*y3*z2 + a3*b1*b2*b3*y3*z2 + a2*a3*c1*y3*z2 - 2*a2*a3*b1*c1*y3*z2 + b2*c1*y3*z2 + a3*b2*c1*y3*z2 - 2*b1*b2*c1*y3*z2 - 2*a3*b1*b2*c1*y3*z2 + b3*c1*y3*z2 + a2*b3*c1*y3*z2 + a3*b3*c1*y3*z2 - 2*b1*b3*c1*y3*z2 - 2*a2*b1*b3*c1*y3*z2 - 2*a3*b1*b3*c1*y3*z2 + b2*b3*c1*y3*z2 + a3*b2*b3*c1*y3*z2 - 2*b1*b2*b3*c1*y3*z2 - 2*a3*b1*b2*b3*c1*y3*z2 + a2*a3*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + a2*a3*b3*x1*y3*z2 + b1*b2*b3*x1*y3*z2 + a3*b1*b2*b3*x1*y3*z2 + a2*a3*y1*y3*z2 + b2*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a3*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + a2*a3*b3*y1*y3*z2 + b1*b2*b3*y1*y3*z2 + a3*b1*b2*b3*y1*y3*z2 + (a1*a2*a3*z1*z2)/2 + (3*a1*a3*b1*z1*z2)/2 + (a2*a3*b1*z1*z2)/2 + 2*a1*a2*a3*b1*z1*z2 + a1*a2*a3*b2*z1*z2 + (a3*b1*b2*z1*z2)/2 + (5*a1*a3*b1*b2*z1*z2)/2 + 2*a2*a3*b1*b2*z1*z2 + a1*a2*a3*b1*b2*z1*z2 + (a1*a2*b3*z1*z2)/2 + (a1*a3*b3*z1*z2)/2 + a1*b1*b3*z1*z2 + (a2*b1*b3*z1*z2)/2 + (3*a1*a2*b1*b3*z1*z2)/2 + (a1*a3*b1*b3*z1*z2)/2 + (a1*b2*b3*z1*z2)/2 + a1*a2*b2*b3*z1*z2 + (3*a1*b1*b2*b3*z1*z2)/2 + (3*a2*b1*b2*b3*z1*z2)/2 + a1*a2*b1*b2*b3*z1*z2 - a1*a2*a3*b1*c1*z1*z2 + a1*a2*a3*b2*c1*z1*z2 - a1*a3*b1*b2*c1*z1*z2 - a2*a3*b1*b2*c1*z1*z2 - 2*a1*a2*a3*b1*b2*c1*z1*z2 - a1*a2*b1*b3*c1*z1*z2 + a1*a2*b2*b3*c1*z1*z2 - 2*a1*a2*b1*b2*b3*c1*z1*z2 + a1*a3*b1*x1*z1*z2 + a3*b2*x1*z1*z2 + a1*a3*b2*x1*z1*z2 + a2*a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + a1*b3*x1*z1*z2 + a1*a2*b3*x1*z1*z2 + a1*a3*b3*x1*z1*z2 + a1*b1*b3*x1*z1*z2 + a1*a2*b1*b3*x1*z1*z2 + a2*b2*b3*x1*z1*z2 + a1*a2*b2*b3*x1*z1*z2 + a1*b1*b2*b3*x1*z1*z2 + a2*b1*b2*b3*x1*z1*z2 + a3*x2*z1*z2 + a1*a3*x2*z1*z2 + a1*a2*a3*x2*z1*z2 + a3*b1*x2*z1*z2 + a1*a3*b1*x2*z1*z2 + a2*a3*b1*x2*z1*z2 + a3*b2*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a2*a3*b2*x2*z1*z2 + a1*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + a1*a2*b1*b3*x2*z1*z2 + a1*b2*b3*x2*z1*z2 + a2*b2*b3*x2*z1*z2 + a1*a2*b2*b3*x2*z1*z2 + a1*a2*x3*z1*z2 + a2*a3*x3*z1*z2 + a1*a3*b2*x3*z1*z2 + a2*a3*b2*x3*z1*z2 + a3*b1*b2*x3*z1*z2 + a1*a2*b3*x3*z1*z2 + a2*a3*b3*x3*z1*z2 + a2*a3*y1*z1*z2 + a2*a3*b1*y1*z1*z2 + a1*a2*a3*b1*y1*z1*z2 + a3*b2*y1*z1*z2 + a1*a3*b2*y1*z1*z2 + a1*a2*a3*b2*y1*z1*z2 + a1*a3*b1*b2*y1*z1*z2 + a2*a3*b1*b2*y1*z1*z2 + a1*b3*y1*z1*z2 + b1*b3*y1*z1*z2 + a2*b1*b3*y1*z1*z2 + a1*b2*b3*y1*z1*z2 + a1*b1*b2*b3*y1*z1*z2 + a2*b1*b2*b3*y1*z1*z2 + a2*a3*y2*z1*z2 + a1*a2*a3*y2*z1*z2 + a3*b1*y2*z1*z2 + a1*a2*a3*b1*y2*z1*z2 + a1*a2*a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + a1*a3*b1*b2*y2*z1*z2 + a2*a3*b1*b2*y2*z1*z2 + b3*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + b1*b3*y2*z1*z2 + a2*a3*y3*z1*z2 + a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a1*a3*b2*y3*z1*z2 + a2*a3*b2*y3*z1*z2 + a2*a3*b3*y3*z1*z2 + b2*b3*y3*z1*z2 + a3*b2*b3*y3*z1*z2 + b1*b2*b3*y3*z1*z2 + a3*b1*b2*b3*y3*z1*z2 + (a1*a2*a3*z1^2*z2)/2 + (a1*a3*b1*z1^2*z2)/2 + (a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b1*z1^2*z2)/2 + (a1*a2*a3*b2*z1^2*z2)/2 + (a3*b1*b2*z1^2*z2)/2 + (a2*a3*b1*b2*z1^2*z2)/2 + (a1*a2*b3*z1^2*z2)/2 + (a1*a3*b3*z1^2*z2)/2 + (a2*b1*b3*z1^2*z2)/2 + (a1*a3*b1*b3*z1^2*z2)/2 + (a1*b2*b3*z1^2*z2)/2 + (a1*a2*b2*b3*z1^2*z2)/2 + (a1*b1*b2*b3*z1^2*z2)/2 + (a2*b1*b2*b3*z1^2*z2)/2 + (a1*a2*a3*z2^2)/2 + a1*a2*b1*b3*z2^2 + (a1*a2*b2*b3*z2^2)/2 + (a1*a2*b1*b2*b3*z2^2)/2 + (a1*a2*a3*x1*z2^2)/2 + (a1*a3*b1*x1*z2^2)/2 + (a1*a2*a3*b1*x1*z2^2)/2 + (a3*b2*x1*z2^2)/2 + (a2*a3*b2*x1*z2^2)/2 + (a1*a2*a3*b2*x1*z2^2)/2 + (a3*b1*b2*x1*z2^2)/2 + (a1*a3*b1*b2*x1*z2^2)/2 + (a2*a3*b1*b2*x1*z2^2)/2 + (a1*b1*b3*x1*z2^2)/2 + (a1*a2*b1*b3*x1*z2^2)/2 + (a2*b2*b3*x1*z2^2)/2 + (a1*a2*b2*b3*x1*z2^2)/2 + (a1*b1*b2*b3*x1*z2^2)/2 + (a2*b1*b2*b3*x1*z2^2)/2 + (a1*a3*b1*x2*z2^2)/2 + (a3*b1*b2*x2*z2^2)/2 + (a1*b1*b3*x2*z2^2)/2 + (a1*a2*b1*b3*x2*z2^2)/2 + (a1*b1*b2*b3*x2*z2^2)/2 + (a2*b1*b2*b3*x2*z2^2)/2 + (a1*a2*b1*b2*b3*x2*z2^2)/2 + (a2*a3*y1*z2^2)/2 + (a1*a2*a3*y1*z2^2)/2 + (a1*a2*a3*b1*y1*z2^2)/2 + (a3*b2*y1*z2^2)/2 + (a1*a2*a3*b2*y1*z2^2)/2 + (a1*a3*b1*b2*y1*z2^2)/2 + (a2*a3*b1*b2*y1*z2^2)/2 + (a1*a2*b1*b3*y1*z2^2)/2 + (a1*a2*b2*b3*y1*z2^2)/2 + (a1*a2*b1*b3*y2*z2^2)/2 + (a1*a2*b1*b2*b3*y2*z2^2)/2 + (a1*a2*a3*b1*z1*z2^2)/2 + (a1*a2*a3*b2*z1*z2^2)/2 + (a1*a3*b1*b2*z1*z2^2)/2 + (a2*a3*b1*b2*z1*z2^2)/2 + (a1*a2*b1*b3*z1*z2^2)/2 + (a1*a2*b2*b3*z1*z2^2)/2 + (a1*a2*a3*z2^3)/2 + (a1*a2*b1*b3*z2^3)/2 + (a1*a2*b1*b2*b3*z2^3)/2 + (3*a2*x1*z3)/2 + (a1*a2*x1*z3)/2 + a1*a2*a3*x1*z3 + (a1*a2*b1*x1*z3)/2 + a1*a2*a3*b1*x1*z3 + (a1*b2*x1*z3)/2 + (a1*a2*b2*x1*z3)/2 + (a1*a3*b2*x1*z3)/2 + (3*a2*a3*b2*x1*z3)/2 + a1*a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + (a1*a2*b1*b2*x1*z3)/2 + (a1*a3*b1*b2*x1*z3)/2 + (3*a2*a3*b1*b2*x1*z3)/2 + a1*a2*a3*b1*b2*x1*z3 + (3*a2*a3*b3*x1*z3)/2 + a1*a2*a3*b3*x1*z3 + (3*a1*a2*b1*b3*x1*z3)/2 + a1*a2*a3*b1*b3*x1*z3 + (3*a1*a2*b2*b3*x1*z3)/2 + (3*a2*a3*b2*b3*x1*z3)/2 + (3*a1*a2*b1*b2*b3*x1*z3)/2 + (3*a1*a3*b1*b2*b3*x1*z3)/2 + (a2*x1^2*z3)/2 + (a1*a2*x1^2*z3)/2 + (a1*a2*b1*x1^2*z3)/2 + (a1*b2*x1^2*z3)/2 + (a1*a2*b2*x1^2*z3)/2 + (a1*a3*b2*x1^2*z3)/2 + (a2*a3*b2*x1^2*z3)/2 + (a1*a2*b1*b2*x1^2*z3)/2 + (a1*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b1*b2*x1^2*z3)/2 + (a2*a3*b3*x1^2*z3)/2 + (a1*a2*b1*b3*x1^2*z3)/2 + (a1*a2*b2*b3*x1^2*z3)/2 + (a2*a3*b2*b3*x1^2*z3)/2 + (a1*a2*b1*b2*b3*x1^2*z3)/2 + (a1*a3*b1*b2*b3*x1^2*z3)/2 + (3*a1*x2*z3)/2 + a1*a2*x2*z3 + (3*a1*a3*x2*z3)/2 + a1*a2*a3*x2*z3 + a1*b1*x2*z3 + (7*a2*b1*x2*z3)/2 + a1*a2*b1*x2*z3 + a1*a3*b1*x2*z3 + a2*a3*b1*x2*z3 + a1*a2*a3*b1*x2*z3 + (3*a1*b2*x2*z3)/2 + (3*a1*a3*b2*x2*z3)/2 + a1*b1*b2*x2*z3 + a1*a3*b1*b2*x2*z3 + a2*a3*b1*b2*x2*z3 + (7*a2*a3*b1*b3*x2*z3)/2 + a2*a3*b1*b2*b3*x2*z3 + a1*c1*x2*z3 + a2*c1*x2*z3 + a1*a3*c1*x2*z3 + a2*a3*c1*x2*z3 - 2*a1*b1*c1*x2*z3 - 3*a2*b1*c1*x2*z3 - 2*a1*a3*b1*c1*x2*z3 - 2*a2*a3*b1*c1*x2*z3 + a1*b2*c1*x2*z3 + a1*a3*b2*c1*x2*z3 + a2*a3*b2*c1*x2*z3 - 2*a1*b1*b2*c1*x2*z3 - 2*a1*a3*b1*b2*c1*x2*z3 - 2*a2*a3*b1*b2*c1*x2*z3 + a2*a3*b3*c1*x2*z3 - 3*a2*a3*b1*b3*c1*x2*z3 + a2*a3*b2*b3*c1*x2*z3 - 2*a2*a3*b1*b2*b3*c1*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + a1*a2*a3*x1*x2*z3 + a1*b1*x1*x2*z3 + a2*b1*x1*x2*z3 + a3*b1*x1*x2*z3 + a1*a3*b1*x1*x2*z3 + a2*a3*b1*x1*x2*z3 + a3*b1*b2*x1*x2*z3 + a1*a3*b1*b2*x1*x2*z3 + a2*a3*b1*b2*x1*x2*z3 + a1*a2*b3*x1*x2*z3 + a1*a2*a3*b3*x1*x2*z3 + a1*a3*b2*b3*x1*x2*z3 + a2*a3*b2*b3*x1*x2*z3 + a1*a3*b1*b2*b3*x1*x2*z3 + a2*a3*b1*b2*b3*x1*x2*z3 + (a1*x2^2*z3)/2 + (a1*a3*x2^2*z3)/2 + (a2*b1*x2^2*z3)/2 + (a1*b2*x2^2*z3)/2 + (a1*a3*b2*x2^2*z3)/2 + (a2*a3*b1*b3*x2^2*z3)/2 + (a2*y1*z3)/2 + (3*a1*a2*y1*z3)/2 + a1*a2*a3*y1*z3 + a2*b1*y1*z3 + (a1*a2*b1*y1*z3)/2 + a2*a3*b1*y1*z3 + a1*a2*a3*b1*y1*z3 + (3*b2*y1*z3)/2 + (3*a1*b2*y1*z3)/2 + (3*a1*a2*b2*y1*z3)/2 + (3*a3*b2*y1*z3)/2 + (3*a1*a3*b2*y1*z3)/2 + (a2*a3*b2*y1*z3)/2 + a1*a2*a3*b2*y1*z3 + (b1*b2*y1*z3)/2 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + (a1*a2*b1*b2*y1*z3)/2 + a3*b1*b2*y1*z3 + (a1*a3*b1*b2*y1*z3)/2 + (a2*a3*b1*b2*y1*z3)/2 + a1*a2*a3*b1*b2*y1*z3 + (a2*a3*b3*y1*z3)/2 + a1*a2*a3*b3*y1*z3 + (3*a2*b1*b3*y1*z3)/2 + (3*a1*a2*b1*b3*y1*z3)/2 + a2*a3*b1*b3*y1*z3 + a1*a2*a3*b1*b3*y1*z3 + (3*a2*b2*b3*y1*z3)/2 + (3*a1*a2*b2*b3*y1*z3)/2 + (3*a2*a3*b2*b3*y1*z3)/2 + (3*a2*b1*b2*b3*y1*z3)/2 + (3*a1*a2*b1*b2*b3*y1*z3)/2 + (3*a3*b1*b2*b3*y1*z3)/2 + (3*a1*a3*b1*b2*b3*y1*z3)/2 + a2*x1*y1*z3 + a1*a2*x1*y1*z3 + a2*a3*x1*y1*z3 + a1*a2*b1*x1*y1*z3 + a1*b2*x1*y1*z3 + a1*a2*b2*x1*y1*z3 + a3*b2*x1*y1*z3 + a2*a3*b2*x1*y1*z3 + a1*a2*b1*b2*x1*y1*z3 + a1*a3*b1*b2*x1*y1*z3 + a2*a3*b1*b2*x1*y1*z3 + a2*b3*x1*y1*z3 + a1*a2*b1*b3*x1*y1*z3 + a1*a3*b2*b3*x1*y1*z3 + a2*a3*b2*b3*x1*y1*z3 + a1*a2*b1*b2*b3*x1*y1*z3 + a1*a3*b1*b2*b3*x1*y1*z3 + a1*x2*y1*z3 + a2*x2*y1*z3 + a3*x2*y1*z3 + a2*a3*x2*y1*z3 + a1*a2*a3*x2*y1*z3 + a2*b1*x2*y1*z3 + a3*b1*x2*y1*z3 + a1*a3*b1*x2*y1*z3 + a2*a3*b1*x2*y1*z3 + a1*b2*x2*y1*z3 + a3*b2*x2*y1*z3 + a3*b1*b2*x2*y1*z3 + a1*a3*b1*b2*x2*y1*z3 + a2*a3*b1*b2*x2*y1*z3 + a2*b3*x2*y1*z3 + a1*a2*b3*x2*y1*z3 + a2*a3*b3*x2*y1*z3 + a1*a2*a3*b3*x2*y1*z3 + a1*a3*b1*b3*x2*y1*z3 + a2*a3*b2*b3*x2*y1*z3 + a1*a3*b1*b2*b3*x2*y1*z3 + a2*a3*b1*b2*b3*x2*y1*z3 + (a2*y1^2*z3)/2 + (a1*a2*y1^2*z3)/2 + (a1*a2*b1*y1^2*z3)/2 + (b2*y1^2*z3)/2 + (a1*b2*y1^2*z3)/2 + (a1*a2*b2*y1^2*z3)/2 + (a3*b2*y1^2*z3)/2 + (a1*a3*b2*y1^2*z3)/2 + (a2*a3*b2*y1^2*z3)/2 + (b1*b2*y1^2*z3)/2 + (a1*a2*b1*b2*y1^2*z3)/2 + (a1*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b1*b2*y1^2*z3)/2 + (a2*a3*b3*y1^2*z3)/2 + (a2*b1*b3*y1^2*z3)/2 + (a1*a2*b1*b3*y1^2*z3)/2 + (a2*b2*b3*y1^2*z3)/2 + (a1*a2*b2*b3*y1^2*z3)/2 + (a2*a3*b2*b3*y1^2*z3)/2 + (a2*b1*b2*b3*y1^2*z3)/2 + (a1*a2*b1*b2*b3*y1^2*z3)/2 + (a3*b1*b2*b3*y1^2*z3)/2 + (a1*a3*b1*b2*b3*y1^2*z3)/2 + (a1*y2*z3)/2 + a1*a2*y2*z3 + (a1*a3*y2*z3)/2 + a1*a2*a3*y2*z3 + (3*b1*y2*z3)/2 + 2*a1*b1*y2*z3 + (5*a2*b1*y2*z3)/2 + a1*a2*b1*y2*z3 + a3*b1*y2*z3 + 2*a1*a3*b1*y2*z3 + 2*a2*a3*b1*y2*z3 + a1*a2*a3*b1*y2*z3 + (3*a1*b2*y2*z3)/2 + (3*a1*a3*b2*y2*z3)/2 + b1*b2*y2*z3 + a1*b1*b2*y2*z3 + a1*a3*b1*b2*y2*z3 + a2*a3*b1*b2*y2*z3 + (7*a3*b1*b3*y2*z3)/2 + (7*a2*a3*b1*b3*y2*z3)/2 + a3*b1*b2*b3*y2*z3 + a2*a3*b1*b2*b3*y2*z3 + a1*c1*y2*z3 + a2*c1*y2*z3 + a1*a3*c1*y2*z3 + a2*a3*c1*y2*z3 - b1*c1*y2*z3 - 2*a1*b1*c1*y2*z3 - 3*a2*b1*c1*y2*z3 - 2*a1*a3*b1*c1*y2*z3 - 2*a2*a3*b1*c1*y2*z3 + b2*c1*y2*z3 + a1*b2*c1*y2*z3 + a1*a3*b2*c1*y2*z3 + a2*a3*b2*c1*y2*z3 - 2*b1*b2*c1*y2*z3 - 2*a1*b1*b2*c1*y2*z3 - 2*a1*a3*b1*b2*c1*y2*z3 - 2*a2*a3*b1*b2*c1*y2*z3 + a3*b3*c1*y2*z3 + a2*a3*b3*c1*y2*z3 - 3*a3*b1*b3*c1*y2*z3 - 3*a2*a3*b1*b3*c1*y2*z3 + a3*b2*b3*c1*y2*z3 + a2*a3*b2*b3*c1*y2*z3 - 2*a3*b1*b2*b3*c1*y2*z3 - 2*a2*a3*b1*b2*b3*c1*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + a3*x1*y2*z3 + a1*a3*x1*y2*z3 + a2*a3*x1*y2*z3 + a1*a2*a3*x1*y2*z3 + a1*b1*x1*y2*z3 + a2*b1*x1*y2*z3 + a3*b1*x1*y2*z3 + a1*a3*b1*x1*y2*z3 + a2*a3*b1*x1*y2*z3 + a3*b1*b2*x1*y2*z3 + a1*a3*b1*b2*x1*y2*z3 + a2*a3*b1*b2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a2*b3*x1*y2*z3 + a1*a2*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + a1*a3*b3*x1*y2*z3 + a2*a3*b3*x1*y2*z3 + a1*a2*a3*b3*x1*y2*z3 + a1*a3*b2*b3*x1*y2*z3 + a2*a3*b2*b3*x1*y2*z3 + a1*a3*b1*b2*b3*x1*y2*z3 + a2*a3*b1*b2*b3*x1*y2*z3 + a1*x2*y2*z3 + a1*a3*x2*y2*z3 + a1*b1*x2*y2*z3 + a2*b1*x2*y2*z3 + a1*a3*b2*x2*y2*z3 + a1*a3*b1*b3*x2*y2*z3 + a2*a3*b1*b3*x2*y2*z3 + a1*a3*b2*b3*x2*y2*z3 + a1*y1*y2*z3 + a2*y1*y2*z3 + a3*y1*y2*z3 + a1*a3*y1*y2*z3 + a1*a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a2*b1*y1*y2*z3 + a3*b1*y1*y2*z3 + a1*a3*b1*y1*y2*z3 + a2*a3*b1*y1*y2*z3 + b2*y1*y2*z3 + a1*b2*y1*y2*z3 + a3*b2*y1*y2*z3 + a3*b1*b2*y1*y2*z3 + a1*a3*b1*b2*y1*y2*z3 + a2*a3*b1*b2*y1*y2*z3 + a1*b3*y1*y2*z3 + a1*a2*b3*y1*y2*z3 + a1*a3*b3*y1*y2*z3 + a1*a2*a3*b3*y1*y2*z3 + a3*b1*b3*y1*y2*z3 + a1*a3*b1*b3*y1*y2*z3 + a3*b2*b3*y1*y2*z3 + a2*a3*b2*b3*y1*y2*z3 + a1*a3*b1*b2*b3*y1*y2*z3 + a2*a3*b1*b2*b3*y1*y2*z3 + (a1*y2^2*z3)/2 + (a1*a3*y2^2*z3)/2 + (b1*y2^2*z3)/2 + (a2*b1*y2^2*z3)/2 + (a1*b2*y2^2*z3)/2 + (a1*a3*b2*y2^2*z3)/2 + (a3*b1*b3*y2^2*z3)/2 + (a2*a3*b1*b3*y2^2*z3)/2 + (3*a1*a2*b1*z1*z3)/2 + a1*a2*a3*b1*z1*z3 + a1*b1*b2*z1*z3 + (3*a1*a2*b1*b2*z1*z3)/2 + (3*a1*a3*b1*b2*z1*z3)/2 + (a2*a3*b1*b2*z1*z3)/2 + a1*a2*a3*b1*b2*z1*z3 + (a1*a2*b1*b3*z1*z3)/2 + a1*a2*a3*b1*b3*z1*z3 + (a1*a2*b2*b3*z1*z3)/2 + (a2*a3*b2*b3*z1*z3)/2 + (a1*a2*b1*b2*b3*z1*z3)/2 + (a1*a3*b1*b2*b3*z1*z3)/2 + a3*b2*x1*z1*z3 + a1*a3*b2*x1*z1*z3 + a2*a3*b2*x1*z1*z3 + a1*a2*b2*b3*x1*z1*z3 + a1*a3*b2*b3*x1*z1*z3 + a3*x2*z1*z3 + a1*a3*x2*z1*z3 + a2*a3*x2*z1*z3 + a1*a2*a3*x2*z1*z3 + a3*b1*x2*z1*z3 + a1*a3*b1*x2*z1*z3 + a2*a3*b1*x2*z1*z3 + a3*b2*x2*z1*z3 + a1*a3*b2*x2*z1*z3 + a2*a3*b2*x2*z1*z3 + a3*b1*b2*x2*z1*z3 + a1*a3*b1*b2*x2*z1*z3 + a2*a3*b1*b2*x2*z1*z3 + a1*a2*b3*x2*z1*z3 + a1*a2*a3*b3*x2*z1*z3 + a1*a3*b1*b3*x2*z1*z3 + a2*a3*b1*b3*x2*z1*z3 + a1*a3*b1*b2*b3*x2*z1*z3 + a2*a3*b1*b2*b3*x2*z1*z3 + a2*a3*y1*z1*z3 + a2*a3*b2*y1*z1*z3 + a2*b3*y1*z1*z3 + a2*a3*b3*y1*z1*z3 + a1*a2*a3*y2*z1*z3 + a3*b1*y2*z1*z3 + a1*a3*b1*y2*z1*z3 + a2*a3*b1*y2*z1*z3 + a3*b2*y2*z1*z3 + a1*a3*b2*y2*z1*z3 + a2*a3*b2*y2*z1*z3 + a3*b1*b2*y2*z1*z3 + a1*a3*b1*b2*y2*z1*z3 + a2*a3*b1*b2*y2*z1*z3 + b3*y2*z1*z3 + a1*b3*y2*z1*z3 + a2*b3*y2*z1*z3 + a1*a2*b3*y2*z1*z3 + a3*b3*y2*z1*z3 + a1*a3*b3*y2*z1*z3 + a2*a3*b3*y2*z1*z3 + a1*a2*a3*b3*y2*z1*z3 + a1*a3*b1*b3*y2*z1*z3 + a2*a3*b1*b3*y2*z1*z3 + a1*a3*b1*b2*b3*y2*z1*z3 + a2*a3*b1*b2*b3*y2*z1*z3 + (a1*a2*b1*z1^2*z3)/2 + (a1*a2*b1*b2*z1^2*z3)/2 + (a1*a3*b1*b2*z1^2*z3)/2 + (a2*a3*b1*b2*z1^2*z3)/2 + (a1*a2*b1*b3*z1^2*z3)/2 + (a1*a2*b2*b3*z1^2*z3)/2 + (a2*a3*b2*b3*z1^2*z3)/2 + (a1*a2*b1*b2*b3*z1^2*z3)/2 + (a1*a3*b1*b2*b3*z1^2*z3)/2 + (3*a2*b1*z2*z3)/2 + a1*a2*b1*z2*z3 + a1*a2*a3*b1*z2*z3 + (a1*b2*z2*z3)/2 + (a1*a3*b2*z2*z3)/2 + a1*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + a2*a3*b1*b2*z2*z3 + (5*a2*a3*b1*b3*z2*z3)/2 + a2*a3*b1*b2*b3*z2*z3 - a2*b1*c1*z2*z3 + a1*b2*c1*z2*z3 + a1*a3*b2*c1*z2*z3 + a2*a3*b2*c1*z2*z3 - 2*a1*b1*b2*c1*z2*z3 - 2*a1*a3*b1*b2*c1*z2*z3 - 2*a2*a3*b1*b2*c1*z2*z3 + a2*a3*b3*c1*z2*z3 - 3*a2*a3*b1*b3*c1*z2*z3 + a2*a3*b2*b3*c1*z2*z3 - 2*a2*a3*b1*b2*b3*c1*z2*z3 + a1*a2*a3*x1*z2*z3 + a1*b1*x1*z2*z3 + a2*b1*x1*z2*z3 + a3*b2*x1*z2*z3 + a1*a3*b2*x1*z2*z3 + a2*a3*b2*x1*z2*z3 + a3*b1*b2*x1*z2*z3 + a1*a3*b1*b2*x1*z2*z3 + a2*a3*b1*b2*x1*z2*z3 + a1*a2*b3*x1*z2*z3 + a1*a2*a3*b3*x1*z2*z3 + a1*a3*b1*b3*x1*z2*z3 + a2*a3*b1*b3*x1*z2*z3 + a1*a3*b1*b2*b3*x1*z2*z3 + a2*a3*b1*b2*b3*x1*z2*z3 + a1*b1*x2*z2*z3 + a1*b2*x2*z2*z3 + a1*a3*b1*b3*x2*z2*z3 + a1*a3*b2*b3*x2*z2*z3 + a2*a3*y1*z2*z3 + a1*a2*a3*y1*z2*z3 + a2*b1*y1*z2*z3 + a1*b2*y1*z2*z3 + a1*a3*b2*y1*z2*z3 + a2*a3*b2*y1*z2*z3 + a3*b1*b2*y1*z2*z3 + a1*a3*b1*b2*y1*z2*z3 + a2*a3*b1*b2*y1*z2*z3 + a2*b3*y1*z2*z3 + a1*a2*b3*y1*z2*z3 + a2*a3*b3*y1*z2*z3 + a1*a2*a3*b3*y1*z2*z3 + a2*a3*b1*b3*y1*z2*z3 + a1*a3*b2*b3*y1*z2*z3 + a1*a3*b1*b2*b3*y1*z2*z3 + a2*a3*b1*b2*b3*y1*z2*z3 + a1*a2*a3*z1*z2*z3 + a3*b1*b2*z1*z2*z3 + a1*a3*b1*b2*z1*z2*z3 + a2*a3*b1*b2*z1*z2*z3 + a1*a2*b3*z1*z2*z3 + a1*a2*a3*b3*z1*z2*z3 + a1*a3*b2*b3*z1*z2*z3 + a2*a3*b2*b3*z1*z2*z3 + a1*a3*b1*b2*b3*z1*z2*z3 + a2*a3*b1*b2*b3*z1*z2*z3 + (a2*b1*z2^2*z3)/2 + (a1*b2*z2^2*z3)/2 + (a1*a3*b2*z2^2*z3)/2 + (a2*a3*b1*b3*z2^2*z3)/2;
end;
#####################################################################
#####################################################################
#Space Group No. 72 ( Ibam)
#####################################################################
Aiin72:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin72:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin72:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyzin72:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bzxyin72:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 73 ( Ibca)
#####################################################################
Aiin73:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin73:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin73:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyzin73:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
#####################################################################
#Space Group No. 74 ( Imma)
#####################################################################
Aiin74:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Acpin74:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acin74:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1;
end;
#####################################################################
Axyzin74:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Byxzin74:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + 2*b1*b2 + a1*a2*b1*b2 + a2*c1 + a1*a2*c1 + a1*b2*c1 + b1*b2*c1 + a1*c2 + b1*c2 + a2*b1*c2 + c1*c2 + a2*c1*c2 + b2*c1*c2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*c1*x1 + a1*c2*x1 + a2*c2*x1 + a1*a2*x2 + b1*x2 + a1*b1*x2 + a1*a2*b2*x2 + b1*b2*x2 + c1*x2 + a1*c1*x2 + a2*c1*x2 + b1*c1*x2 + a1*c2*x2 + b1*c2*x2 + a2*b1*y1 + a2*c1*y1 + a1*c2*y1 + a2*c2*y1 + x2*y1 + a1*x2*y1 + a1*y2 + a1*a2*y2 + a1*b2*y2 + a1*a2*b2*y2 + b1*b2*y2 + c1*y2 + a1*c1*y2 + a2*c1*y2 + b1*c1*y2 + a1*c2*y2 + b1*c2*y2 + a1*x2*y2 + a1*y1*y2 + a2*b1*z1 + b2*z1 + a1*b2*z1 + a2*b2*z1 + a2*c1*z1 + c2*z1 + a1*c2*z1 + a2*c2*z1 + a1*z2 + a1*a2*z2 + a1*b1*z2 + a1*a2*b2*z2 + b1*b2*z2 + a1*c1*z2 + a2*c1*z2 + b1*c1*z2 + a1*c2*z2 + b1*c2*z2 + y1*z2 + a1*y1*z2 + a1*y2*z2;
end;
#####################################################################
Bzxyin74:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a2*b1*b2 + a1*a2*b1*b2 + a2*c1 + a1*a2*c1 + a2*b2*c1 + a1*a2*b2*c1 + a1*b1*b2*c1 + a2*b1*b2*c1 + a1*c2 + a1*a2*b1*c2 + a2*b1*b2*c2 + c1*c2 + a2*c1*c2 + a1*a2*c1*c2 + a2*b1*c1*c2 + b2*c1*c2 + a1*b2*c1*c2 + b1*b2*c1*c2 + a2*x1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*c1*x1 + a1*c2*x1 + a2*c2*x1 + a1*a2*x2 + a1*b2*x2 + a1*b1*b2*x2 + a2*b1*b2*x2 + c1*x2 + a1*c1*x2 + a2*c1*x2 + b1*c1*x2 + a1*b1*c1*x2 + a1*c2*x2 + b1*c2*x2 + a1*b1*c2*x2 + a2*b1*c2*x2 + b1*b2*c2*x2 + a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a2*c1*y1 + a1*c2*y1 + a2*c2*y1 + a1*y2 + a1*a2*y2 + a1*b2*y2 + a1*b1*b2*y2 + a2*b1*b2*y2 + a1*c1*y2 + a2*c1*y2 + b1*c1*y2 + a1*b1*c1*y2 + a1*c2*y2 + b1*c2*y2 + a1*b1*c2*y2 + a2*b1*c2*y2 + b1*b2*c2*y2 + a2*b1*z1 + a2*c1*z1 + b1*c2*z1 + b2*c2*z1 + x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + a1*a2*z2 + a1*b1*z2 + a1*b1*b2*z2 + a2*b1*b2*z2 + a2*c1*z2 + a1*b1*c1*z2 + a1*b1*c2*z2 + a2*b1*c2*z2 + b1*b2*c2*z2 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 75 ( P4)
#####################################################################
Aqin75:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin75:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin75:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bdeltain75:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + a1*b1*b2 + a2*b1*b2;
end;
#####################################################################
Bxyin75:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return (1 - b1)*x2*y1 + b1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 76 ( P4_1)
#####################################################################
Aqin76:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin76:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin76:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 77 ( P4_2)
#####################################################################
Aqin77:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin77:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin77:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1 + z1;
end;
#####################################################################
Bxyin77:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 78 ( P4_3)
#####################################################################
Aqin78:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin78:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Bxyin78:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 79 ( I4)
#####################################################################
Aqin79:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin79:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain79:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + a1*b1*b2 + a2*b1*b2;
end;
#####################################################################
B2in79:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*x2 + b1*x2 + a1*b2*x2 + b2*y1 + a1*y2 + b1*y2 + a1*b2*y2 + b1*z2 + a1*b2*z2 + b1*b2*z2;
end;
#####################################################################
B3in79:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
C1in79:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return b2*b3*x1 + b1*b2*b3*x1 + (a1 + b1)*b2*b3*x1 + 2*b1*(a1 + b1)*b2*b3*x1 + b2^2*b3*x1 + b1^2*b2^2*b3*x1 + (a1 + b1)*b2^2*b3*x1 + b2*(a2 + b2)*b3*x1 + 2*b1*b2*(a2 + b2)*b3*x1 + b2^2*(a2 + b2)*b3*x1 + b2*b3^2*x1 + 2*b1*b2*b3^2*x1 + b1^2*b2*b3^2*x1 + (a1 + b1)*b2*b3^2*x1 + b2^2*b3^2*x1 + b1*b2^2*b3^2*x1 + b1*(a2 + b2)*b3^2*x1 + b2*(a2 + b2)*b3^2*x1 + b1*b2*(a3 + b3)*x1 + b1^2*b2*(a3 + b3)*x1 + b2*b3*(a3 + b3)*x1 + 2*b1*b2*b3*(a3 + b3)*x1 + b2^2*b3*(a3 + b3)*x1 + b2*b3*x1*(1 + x1) + (3*b1*b2*b3*x1*(1 + x1))/2 + (b1^2*b2*b3*x1*(1 + x1))/2 + ((a1 + b1)*b2*b3*x1*(1 + x1))/2 + (3*b2^2*b3*x1*(1 + x1))/2 + (a2 + b2)*b3*x1*(1 + x1) + (b2*(a2 + b2)*b3*x1*(1 + x1))/2 + (b2^2*b3^2*x1*(1 + x1))/2 + ((a2 + b2)*b3^2*x1*(1 + x1))/2 + (b2*(a3 + b3)*x1*(1 + x1))/2 + (b1*b2*(a3 + b3)*x1*(1 + x1))/2 + (b2*b3*(a3 + b3)*x1*(1 + x1))/2 + 3*b1*b3*x1*x2 + 2*b1^2*b3*x1*x2 + 2*(a1 + b1)*b3*x1*x2 + b2*b3*x1*x2 + 4*b1*b2*b3*x1*x2 + 2*b1^2*b2*b3*x1*x2 + 2*(a1 + b1)*b2*b3*x1*x2 + 2*b2^2*b3*x1*x2 + 2*b1*b2^2*b3*x1*x2 + 2*(a2 + b2)*b3*x1*x2 + b2*(a2 + b2)*b3*x1*x2 + b2*b3^2*x1*x2 + b2^2*b3^2*x1*x2 + (a2 + b2)*b3^2*x1*x2 + (a3 + b3)*x1*x2 + b2*(a3 + b3)*x1*x2 + 2*b1*b2*(a3 + b3)*x1*x2 + b1^2*b2*(a3 + b3)*x1*x2 + (a1 + b1)*b2*(a3 + b3)*x1*x2 + 2*b1*b2^2*(a3 + b3)*x1*x2 + b1^2*b2^2*(a3 + b3)*x1*x2 + (a1 + b1)*b2^2*(a3 + b3)*x1*x2 + b1*(a2 + b2)*(a3 + b3)*x1*x2 + b1^2*(a2 + b2)*(a3 + b3)*x1*x2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*x2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*x2 + 2*b3*(a3 + b3)*x1*x2 + b2*b3*(a3 + b3)*x1*x2 + b2^2*x1*x3 + b1*b2^2*x1*x3 + (a2 + b2)*x1*x3 + b1*(a2 + b2)*x1*x3 + b2*(a2 + b2)*x1*x3 + b1*b2*(a2 + b2)*x1*x3 + b2*b3*x1*x3 + b1*b2*b3*x1*x3 + b2*(a3 + b3)*x1*x3 + b2*b3*(a3 + b3)*x1*x3 + b1*b2*b3*y1 + (a1 + b1)*b2*b3*y1 + 2*b1*(a1 + b1)*b2*b3*y1 + b1^2*b2^2*b3*y1 + (a1 + b1)*b2^2*b3*y1 + b2*(a2 + b2)*b3*y1 + 2*b1*b2*(a2 + b2)*b3*y1 + b2^2*(a2 + b2)*b3*y1 + 2*b1*b2*b3^2*y1 + b1^2*b2*b3^2*y1 + (a1 + b1)*b2*b3^2*y1 + b2^2*b3^2*y1 + b1*b2^2*b3^2*y1 + b1*(a2 + b2)*b3^2*y1 + b2*(a2 + b2)*b3^2*y1 + b1*b2*(a3 + b3)*y1 + b1^2*b2*(a3 + b3)*y1 + b2*b3*(a3 + b3)*y1 + 2*b1*b2*b3*(a3 + b3)*y1 + b2^2*b3*(a3 + b3)*y1 + 4*b2*b3*x1*y1 + 2*b1*b2*b3*x1*y1 + b2^2*b3*x1*y1 + b2*(a2 + b2)*b3*x1*y1 + b2^2*b3^2*x1*y1 + (a2 + b2)*b3^2*x1*y1 + b2^2*(a3 + b3)*x1*y1 + (a2 + b2)*(a3 + b3)*x1*y1 + b2*b3*(a3 + b3)*x1*y1 + 2*b3*x2*y1 + 3*b1*b3*x2*y1 + 2*b1^2*b3*x2*y1 + 2*(a1 + b1)*b3*x2*y1 + 3*b2*b3*x2*y1 + 4*b1*b2*b3*x2*y1 + 2*b1^2*b2*b3*x2*y1 + 2*(a1 + b1)*b2*b3*x2*y1 + 2*b2^2*b3*x2*y1 + 2*b1*b2^2*b3*x2*y1 + 2*(a2 + b2)*b3*x2*y1 + b2*(a2 + b2)*b3*x2*y1 + b2*b3^2*x2*y1 + b2^2*b3^2*x2*y1 + (a2 + b2)*b3^2*x2*y1 + (a3 + b3)*x2*y1 + 2*b2*(a3 + b3)*x2*y1 + 2*b1*b2*(a3 + b3)*x2*y1 + b1^2*b2*(a3 + b3)*x2*y1 + (a1 + b1)*b2*(a3 + b3)*x2*y1 + b2^2*(a3 + b3)*x2*y1 + 2*b1*b2^2*(a3 + b3)*x2*y1 + b1^2*b2^2*(a3 + b3)*x2*y1 + (a1 + b1)*b2^2*(a3 + b3)*x2*y1 + (a2 + b2)*(a3 + b3)*x2*y1 + b1*(a2 + b2)*(a3 + b3)*x2*y1 + b1^2*(a2 + b2)*(a3 + b3)*x2*y1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x2*y1 + b1*b2*(a2 + b2)*(a3 + b3)*x2*y1 + 2*b3*(a3 + b3)*x2*y1 + b2*b3*(a3 + b3)*x2*y1 + b2^2*x3*y1 + b1*b2^2*x3*y1 + (a2 + b2)*x3*y1 + b1*(a2 + b2)*x3*y1 + b2*(a2 + b2)*x3*y1 + b1*b2*(a2 + b2)*x3*y1 + b2*b3*x3*y1 + b1*b2*b3*x3*y1 + b2*(a3 + b3)*x3*y1 + b2*b3*(a3 + b3)*x3*y1 + (3*b2*b3*y1*(1 + y1))/2 + (3*b1*b2*b3*y1*(1 + y1))/2 + (b1^2*b2*b3*y1*(1 + y1))/2 + ((a1 + b1)*b2*b3*y1*(1 + y1))/2 + (3*b2^2*b3*y1*(1 + y1))/2 + (a2 + b2)*b3*y1*(1 + y1) + (b2*(a2 + b2)*b3*y1*(1 + y1))/2 + (b2^2*b3^2*y1*(1 + y1))/2 + ((a2 + b2)*b3^2*y1*(1 + y1))/2 + (b2*(a3 + b3)*y1*(1 + y1))/2 + (b1*b2*(a3 + b3)*y1*(1 + y1))/2 + (b2*b3*(a3 + b3)*y1*(1 + y1))/2 + 3*b1*b3*x1*y2 + 2*b1^2*b3*x1*y2 + 2*(a1 + b1)*b3*x1*y2 + 2*b2*b3*x1*y2 + 4*b1*b2*b3*x1*y2 + 2*b1^2*b2*b3*x1*y2 + 2*(a1 + b1)*b2*b3*x1*y2 + 2*b2^2*b3*x1*y2 + 2*b1*b2^2*b3*x1*y2 + 2*(a2 + b2)*b3*x1*y2 + b2*(a2 + b2)*b3*x1*y2 + b3^2*x1*y2 + b2*b3^2*x1*y2 + b2^2*b3^2*x1*y2 + (a2 + b2)*b3^2*x1*y2 + b1*(a3 + b3)*x1*y2 + b1^2*(a3 + b3)*x1*y2 + (a1 + b1)*(a3 + b3)*x1*y2 + 2*b2*(a3 + b3)*x1*y2 + b1*b2*(a3 + b3)*x1*y2 + b1^2*b2*(a3 + b3)*x1*y2 + (a1 + b1)*b2*(a3 + b3)*x1*y2 + b2^2*(a3 + b3)*x1*y2 + 2*b1*b2^2*(a3 + b3)*x1*y2 + b1^2*b2^2*(a3 + b3)*x1*y2 + (a1 + b1)*b2^2*(a3 + b3)*x1*y2 + (a2 + b2)*(a3 + b3)*x1*y2 + b1*(a2 + b2)*(a3 + b3)*x1*y2 + b1^2*(a2 + b2)*(a3 + b3)*x1*y2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*y2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*y2 + 2*b3*(a3 + b3)*x1*y2 + b2*b3*(a3 + b3)*x1*y2 + 2*b3*y1*y2 + 3*b1*b3*y1*y2 + 2*b1^2*b3*y1*y2 + 2*(a1 + b1)*b3*y1*y2 + 2*b2*b3*y1*y2 + 4*b1*b2*b3*y1*y2 + 2*b1^2*b2*b3*y1*y2 + 2*(a1 + b1)*b2*b3*y1*y2 + 2*b2^2*b3*y1*y2 + 2*b1*b2^2*b3*y1*y2 + 2*(a2 + b2)*b3*y1*y2 + b2*(a2 + b2)*b3*y1*y2 + b3^2*y1*y2 + b2*b3^2*y1*y2 + b2^2*b3^2*y1*y2 + (a2 + b2)*b3^2*y1*y2 + (a3 + b3)*y1*y2 + b1*(a3 + b3)*y1*y2 + b1^2*(a3 + b3)*y1*y2 + (a1 + b1)*(a3 + b3)*y1*y2 + b2*(a3 + b3)*y1*y2 + b1*b2*(a3 + b3)*y1*y2 + b1^2*b2*(a3 + b3)*y1*y2 + (a1 + b1)*b2*(a3 + b3)*y1*y2 + 2*b1*b2^2*(a3 + b3)*y1*y2 + b1^2*b2^2*(a3 + b3)*y1*y2 + (a1 + b1)*b2^2*(a3 + b3)*y1*y2 + b1*(a2 + b2)*(a3 + b3)*y1*y2 + b1^2*(a2 + b2)*(a3 + b3)*y1*y2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y1*y2 + b1*b2*(a2 + b2)*(a3 + b3)*y1*y2 + 2*b3*(a3 + b3)*y1*y2 + b2*b3*(a3 + b3)*y1*y2 + b2*x1*y3 + b1*b2*x1*y3 + b2^2*x1*y3 + b1*b2^2*x1*y3 + (a2 + b2)*x1*y3 + b1*(a2 + b2)*x1*y3 + b2*(a2 + b2)*x1*y3 + b1*b2*(a2 + b2)*x1*y3 + 2*b2*b3*x1*y3 + b1*b2*b3*x1*y3 + b2*(a3 + b3)*x1*y3 + b2*b3*(a3 + b3)*x1*y3 + b2*y1*y3 + b1*b2*y1*y3 + b2^2*y1*y3 + b1*b2^2*y1*y3 + (a2 + b2)*y1*y3 + b1*(a2 + b2)*y1*y3 + b2*(a2 + b2)*y1*y3 + b1*b2*(a2 + b2)*y1*y3 + 2*b2*b3*y1*y3 + b1*b2*b3*y1*y3 + b2*(a3 + b3)*y1*y3 + b2*b3*(a3 + b3)*y1*y3 + b1*b2*b3*z1 + 2*b1*(a1 + b1)*b2*b3*z1 + b2^2*b3*z1 + b1*b2^2*b3*z1 + b1^2*b2^2*b3*z1 + (a1 + b1)*b2^2*b3*z1 + 2*b1*b2*(a2 + b2)*b3*z1 + b2^2*(a2 + b2)*b3*z1 + b1*b2*b3^2*z1 + b1^2*b2*b3^2*z1 + (a1 + b1)*b2*b3^2*z1 + b2^2*b3^2*z1 + b1*b2^2*b3^2*z1 + b1*(a2 + b2)*b3^2*z1 + b2*(a2 + b2)*b3^2*z1 + b1^2*b2*(a3 + b3)*z1 + 2*b1*b2*b3*(a3 + b3)*z1 + b2^2*b3*(a3 + b3)*z1 + 2*b2*b3*x1*z1 + 2*b1*b2*b3*x1*z1 + (a1 + b1)*b2*b3*x1*z1 + b1*(a1 + b1)*b2*b3*x1*z1 + b2^2*b3*x1*z1 + b2*(a2 + b2)*b3*x1*z1 + b2^2*b3^2*x1*z1 + (a2 + b2)*b3^2*x1*z1 + (a1 + b1)*b2*(a3 + b3)*x1*z1 + b2^2*(a3 + b3)*x1*z1 + b1*b2^2*(a3 + b3)*x1*z1 + b1*(a2 + b2)*(a3 + b3)*x1*z1 + b2*(a2 + b2)*(a3 + b3)*x1*z1 + b2*b3*(a3 + b3)*x1*z1 + b3*x2*z1 + b1*b3*x2*z1 + 2*b1^2*b3*x2*z1 + 2*(a1 + b1)*b3*x2*z1 + b2*b3*x2*z1 + 2*b1*b2*b3*x2*z1 + 2*b1^2*b2*b3*x2*z1 + 2*(a1 + b1)*b2*b3*x2*z1 + 2*b1*b2^2*b3*x2*z1 + 2*(a2 + b2)*b3*x2*z1 + b2*(a2 + b2)*b3*x2*z1 + b2*b3^2*x2*z1 + b2^2*b3^2*x2*z1 + (a2 + b2)*b3^2*x2*z1 + (a3 + b3)*x2*z1 + 2*b2*(a3 + b3)*x2*z1 + b1*b2*(a3 + b3)*x2*z1 + b1^2*b2*(a3 + b3)*x2*z1 + (a1 + b1)*b2*(a3 + b3)*x2*z1 + b2^2*(a3 + b3)*x2*z1 + b1*b2^2*(a3 + b3)*x2*z1 + b1^2*b2^2*(a3 + b3)*x2*z1 + (a1 + b1)*b2^2*(a3 + b3)*x2*z1 + b1^2*(a2 + b2)*(a3 + b3)*x2*z1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x2*z1 + b2*(a2 + b2)*(a3 + b3)*x2*z1 + b1*b2*(a2 + b2)*(a3 + b3)*x2*z1 + 2*b3*(a3 + b3)*x2*z1 + b2*b3*(a3 + b3)*x2*z1 + b1*b2^2*x3*z1 + b1*(a2 + b2)*x3*z1 + b1*b2*(a2 + b2)*x3*z1 + b1*b2*b3*x3*z1 + b2*(a3 + b3)*x3*z1 + b2*b3*(a3 + b3)*x3*z1 + 2*b2*b3*y1*z1 + 2*b1*b2*b3*y1*z1 + b1^2*b2*b3*y1*z1 + b1*(a1 + b1)*b2*b3*y1*z1 + b2^2*b3*y1*z1 + b2*(a2 + b2)*b3*y1*z1 + b2^2*b3^2*y1*z1 + (a2 + b2)*b3^2*y1*z1 + b1*b2*(a3 + b3)*y1*z1 + (a1 + b1)*b2*(a3 + b3)*y1*z1 + b1*b2^2*(a3 + b3)*y1*z1 + (a2 + b2)*(a3 + b3)*y1*z1 + b1*(a2 + b2)*(a3 + b3)*y1*z1 + b2*(a2 + b2)*(a3 + b3)*y1*z1 + b2*b3*(a3 + b3)*y1*z1 + 3*b3*y2*z1 + b1*b3*y2*z1 + 2*b1^2*b3*y2*z1 + 2*(a1 + b1)*b3*y2*z1 + 2*b1*b2*b3*y2*z1 + 2*b1^2*b2*b3*y2*z1 + 2*(a1 + b1)*b2*b3*y2*z1 + 2*b1*b2^2*b3*y2*z1 + 2*(a2 + b2)*b3*y2*z1 + b2*(a2 + b2)*b3*y2*z1 + b3^2*y2*z1 + b2*b3^2*y2*z1 + b2^2*b3^2*y2*z1 + (a2 + b2)*b3^2*y2*z1 + b1^2*(a3 + b3)*y2*z1 + (a1 + b1)*(a3 + b3)*y2*z1 + 2*b2*(a3 + b3)*y2*z1 + b1^2*b2*(a3 + b3)*y2*z1 + (a1 + b1)*b2*(a3 + b3)*y2*z1 + b1*b2^2*(a3 + b3)*y2*z1 + b1^2*b2^2*(a3 + b3)*y2*z1 + (a1 + b1)*b2^2*(a3 + b3)*y2*z1 + (a2 + b2)*(a3 + b3)*y2*z1 + b1^2*(a2 + b2)*(a3 + b3)*y2*z1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y2*z1 + b2*(a2 + b2)*(a3 + b3)*y2*z1 + b1*b2*(a2 + b2)*(a3 + b3)*y2*z1 + 2*b3*(a3 + b3)*y2*z1 + b2*b3*(a3 + b3)*y2*z1 + b1*b2*y3*z1 + b1*b2^2*y3*z1 + b1*(a2 + b2)*y3*z1 + b1*b2*(a2 + b2)*y3*z1 + b2*b3*y3*z1 + b1*b2*b3*y3*z1 + b2*(a3 + b3)*y3*z1 + b2*b3*(a3 + b3)*y3*z1 + b1*b2*b3*z1*(1 + z1) + (b1^2*b2*b3*z1*(1 + z1))/2 + ((a1 + b1)*b2*b3*z1*(1 + z1))/2 + (3*b2^2*b3*z1*(1 + z1))/2 + (a2 + b2)*b3*z1*(1 + z1) + (b2*(a2 + b2)*b3*z1*(1 + z1))/2 + (b2^2*b3^2*z1*(1 + z1))/2 + ((a2 + b2)*b3^2*z1*(1 + z1))/2 + (b1*b2*(a3 + b3)*z1*(1 + z1))/2 + (b2*b3*(a3 + b3)*z1*(1 + z1))/2 + 2*b2*b3*x1*z2 + 4*b1*b2*b3*x1*z2 + 2*b1^2*b2*b3*x1*z2 + 2*(a1 + b1)*b2*b3*x1*z2 + b2^2*b3*x1*z2 + 2*b1*b2^2*b3*x1*z2 + b2*(a2 + b2)*b3*x1*z2 + b2^2*b3^2*x1*z2 + (a2 + b2)*b3^2*x1*z2 + b2^2*(a3 + b3)*x1*z2 + 2*b1*b2^2*(a3 + b3)*x1*z2 + b1^2*b2^2*(a3 + b3)*x1*z2 + (a1 + b1)*b2^2*(a3 + b3)*x1*z2 + b1*(a2 + b2)*(a3 + b3)*x1*z2 + b1^2*(a2 + b2)*(a3 + b3)*x1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*z2 + b2*(a2 + b2)*(a3 + b3)*x1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*z2 + b2*b3*(a3 + b3)*x1*z2 + 2*b2*b3*y1*z2 + 4*b1*b2*b3*y1*z2 + 2*b1^2*b2*b3*y1*z2 + 2*(a1 + b1)*b2*b3*y1*z2 + b2^2*b3*y1*z2 + 2*b1*b2^2*b3*y1*z2 + b2*(a2 + b2)*b3*y1*z2 + b2^2*b3^2*y1*z2 + (a2 + b2)*b3^2*y1*z2 + 2*b1*b2^2*(a3 + b3)*y1*z2 + b1^2*b2^2*(a3 + b3)*y1*z2 + (a1 + b1)*b2^2*(a3 + b3)*y1*z2 + (a2 + b2)*(a3 + b3)*y1*z2 + b1*(a2 + b2)*(a3 + b3)*y1*z2 + b1^2*(a2 + b2)*(a3 + b3)*y1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y1*z2 + b2*(a2 + b2)*(a3 + b3)*y1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*y1*z2 + b2*b3*(a3 + b3)*y1*z2 + 2*b1*b2*b3*z1*z2 + 2*b1^2*b2*b3*z1*z2 + 2*(a1 + b1)*b2*b3*z1*z2 + b2^2*b3*z1*z2 + 2*b1*b2^2*b3*z1*z2 + b2*(a2 + b2)*b3*z1*z2 + b2^2*b3^2*z1*z2 + (a2 + b2)*b3^2*z1*z2 + b1*b2^2*(a3 + b3)*z1*z2 + b1^2*b2^2*(a3 + b3)*z1*z2 + (a1 + b1)*b2^2*(a3 + b3)*z1*z2 + b1^2*(a2 + b2)*(a3 + b3)*z1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*z1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*z1*z2 + b2*b3*(a3 + b3)*z1*z2 + b2*(a2 + b2)*x1*z3 + b1*b2*(a2 + b2)*x1*z3 + b2*b3*x1*z3 + b1*b2*b3*x1*z3 + b2*b3*(a3 + b3)*x1*z3 + b2*(a2 + b2)*y1*z3 + b1*b2*(a2 + b2)*y1*z3 + b2*b3*y1*z3 + b1*b2*b3*y1*z3 + b2*b3*(a3 + b3)*y1*z3 + b1*b2*(a2 + b2)*z1*z3 + b1*b2*b3*z1*z3 + b2*b3*(a3 + b3)*z1*z3;
end;
#####################################################################
C2in79:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return b2*b3*x1 + b1*b2*b3*x1 + (a1 + b1)*b2*b3*x1 + 2*b1*(a1 + b1)*b2*b3*x1 + b2^2*b3*x1 + b1^2*b2^2*b3*x1 + (a1 + b1)*b2^2*b3*x1 + b2*(a2 + b2)*b3*x1 + 2*b1*b2*(a2 + b2)*b3*x1 + b2^2*(a2 + b2)*b3*x1 + b2*b3^2*x1 + 2*b1*b2*b3^2*x1 + b1^2*b2*b3^2*x1 + (a1 + b1)*b2*b3^2*x1 + b2^2*b3^2*x1 + b1*b2^2*b3^2*x1 + b1*(a2 + b2)*b3^2*x1 + b2*(a2 + b2)*b3^2*x1 + b1*b2*(a3 + b3)*x1 + b1^2*b2*(a3 + b3)*x1 + b2*b3*(a3 + b3)*x1 + 2*b1*b2*b3*(a3 + b3)*x1 + b2^2*b3*(a3 + b3)*x1 + b2*b3*x1*(1 + x1) + (3*b1*b2*b3*x1*(1 + x1))/2 + (b1^2*b2*b3*x1*(1 + x1))/2 + ((a1 + b1)*b2*b3*x1*(1 + x1))/2 + (3*b2^2*b3*x1*(1 + x1))/2 + (a2 + b2)*b3*x1*(1 + x1) + (b2*(a2 + b2)*b3*x1*(1 + x1))/2 + (b2^2*b3^2*x1*(1 + x1))/2 + ((a2 + b2)*b3^2*x1*(1 + x1))/2 + (b2*(a3 + b3)*x1*(1 + x1))/2 + (b1*b2*(a3 + b3)*x1*(1 + x1))/2 + (b2*b3*(a3 + b3)*x1*(1 + x1))/2 + 3*b1*b3*x1*x2 + 2*b1^2*b3*x1*x2 + 2*(a1 + b1)*b3*x1*x2 + b2*b3*x1*x2 + 4*b1*b2*b3*x1*x2 + 2*b1^2*b2*b3*x1*x2 + 2*(a1 + b1)*b2*b3*x1*x2 + 2*b2^2*b3*x1*x2 + 2*b1*b2^2*b3*x1*x2 + 2*(a2 + b2)*b3*x1*x2 + b1*(a2 + b2)*b3*x1*x2 + b2*(a2 + b2)*b3*x1*x2 + b1*b2*(a2 + b2)*b3*x1*x2 + b2*b3^2*x1*x2 + b2^2*b3^2*x1*x2 + (a2 + b2)*b3^2*x1*x2 + (a3 + b3)*x1*x2 + b1*(a3 + b3)*x1*x2 + (a1 + b1)*(a3 + b3)*x1*x2 + b1*(a1 + b1)*(a3 + b3)*x1*x2 + b1^2*(a1 + b1)*(a3 + b3)*x1*x2 + b2*(a3 + b3)*x1*x2 + 4*b1*b2*(a3 + b3)*x1*x2 + b1^2*b2*(a3 + b3)*x1*x2 + (a1 + b1)*b2*(a3 + b3)*x1*x2 + 2*b1*(a1 + b1)*b2*(a3 + b3)*x1*x2 + 2*b1*b2^2*(a3 + b3)*x1*x2 + b1^2*b2^2*(a3 + b3)*x1*x2 + (a1 + b1)*b2^2*(a3 + b3)*x1*x2 + b1*(a2 + b2)*(a3 + b3)*x1*x2 + b1^2*(a2 + b2)*(a3 + b3)*x1*x2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*x2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*x2 + 2*b3*(a3 + b3)*x1*x2 + b2*b3*(a3 + b3)*x1*x2 + b1*b2*b3*(a3 + b3)*x1*x2 + (b1^2*(a3 + b3)*x1*(1 + x1)*x2)/2 + (b1*(a1 + b1)*(a3 + b3)*x1*(1 + x1)*x2)/2 + (b1*b2*(a3 + b3)*x1*(1 + x1)*x2)/2 + ((a1 + b1)*b2*(a3 + b3)*x1*(1 + x1)*x2)/2 + (b1*(a3 + b3)*x1*x2*(1 + x2))/2 + (b1^2*(a3 + b3)*x1*x2*(1 + x2))/2 + (b1*(a1 + b1)*(a3 + b3)*x1*x2*(1 + x2))/2 + (b1*b2*(a3 + b3)*x1*x2*(1 + x2))/2 + ((a1 + b1)*b2*(a3 + b3)*x1*x2*(1 + x2))/2 + b1*b2*x1*x3 + 2*b1*(a1 + b1)*b2*x1*x3 + b2^2*x1*x3 + 2*b1*b2^2*x1*x3 + b1*(a1 + b1)*b2^2*x1*x3 + 2*(a2 + b2)*x1*x3 + b1*(a2 + b2)*x1*x3 + 2*b2*(a2 + b2)*x1*x3 + 3*b1*b2*(a2 + b2)*x1*x3 + (a1 + b1)*b2*(a2 + b2)*x1*x3 + b1*(a1 + b1)*b2*(a2 + b2)*x1*x3 + b2*b3*x1*x3 + b1*b2*b3*x1*x3 + (a2 + b2)*b3*x1*x3 + 2*b2*(a2 + b2)*b3*x1*x3 + b2^2*(a2 + b2)*b3*x1*x3 + 2*b2*(a3 + b3)*x1*x3 + b2^2*(a3 + b3)*x1*x3 + (a2 + b2)*(a3 + b3)*x1*x3 + b2*(a2 + b2)*(a3 + b3)*x1*x3 + b2*b3*(a3 + b3)*x1*x3 + b1*b2*b3*(a3 + b3)*x1*x3 + b2^2*b3*(a3 + b3)*x1*x3 + b1*(a1 + b1)*x1*x2*x3 + b1*b2*x1*x2*x3 + 2*b1*(a1 + b1)*b2*x1*x2*x3 + b1*b2^2*x1*x2*x3 + b1*(a2 + b2)*x1*x2*x3 + b1*(a1 + b1)*(a2 + b2)*x1*x2*x3 + b1*b2*(a2 + b2)*x1*x2*x3 + b1*b2*x1*x3*(1 + x3) + (b1^2*b2*x1*x3*(1 + x3))/2 + (b2^2*x1*x3*(1 + x3))/2 + (b1^2*x2*x3*(1 + x3))/2 + (b1^2*b2*x2*x3*(1 + x3))/2 + (b1*(a2 + b2)*x2*x3*(1 + x3))/2 + (b1*(a3 + b3)*x2*x3*(1 + x3))/2 + ((a1 + b1)*(a3 + b3)*x2*x3*(1 + x3))/2 + b1*b2*b3*y1 + (a1 + b1)*b2*b3*y1 + 2*b1*(a1 + b1)*b2*b3*y1 + b1^2*b2^2*b3*y1 + (a1 + b1)*b2^2*b3*y1 + b2*(a2 + b2)*b3*y1 + 2*b1*b2*(a2 + b2)*b3*y1 + b2^2*(a2 + b2)*b3*y1 + 2*b1*b2*b3^2*y1 + b1^2*b2*b3^2*y1 + (a1 + b1)*b2*b3^2*y1 + b2^2*b3^2*y1 + b1*b2^2*b3^2*y1 + b1*(a2 + b2)*b3^2*y1 + b2*(a2 + b2)*b3^2*y1 + b1*b2*(a3 + b3)*y1 + b1^2*b2*(a3 + b3)*y1 + b2*b3*(a3 + b3)*y1 + 2*b1*b2*b3*(a3 + b3)*y1 + b2^2*b3*(a3 + b3)*y1 + 5*b2*b3*x1*y1 + 2*b1*b2*b3*x1*y1 + b2^2*b3*x1*y1 + b2*(a2 + b2)*b3*x1*y1 + b2^2*b3^2*x1*y1 + (a2 + b2)*b3^2*x1*y1 + b2^2*(a3 + b3)*x1*y1 + (a2 + b2)*(a3 + b3)*x1*y1 + b2*b3*(a3 + b3)*x1*y1 + (b1*b2*b3*x1*(1 + x1)*y1)/2 + (b2*(a3 + b3)*x1*(1 + x1)*y1)/2 + 2*b3*x2*y1 + 3*b1*b3*x2*y1 + 2*b1^2*b3*x2*y1 + 2*(a1 + b1)*b3*x2*y1 + 3*b2*b3*x2*y1 + 4*b1*b2*b3*x2*y1 + 2*b1^2*b2*b3*x2*y1 + 2*(a1 + b1)*b2*b3*x2*y1 + 2*b2^2*b3*x2*y1 + 2*b1*b2^2*b3*x2*y1 + 2*(a2 + b2)*b3*x2*y1 + b1*(a2 + b2)*b3*x2*y1 + b2*(a2 + b2)*b3*x2*y1 + b1*b2*(a2 + b2)*b3*x2*y1 + b2*b3^2*x2*y1 + b2^2*b3^2*x2*y1 + (a2 + b2)*b3^2*x2*y1 + 2*(a3 + b3)*x2*y1 + 2*b1*(a3 + b3)*x2*y1 + (a1 + b1)*(a3 + b3)*x2*y1 + b1*(a1 + b1)*(a3 + b3)*x2*y1 + b1^2*(a1 + b1)*(a3 + b3)*x2*y1 + 2*b2*(a3 + b3)*x2*y1 + 4*b1*b2*(a3 + b3)*x2*y1 + 2*b1^2*b2*(a3 + b3)*x2*y1 + (a1 + b1)*b2*(a3 + b3)*x2*y1 + 2*b1*(a1 + b1)*b2*(a3 + b3)*x2*y1 + b2^2*(a3 + b3)*x2*y1 + 2*b1*b2^2*(a3 + b3)*x2*y1 + b1^2*b2^2*(a3 + b3)*x2*y1 + (a1 + b1)*b2^2*(a3 + b3)*x2*y1 + (a2 + b2)*(a3 + b3)*x2*y1 + b1*(a2 + b2)*(a3 + b3)*x2*y1 + b1^2*(a2 + b2)*(a3 + b3)*x2*y1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x2*y1 + b1*b2*(a2 + b2)*(a3 + b3)*x2*y1 + 2*b3*(a3 + b3)*x2*y1 + b2*b3*(a3 + b3)*x2*y1 + b1*b2*b3*(a3 + b3)*x2*y1 + b1*(a3 + b3)*x1*x2*y1 + b2*(a3 + b3)*x1*x2*y1 + (b2*b3*x2*(1 + x2)*y1)/2 + ((a3 + b3)*x2*(1 + x2)*y1)/2 + (b1*(a3 + b3)*x2*(1 + x2)*y1)/2 + (b1^2*(a3 + b3)*x2*(1 + x2)*y1)/2 + (b1*(a1 + b1)*(a3 + b3)*x2*(1 + x2)*y1)/2 + (b2*(a3 + b3)*x2*(1 + x2)*y1)/2 + b1*b2*(a3 + b3)*x2*(1 + x2)*y1 + ((a1 + b1)*b2*(a3 + b3)*x2*(1 + x2)*y1)/2 + b2*x3*y1 + b1*b2*x3*y1 + 2*b1*(a1 + b1)*b2*x3*y1 + 2*b2^2*x3*y1 + b1*b2^2*x3*y1 + b1*(a1 + b1)*b2^2*x3*y1 + 2*(a2 + b2)*x3*y1 + b1*(a2 + b2)*x3*y1 + 3*b2*(a2 + b2)*x3*y1 + 2*b1*b2*(a2 + b2)*x3*y1 + (a1 + b1)*b2*(a2 + b2)*x3*y1 + b1*(a1 + b1)*b2*(a2 + b2)*x3*y1 + b2^2*(a2 + b2)*x3*y1 + 2*b2*b3*x3*y1 + b1*b2*b3*x3*y1 + b2^2*b3*x3*y1 + (a2 + b2)*b3*x3*y1 + 2*b2*(a2 + b2)*b3*x3*y1 + b2*(a3 + b3)*x3*y1 + (a2 + b2)*(a3 + b3)*x3*y1 + b2*b3*(a3 + b3)*x3*y1 + b1*b2*b3*(a3 + b3)*x3*y1 + b2^2*b3*(a3 + b3)*x3*y1 + b1*b2*x1*x3*y1 + b1*x2*x3*y1 + b1*(a1 + b1)*x2*x3*y1 + b1*b2*x2*x3*y1 + 2*b1*(a1 + b1)*b2*x2*x3*y1 + b1*b2^2*x2*x3*y1 + b1*(a1 + b1)*(a2 + b2)*x2*x3*y1 + 2*b2*(a2 + b2)*x2*x3*y1 + b1*b2*(a2 + b2)*x2*x3*y1 + b2^2*b3*x2*x3*y1 + b2*(a2 + b2)*b3*x2*x3*y1 + (a3 + b3)*x2*x3*y1 + 2*b2*(a3 + b3)*x2*x3*y1 + (a2 + b2)*(a3 + b3)*x2*x3*y1 + (b2*x3*(1 + x3)*y1)/2 + b1*b2*x3*(1 + x3)*y1 + (b1^2*b2*x3*(1 + x3)*y1)/2 + (b2^2*x3*(1 + x3)*y1)/2 + (b2*b3*x3*(1 + x3)*y1)/2 + (3*b2*b3*y1*(1 + y1))/2 + (3*b1*b2*b3*y1*(1 + y1))/2 + (b1^2*b2*b3*y1*(1 + y1))/2 + ((a1 + b1)*b2*b3*y1*(1 + y1))/2 + (3*b2^2*b3*y1*(1 + y1))/2 + (a2 + b2)*b3*y1*(1 + y1) + (b2*(a2 + b2)*b3*y1*(1 + y1))/2 + (b2^2*b3^2*y1*(1 + y1))/2 + ((a2 + b2)*b3^2*y1*(1 + y1))/2 + (b2*(a3 + b3)*y1*(1 + y1))/2 + (b1*b2*(a3 + b3)*y1*(1 + y1))/2 + (b2*b3*(a3 + b3)*y1*(1 + y1))/2 + (b1*b2*b3*x1*y1*(1 + y1))/2 + (b2*(a3 + b3)*x1*y1*(1 + y1))/2 + (b1^2*(a3 + b3)*x2*y1*(1 + y1))/2 + (b1*(a1 + b1)*(a3 + b3)*x2*y1*(1 + y1))/2 + (b2*(a3 + b3)*x2*y1*(1 + y1))/2 + b1*b2*(a3 + b3)*x2*y1*(1 + y1) + ((a1 + b1)*b2*(a3 + b3)*x2*y1*(1 + y1))/2 + b3*x1*y2 + 4*b1*b3*x1*y2 + 2*b1^2*b3*x1*y2 + 2*(a1 + b1)*b3*x1*y2 + 3*b2*b3*x1*y2 + 5*b1*b2*b3*x1*y2 + 2*b1^2*b2*b3*x1*y2 + 2*(a1 + b1)*b2*b3*x1*y2 + 2*b2^2*b3*x1*y2 + 2*b1*b2^2*b3*x1*y2 + 2*(a2 + b2)*b3*x1*y2 + b1*(a2 + b2)*b3*x1*y2 + b2*(a2 + b2)*b3*x1*y2 + b1*b2*(a2 + b2)*b3*x1*y2 + b3^2*x1*y2 + b2*b3^2*x1*y2 + b2^2*b3^2*x1*y2 + (a2 + b2)*b3^2*x1*y2 + 3*b1*(a3 + b3)*x1*y2 + 2*b1^2*(a3 + b3)*x1*y2 + 2*(a1 + b1)*(a3 + b3)*x1*y2 + b1*(a1 + b1)*(a3 + b3)*x1*y2 + b1^2*(a1 + b1)*(a3 + b3)*x1*y2 + 2*b2*(a3 + b3)*x1*y2 + 3*b1*b2*(a3 + b3)*x1*y2 + b1^2*b2*(a3 + b3)*x1*y2 + (a1 + b1)*b2*(a3 + b3)*x1*y2 + 2*b1*(a1 + b1)*b2*(a3 + b3)*x1*y2 + b2^2*(a3 + b3)*x1*y2 + 2*b1*b2^2*(a3 + b3)*x1*y2 + b1^2*b2^2*(a3 + b3)*x1*y2 + (a1 + b1)*b2^2*(a3 + b3)*x1*y2 + (a2 + b2)*(a3 + b3)*x1*y2 + b1*(a2 + b2)*(a3 + b3)*x1*y2 + b1^2*(a2 + b2)*(a3 + b3)*x1*y2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*y2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*y2 + 2*b3*(a3 + b3)*x1*y2 + b2*b3*(a3 + b3)*x1*y2 + b1*b2*b3*(a3 + b3)*x1*y2 + (b1*(a3 + b3)*x1*(1 + x1)*y2)/2 + (b1^2*(a3 + b3)*x1*(1 + x1)*y2)/2 + (b1*(a1 + b1)*(a3 + b3)*x1*(1 + x1)*y2)/2 + (b2*(a3 + b3)*x1*(1 + x1)*y2)/2 + (b1*b2*(a3 + b3)*x1*(1 + x1)*y2)/2 + ((a1 + b1)*b2*(a3 + b3)*x1*(1 + x1)*y2)/2 + b2*(a3 + b3)*x1*x2*y2 + (b1*b2*(a3 + b3)*x2*(1 + x2)*y2)/2 + b1*b2*x1*x3*y2 + b1*(a1 + b1)*b2*x1*x3*y2 + b1*b2^2*x1*x3*y2 + b1*(a2 + b2)*x1*x3*y2 + b1*(a1 + b1)*(a2 + b2)*x1*x3*y2 + b1*b2*(a2 + b2)*x1*x3*y2 + (b1*x3*(1 + x3)*y2)/2 + (b1^2*x3*(1 + x3)*y2)/2 + (b1^2*b2*x3*(1 + x3)*y2)/2 + (b1*(a2 + b2)*x3*(1 + x3)*y2)/2 + (b1*(a3 + b3)*x3*(1 + x3)*y2)/2 + ((a1 + b1)*(a3 + b3)*x3*(1 + x3)*y2)/2 + 3*b3*y1*y2 + 4*b1*b3*y1*y2 + 2*b1^2*b3*y1*y2 + 2*(a1 + b1)*b3*y1*y2 + 3*b2*b3*y1*y2 + 5*b1*b2*b3*y1*y2 + 2*b1^2*b2*b3*y1*y2 + 2*(a1 + b1)*b2*b3*y1*y2 + 2*b2^2*b3*y1*y2 + 2*b1*b2^2*b3*y1*y2 + 2*(a2 + b2)*b3*y1*y2 + b1*(a2 + b2)*b3*y1*y2 + b2*(a2 + b2)*b3*y1*y2 + b1*b2*(a2 + b2)*b3*y1*y2 + b3^2*y1*y2 + b2*b3^2*y1*y2 + b2^2*b3^2*y1*y2 + (a2 + b2)*b3^2*y1*y2 + 2*(a3 + b3)*y1*y2 + 2*b1*(a3 + b3)*y1*y2 + 2*b1^2*(a3 + b3)*y1*y2 + 2*(a1 + b1)*(a3 + b3)*y1*y2 + b1*(a1 + b1)*(a3 + b3)*y1*y2 + b1^2*(a1 + b1)*(a3 + b3)*y1*y2 + b2*(a3 + b3)*y1*y2 + 3*b1*b2*(a3 + b3)*y1*y2 + 2*b1^2*b2*(a3 + b3)*y1*y2 + (a1 + b1)*b2*(a3 + b3)*y1*y2 + 2*b1*(a1 + b1)*b2*(a3 + b3)*y1*y2 + 2*b1*b2^2*(a3 + b3)*y1*y2 + b1^2*b2^2*(a3 + b3)*y1*y2 + (a1 + b1)*b2^2*(a3 + b3)*y1*y2 + b1*(a2 + b2)*(a3 + b3)*y1*y2 + b1^2*(a2 + b2)*(a3 + b3)*y1*y2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y1*y2 + b1*b2*(a2 + b2)*(a3 + b3)*y1*y2 + 2*b3*(a3 + b3)*y1*y2 + b2*b3*(a3 + b3)*y1*y2 + b1*b2*b3*(a3 + b3)*y1*y2 + b1*(a3 + b3)*x1*y1*y2 + b2*(a3 + b3)*x1*y1*y2 + b2*(a3 + b3)*x2*y1*y2 + b2*x3*y1*y2 + b1*(a1 + b1)*b2*x3*y1*y2 + b1*b2^2*x3*y1*y2 + b1*(a1 + b1)*(a2 + b2)*x3*y1*y2 + b2*(a2 + b2)*x3*y1*y2 + b1*b2*(a2 + b2)*x3*y1*y2 + b2*b3*x3*y1*y2 + b2*(a2 + b2)*b3*x3*y1*y2 + b2*(a3 + b3)*x3*y1*y2 + (a2 + b2)*(a3 + b3)*x3*y1*y2 + (b1*(a3 + b3)*y1*(1 + y1)*y2)/2 + (b1^2*(a3 + b3)*y1*(1 + y1)*y2)/2 + (b1*(a1 + b1)*(a3 + b3)*y1*(1 + y1)*y2)/2 + b1*b2*(a3 + b3)*y1*(1 + y1)*y2 + ((a1 + b1)*b2*(a3 + b3)*y1*(1 + y1)*y2)/2 + (b1^2*(a3 + b3)*x1*y2*(1 + y2))/2 + (b1*(a1 + b1)*(a3 + b3)*x1*y2*(1 + y2))/2 + (b2*(a3 + b3)*x1*y2*(1 + y2))/2 + (b1*b2*(a3 + b3)*x1*y2*(1 + y2))/2 + ((a1 + b1)*b2*(a3 + b3)*x1*y2*(1 + y2))/2 + (b1*b2*(a3 + b3)*x2*y2*(1 + y2))/2 + (b2*b3*y1*y2*(1 + y2))/2 + ((a3 + b3)*y1*y2*(1 + y2))/2 + (b1^2*(a3 + b3)*y1*y2*(1 + y2))/2 + (b1*(a1 + b1)*(a3 + b3)*y1*y2*(1 + y2))/2 + b1*b2*(a3 + b3)*y1*y2*(1 + y2) + ((a1 + b1)*b2*(a3 + b3)*y1*y2*(1 + y2))/2 + 2*b2*x1*y3 + 2*b1*b2*x1*y3 + (a1 + b1)*b2*x1*y3 + b1*(a1 + b1)*b2*x1*y3 + 2*b2^2*x1*y3 + 2*b1*b2^2*x1*y3 + b1*(a1 + b1)*b2^2*x1*y3 + (a2 + b2)*x1*y3 + b1*(a2 + b2)*x1*y3 + 3*b2*(a2 + b2)*x1*y3 + 3*b1*b2*(a2 + b2)*x1*y3 + (a1 + b1)*b2*(a2 + b2)*x1*y3 + b1*(a1 + b1)*b2*(a2 + b2)*x1*y3 + 4*b2*b3*x1*y3 + 2*b1*b2*b3*x1*y3 + (a2 + b2)*b3*x1*y3 + 2*b2*(a2 + b2)*b3*x1*y3 + b2^2*(a2 + b2)*b3*x1*y3 + 3*b2*(a3 + b3)*x1*y3 + b2^2*(a3 + b3)*x1*y3 + (a2 + b2)*(a3 + b3)*x1*y3 + b2*(a2 + b2)*(a3 + b3)*x1*y3 + b2*b3*(a3 + b3)*x1*y3 + b1*b2*b3*(a3 + b3)*x1*y3 + b2^2*b3*(a3 + b3)*x1*y3 + b1*x1*x2*y3 + 2*b1*b2*x1*x2*y3 + 2*b1*(a1 + b1)*b2*x1*x2*y3 + b1*b2^2*x1*x2*y3 + b1*(a2 + b2)*x1*x2*y3 + b1*(a1 + b1)*(a2 + b2)*x1*x2*y3 + b1*b2*(a2 + b2)*x1*x2*y3 + b1*b2*x1*x3*y3 + (a1 + b1)*b2*x1*x3*y3 + b1*(a1 + b1)*b2*x1*x3*y3 + b2^2*x1*x3*y3 + b1*(a2 + b2)*x1*x3*y3 + b2*(a2 + b2)*x1*x3*y3 + 2*b2*y1*y3 + 3*b1*b2*y1*y3 + (a1 + b1)*b2*y1*y3 + b1*(a1 + b1)*b2*y1*y3 + b2^2*y1*y3 + b1*b2^2*y1*y3 + b1*(a1 + b1)*b2^2*y1*y3 + (a2 + b2)*y1*y3 + b1*(a2 + b2)*y1*y3 + 3*b2*(a2 + b2)*y1*y3 + 2*b1*b2*(a2 + b2)*y1*y3 + (a1 + b1)*b2*(a2 + b2)*y1*y3 + b1*(a1 + b1)*b2*(a2 + b2)*y1*y3 + b2^2*(a2 + b2)*y1*y3 + 3*b2*b3*y1*y3 + 2*b1*b2*b3*y1*y3 + (a2 + b2)*b3*y1*y3 + 2*b2*(a2 + b2)*b3*y1*y3 + b2*(a3 + b3)*y1*y3 + (a2 + b2)*(a3 + b3)*y1*y3 + b2*b3*(a3 + b3)*y1*y3 + b1*b2*b3*(a3 + b3)*y1*y3 + b2^2*b3*(a3 + b3)*y1*y3 + b1*b2*x1*y1*y3 + b1*x2*y1*y3 + 2*b1*(a1 + b1)*b2*x2*y1*y3 + b1*b2^2*x2*y1*y3 + (a2 + b2)*x2*y1*y3 + b1*(a1 + b1)*(a2 + b2)*x2*y1*y3 + 2*b2*(a2 + b2)*x2*y1*y3 + b1*b2*(a2 + b2)*x2*y1*y3 + b2*b3*x2*y1*y3 + b2^2*b3*x2*y1*y3 + b2*(a2 + b2)*b3*x2*y1*y3 + 2*b2*(a3 + b3)*x2*y1*y3 + (a2 + b2)*(a3 + b3)*x2*y1*y3 + b2*x3*y1*y3 + 2*b1*b2*x3*y1*y3 + (a1 + b1)*b2*x3*y1*y3 + b1*(a1 + b1)*b2*x3*y1*y3 + b2^2*x3*y1*y3 + b1*(a2 + b2)*x3*y1*y3 + b2^2*b3*x3*y1*y3 + b2*(a3 + b3)*x3*y1*y3 + b1*x1*y2*y3 + b1*(a1 + b1)*x1*y2*y3 + 2*b1*b2*x1*y2*y3 + b1*(a1 + b1)*b2*x1*y2*y3 + b1*b2^2*x1*y2*y3 + b1*(a2 + b2)*x1*y2*y3 + b1*(a1 + b1)*(a2 + b2)*x1*y2*y3 + b1*b2*(a2 + b2)*x1*y2*y3 + y1*y2*y3 + b1*(a1 + b1)*y1*y2*y3 + b2*y1*y2*y3 + b1*b2*y1*y2*y3 + b1*(a1 + b1)*b2*y1*y2*y3 + b1*b2^2*y1*y2*y3 + (a2 + b2)*y1*y2*y3 + b1*(a1 + b1)*(a2 + b2)*y1*y2*y3 + b2*(a2 + b2)*y1*y2*y3 + b1*b2*(a2 + b2)*y1*y2*y3 + b2*(a2 + b2)*b3*y1*y2*y3 + (a3 + b3)*y1*y2*y3 + b2*(a3 + b3)*y1*y2*y3 + (a2 + b2)*(a3 + b3)*y1*y2*y3 + b1*b2*x1*y3*(1 + y3) + (b1^2*b2*x1*y3*(1 + y3))/2 + (b2^2*x1*y3*(1 + y3))/2 + b1*x2*y3*(1 + y3) + (b1^2*x2*y3*(1 + y3))/2 + ((a1 + b1)*x2*y3*(1 + y3))/2 + (b1^2*b2*x2*y3*(1 + y3))/2 + (b1*(a2 + b2)*x2*y3*(1 + y3))/2 + (b1*(a3 + b3)*x2*y3*(1 + y3))/2 + ((a1 + b1)*(a3 + b3)*x2*y3*(1 + y3))/2 + (b2*y1*y3*(1 + y3))/2 + b1*b2*y1*y3*(1 + y3) + (b1^2*b2*y1*y3*(1 + y3))/2 + (b2^2*y1*y3*(1 + y3))/2 + (b2*b3*y1*y3*(1 + y3))/2 + (b1*y2*y3*(1 + y3))/2 + (b1^2*y2*y3*(1 + y3))/2 + ((a1 + b1)*y2*y3*(1 + y3))/2 + (b1^2*b2*y2*y3*(1 + y3))/2 + (b1*(a2 + b2)*y2*y3*(1 + y3))/2 + (b1*(a3 + b3)*y2*y3*(1 + y3))/2 + ((a1 + b1)*(a3 + b3)*y2*y3*(1 + y3))/2 + b1*b2*b3*z1 + 2*b1*(a1 + b1)*b2*b3*z1 + b2^2*b3*z1 + b1*b2^2*b3*z1 + b1^2*b2^2*b3*z1 + (a1 + b1)*b2^2*b3*z1 + 2*b1*b2*(a2 + b2)*b3*z1 + b2^2*(a2 + b2)*b3*z1 + b1*b2*b3^2*z1 + b1^2*b2*b3^2*z1 + (a1 + b1)*b2*b3^2*z1 + b2^2*b3^2*z1 + b1*b2^2*b3^2*z1 + b1*(a2 + b2)*b3^2*z1 + b2*(a2 + b2)*b3^2*z1 + b1^2*b2*(a3 + b3)*z1 + 2*b1*b2*b3*(a3 + b3)*z1 + b2^2*b3*(a3 + b3)*z1 + 2*b2*b3*x1*z1 + 2*b1*b2*b3*x1*z1 + 2*(a1 + b1)*b2*b3*x1*z1 + b1*(a1 + b1)*b2*b3*x1*z1 + b2^2*b3*x1*z1 + (a2 + b2)*b3*x1*z1 + 2*b2*(a2 + b2)*b3*x1*z1 + b2^2*b3^2*x1*z1 + (a2 + b2)*b3^2*x1*z1 + b2*(a3 + b3)*x1*z1 + b1*b2*(a3 + b3)*x1*z1 + (a1 + b1)*b2*(a3 + b3)*x1*z1 + b2^2*(a3 + b3)*x1*z1 + b1*b2^2*(a3 + b3)*x1*z1 + b1*(a2 + b2)*(a3 + b3)*x1*z1 + b2*(a2 + b2)*(a3 + b3)*x1*z1 + 2*b2*b3*(a3 + b3)*x1*z1 + b3*x2*z1 + b1*b3*x2*z1 + 2*b1^2*b3*x2*z1 + 2*(a1 + b1)*b3*x2*z1 + b2*b3*x2*z1 + 2*b1*b2*b3*x2*z1 + 2*b1^2*b2*b3*x2*z1 + 2*(a1 + b1)*b2*b3*x2*z1 + 2*b1*b2^2*b3*x2*z1 + 3*(a2 + b2)*b3*x2*z1 + b1*(a2 + b2)*b3*x2*z1 + 2*b2*(a2 + b2)*b3*x2*z1 + b1*b2*(a2 + b2)*b3*x2*z1 + b2*b3^2*x2*z1 + b2^2*b3^2*x2*z1 + (a2 + b2)*b3^2*x2*z1 + (a3 + b3)*x2*z1 + b1*(a3 + b3)*x2*z1 + b1*(a1 + b1)*(a3 + b3)*x2*z1 + 3*b2*(a3 + b3)*x2*z1 + 2*b1*b2*(a3 + b3)*x2*z1 + b1^2*b2*(a3 + b3)*x2*z1 + 2*(a1 + b1)*b2*(a3 + b3)*x2*z1 + b1*(a1 + b1)*b2*(a3 + b3)*x2*z1 + b2^2*(a3 + b3)*x2*z1 + b1*b2^2*(a3 + b3)*x2*z1 + b1^2*b2^2*(a3 + b3)*x2*z1 + (a1 + b1)*b2^2*(a3 + b3)*x2*z1 + b1^2*(a2 + b2)*(a3 + b3)*x2*z1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x2*z1 + b2*(a2 + b2)*(a3 + b3)*x2*z1 + b1*b2*(a2 + b2)*(a3 + b3)*x2*z1 + 2*b3*(a3 + b3)*x2*z1 + 2*b2*b3*(a3 + b3)*x2*z1 + b1*b2*b3*(a3 + b3)*x2*z1 + b1*(a3 + b3)*x1*x2*z1 + b1^2*(a3 + b3)*x1*x2*z1 + b1*(a1 + b1)*(a3 + b3)*x1*x2*z1 + b1*b2*(a3 + b3)*x1*x2*z1 + (a1 + b1)*b2*(a3 + b3)*x1*x2*z1 + b1*b2*x3*z1 + (a1 + b1)*b2*x3*z1 + 2*b1*(a1 + b1)*b2*x3*z1 + 2*b1*b2^2*x3*z1 + b1*(a1 + b1)*b2^2*x3*z1 + (a2 + b2)*x3*z1 + b1*(a2 + b2)*x3*z1 + b2*(a2 + b2)*x3*z1 + 3*b1*b2*(a2 + b2)*x3*z1 + (a1 + b1)*b2*(a2 + b2)*x3*z1 + b1*(a1 + b1)*b2*(a2 + b2)*x3*z1 + b1*b2*b3*x3*z1 + (a2 + b2)*b3*x3*z1 + 2*b2*(a2 + b2)*b3*x3*z1 + b2^2*(a2 + b2)*b3*x3*z1 + 2*b2*(a3 + b3)*x3*z1 + b2^2*(a3 + b3)*x3*z1 + (a2 + b2)*(a3 + b3)*x3*z1 + b2*(a2 + b2)*(a3 + b3)*x3*z1 + 2*b2*b3*(a3 + b3)*x3*z1 + b1*b2*b3*(a3 + b3)*x3*z1 + b2^2*b3*(a3 + b3)*x3*z1 + b1*b2*x1*x3*z1 + (a1 + b1)*b2*x1*x3*z1 + b2^2*x1*x3*z1 + b2*(a2 + b2)*x1*x3*z1 + b1*(a1 + b1)*x2*x3*z1 + b2*x2*x3*z1 + b1*b2*x2*x3*z1 + 2*b1*(a1 + b1)*b2*x2*x3*z1 + b2^2*x2*x3*z1 + b1*b2^2*x2*x3*z1 + (a2 + b2)*x2*x3*z1 + b1*(a2 + b2)*x2*x3*z1 + b1*(a1 + b1)*(a2 + b2)*x2*x3*z1 + b2*(a2 + b2)*x2*x3*z1 + b1*b2*(a2 + b2)*x2*x3*z1 + b1*b2*x3*(1 + x3)*z1 + (b1^2*b2*x3*(1 + x3)*z1)/2 + (b2^2*x3*(1 + x3)*z1)/2 + 3*b2*b3*y1*z1 + 3*b1*b2*b3*y1*z1 + b1^2*b2*b3*y1*z1 + (a1 + b1)*b2*b3*y1*z1 + b1*(a1 + b1)*b2*b3*y1*z1 + b2^2*b3*y1*z1 + (a2 + b2)*b3*y1*z1 + 2*b2*(a2 + b2)*b3*y1*z1 + b2^2*b3^2*y1*z1 + (a2 + b2)*b3^2*y1*z1 + 2*b2*(a3 + b3)*y1*z1 + 2*b1*b2*(a3 + b3)*y1*z1 + (a1 + b1)*b2*(a3 + b3)*y1*z1 + b1*b2^2*(a3 + b3)*y1*z1 + (a2 + b2)*(a3 + b3)*y1*z1 + b1*(a2 + b2)*(a3 + b3)*y1*z1 + b2*(a2 + b2)*(a3 + b3)*y1*z1 + 2*b2*b3*(a3 + b3)*y1*z1 + b1*b2*b3*x1*y1*z1 + b2*(a3 + b3)*x1*y1*z1 + b1*(a3 + b3)*x2*y1*z1 + b1^2*(a3 + b3)*x2*y1*z1 + b1*(a1 + b1)*(a3 + b3)*x2*y1*z1 + b2*(a3 + b3)*x2*y1*z1 + 2*b1*b2*(a3 + b3)*x2*y1*z1 + (a1 + b1)*b2*(a3 + b3)*x2*y1*z1 + b2*x3*y1*z1 + 2*b1*b2*x3*y1*z1 + (a1 + b1)*b2*x3*y1*z1 + b2^2*x3*y1*z1 + b2*(a2 + b2)*x3*y1*z1 + 3*b3*y2*z1 + 2*b1*b3*y2*z1 + 2*b1^2*b3*y2*z1 + 2*(a1 + b1)*b3*y2*z1 + 3*b1*b2*b3*y2*z1 + 2*b1^2*b2*b3*y2*z1 + 2*(a1 + b1)*b2*b3*y2*z1 + 2*b1*b2^2*b3*y2*z1 + 3*(a2 + b2)*b3*y2*z1 + b1*(a2 + b2)*b3*y2*z1 + 2*b2*(a2 + b2)*b3*y2*z1 + b1*b2*(a2 + b2)*b3*y2*z1 + b3^2*y2*z1 + b2*b3^2*y2*z1 + b2^2*b3^2*y2*z1 + (a2 + b2)*b3^2*y2*z1 + (a3 + b3)*y2*z1 + 2*b1*(a3 + b3)*y2*z1 + b1^2*(a3 + b3)*y2*z1 + (a1 + b1)*(a3 + b3)*y2*z1 + b1*(a1 + b1)*(a3 + b3)*y2*z1 + 4*b2*(a3 + b3)*y2*z1 + 2*b1*b2*(a3 + b3)*y2*z1 + b1^2*b2*(a3 + b3)*y2*z1 + 2*(a1 + b1)*b2*(a3 + b3)*y2*z1 + b1*(a1 + b1)*b2*(a3 + b3)*y2*z1 + b1*b2^2*(a3 + b3)*y2*z1 + b1^2*b2^2*(a3 + b3)*y2*z1 + (a1 + b1)*b2^2*(a3 + b3)*y2*z1 + (a2 + b2)*(a3 + b3)*y2*z1 + b1^2*(a2 + b2)*(a3 + b3)*y2*z1 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y2*z1 + b2*(a2 + b2)*(a3 + b3)*y2*z1 + b1*b2*(a2 + b2)*(a3 + b3)*y2*z1 + 2*b3*(a3 + b3)*y2*z1 + 2*b2*b3*(a3 + b3)*y2*z1 + b1*b2*b3*(a3 + b3)*y2*z1 + b1^2*(a3 + b3)*x1*y2*z1 + b1*(a1 + b1)*(a3 + b3)*x1*y2*z1 + b2*(a3 + b3)*x1*y2*z1 + b1*b2*(a3 + b3)*x1*y2*z1 + (a1 + b1)*b2*(a3 + b3)*x1*y2*z1 + b2*(a3 + b3)*x2*y2*z1 + b1*b2*(a3 + b3)*x2*y2*z1 + b1*b2*x3*y2*z1 + b1*(a1 + b1)*b2*x3*y2*z1 + b2^2*x3*y2*z1 + b1*b2^2*x3*y2*z1 + b1*(a2 + b2)*x3*y2*z1 + b1*(a1 + b1)*(a2 + b2)*x3*y2*z1 + b2*(a2 + b2)*x3*y2*z1 + b1*b2*(a2 + b2)*x3*y2*z1 + b1^2*(a3 + b3)*y1*y2*z1 + b1*(a1 + b1)*(a3 + b3)*y1*y2*z1 + 2*b1*b2*(a3 + b3)*y1*y2*z1 + (a1 + b1)*b2*(a3 + b3)*y1*y2*z1 + b2*y3*z1 + 2*b1*b2*y3*z1 + b1*(a1 + b1)*b2*y3*z1 + b2^2*y3*z1 + 2*b1*b2^2*y3*z1 + b1*(a1 + b1)*b2^2*y3*z1 + b1*(a2 + b2)*y3*z1 + 2*b2*(a2 + b2)*y3*z1 + 3*b1*b2*(a2 + b2)*y3*z1 + (a1 + b1)*b2*(a2 + b2)*y3*z1 + b1*(a1 + b1)*b2*(a2 + b2)*y3*z1 + 2*b2*b3*y3*z1 + 2*b1*b2*b3*y3*z1 + (a2 + b2)*b3*y3*z1 + 2*b2*(a2 + b2)*b3*y3*z1 + b2^2*(a2 + b2)*b3*y3*z1 + 3*b2*(a3 + b3)*y3*z1 + b2^2*(a3 + b3)*y3*z1 + (a2 + b2)*(a3 + b3)*y3*z1 + b2*(a2 + b2)*(a3 + b3)*y3*z1 + 2*b2*b3*(a3 + b3)*y3*z1 + b1*b2*b3*(a3 + b3)*y3*z1 + b2^2*b3*(a3 + b3)*y3*z1 + b2*x1*y3*z1 + b1*b2*x1*y3*z1 + (a1 + b1)*b2*x1*y3*z1 + b2^2*x1*y3*z1 + b2*(a2 + b2)*x1*y3*z1 + x2*y3*z1 + b1*x2*y3*z1 + 2*b2*x2*y3*z1 + 2*b1*b2*x2*y3*z1 + 2*b1*(a1 + b1)*b2*x2*y3*z1 + b2^2*x2*y3*z1 + b1*b2^2*x2*y3*z1 + (a2 + b2)*x2*y3*z1 + b1*(a2 + b2)*x2*y3*z1 + b1*(a1 + b1)*(a2 + b2)*x2*y3*z1 + b2*(a2 + b2)*x2*y3*z1 + b1*b2*(a2 + b2)*x2*y3*z1 + b2*x3*y3*z1 + b1*b2*x3*y3*z1 + (a1 + b1)*b2*x3*y3*z1 + b1*(a1 + b1)*b2*x3*y3*z1 + b2^2*x3*y3*z1 + (a2 + b2)*x3*y3*z1 + b1*(a2 + b2)*x3*y3*z1 + b2*(a2 + b2)*x3*y3*z1 + 2*b1*b2*y1*y3*z1 + (a1 + b1)*b2*y1*y3*z1 + b2^2*y1*y3*z1 + b2*(a2 + b2)*y1*y3*z1 + b1*y2*y3*z1 + b1*(a1 + b1)*y2*y3*z1 + b2*y2*y3*z1 + 2*b1*b2*y2*y3*z1 + b1*(a1 + b1)*b2*y2*y3*z1 + b2^2*y2*y3*z1 + b1*b2^2*y2*y3*z1 + b1*(a2 + b2)*y2*y3*z1 + b1*(a1 + b1)*(a2 + b2)*y2*y3*z1 + b2*(a2 + b2)*y2*y3*z1 + b1*b2*(a2 + b2)*y2*y3*z1 + b1*b2*y3*(1 + y3)*z1 + (b1^2*b2*y3*(1 + y3)*z1)/2 + (b2^2*y3*(1 + y3)*z1)/2 + b1*b2*b3*z1*(1 + z1) + (b1^2*b2*b3*z1*(1 + z1))/2 + ((a1 + b1)*b2*b3*z1*(1 + z1))/2 + (3*b2^2*b3*z1*(1 + z1))/2 + (a2 + b2)*b3*z1*(1 + z1) + (b2*(a2 + b2)*b3*z1*(1 + z1))/2 + (b2^2*b3^2*z1*(1 + z1))/2 + ((a2 + b2)*b3^2*z1*(1 + z1))/2 + (b1*b2*(a3 + b3)*z1*(1 + z1))/2 + (b2*b3*(a3 + b3)*z1*(1 + z1))/2 + (b2*b3*x1*z1*(1 + z1))/2 + ((a3 + b3)*x2*z1*(1 + z1))/2 + (b1*(a3 + b3)*x2*z1*(1 + z1))/2 + (b2*b3*y1*z1*(1 + z1))/2 + ((a3 + b3)*y2*z1*(1 + z1))/2 + (b1*(a3 + b3)*y2*z1*(1 + z1))/2 + 2*b2*b3*x1*z2 + 4*b1*b2*b3*x1*z2 + 2*b1^2*b2*b3*x1*z2 + 2*(a1 + b1)*b2*b3*x1*z2 + b2^2*b3*x1*z2 + 2*b1*b2^2*b3*x1*z2 + (a2 + b2)*b3*x1*z2 + b1*(a2 + b2)*b3*x1*z2 + 2*b2*(a2 + b2)*b3*x1*z2 + b1*b2*(a2 + b2)*b3*x1*z2 + b2^2*b3^2*x1*z2 + (a2 + b2)*b3^2*x1*z2 + b1*(a3 + b3)*x1*z2 + b1^2*(a3 + b3)*x1*z2 + (a1 + b1)*(a3 + b3)*x1*z2 + b1^2*(a1 + b1)*(a3 + b3)*x1*z2 + b2*(a3 + b3)*x1*z2 + 2*b1*b2*(a3 + b3)*x1*z2 + b1^2*b2*(a3 + b3)*x1*z2 + (a1 + b1)*b2*(a3 + b3)*x1*z2 + 2*b1*(a1 + b1)*b2*(a3 + b3)*x1*z2 + b2^2*(a3 + b3)*x1*z2 + 2*b1*b2^2*(a3 + b3)*x1*z2 + b1^2*b2^2*(a3 + b3)*x1*z2 + (a1 + b1)*b2^2*(a3 + b3)*x1*z2 + b1*(a2 + b2)*(a3 + b3)*x1*z2 + b1^2*(a2 + b2)*(a3 + b3)*x1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*x1*z2 + b2*(a2 + b2)*(a3 + b3)*x1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*x1*z2 + 2*b2*b3*(a3 + b3)*x1*z2 + b1*b2*b3*(a3 + b3)*x1*z2 + (b1*(a1 + b1)*(a3 + b3)*x1*(1 + x1)*z2)/2 + ((a1 + b1)*b2*(a3 + b3)*x1*(1 + x1)*z2)/2 + b1^2*(a3 + b3)*x1*x2*z2 + b1*(a1 + b1)*(a3 + b3)*x1*x2*z2 + b1^2*(a1 + b1)*(a3 + b3)*x1*x2*z2 + b1*b2*(a3 + b3)*x1*x2*z2 + (a1 + b1)*b2*(a3 + b3)*x1*x2*z2 + b1*(a1 + b1)*b2*(a3 + b3)*x1*x2*z2 + (b1*(a3 + b3)*x2*(1 + x2)*z2)/2 + (b1^2*(a3 + b3)*x2*(1 + x2)*z2)/2 + (b1*(a1 + b1)*(a3 + b3)*x2*(1 + x2)*z2)/2 + (b1^2*b2*(a3 + b3)*x2*(1 + x2)*z2)/2 + ((a1 + b1)*b2*(a3 + b3)*x2*(1 + x2)*z2)/2 + (a1 + b1)*b2*x1*x3*z2 + b1*(a1 + b1)*b2*x1*x3*z2 + b2^2*x1*x3*z2 + b1*b2^2*x1*x3*z2 + b2*(a2 + b2)*x1*x3*z2 + b1*b2*(a2 + b2)*x1*x3*z2 + (b1*b2*x3*(1 + x3)*z2)/2 + (b1^2*b2*x3*(1 + x3)*z2)/2 + (b1*(a2 + b2)*x3*(1 + x3)*z2)/2 + ((a1 + b1)*(a3 + b3)*x3*(1 + x3)*z2)/2 + 2*b2*b3*y1*z2 + 4*b1*b2*b3*y1*z2 + 2*b1^2*b2*b3*y1*z2 + 2*(a1 + b1)*b2*b3*y1*z2 + b2^2*b3*y1*z2 + 2*b1*b2^2*b3*y1*z2 + (a2 + b2)*b3*y1*z2 + b1*(a2 + b2)*b3*y1*z2 + 2*b2*(a2 + b2)*b3*y1*z2 + b1*b2*(a2 + b2)*b3*y1*z2 + b2^2*b3^2*y1*z2 + (a2 + b2)*b3^2*y1*z2 + (a3 + b3)*y1*z2 + b1*(a3 + b3)*y1*z2 + (a1 + b1)*(a3 + b3)*y1*z2 + b1^2*(a1 + b1)*(a3 + b3)*y1*z2 + 2*b2*(a3 + b3)*y1*z2 + 3*b1*b2*(a3 + b3)*y1*z2 + (a1 + b1)*b2*(a3 + b3)*y1*z2 + 2*b1*(a1 + b1)*b2*(a3 + b3)*y1*z2 + 2*b1*b2^2*(a3 + b3)*y1*z2 + b1^2*b2^2*(a3 + b3)*y1*z2 + (a1 + b1)*b2^2*(a3 + b3)*y1*z2 + (a2 + b2)*(a3 + b3)*y1*z2 + b1*(a2 + b2)*(a3 + b3)*y1*z2 + b1^2*(a2 + b2)*(a3 + b3)*y1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*y1*z2 + b2*(a2 + b2)*(a3 + b3)*y1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*y1*z2 + 2*b2*b3*(a3 + b3)*y1*z2 + b1*b2*b3*(a3 + b3)*y1*z2 + b1*(a3 + b3)*x1*y1*z2 + b2*(a3 + b3)*x1*y1*z2 + b1*(a3 + b3)*x2*y1*z2 + b1^2*(a1 + b1)*(a3 + b3)*x2*y1*z2 + b2*(a3 + b3)*x2*y1*z2 + b1*b2*(a3 + b3)*x2*y1*z2 + b1^2*b2*(a3 + b3)*x2*y1*z2 + b1*(a1 + b1)*b2*(a3 + b3)*x2*y1*z2 + b2*x3*y1*z2 + b1*b2*x3*y1*z2 + (a1 + b1)*b2*x3*y1*z2 + b1*(a1 + b1)*b2*x3*y1*z2 + b2^2*x3*y1*z2 + b1*b2^2*x3*y1*z2 + b1*b2*(a2 + b2)*x3*y1*z2 + b2^2*b3*x3*y1*z2 + b2*(a3 + b3)*x3*y1*z2 + (b1*(a3 + b3)*y1*(1 + y1)*z2)/2 + (b1*(a1 + b1)*(a3 + b3)*y1*(1 + y1)*z2)/2 + (b1*b2*(a3 + b3)*y1*(1 + y1)*z2)/2 + ((a1 + b1)*b2*(a3 + b3)*y1*(1 + y1)*z2)/2 + b1*(a3 + b3)*x1*y2*z2 + b1^2*(a3 + b3)*x1*y2*z2 + b1^2*(a1 + b1)*(a3 + b3)*x1*y2*z2 + b2*(a3 + b3)*x1*y2*z2 + b1*b2*(a3 + b3)*x1*y2*z2 + b1*(a1 + b1)*b2*(a3 + b3)*x1*y2*z2 + b1*(a3 + b3)*y1*y2*z2 + b1*(a1 + b1)*(a3 + b3)*y1*y2*z2 + b1^2*(a1 + b1)*(a3 + b3)*y1*y2*z2 + 2*b1*b2*(a3 + b3)*y1*y2*z2 + b1^2*b2*(a3 + b3)*y1*y2*z2 + (a1 + b1)*b2*(a3 + b3)*y1*y2*z2 + b1*(a1 + b1)*b2*(a3 + b3)*y1*y2*z2 + (b1^2*(a3 + b3)*y2*(1 + y2)*z2)/2 + (b1*(a1 + b1)*(a3 + b3)*y2*(1 + y2)*z2)/2 + (b1*b2*(a3 + b3)*y2*(1 + y2)*z2)/2 + (b1^2*b2*(a3 + b3)*y2*(1 + y2)*z2)/2 + ((a1 + b1)*b2*(a3 + b3)*y2*(1 + y2)*z2)/2 + b2*x1*y3*z2 + b1*b2*x1*y3*z2 + (a1 + b1)*b2*x1*y3*z2 + b1*(a1 + b1)*b2*x1*y3*z2 + b2^2*x1*y3*z2 + b1*b2^2*x1*y3*z2 + b2*(a2 + b2)*x1*y3*z2 + b1*b2*(a2 + b2)*x1*y3*z2 + (a1 + b1)*b2*y1*y3*z2 + b1*(a1 + b1)*b2*y1*y3*z2 + b2^2*y1*y3*z2 + b1*b2^2*y1*y3*z2 + b1*b2*(a2 + b2)*y1*y3*z2 + b2^2*b3*y1*y3*z2 + b2*(a3 + b3)*y1*y3*z2 + (b1*y3*(1 + y3)*z2)/2 + ((a1 + b1)*y3*(1 + y3)*z2)/2 + (b1*b2*y3*(1 + y3)*z2)/2 + (b1^2*b2*y3*(1 + y3)*z2)/2 + (b1*(a2 + b2)*y3*(1 + y3)*z2)/2 + ((a1 + b1)*(a3 + b3)*y3*(1 + y3)*z2)/2 + 2*b1*b2*b3*z1*z2 + 2*b1^2*b2*b3*z1*z2 + 2*(a1 + b1)*b2*b3*z1*z2 + b2^2*b3*z1*z2 + 2*b1*b2^2*b3*z1*z2 + b1*(a2 + b2)*b3*z1*z2 + b2*(a2 + b2)*b3*z1*z2 + b1*b2*(a2 + b2)*b3*z1*z2 + b2^2*b3^2*z1*z2 + (a2 + b2)*b3^2*z1*z2 + (a1 + b1)*(a3 + b3)*z1*z2 + b1*b2*(a3 + b3)*z1*z2 + b1^2*b2*(a3 + b3)*z1*z2 + b1*(a1 + b1)*b2*(a3 + b3)*z1*z2 + b1*b2^2*(a3 + b3)*z1*z2 + b1^2*b2^2*(a3 + b3)*z1*z2 + (a1 + b1)*b2^2*(a3 + b3)*z1*z2 + b1^2*(a2 + b2)*(a3 + b3)*z1*z2 + (a1 + b1)*(a2 + b2)*(a3 + b3)*z1*z2 + b1*b2*(a2 + b2)*(a3 + b3)*z1*z2 + b2*b3*(a3 + b3)*z1*z2 + b1*b2*b3*(a3 + b3)*z1*z2 + (a3 + b3)*x1*z1*z2 + b1*(a3 + b3)*x1*z1*z2 + b1*(a1 + b1)*(a3 + b3)*x1*z1*z2 + (a1 + b1)*b2*(a3 + b3)*x1*z1*z2 + (a3 + b3)*x2*z1*z2 + b1^2*(a3 + b3)*x2*z1*z2 + b1*(a1 + b1)*(a3 + b3)*x2*z1*z2 + b1^2*b2*(a3 + b3)*x2*z1*z2 + (a1 + b1)*b2*(a3 + b3)*x2*z1*z2 + (a1 + b1)*b2*x3*z1*z2 + b1*(a1 + b1)*b2*x3*z1*z2 + b1*b2^2*x3*z1*z2 + b1*b2*(a2 + b2)*x3*z1*z2 + (a3 + b3)*y1*z1*z2 + b1*(a1 + b1)*(a3 + b3)*y1*z1*z2 + b1*b2*(a3 + b3)*y1*z1*z2 + (a1 + b1)*b2*(a3 + b3)*y1*z1*z2 + (a3 + b3)*y2*z1*z2 + b1*(a3 + b3)*y2*z1*z2 + b1^2*(a3 + b3)*y2*z1*z2 + b1*(a1 + b1)*(a3 + b3)*y2*z1*z2 + b1*b2*(a3 + b3)*y2*z1*z2 + b1^2*b2*(a3 + b3)*y2*z1*z2 + (a1 + b1)*b2*(a3 + b3)*y2*z1*z2 + b1*b2*y3*z1*z2 + (a1 + b1)*b2*y3*z1*z2 + b1*(a1 + b1)*b2*y3*z1*z2 + b1*b2^2*y3*z1*z2 + b1*b2*(a2 + b2)*y3*z1*z2 + (b1*(a3 + b3)*z1*(1 + z1)*z2)/2 + ((a3 + b3)*x1*z2*(1 + z2))/2 + (b1*(a3 + b3)*x1*z2*(1 + z2))/2 + (b1*(a1 + b1)*(a3 + b3)*x1*z2*(1 + z2))/2 + ((a1 + b1)*b2*(a3 + b3)*x1*z2*(1 + z2))/2 + (b1*(a3 + b3)*x2*z2*(1 + z2))/2 + (b1^2*(a3 + b3)*x2*z2*(1 + z2))/2 + (b1*(a1 + b1)*(a3 + b3)*x2*z2*(1 + z2))/2 + (b1^2*b2*(a3 + b3)*x2*z2*(1 + z2))/2 + ((a1 + b1)*b2*(a3 + b3)*x2*z2*(1 + z2))/2 + (b2*b3*y1*z2*(1 + z2))/2 + (a3 + b3)*y1*z2*(1 + z2) + (b1*(a1 + b1)*(a3 + b3)*y1*z2*(1 + z2))/2 + (b1*b2*(a3 + b3)*y1*z2*(1 + z2))/2 + ((a1 + b1)*b2*(a3 + b3)*y1*z2*(1 + z2))/2 + (b1^2*(a3 + b3)*y2*z2*(1 + z2))/2 + (b1*(a1 + b1)*(a3 + b3)*y2*z2*(1 + z2))/2 + (b1*b2*(a3 + b3)*y2*z2*(1 + z2))/2 + (b1^2*b2*(a3 + b3)*y2*z2*(1 + z2))/2 + ((a1 + b1)*b2*(a3 + b3)*y2*z2*(1 + z2))/2 + b3*(2*b1*x2 + (a1 + b1)*x2 + b1*b2*x2 + (a1 + b1)*b2*x2 + b2*y1 + 2*b1*y2 + (a1 + b1)*y2 + b1*b2*y2 + (a1 + b1)*b2*y2 + x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*z2 + (a1 + b1)*b2*z2 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2) + b1*b2*x1*z3 + b1^2*b2*x1*z3 + 2*(a1 + b1)*b2*x1*z3 + 2*b1*(a1 + b1)*b2*x1*z3 + (a1 + b1)*b2^2*x1*z3 + (a2 + b2)*x1*z3 + (a1 + b1)*(a2 + b2)*x1*z3 + b1*(a1 + b1)*(a2 + b2)*x1*z3 + 2*b2*(a2 + b2)*x1*z3 + 3*b1*b2*(a2 + b2)*x1*z3 + (a1 + b1)*b2*(a2 + b2)*x1*z3 + b1*(a1 + b1)*b2*(a2 + b2)*x1*z3 + b2^2*(a2 + b2)*x1*z3 + b2*b3*x1*z3 + b1*b2*b3*x1*z3 + b2*(a2 + b2)*b3*x1*z3 + b2^2*(a2 + b2)*b3*x1*z3 + b2*(a3 + b3)*x1*z3 + b1*b2*(a3 + b3)*x1*z3 + b2^2*(a3 + b3)*x1*z3 + b2*(a2 + b2)*(a3 + b3)*x1*z3 + 2*b2*b3*(a3 + b3)*x1*z3 + b1*b2*b3*(a3 + b3)*x1*z3 + b2^2*b3*(a3 + b3)*x1*z3 + 2*b1*b2*x1*x2*z3 + b1^2*b2*x1*x2*z3 + (a1 + b1)*b2*x1*x2*z3 + b1*(a1 + b1)*b2*x1*x2*z3 + b1*(a2 + b2)*x1*x2*z3 + b1*(a1 + b1)*(a2 + b2)*x1*x2*z3 + b1*b2*(a2 + b2)*x1*x2*z3 + b1*(a1 + b1)*b2^2*x1*x3*z3 + b1*(a1 + b1)*(a2 + b2)*x1*x3*z3 + 2*b2*y1*z3 + 3*b1*b2*y1*z3 + b1^2*b2*y1*z3 + 2*(a1 + b1)*b2*y1*z3 + 2*b1*(a1 + b1)*b2*y1*z3 + b2^2*y1*z3 + (a1 + b1)*b2^2*y1*z3 + b1*(a2 + b2)*y1*z3 + (a1 + b1)*(a2 + b2)*y1*z3 + b1*(a1 + b1)*(a2 + b2)*y1*z3 + 3*b2*(a2 + b2)*y1*z3 + 2*b1*b2*(a2 + b2)*y1*z3 + (a1 + b1)*b2*(a2 + b2)*y1*z3 + b1*(a1 + b1)*b2*(a2 + b2)*y1*z3 + b2^2*(a2 + b2)*y1*z3 + 2*b2*b3*y1*z3 + b1*b2*b3*y1*z3 + 2*b2*(a2 + b2)*b3*y1*z3 + b1*b2*(a3 + b3)*y1*z3 + b2^2*(a3 + b3)*y1*z3 + (a2 + b2)*(a3 + b3)*y1*z3 + 2*b2*b3*(a3 + b3)*y1*z3 + b1*b2*b3*(a3 + b3)*y1*z3 + b2^2*b3*(a3 + b3)*y1*z3 + b2*x1*y1*z3 + b1*b2*x1*y1*z3 + b2*x2*y1*z3 + 3*b1*b2*x2*y1*z3 + b1^2*b2*x2*y1*z3 + (a1 + b1)*b2*x2*y1*z3 + b1*(a1 + b1)*b2*x2*y1*z3 + (a2 + b2)*x2*y1*z3 + b1*(a1 + b1)*(a2 + b2)*x2*y1*z3 + b2*(a2 + b2)*x2*y1*z3 + b1*b2*(a2 + b2)*x2*y1*z3 + b2^2*b3*x2*y1*z3 + b2*(a2 + b2)*b3*x2*y1*z3 + b2*(a3 + b3)*x2*y1*z3 + (a2 + b2)*(a3 + b3)*x2*y1*z3 + b1*b2^2*x3*y1*z3 + b1*(a1 + b1)*b2^2*x3*y1*z3 + b1*(a2 + b2)*x3*y1*z3 + b1*(a1 + b1)*(a2 + b2)*x3*y1*z3 + b2*(a2 + b2)*x3*y1*z3 + b2^2*(a2 + b2)*x3*y1*z3 + b2^2*b3*x3*y1*z3 + b2*(a2 + b2)*b3*x3*y1*z3 + b2^2*(a3 + b3)*x3*y1*z3 + (a2 + b2)*(a3 + b3)*x3*y1*z3 + b1*x1*y2*z3 + b2*x1*y2*z3 + 2*b1*b2*x1*y2*z3 + b1^2*b2*x1*y2*z3 + (a1 + b1)*b2*x1*y2*z3 + b1*(a2 + b2)*x1*y2*z3 + b1*(a1 + b1)*(a2 + b2)*x1*y2*z3 + b1*b2*(a2 + b2)*x1*y2*z3 + b1*y1*y2*z3 + 2*b1*b2*y1*y2*z3 + b1^2*b2*y1*y2*z3 + (a1 + b1)*b2*y1*y2*z3 + b1*(a1 + b1)*(a2 + b2)*y1*y2*z3 + b1*b2*(a2 + b2)*y1*y2*z3 + b2*(a2 + b2)*b3*y1*y2*z3 + (a2 + b2)*(a3 + b3)*y1*y2*z3 + b1*(a1 + b1)*b2*x1*y3*z3 + b1*(a1 + b1)*b2^2*x1*y3*z3 + b1*(a1 + b1)*(a2 + b2)*x1*y3*z3 + b1*b2*y1*y3*z3 + b1*(a1 + b1)*b2*y1*y3*z3 + b1*b2^2*y1*y3*z3 + b1*(a1 + b1)*b2^2*y1*y3*z3 + (a2 + b2)*y1*y3*z3 + b1*(a2 + b2)*y1*y3*z3 + b1*(a1 + b1)*(a2 + b2)*y1*y3*z3 + 2*b2*(a2 + b2)*y1*y3*z3 + b2^2*(a2 + b2)*y1*y3*z3 + b2*(a2 + b2)*b3*y1*y3*z3 + b2*(a3 + b3)*y1*y3*z3 + b2^2*(a3 + b3)*y1*y3*z3 + (a2 + b2)*(a3 + b3)*y1*y3*z3 + b1^2*b2*z1*z3 + (a1 + b1)*b2*z1*z3 + 2*b1*(a1 + b1)*b2*z1*z3 + (a1 + b1)*b2^2*z1*z3 + (a1 + b1)*(a2 + b2)*z1*z3 + b1*(a1 + b1)*(a2 + b2)*z1*z3 + b2*(a2 + b2)*z1*z3 + 3*b1*b2*(a2 + b2)*z1*z3 + (a1 + b1)*b2*(a2 + b2)*z1*z3 + b1*(a1 + b1)*b2*(a2 + b2)*z1*z3 + b2^2*(a2 + b2)*z1*z3 + b1*b2*b3*z1*z3 + b2*(a2 + b2)*b3*z1*z3 + b2^2*(a2 + b2)*b3*z1*z3 + b1*b2*(a3 + b3)*z1*z3 + b2^2*(a3 + b3)*z1*z3 + b2*(a2 + b2)*(a3 + b3)*z1*z3 + b2*b3*(a3 + b3)*z1*z3 + b1*b2*b3*(a3 + b3)*z1*z3 + b2^2*b3*(a3 + b3)*z1*z3 + b2*x1*z1*z3 + (a1 + b1)*b2*x1*z1*z3 + b2*(a2 + b2)*x1*z1*z3 + b2*x2*z1*z3 + b1*b2*x2*z1*z3 + b1^2*b2*x2*z1*z3 + (a1 + b1)*b2*x2*z1*z3 + b1*(a1 + b1)*b2*x2*z1*z3 + (a2 + b2)*x2*z1*z3 + b1*(a2 + b2)*x2*z1*z3 + b1*(a1 + b1)*(a2 + b2)*x2*z1*z3 + b2*(a2 + b2)*x2*z1*z3 + b1*b2*(a2 + b2)*x2*z1*z3 + b1*(a1 + b1)*b2^2*x3*z1*z3 + (a2 + b2)*x3*z1*z3 + b1*(a1 + b1)*(a2 + b2)*x3*z1*z3 + b2*(a2 + b2)*x3*z1*z3 + b2*y1*z1*z3 + b1*b2*y1*z1*z3 + (a1 + b1)*b2*y1*z1*z3 + b2*(a2 + b2)*y1*z1*z3 + y2*z1*z3 + b1*y2*z1*z3 + 2*b2*y2*z1*z3 + b1*b2*y2*z1*z3 + b1^2*b2*y2*z1*z3 + (a1 + b1)*b2*y2*z1*z3 + b1*(a2 + b2)*y2*z1*z3 + b1*(a1 + b1)*(a2 + b2)*y2*z1*z3 + b2*(a2 + b2)*y2*z1*z3 + b1*b2*(a2 + b2)*y2*z1*z3 + b1*(a1 + b1)*b2*y3*z1*z3 + b1*(a1 + b1)*b2^2*y3*z1*z3 + b1*(a1 + b1)*(a2 + b2)*y3*z1*z3 + b2*(a2 + b2)*y3*z1*z3 + b1*x1*z2*z3 + b1^2*x1*z2*z3 + b1*(a1 + b1)*x1*z2*z3 + b2*x1*z2*z3 + 2*b1*b2*x1*z2*z3 + b1^2*b2*x1*z2*z3 + b1*(a1 + b1)*b2*x1*z2*z3 + b2*(a2 + b2)*x1*z2*z3 + b1*b2*(a2 + b2)*x1*z2*z3 + 2*b1*y1*z2*z3 + b1^2*y1*z2*z3 + b1*(a1 + b1)*y1*z2*z3 + b2*y1*z2*z3 + 3*b1*b2*y1*z2*z3 + b1^2*b2*y1*z2*z3 + b1*(a1 + b1)*b2*y1*z2*z3 + (a2 + b2)*y1*z2*z3 + b1*b2*(a2 + b2)*y1*z2*z3 + b2*b3*y1*z2*z3 + b2^2*b3*y1*z2*z3 + (a3 + b3)*y1*z2*z3 + b2*(a3 + b3)*y1*z2*z3 + b1^2*z1*z2*z3 + b1*(a1 + b1)*z1*z2*z3 + b1*b2*z1*z2*z3 + b1^2*b2*z1*z2*z3 + b1*(a1 + b1)*b2*z1*z2*z3 + b1*b2*(a2 + b2)*z1*z2*z3 + (b1^2*b2*x1*z3*(1 + z3))/2 + (b1*x2*z3*(1 + z3))/2 + (b1^2*x2*z3*(1 + z3))/2 + (b1*b2*x2*z3*(1 + z3))/2 + (b1^2*b2*x2*z3*(1 + z3))/2 + (b1*(a2 + b2)*x2*z3*(1 + z3))/2 + (b1*(a3 + b3)*x2*z3*(1 + z3))/2 + ((a1 + b1)*(a3 + b3)*x2*z3*(1 + z3))/2 + (b1^2*b2*y1*z3*(1 + z3))/2 + (b2*b3*y1*z3*(1 + z3))/2 + b1*y2*z3*(1 + z3) + (b1^2*y2*z3*(1 + z3))/2 + (b1*b2*y2*z3*(1 + z3))/2 + (b1^2*b2*y2*z3*(1 + z3))/2 + (b1*(a2 + b2)*y2*z3*(1 + z3))/2 + (b1*(a3 + b3)*y2*z3*(1 + z3))/2 + ((a1 + b1)*(a3 + b3)*y2*z3*(1 + z3))/2 + (b1^2*b2*z1*z3*(1 + z3))/2 + (b1^2*b2*z2*z3*(1 + z3))/2 + (b1*(a2 + b2)*z2*z3*(1 + z3))/2 + ((a1 + b1)*(a3 + b3)*z2*z3*(1 + z3))/2 + (b1*b2 + (a1 + b1)*b2 + b1*(a1 + b1)*b2 + b1*(a2 + b2) + (a1 + b1)*(a2 + b2) + b1*b2*(a2 + b2))*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 80 ( I4_1)
#####################################################################
Aqin80:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin80:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return a1 + x1 + y1 + z1;
end;
#####################################################################
Bxyzin80:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*b2 + b1*b2 + a1*b1*b2 + a2*b1*b2 + a2*x1 + b2*x1 + a1*x2 + x1*x2 + a2*y1 + b2*y1 + x2*y1 + a1*y2 + x1*y2 + y1*y2 + a2*b1*z1 + b1*b2*z1 + b1*x2*z1 + b1*y2*z1 + a1*z2 + a2*b1*z2 + b1*b2*z2 + x1*z2 + b1*x2*z2 + y1*z2 + b1*y2*z2 + z1*z2 + b1*z1*z2;
end;
#####################################################################
CGAPin80:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return 2*b1*b2*b3 + 3*b1^2*b2*b3 + 4*b1*(a1 + b1 - 2*a1*b1)*b2*b3 + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3 + b1*b2^2*b3 + 2*(a1 + b1 - 2*a1*b1)*b2^2*b3 + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3 + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3 + 2*b1^2*(a2 + b2 - 2*a2*b2)*b3 + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3 + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3 + 4*b1*b2*(a2 + b2 - 2*a2*b2)*b3 + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3 + 3*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3 + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3 + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3 + 3*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3 + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3 + 2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3 + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3 + 2*b1^2*b2*b3^2 + 2*(a1 + b1 - 2*a1*b1)*b2*b3^2 + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2 + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3^2 + 2*b1*b2^2*b3^2 + b1^2*b2^2*b3^2 + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2 + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2 + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3^2 + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3^2 + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2 + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2 + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3^2 + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3^2 + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3^2 + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3) + b1*b2^2*(a3 + b3 - 2*a3*b3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3) + b1^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3) + b1*b2*b3*(a3 + b3 - 2*a3*b3) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3) + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3) + 2*b1*b2^2*b3*(a3 + b3 - 2*a3*b3) + 2*b1^2*b2^2*b3*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3) + b1^2*b2*b3^2*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(a3 + b3 - 2*a3*b3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(a3 + b3 - 2*a3*b3) + b1^2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 5*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 4*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1) + b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + 3*b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1^2*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2^2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + (a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1) + b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1) + (b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1) + (b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + ((a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + ((a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1) + (b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + (b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + ((a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(1 - a1 - b1 + 2*a1*b1 + x1))/2 + b1*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 3*b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2) + 3*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2) + 4*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 4*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2) + b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + x2) + b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2) + (b1^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(1 - a2 - b2 + 2*a2*b2 + x2))/2 + b1*b2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + 4*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + 3*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + 4*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + 3*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 3*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + x3) + b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3) + (b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3) + ((a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + ((a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(1 - a3 - b3 + 2*a3*b3 + x3))/2 + 3*b2*b3*(-a1 - b1 + 2*a1*b1 + y1) + 4*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1) + 4*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 3*b1*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + y1) + b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1) + (b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1) + (b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + ((a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + ((a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1) + (b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + (b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + ((a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(1 - a1 - b1 + 2*a1*b1 + y1))/2 + b1*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 5*b1*b2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 5*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 4*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2) + b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a1 + b1 - 2*a1*b1)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 4*b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 4*b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 3*b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + y2) + (b1*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(1 - a2 - b2 + 2*a2*b2 + y2))/2 + 2*b1*b2*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 4*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 5*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + 6*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 7*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 4*b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 4*b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 3*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + 2*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + y3) + (b1*b2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + ((a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(1 - a3 - b3 + 2*a3*b3 + y3))/2 + 3*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*b3^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1^2*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 3*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + 2*b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a1 - b1 + 2*a1*b1 + z1) + b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1) + (b1*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1^2*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + ((a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1^2*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1) + (b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + ((a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + (b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + ((a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(1 - a1 - b1 + 2*a1*b1 + z1))/2 + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*b2*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + z2) + 4*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2) + b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b1*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + (a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a2 - b2 + 2*a2*b2 + z2) + b1*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + (b1^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + b1*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + ((a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + ((a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2) + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*b3^2*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + (b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(1 - a2 - b2 + 2*a2*b2 + z2))/2 + b3*(a1 + b1 - 2*a1*b1 + x1 + y1 + z1)*(a2 + b2 - 2*a2*b2 + x2 + y2 + z2) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + 3*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3^2*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + x1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + x2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + x3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + y1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + y2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2^2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + y3)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + (a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b2*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a1 - b1 + 2*a1*b1 + z1)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + 2*b1^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + 3*b1^2*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2^2*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b3^2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*b2*b3^2*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(a3 + b3 - 2*a3*b3)*(-a2 - b2 + 2*a2*b2 + z2)*(-a3 - b3 + 2*a3*b3 + z3) + (3*b1*b2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + b1^2*b2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + b1*(a1 + b1 - 2*a1*b1)*b2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + (b1^2*b2^2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + ((a1 + b1 - 2*a1*b1)*b2^2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + b1*b2*(a2 + b2 - 2*a2*b2)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + (3*b1*b2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1^2*b2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + ((a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + b1*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + (b1^2*(a1 + b1 - 2*a1*b1)*b2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + b1*b2^2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + (b1*(a1 + b1 - 2*a1*b1)*b2^2*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + ((a1 + b1 - 2*a1*b1)*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + b1*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3) + (b1^2*b2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*b2^2*(a2 + b2 - 2*a2*b2)*b3*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*b2*b3^2*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1^2*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*(a1 + b1 - 2*a1*b1)*b2*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*b2*(a2 + b2 - 2*a2*b2)*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (b1*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + ((a1 + b1 - 2*a1*b1)*b2*b3*(a3 + b3 - 2*a3*b3)*(-a3 - b3 + 2*a3*b3 + z3)*(1 - a3 - b3 + 2*a3*b3 + z3))/2 + (a1 + b1 - 2*a1*b1 + x1 + y1 + z1)*(a2 + b2 - 2*a2*b2 + x2 + y2 + z2)*(a3 + b3 - 2*a3*b3 + x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 81 ( P-4)
#####################################################################
Aqin81:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyin81:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1;
end;
#####################################################################
Azin81:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return z1;
end;
#####################################################################
Bdeltain81:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + b1*b2 + a1*b1*b2 + a2*b1*b2;
end;
#####################################################################
Bxyin81:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 82 ( I-4)
#####################################################################
Aqin82:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return b1;
end;
#####################################################################
Axyzin82:=function(g1)
local x1,y1,z1,a1,b1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain82:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return a1*a2 + a2*b1 + a1*b2 + a1*b1*b2 + a2*b1*b2;
end;
#####################################################################
B2in82:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return b2*x1 + a1*x2 + a1*b1*x2 + b2*y1 + a1*y2 + b1*y2 + a1*b1*y2 + b2*z1 + b1*z2 + a1*b1*z2;
end;
#####################################################################
Bzxyin82:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];
return x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
C1in82:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return 2*a2*a3*b1*x1 + 2*a1*a3*b2*x1 + 2*a2*a3*b2*x1 + a3*b1^2*b2*x1 + a3*b1*b2^2*x1 + a2*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + b1*b2*b3*x1 + 2*a1*b1*b2*b3*x1 + b2^2*b3*x1 + b1*b2^2*b3*x1 + (a2*a3*x1*(1 + x1))/2 + (a3*b2*x1*(1 + x1))/2 + (a3*b1*b2*x1*(1 + x1))/2 + (a3*b2^2*x1*(1 + x1))/2 + (b2*b3*x1*(1 + x1))/2 + (a1*b2*b3*x1*(1 + x1))/2 + (b1*b2*b3*x1*(1 + x1))/2 + (b1^2*b2*b3*x1*(1 + x1))/2 + a3*b1*x2 + 2*a1*a3*b1*x2 + a3*b1^2*x2 + 2*a1*a3*b2*x2 + 2*a3*b1*b2*x2 + 2*a1*a3*b1*b2*x2 + a3*b1^2*b2*x2 + a1*b3*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + b1*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a3*b1*b3*x2 + a1*a3*b1*b3*x2 + a1*b1^2*b3*x2 + a3*b1^2*b3*x2 + a1*b2*b3*x2 + b1*b2*b3*x2 + b1^2*b2*b3*x2 + a1*b1^2*b2*b3*x2 + a1*b2^2*b3*x2 + b1*b2^2*b3*x2 + a1*b1*b2^2*b3*x2 + a3*x1*x2 + a1*a3*x1*x2 + a2*a3*x1*x2 + a3*b1*x1*x2 + a1*a3*b1*x1*x2 + a3*b1^2*x1*x2 + a1*a3*b1^2*x1*x2 + 2*a3*b2*x1*x2 + a1*a3*b2*x1*x2 + 2*a3*b1*b2*x1*x2 + 2*a1*a3*b1*b2*x1*x2 + a3*b2^2*x1*x2 + a3*b1*b2^2*x1*x2 + a2*b3*x1*x2 + a3*b3*x1*x2 + a1*a3*b3*x1*x2 + b1*b3*x1*x2 + 2*a2*b1*b3*x1*x2 + a1*a2*b1*b3*x1*x2 + 2*a3*b1*b3*x1*x2 + a1*a3*b1*b3*x1*x2 + a3*b1^2*b3*x1*x2 + b2*b3*x1*x2 + a1*b2*b3*x1*x2 + a1*b1*b2*b3*x1*x2 + a2*b1*b2*b3*x1*x2 + b2^2*b3*x1*x2 + b1*b2^2*b3*x1*x2 + a1*b1*b2^2*b3*x1*x2 + (a3*b1*x2*(1 + x2))/2 + (a1*a3*b1*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a3*b1*b2*x2*(1 + x2))/2 + (a1*b3*x2*(1 + x2))/2 + (a1*a2*b3*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + (b1*b3*x2*(1 + x2))/2 + (a3*b1*b3*x2*(1 + x2))/2 + (b1^2*b3*x2*(1 + x2))/2 + (a1*b1^2*b3*x2*(1 + x2))/2 + b1*b2*b3*x2*(1 + x2) + (a1*b1*b2*b3*x2*(1 + x2))/2 + (a1*b2^2*b3*x2*(1 + x2))/2 + a2*b1*x3 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*b2*x3 + a1*a2*b2*x3 + 4*b1*b2*x3 + 2*a1*b1*b2*x3 + 2*a2*b1*b2*x3 + a1*a2*b1*b2*x3 + 2*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*b1^2*b2*x3 + a2*b1^2*b2*x3 + a1*b2^2*x3 + a1*a2*b2^2*x3 + b1*b2^2*x3 + 2*a1*b1*b2^2*x3 + a2*b1*b2^2*x3 + a3*b1*b2^2*x3 + a1*a2*b3*x3 + a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*b2*b3*x3 + a1*a2*b2*b3*x3 + a1*b1*b2*b3*x3 + 2*a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*a3*b1*b2*b3*x3 + b1*b2^2*b3*x3 + a1*b1*b2^2*b3*x3 + a2*b1*b2^2*b3*x3 + a3*b1*b2^2*b3*x3 + a2*x1*x3 + a2*a3*x1*x3 + a2*b1*x1*x3 + a1*a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a2*b1^2*x1*x3 + a2*a3*b1^2*x1*x3 + b2*x1*x3 + a1*b2*x1*x3 + 2*a2*b2*x1*x3 + a1*a2*b2*x1*x3 + a3*b2*x1*x3 + a1*a3*b2*x1*x3 + b1*b2*x1*x3 + 2*a1*b1*b2*x1*x3 + 2*a2*b1*b2*x1*x3 + a3*b1*b2*x1*x3 + b1^2*b2*x1*x3 + b2^2*x1*x3 + a1*b2^2*x1*x3 + a2*b2^2*x1*x3 + a3*b2^2*x1*x3 + b1^2*b2^2*x1*x3 + a1*b2*b3*x1*x3 + a3*b2*b3*x1*x3 + a1*a3*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + a1*b1*b2*b3*x1*x3 + a3*b1*b2*b3*x1*x3 + a2*b1^2*b2*b3*x1*x3 + a1*b2^2*b3*x1*x3 + a3*b2^2*b3*x1*x3 + a3*b1*b2^2*b3*x1*x3 + b1*x2*x3 + a1*b1*x2*x3 + 2*a2*b1*x2*x3 + a1*a3*b1*x2*x3 + a2*a3*b1*x2*x3 + 2*a1*b2*x2*x3 + a1*a3*b2*x2*x3 + b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a3*b1*b2*x2*x3 + a2*a3*b1*b2*x2*x3 + b1^2*b2*x2*x3 + a1*b1^2*b2*x2*x3 + a1*a3*b1^2*b2*x2*x3 + a1*a3*b2^2*x2*x3 + a1*b3*x2*x3 + a1*a2*b3*x2*x3 + a1*b1*b3*x2*x3 + a2*b1*b3*x2*x3 + a3*b1*b3*x2*x3 + a2*a3*b1*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + 2*b1*b2*b3*x2*x3 + a1*b1*b2*b3*x2*x3 + 2*a2*b1*b2*b3*x2*x3 + 2*a1*a2*b1*b2*b3*x2*x3 + a1*a2*b2^2*b3*x2*x3 + b1*b2^2*b3*x2*x3 + a1*b1*b2^2*b3*x2*x3 + a2*b1*b2^2*b3*x2*x3 + a3*b1*b2^2*b3*x2*x3 + a2*a3*x1*x2*x3 + b1*x1*x2*x3 + a1*b1*x1*x2*x3 + a2*b1*x1*x2*x3 + a1*a2*b1*x1*x2*x3 + a3*b1*x1*x2*x3 + a2*b1^2*x1*x2*x3 + a1*a2*b1^2*x1*x2*x3 + b2*x1*x2*x3 + a3*b2*x1*x2*x3 + 2*b1*b2*x1*x2*x3 + a1*b1*b2*x1*x2*x3 + a2*b1*b2*x1*x2*x3 + a1*a2*b1*b2*x1*x2*x3 + a3*b1*b2*x1*x2*x3 + a2*a3*b1*b2*x1*x2*x3 + b1^2*b2*x1*x2*x3 + a1*a3*b2^2*x1*x2*x3 + b1*b2^2*x1*x2*x3 + a3*b1^2*b2^2*x1*x2*x3 + a2*b3*x1*x2*x3 + 2*b1*b3*x1*x2*x3 + a1*b1*b3*x1*x2*x3 + 2*a2*b1*b3*x1*x2*x3 + a1*a2*b1*b3*x1*x2*x3 + a1*b1^2*b3*x1*x2*x3 + b2*b3*x1*x2*x3 + 2*a2*b2*b3*x1*x2*x3 + a1*a2*b2*b3*x1*x2*x3 + a3*b2*b3*x1*x2*x3 + 2*b1*b2*b3*x1*x2*x3 + 2*a1*b1*b2*b3*x1*x2*x3 + a2*b1*b2*b3*x1*x2*x3 + a2*b1^2*b2*b3*x1*x2*x3 + b2^2*b3*x1*x2*x3 + b2*b3^2*x1*x2*x3 + (a2*b1*x3*(1 + x3))/2 + (a1*a2*b1*x3*(1 + x3))/2 + (a2*b1^2*x3*(1 + x3))/2 + (a1*a2*b2*x3*(1 + x3))/2 + b1*b2*x3*(1 + x3) + a1*b1*b2*x3*(1 + x3) + (a2*b1*b2*x3*(1 + x3))/2 + (a3*b1*b2*x3*(1 + x3))/2 + (a1*b2^2*x3*(1 + x3))/2 + (b1*b2^2*x3*(1 + x3))/2 + (b1^2*b2^2*x3*(1 + x3))/2 + (a1*a2*b3*x3*(1 + x3))/2 + (a2*b1*b3*x3*(1 + x3))/2 + (b1*b2*b3*x3*(1 + x3))/2 + (a1*b1*b2*b3*x3*(1 + x3))/2 + (a2*b1*b2*b3*x3*(1 + x3))/2 + (a3*b1*b2*b3*x3*(1 + x3))/2 + 2*a2*a3*b1*y1 + a3*b2*y1 + 2*a1*a3*b2*y1 + 2*a2*a3*b2*y1 + a3*b1^2*b2*y1 + a3*b1*b2^2*y1 + a2*b1*b3*y1 + b2*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + 2*a1*b1*b2*b3*y1 + b2^2*b3*y1 + b1*b2^2*b3*y1 + a2*a3*x1*y1 + a3*b2*x1*y1 + a3*b1*b2*x1*y1 + a3*b2^2*x1*y1 + a2*b3*x1*y1 + b2*b3*x1*y1 + a1*b2*b3*x1*y1 + b1^2*b2*b3*x1*y1 + b2^2*b3*x1*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a3*b1*x2*y1 + a1*a3*b1*x2*y1 + a3*b1^2*x2*y1 + a1*a3*b1^2*x2*y1 + a1*a3*b2*x2*y1 + a3*b1*b2*x2*y1 + 2*a1*a3*b1*b2*x2*y1 + a3*b2^2*x2*y1 + a3*b1*b2^2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + a3*b3*x2*y1 + a1*a3*b3*x2*y1 + 2*b1*b3*x2*y1 + a2*b1*b3*x2*y1 + a1*a2*b1*b3*x2*y1 + a1*a3*b1*b3*x2*y1 + a1*b1^2*b3*x2*y1 + a3*b1^2*b3*x2*y1 + a1*b2*b3*x2*y1 + b1*b2*b3*x2*y1 + a1*b1*b2*b3*x2*y1 + a2*b1*b2*b3*x2*y1 + b1^2*b2*b3*x2*y1 + a1*b1*b2^2*b3*x2*y1 + a3*b1*b2*x1*x2*y1 + b1*b3*x1*x2*y1 + a1*b1*b3*x1*x2*y1 + b1^2*b3*x1*x2*y1 + b1*b2*b3*x1*x2*y1 + b1^2*b2*b3*x1*x2*y1 + a2*a3*x3*y1 + a1*a2*b1*x3*y1 + a2*a3*b1*x3*y1 + a2*b1^2*x3*y1 + 2*b2*x3*y1 + 2*a1*b2*x3*y1 + a2*b2*x3*y1 + a1*a2*b2*x3*y1 + a3*b2*x3*y1 + a1*a3*b2*x3*y1 + 2*b1*b2*x3*y1 + a1*b1*b2*x3*y1 + 2*a2*b1*b2*x3*y1 + a3*b1*b2*x3*y1 + a1*b1^2*b2*x3*y1 + a2*b1^2*b2*x3*y1 + a3*b1^2*b2*x3*y1 + a1*b2^2*x3*y1 + a2*b2^2*x3*y1 + b1^2*b2^2*x3*y1 + a2*b3*x3*y1 + a2*b1*b3*x3*y1 + a2*b1^2*b3*x3*y1 + b2*b3*x3*y1 + 2*a1*b2*b3*x3*y1 + a2*b2*b3*x3*y1 + a1*a3*b2*b3*x3*y1 + a2*a3*b2*b3*x3*y1 + b1*b2*b3*x3*y1 + 3*a1*b1*b2*b3*x3*y1 + 2*a2*b1*b2*b3*x3*y1 + a3*b1*b2*b3*x3*y1 + b1^2*b2*b3*x3*y1 + a2*b2^2*b3*x3*y1 + a3*b2^2*b3*x3*y1 + b1*b2^2*b3*x3*y1 + a3*b1*b2^2*b3*x3*y1 + a2*x1*x3*y1 + a1*b2*x1*x3*y1 + a2*b2*x1*x3*y1 + a3*b1*b2*x1*x3*y1 + b1^2*b2*x1*x3*y1 + a3*b2^2*x1*x3*y1 + a2*b3*x1*x3*y1 + 2*b2*b3*x1*x3*y1 + a1*b2*b3*x1*x3*y1 + a2*b2*b3*x1*x3*y1 + b1^2*b2*b3*x1*x3*y1 + a2*x2*x3*y1 + a2*a3*x2*x3*y1 + 2*a2*b1*x2*x3*y1 + a1*a2*b1*x2*x3*y1 + a3*b1*x2*x3*y1 + a1*a2*b1^2*x2*x3*y1 + a1*b2*x2*x3*y1 + a2*b2*x2*x3*y1 + a3*b2*x2*x3*y1 + b1*b2*x2*x3*y1 + a1*b1*b2*x2*x3*y1 + a1*a2*b1*b2*x2*x3*y1 + a3*b1*b2*x2*x3*y1 + a2*a3*b1*b2*x2*x3*y1 + b1^2*b2*x2*x3*y1 + a2*b1^2*b2*x2*x3*y1 + a3*b2^2*x2*x3*y1 + a1*a3*b2^2*x2*x3*y1 + b1*b2^2*x2*x3*y1 + a3*b1^2*b2^2*x2*x3*y1 + 3*b1*b3*x2*x3*y1 + 2*a1*b1*b3*x2*x3*y1 + a1*a2*b1*b3*x2*x3*y1 + a1*b1^2*b3*x2*x3*y1 + a2*b1^2*b3*x2*x3*y1 + b2*b3*x2*x3*y1 + 2*a1*b2*b3*x2*x3*y1 + a2*b2*b3*x2*x3*y1 + a1*a2*b2*b3*x2*x3*y1 + a3*b2*b3*x2*x3*y1 + 2*b1*b2*b3*x2*x3*y1 + 2*a1*b1*b2*b3*x2*x3*y1 + a2*b1*b2*b3*x2*x3*y1 + a2*b1^2*b2*b3*x2*x3*y1 + b2^2*b3*x2*x3*y1 + b2*b3^2*x2*x3*y1 + (a2*a3*y1*(1 + y1))/2 + (a3*b2*y1*(1 + y1))/2 + (a3*b1*b2*y1*(1 + y1))/2 + (a3*b2^2*y1*(1 + y1))/2 + (b2*b3*y1*(1 + y1))/2 + (a1*b2*b3*y1*(1 + y1))/2 + (b1*b2*b3*y1*(1 + y1))/2 + (b1^2*b2*b3*y1*(1 + y1))/2 + 2*a1*a3*b1*y2 + a3*b1^2*y2 + 2*a1*a3*b2*y2 + 3*a3*b1*b2*y2 + 2*a1*a3*b1*b2*y2 + a3*b1^2*b2*y2 + a1*b3*y2 + a1*a2*b3*y2 + a1*a3*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a3*b1*b3*y2 + a1*a3*b1*b3*y2 + b1^2*b3*y2 + a1*b1^2*b3*y2 + a3*b1^2*b3*y2 + a1*b2*b3*y2 + b1*b2*b3*y2 + a1*b1^2*b2*b3*y2 + a1*b2^2*b3*y2 + b1*b2^2*b3*y2 + a1*b1*b2^2*b3*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b1*x1*y2 + a3*b1^2*x1*y2 + a1*a3*b1^2*x1*y2 + a3*b2*x1*y2 + a1*a3*b2*x1*y2 + 2*a3*b1*b2*x1*y2 + 2*a1*a3*b1*b2*x1*y2 + a3*b2^2*x1*y2 + a3*b1*b2^2*x1*y2 + b3*x1*y2 + a2*b3*x1*y2 + a1*a3*b3*x1*y2 + 2*b1*b3*x1*y2 + a1*b1*b3*x1*y2 + a2*b1*b3*x1*y2 + a1*a2*b1*b3*x1*y2 + a3*b1*b3*x1*y2 + a1*a3*b1*b3*x1*y2 + a3*b1^2*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + b1*b2*b3*x1*y2 + a1*b1*b2*b3*x1*y2 + a2*b1*b2*b3*x1*y2 + b1^2*b2*b3*x1*y2 + b2^2*b3*x1*y2 + a1*b1*b2^2*b3*x1*y2 + a1*a3*b1*x2*y2 + a1*a3*b2*x2*y2 + a1*a2*b3*x2*y2 + a1*a3*b3*x2*y2 + a1*b1*b2*b3*x2*y2 + a1*b2^2*b3*x2*y2 + a3*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + b1*b3*x1*x2*y2 + b2*b3*x1*x2*y2 + b1*b2*b3*x1*x2*y2 + b1^2*b2*b3*x1*x2*y2 + b1*x3*y2 + 2*a1*b1*x3*y2 + a3*b1*x3*y2 + a1*a3*b1*x3*y2 + 2*a2*a3*b1*x3*y2 + b1^2*x3*y2 + a1*b2*x3*y2 + a1*a3*b2*x3*y2 + 2*b1*b2*x3*y2 + 2*a1*b1*b2*x3*y2 + a2*b1*b2*x3*y2 + a1*a3*b1*b2*x3*y2 + a2*a3*b1*b2*x3*y2 + b1^2*b2*x3*y2 + a1*b1^2*b2*x3*y2 + a3*b1^2*b2*x3*y2 + a1*a3*b1^2*b2*x3*y2 + a1*a3*b2^2*x3*y2 + a1*b3*x3*y2 + a1*a2*b3*x3*y2 + 2*b1*b3*x3*y2 + a1*b1*b3*x3*y2 + a2*a3*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + a1*a2*b2*b3*x3*y2 + a1*b1*b2*b3*x3*y2 + 2*a2*b1*b2*b3*x3*y2 + 2*a1*a2*b1*b2*b3*x3*y2 + a3*b1*b2*b3*x3*y2 + a1*b2^2*b3*x3*y2 + a1*a2*b2^2*b3*x3*y2 + b1*b2^2*b3*x3*y2 + a1*b1*b2^2*b3*x3*y2 + a2*b1*b2^2*b3*x3*y2 + a3*b1*b2^2*b3*x3*y2 + x1*x3*y2 + a2*x1*x3*y2 + a3*x1*x3*y2 + a2*a3*x1*x3*y2 + b1*x1*x3*y2 + a2*b1*x1*x3*y2 + a1*a2*b1*x1*x3*y2 + a3*b1*x1*x3*y2 + a1*b1^2*x1*x3*y2 + a1*a2*b1^2*x1*x3*y2 + a3*b2*x1*x3*y2 + a1*a2*b1*b2*x1*x3*y2 + 2*a3*b1*b2*x1*x3*y2 + a2*a3*b1*b2*x1*x3*y2 + b1^2*b2*x1*x3*y2 + a3*b2^2*x1*x3*y2 + a1*a3*b2^2*x1*x3*y2 + b1*b2^2*x1*x3*y2 + a3*b1^2*b2^2*x1*x3*y2 + b3*x1*x3*y2 + a2*b3*x1*x3*y2 + 2*b1*b3*x1*x3*y2 + 2*a1*b1*b3*x1*x3*y2 + a2*b1*b3*x1*x3*y2 + a1*a2*b1*b3*x1*x3*y2 + b1^2*b3*x1*x3*y2 + a1*b1^2*b3*x1*x3*y2 + a1*b2*b3*x1*x3*y2 + a2*b2*b3*x1*x3*y2 + a1*a2*b2*b3*x1*x3*y2 + a3*b2*b3*x1*x3*y2 + b1*b2*b3*x1*x3*y2 + 2*a1*b1*b2*b3*x1*x3*y2 + a2*b1*b2*b3*x1*x3*y2 + b1^2*b2*b3*x1*x3*y2 + a2*b1^2*b2*b3*x1*x3*y2 + b2^2*b3*x1*x3*y2 + b2*b3^2*x1*x3*y2 + b1*x2*x3*y2 + a1*b1*x2*x3*y2 + a2*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + b1*b2*x2*x3*y2 + 2*a2*b1*b2*x2*x3*y2 + b1*b3*x2*x3*y2 + a1*b1*b3*x2*x3*y2 + a2*b1*b3*x2*x3*y2 + 2*a1*b2*b3*x2*x3*y2 + a3*y1*y2 + a1*a3*y1*y2 + a2*a3*y1*y2 + a3*b1*y1*y2 + a1*a3*b1*y1*y2 + a1*a3*b1^2*y1*y2 + a3*b2*y1*y2 + a1*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + 2*a1*a3*b1*b2*y1*y2 + a3*b2^2*y1*y2 + a3*b1*b2^2*y1*y2 + b3*y1*y2 + a1*b3*y1*y2 + a1*a3*b3*y1*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + 2*a2*b1*b3*y1*y2 + a1*a2*b1*b3*y1*y2 + a3*b1*b3*y1*y2 + a1*a3*b1*b3*y1*y2 + a1*b1^2*b3*y1*y2 + a3*b1^2*b3*y1*y2 + a1*b2*b3*y1*y2 + a1*b1*b2*b3*y1*y2 + a2*b1*b2*b3*y1*y2 + b1^2*b2*b3*y1*y2 + b1*b2^2*b3*y1*y2 + a1*b1*b2^2*b3*y1*y2 + a3*b1*b2*x1*y1*y2 + b3*x1*y1*y2 + a1*b1*b3*x1*y1*y2 + b1^2*b3*x1*y1*y2 + b1*b2*b3*x1*y1*y2 + b1^2*b2*b3*x1*y1*y2 + a3*x2*y1*y2 + a3*b1*b2*x2*y1*y2 + 2*b1*b3*x2*y1*y2 + b1^2*b3*x2*y1*y2 + b2*b3*x2*y1*y2 + b1*b2*b3*x2*y1*y2 + b1^2*b2*b3*x2*y1*y2 + a3*x3*y1*y2 + a2*a3*x3*y1*y2 + 2*b1*x3*y1*y2 + a1*b1*x3*y1*y2 + 2*a2*b1*x3*y1*y2 + a1*a2*b1*x3*y1*y2 + a3*b1*x3*y1*y2 + b1^2*x3*y1*y2 + a1*b1^2*x3*y1*y2 + a2*b1^2*x3*y1*y2 + a1*a2*b1^2*x3*y1*y2 + b2*x3*y1*y2 + a1*b2*x3*y1*y2 + a2*b2*x3*y1*y2 + a3*b2*x3*y1*y2 + 2*b1*b2*x3*y1*y2 + a2*b1*b2*x3*y1*y2 + a1*a2*b1*b2*x3*y1*y2 + 2*a3*b1*b2*x3*y1*y2 + a2*a3*b1*b2*x3*y1*y2 + a2*b1^2*b2*x3*y1*y2 + a1*a3*b2^2*x3*y1*y2 + b1*b2^2*x3*y1*y2 + a3*b1^2*b2^2*x3*y1*y2 + 2*b1*b3*x3*y1*y2 + a1*b1*b3*x3*y1*y2 + a2*b1*b3*x3*y1*y2 + a1*a2*b1*b3*x3*y1*y2 + a1*b1^2*b3*x3*y1*y2 + a2*b1^2*b3*x3*y1*y2 + b2*b3*x3*y1*y2 + a1*b2*b3*x3*y1*y2 + 2*a2*b2*b3*x3*y1*y2 + a1*a2*b2*b3*x3*y1*y2 + a3*b2*b3*x3*y1*y2 + b1*b2*b3*x3*y1*y2 + 2*a1*b1*b2*b3*x3*y1*y2 + a2*b1*b2*b3*x3*y1*y2 + b1^2*b2*b3*x3*y1*y2 + a2*b1^2*b2*b3*x3*y1*y2 + b2^2*b3*x3*y1*y2 + b2*b3^2*x3*y1*y2 + (a1*a3*b1*y2*(1 + y2))/2 + (a1*a3*b2*y2*(1 + y2))/2 + (a3*b1*b2*y2*(1 + y2))/2 + (a1*b3*y2*(1 + y2))/2 + (a1*a2*b3*y2*(1 + y2))/2 + (a1*a3*b3*y2*(1 + y2))/2 + (a3*b1*b3*y2*(1 + y2))/2 + (a1*b1^2*b3*y2*(1 + y2))/2 + (b1*b2*b3*y2*(1 + y2))/2 + (a1*b1*b2*b3*y2*(1 + y2))/2 + (a1*b2^2*b3*y2*(1 + y2))/2 + a2*b1*y3 + a1*a2*b1*y3 + a2*a3*b1*y3 + a1*b2*y3 + a1*a2*b2*y3 + 2*b1*b2*y3 + a1*b1*b2*y3 + 3*a2*b1*b2*y3 + a1*a2*b1*b2*y3 + a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*b1^2*b2*y3 + a2*b1^2*b2*y3 + a1*a2*b2^2*y3 + b1*b2^2*y3 + 2*a1*b1*b2^2*y3 + a2*b1*b2^2*y3 + a3*b1*b2^2*y3 + a1*a2*b3*y3 + a2*a3*b1*b3*y3 + a1*a2*b2*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a2*a3*b1*b2*b3*y3 + b1*b2^2*b3*y3 + a1*b1*b2^2*b3*y3 + a2*b1*b2^2*b3*y3 + a3*b1*b2^2*b3*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a2*a3*b1^2*x1*y3 + 2*a1*b2*x1*y3 + a2*b2*x1*y3 + a1*a2*b2*x1*y3 + a1*a3*b2*x1*y3 + b1*b2*x1*y3 + 2*a1*b1*b2*x1*y3 + 2*a2*b1*b2*x1*y3 + a3*b1*b2*x1*y3 + b2^2*x1*y3 + a1*b2^2*x1*y3 + a2*b2^2*x1*y3 + b1^2*b2^2*x1*y3 + a2*b2*b3*x1*y3 + a1*a3*b2*b3*x1*y3 + a2*a3*b2*b3*x1*y3 + b1*b2*b3*x1*y3 + a1*b1*b2*b3*x1*y3 + a3*b1*b2*b3*x1*y3 + b1^2*b2*b3*x1*y3 + a2*b1^2*b2*b3*x1*y3 + b2^2*b3*x1*y3 + a1*b2^2*b3*x1*y3 + a3*b2^2*b3*x1*y3 + b1*b2^2*b3*x1*y3 + a3*b1*b2^2*b3*x1*y3 + a1*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a1*a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b1^2*x2*y3 + a1*a3*b1^2*x2*y3 + a1*b2*x2*y3 + a1*a3*b2*x2*y3 + b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a1*a3*b1*b2*x2*y3 + a2*a3*b1*b2*x2*y3 + b1^2*b2*x2*y3 + a1*a3*b1^2*b2*x2*y3 + a1*b3*x2*y3 + a1*a2*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*a3*b1*b3*x2*y3 + a1*b1^2*b3*x2*y3 + a1*a2*b2*b3*x2*y3 + a1*b1*b2*b3*x2*y3 + 2*a2*b1*b2*b3*x2*y3 + 2*a1*a2*b1*b2*b3*x2*y3 + a1*a2*b2^2*b3*x2*y3 + b1*b2^2*b3*x2*y3 + a1*b1*b2^2*b3*x2*y3 + a2*b1*b2^2*b3*x2*y3 + a3*b1*b2^2*b3*x2*y3 + x1*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a3*x1*x2*y3 + a2*a3*x1*x2*y3 + b1*x1*x2*y3 + a2*b1*x1*x2*y3 + a1*a2*b1*x1*x2*y3 + a3*b1*x1*x2*y3 + a1*b1^2*x1*x2*y3 + a2*b1^2*x1*x2*y3 + a1*a2*b1^2*x1*x2*y3 + a3*b2*x1*x2*y3 + 2*a2*b1*b2*x1*x2*y3 + a1*a2*b1*b2*x1*x2*y3 + 2*a3*b1*b2*x1*x2*y3 + a2*a3*b1*b2*x1*x2*y3 + b1^2*b2*x1*x2*y3 + a1*b2^2*x1*x2*y3 + a1*a3*b2^2*x1*x2*y3 + b1*b2^2*x1*x2*y3 + b1^2*b2^2*x1*x2*y3 + a3*b1^2*b2^2*x1*x2*y3 + b3*x1*x2*y3 + a1*b3*x1*x2*y3 + a2*b3*x1*x2*y3 + 3*b1*b3*x1*x2*y3 + 2*a1*b1*b3*x1*x2*y3 + 2*a2*b1*b3*x1*x2*y3 + a1*a2*b1*b3*x1*x2*y3 + b1^2*b3*x1*x2*y3 + a1*b1^2*b3*x1*x2*y3 + 2*b2*b3*x1*x2*y3 + a1*b2*b3*x1*x2*y3 + 2*a2*b2*b3*x1*x2*y3 + a1*a2*b2*b3*x1*x2*y3 + a3*b2*b3*x1*x2*y3 + 2*b1*b2*b3*x1*x2*y3 + 2*a1*b1*b2*b3*x1*x2*y3 + a2*b1*b2*b3*x1*x2*y3 + b1^2*b2*b3*x1*x2*y3 + a2*b1^2*b2*b3*x1*x2*y3 + b2^2*b3*x1*x2*y3 + b2*b3^2*x1*x2*y3 + a1*a2*b1*x3*y3 + a2*a3*b1*x3*y3 + a2*b1^2*x3*y3 + a1*a2*b2*x3*y3 + a1*b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a3*b1^2*b2*x3*y3 + a1*b2^2*x3*y3 + b1*b2^2*x3*y3 + b1^2*b2^2*x3*y3 + a1*a2*b3*x3*y3 + a1*b1*b2*b3*x3*y3 + a2*b1*b2*b3*x3*y3 + a1*b2^2*b3*x3*y3 + b1*b2^2*b3*x3*y3 + a2*x1*x3*y3 + a2*b1*x1*x3*y3 + b2*x1*x3*y3 + a1*b2*x1*x3*y3 + a2*b2*x1*x3*y3 + 2*b1*b2*x1*x3*y3 + a1*b1*b2*x1*x3*y3 + a2*b1*b2*x1*x3*y3 + a3*b1*b2*x1*x3*y3 + a1*b2^2*x1*x3*y3 + a2*b2^2*x1*x3*y3 + a3*b2^2*x1*x3*y3 + b1*b2^2*x1*x3*y3 + b1^2*b2^2*x1*x3*y3 + b2*b3*x1*x3*y3 + 2*b1*b2*b3*x1*x3*y3 + b1^2*b2*b3*x1*x3*y3 + b2^2*b3*x1*x3*y3 + b1*b2^2*b3*x1*x3*y3 + a1*x2*x3*y3 + 2*a1*b1*x2*x3*y3 + a1*b1^2*x2*x3*y3 + 2*a1*b2*x2*x3*y3 + b1*b2*x2*x3*y3 + 2*a1*b1*b2*x2*x3*y3 + b1*b2^2*x2*x3*y3 + a1*b3*x2*x3*y3 + b1*b3*x2*x3*y3 + a1*b1*b3*x2*x3*y3 + a1*b1^2*b3*x2*x3*y3 + 2*a1*b1*b2*b3*x2*x3*y3 + a1*b2^2*b3*x2*x3*y3 + b1*b2^2*b3*x2*x3*y3 + a2*y1*y3 + a2*a3*y1*y3 + 2*a2*b1*y1*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a2*b1^2*y1*y3 + b2*y1*y3 + a1*b2*y1*y3 + 2*a2*b2*y1*y3 + a1*a2*b2*y1*y3 + 2*a3*b2*y1*y3 + a1*a3*b2*y1*y3 + 2*b1*b2*y1*y3 + a1*b1*b2*y1*y3 + 2*a2*b1*b2*y1*y3 + a3*b1*b2*y1*y3 + b1^2*b2*y1*y3 + a1*b1^2*b2*y1*y3 + a2*b1^2*b2*y1*y3 + a3*b1^2*b2*y1*y3 + a1*b2^2*y1*y3 + a2*b2^2*y1*y3 + b1^2*b2^2*y1*y3 + a2*b3*y1*y3 + a2*b1*b3*y1*y3 + a2*b1^2*b3*y1*y3 + a1*b2*b3*y1*y3 + 2*a2*b2*b3*y1*y3 + a3*b2*b3*y1*y3 + a1*a3*b2*b3*y1*y3 + a2*a3*b2*b3*y1*y3 + 3*a1*b1*b2*b3*y1*y3 + 2*a2*b1*b2*b3*y1*y3 + a3*b1*b2*b3*y1*y3 + b1^2*b2*b3*y1*y3 + b2^2*b3*y1*y3 + a2*b2^2*b3*y1*y3 + a3*b2^2*b3*y1*y3 + a3*b1*b2^2*b3*y1*y3 + a2*x1*y1*y3 + b2*x1*y1*y3 + a1*b2*x1*y1*y3 + a2*b2*x1*y1*y3 + b1*b2*x1*y1*y3 + a3*b1*b2*x1*y1*y3 + b1^2*b2*x1*y1*y3 + b2^2*x1*y1*y3 + a3*b2^2*x1*y1*y3 + a2*b3*x1*y1*y3 + b2*b3*x1*y1*y3 + a1*b2*b3*x1*y1*y3 + a2*b2*b3*x1*y1*y3 + b1^2*b2*b3*x1*y1*y3 + x2*y1*y3 + a1*x2*y1*y3 + a3*x2*y1*y3 + a2*a3*x2*y1*y3 + b1*x2*y1*y3 + a1*b1*x2*y1*y3 + 2*a2*b1*x2*y1*y3 + a1*a2*b1*x2*y1*y3 + a3*b1*x2*y1*y3 + b1^2*x2*y1*y3 + a1*b1^2*x2*y1*y3 + a1*a2*b1^2*x2*y1*y3 + a1*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + 2*b1*b2*x2*y1*y3 + a2*b1*b2*x2*y1*y3 + a1*a2*b1*b2*x2*y1*y3 + 2*a3*b1*b2*x2*y1*y3 + a2*a3*b1*b2*x2*y1*y3 + a2*b1^2*b2*x2*y1*y3 + b2^2*x2*y1*y3 + a1*b2^2*x2*y1*y3 + a3*b2^2*x2*y1*y3 + a1*a3*b2^2*x2*y1*y3 + b1*b2^2*x2*y1*y3 + b1^2*b2^2*x2*y1*y3 + a3*b1^2*b2^2*x2*y1*y3 + b3*x2*y1*y3 + a1*b3*x2*y1*y3 + 3*b1*b3*x2*y1*y3 + a1*b1*b3*x2*y1*y3 + a1*a2*b1*b3*x2*y1*y3 + a1*b1^2*b3*x2*y1*y3 + a2*b1^2*b3*x2*y1*y3 + b2*b3*x2*y1*y3 + a1*b2*b3*x2*y1*y3 + a2*b2*b3*x2*y1*y3 + a1*a2*b2*b3*x2*y1*y3 + a3*b2*b3*x2*y1*y3 + 2*b1*b2*b3*x2*y1*y3 + 2*a1*b1*b2*b3*x2*y1*y3 + a2*b1*b2*b3*x2*y1*y3 + b1^2*b2*b3*x2*y1*y3 + a2*b1^2*b2*b3*x2*y1*y3 + b2^2*b3*x2*y1*y3 + b2*b3^2*x2*y1*y3 + a2*x3*y1*y3 + a2*b1*x3*y1*y3 + b2*x3*y1*y3 + a1*b2*x3*y1*y3 + a2*b2*x3*y1*y3 + 3*b1*b2*x3*y1*y3 + a1*b1*b2*x3*y1*y3 + a2*b1*b2*x3*y1*y3 + a3*b1*b2*x3*y1*y3 + b1^2*b2*x3*y1*y3 + b2^2*x3*y1*y3 + a1*b2^2*x3*y1*y3 + a2*b2^2*x3*y1*y3 + a3*b2^2*x3*y1*y3 + b1*b2^2*x3*y1*y3 + b1^2*b2^2*x3*y1*y3 + b2*b3*x3*y1*y3 + b1^2*b2*b3*x3*y1*y3 + b1*b2^2*b3*x3*y1*y3 + a1*y2*y3 + 2*a2*b1*y2*y3 + a1*a3*b1*y2*y3 + 2*a2*a3*b1*y2*y3 + a1*b1^2*y2*y3 + a3*b1^2*y2*y3 + a1*a3*b1^2*y2*y3 + a1*a3*b2*y2*y3 + b1*b2*y2*y3 + a1*b1*b2*y2*y3 + 2*a2*b1*b2*y2*y3 + 2*a3*b1*b2*y2*y3 + a1*a3*b1*b2*y2*y3 + a2*a3*b1*b2*y2*y3 + a3*b1^2*b2*y2*y3 + a1*a3*b1^2*b2*y2*y3 + a1*b3*y2*y3 + a1*a2*b3*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + a3*b1*b3*y2*y3 + a2*a3*b1*b3*y2*y3 + b1^2*b3*y2*y3 + a1*b1^2*b3*y2*y3 + a1*b2*b3*y2*y3 + a1*a2*b2*b3*y2*y3 + 3*b1*b2*b3*y2*y3 + a1*b1*b2*b3*y2*y3 + 2*a2*b1*b2*b3*y2*y3 + 2*a1*a2*b1*b2*b3*y2*y3 + a3*b1*b2*b3*y2*y3 + a1*b2^2*b3*y2*y3 + a1*a2*b2^2*b3*y2*y3 + b1*b2^2*b3*y2*y3 + a1*b1*b2^2*b3*y2*y3 + a2*b1*b2^2*b3*y2*y3 + a3*b1*b2^2*b3*y2*y3 + x1*y2*y3 + a1*x1*y2*y3 + a2*a3*x1*y2*y3 + b1*x1*y2*y3 + a1*b1*x1*y2*y3 + a2*b1*x1*y2*y3 + a1*a2*b1*x1*y2*y3 + a3*b1*x1*y2*y3 + b1^2*x1*y2*y3 + a1*a2*b1^2*x1*y2*y3 + b2*x1*y2*y3 + a3*b2*x1*y2*y3 + 2*b1*b2*x1*y2*y3 + a1*b1*b2*x1*y2*y3 + a2*b1*b2*x1*y2*y3 + a1*a2*b1*b2*x1*y2*y3 + a3*b1*b2*x1*y2*y3 + a2*a3*b1*b2*x1*y2*y3 + b1^2*b2*x1*y2*y3 + b2^2*x1*y2*y3 + a1*b2^2*x1*y2*y3 + a3*b2^2*x1*y2*y3 + a1*a3*b2^2*x1*y2*y3 + b1*b2^2*x1*y2*y3 + b1^2*b2^2*x1*y2*y3 + a3*b1^2*b2^2*x1*y2*y3 + b3*x1*y2*y3 + a1*b3*x1*y2*y3 + a2*b3*x1*y2*y3 + 2*b1*b3*x1*y2*y3 + a1*b1*b3*x1*y2*y3 + a2*b1*b3*x1*y2*y3 + a1*a2*b1*b3*x1*y2*y3 + a1*b1^2*b3*x1*y2*y3 + a2*b2*b3*x1*y2*y3 + a1*a2*b2*b3*x1*y2*y3 + a3*b2*b3*x1*y2*y3 + b1*b2*b3*x1*y2*y3 + 2*a1*b1*b2*b3*x1*y2*y3 + a2*b1*b2*b3*x1*y2*y3 + a2*b1^2*b2*b3*x1*y2*y3 + b2^2*b3*x1*y2*y3 + b2*b3^2*x1*y2*y3 + a1*b1*x2*y2*y3 + a2*b1*x2*y2*y3 + a1*b2*x2*y2*y3 + b1*b2*x2*y2*y3 + 2*a2*b1*b2*x2*y2*y3 + b1*b3*x2*y2*y3 + a1*b1*b3*x2*y2*y3 + a2*b1*b3*x2*y2*y3 + 2*a1*b2*b3*x2*y2*y3 + a1*x3*y2*y3 + 2*b1*x3*y2*y3 + 2*a1*b1*x3*y2*y3 + b1^2*x3*y2*y3 + a1*b1^2*x3*y2*y3 + 2*a1*b2*x3*y2*y3 + b1*b2*x3*y2*y3 + 2*a1*b1*b2*x3*y2*y3 + b1*b2^2*x3*y2*y3 + a1*b3*x3*y2*y3 + 2*b1*b3*x3*y2*y3 + a1*b1*b3*x3*y2*y3 + b1^2*b3*x3*y2*y3 + a1*b1^2*b3*x3*y2*y3 + 2*b1*b2*b3*x3*y2*y3 + 2*a1*b1*b2*b3*x3*y2*y3 + a1*b2^2*b3*x3*y2*y3 + b1*b2^2*b3*x3*y2*y3 + a1*y1*y2*y3 + a2*y1*y2*y3 + a2*a3*y1*y2*y3 + b1*y1*y2*y3 + 2*a2*b1*y1*y2*y3 + a1*a2*b1*y1*y2*y3 + a3*b1*y1*y2*y3 + b1^2*y1*y2*y3 + a2*b1^2*y1*y2*y3 + a1*a2*b1^2*y1*y2*y3 + b2*y1*y2*y3 + a1*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + a3*b2*y1*y2*y3 + b1*b2*y1*y2*y3 + a1*b1*b2*y1*y2*y3 + 2*a2*b1*b2*y1*y2*y3 + a1*a2*b1*b2*y1*y2*y3 + a3*b1*b2*y1*y2*y3 + a2*a3*b1*b2*y1*y2*y3 + b1^2*b2*y1*y2*y3 + a2*b1^2*b2*y1*y2*y3 + a1*b2^2*y1*y2*y3 + a1*a3*b2^2*y1*y2*y3 + b1*b2^2*y1*y2*y3 + b1^2*b2^2*y1*y2*y3 + a3*b1^2*b2^2*y1*y2*y3 + a1*b3*y1*y2*y3 + b1*b3*y1*y2*y3 + 2*a1*b1*b3*y1*y2*y3 + a2*b1*b3*y1*y2*y3 + a1*a2*b1*b3*y1*y2*y3 + a1*b1^2*b3*y1*y2*y3 + a2*b1^2*b3*y1*y2*y3 + 2*a1*b2*b3*y1*y2*y3 + 2*a2*b2*b3*y1*y2*y3 + a1*a2*b2*b3*y1*y2*y3 + a3*b2*b3*y1*y2*y3 + b1*b2*b3*y1*y2*y3 + 2*a1*b1*b2*b3*y1*y2*y3 + a2*b1*b2*b3*y1*y2*y3 + a2*b1^2*b2*b3*y1*y2*y3 + b2^2*b3*y1*y2*y3 + b2*b3^2*y1*y2*y3 + a2*b1*y3*(1 + y3) + (a1*a2*b1*y3*(1 + y3))/2 + (a2*b1^2*y3*(1 + y3))/2 + (a1*a2*b2*y3*(1 + y3))/2 + (b1*b2*y3*(1 + y3))/2 + a1*b1*b2*y3*(1 + y3) + (a2*b1*b2*y3*(1 + y3))/2 + (a3*b1*b2*y3*(1 + y3))/2 + (b1^2*b2*y3*(1 + y3))/2 + (a1*b2^2*y3*(1 + y3))/2 + (b1*b2^2*y3*(1 + y3))/2 + (b1^2*b2^2*y3*(1 + y3))/2 + (a1*a2*b3*y3*(1 + y3))/2 + (a2*b1*b3*y3*(1 + y3))/2 + b1*b2*b3*y3*(1 + y3) + (a1*b1*b2*b3*y3*(1 + y3))/2 + (a2*b1*b2*b3*y3*(1 + y3))/2 + (a3*b1*b2*b3*y3*(1 + y3))/2 + 2*a2*a3*b1*z1 + 2*a1*a3*b2*z1 + 2*a2*a3*b2*z1 + 2*a3*b1*b2*z1 + a3*b1^2*b2*z1 + a3*b2^2*z1 + a3*b1*b2^2*z1 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + b1*b2*b3*z1 + 2*a1*b1*b2*b3*z1 + b1^2*b2*b3*z1 + b2^2*b3*z1 + b1*b2^2*b3*z1 + a2*a3*x1*z1 + a3*b2*x1*z1 + a3*b1*b2*x1*z1 + a2*b1*b3*x1*z1 + a2*b2*b3*x1*z1 + 2*b1*b2*b3*x1*z1 + b2^2*b3*x1*z1 + b1*b2^2*b3*x1*z1 + a1*a3*x2*z1 + a2*a3*x2*z1 + a3*b1*x2*z1 + a1*a3*b1*x2*z1 + a3*b1^2*x2*z1 + a1*a3*b1^2*x2*z1 + a3*b2*x2*z1 + a1*a3*b2*x2*z1 + a3*b1*b2*x2*z1 + 2*a1*a3*b1*b2*x2*z1 + a3*b1*b2^2*x2*z1 + a1*b1*b3*x2*z1 + 2*a2*b1*b3*x2*z1 + a1*a2*b1*b3*x2*z1 + a1*a3*b1*b3*x2*z1 + a3*b1^2*b3*x2*z1 + a2*b2*b3*x2*z1 + a1*b1*b2*b3*x2*z1 + a2*b1*b2*b3*x2*z1 + b2^2*b3*x2*z1 + b1*b2^2*b3*x2*z1 + a1*b1*b2^2*b3*x2*z1 + a3*x1*x2*z1 + a1*a3*b2*x1*x2*z1 + b3*x1*x2*z1 + a1*b3*x1*x2*z1 + 2*b1*b3*x1*x2*z1 + b1^2*b3*x1*x2*z1 + b2*b3*x1*x2*z1 + a1*b2*b3*x1*x2*z1 + a1*b1*b2*b3*x1*x2*z1 + a1*a2*x3*z1 + a2*a3*x3*z1 + 2*a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*b1^2*x3*z1 + a2*a3*b1^2*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a2*b2*x3*z1 + a1*a3*b2*x3*z1 + 2*b1*b2*x3*z1 + 2*a1*b1*b2*x3*z1 + 2*a2*b1*b2*x3*z1 + a3*b1*b2*x3*z1 + b1^2*b2*x3*z1 + b2^2*x3*z1 + a1*b2^2*x3*z1 + a2*b2^2*x3*z1 + a3*b2^2*x3*z1 + b1*b2^2*x3*z1 + b1^2*b2^2*x3*z1 + a1*b2*b3*x3*z1 + a1*a3*b2*b3*x3*z1 + a2*a3*b2*b3*x3*z1 + a1*b1*b2*b3*x3*z1 + a2*b1*b2*b3*x3*z1 + a3*b1*b2*b3*x3*z1 + a2*b1^2*b2*b3*x3*z1 + a1*b2^2*b3*x3*z1 + a3*b2^2*b3*x3*z1 + a3*b1*b2^2*b3*x3*z1 + a2*b1*x1*x3*z1 + b2*x1*x3*z1 + a1*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a1*a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + b1*b2*x1*x3*z1 + a1*b1*b2*x1*x3*z1 + a2*b1*b2*x1*x3*z1 + b1^2*b2*x1*x3*z1 + b2^2*x1*x3*z1 + a3*b1*b2^2*x1*x3*z1 + a2*b3*x1*x3*z1 + a2*b1*b3*x1*x3*z1 + b2*b3*x1*x3*z1 + a1*b2*b3*x1*x3*z1 + a2*b2*b3*x1*x3*z1 + b1*b2*b3*x1*x3*z1 + a1*b1*b2*b3*x1*x3*z1 + a2*b1*b2*b3*x1*x3*z1 + a2*x2*x3*z1 + a1*a2*x2*x3*z1 + a3*x2*x3*z1 + a2*a3*x2*x3*z1 + 2*a2*b1*x2*x3*z1 + a1*a2*b1*x2*x3*z1 + a3*b1*x2*x3*z1 + a2*b1^2*x2*x3*z1 + a1*a2*b1^2*x2*x3*z1 + a1*b2*x2*x3*z1 + a1*a2*b2*x2*x3*z1 + a2*a3*b2*x2*x3*z1 + b1*b2*x2*x3*z1 + a2*b1*b2*x2*x3*z1 + a1*a2*b1*b2*x2*x3*z1 + a3*b1*b2*x2*x3*z1 + a2*a3*b1*b2*x2*x3*z1 + b1^2*b2*x2*x3*z1 + a1*b1^2*b2*x2*x3*z1 + b2^2*x2*x3*z1 + a1*a3*b2^2*x2*x3*z1 + b1*b2^2*x2*x3*z1 + a3*b1*b2^2*x2*x3*z1 + a3*b1^2*b2^2*x2*x3*z1 + b3*x2*x3*z1 + a1*b3*x2*x3*z1 + 2*b1*b3*x2*x3*z1 + 2*a1*b1*b3*x2*x3*z1 + 2*a2*b1*b3*x2*x3*z1 + a1*a2*b1*b3*x2*x3*z1 + b1^2*b3*x2*x3*z1 + a1*b1^2*b3*x2*x3*z1 + 3*b2*b3*x2*x3*z1 + a1*b2*b3*x2*x3*z1 + a2*b2*b3*x2*x3*z1 + a1*a2*b2*b3*x2*x3*z1 + a3*b2*b3*x2*x3*z1 + 3*b1*b2*b3*x2*x3*z1 + 2*a1*b1*b2*b3*x2*x3*z1 + 2*a2*b1*b2*b3*x2*x3*z1 + a2*b1^2*b2*b3*x2*x3*z1 + b2^2*b3*x2*x3*z1 + b2*b3^2*x2*x3*z1 + a2*a3*y1*z1 + 2*a3*b2*y1*z1 + a3*b1*b2*y1*z1 + a2*b1*b3*y1*z1 + b2*b3*y1*z1 + a2*b2*b3*y1*z1 + b1*b2*b3*y1*z1 + b2^2*b3*y1*z1 + b1*b2^2*b3*y1*z1 + a3*b2*x1*y1*z1 + b2*b3*x1*y1*z1 + b1*b2*b3*x1*y1*z1 + a3*x2*y1*z1 + a3*b2*x2*y1*z1 + a1*a3*b2*x2*y1*z1 + a3*b1*b2*x2*y1*z1 + b3*x2*y1*z1 + a1*b3*x2*y1*z1 + 2*b1*b3*x2*y1*z1 + a1*b1*b3*x2*y1*z1 + a1*b2*b3*x2*y1*z1 + 2*b1*b2*b3*x2*y1*z1 + a1*b1*b2*b3*x2*y1*z1 + b1^2*b2*b3*x2*y1*z1 + a2*x3*y1*z1 + a2*b1*x3*y1*z1 + b2*x3*y1*z1 + a1*b2*x3*y1*z1 + a2*b2*x3*y1*z1 + 2*a3*b2*x3*y1*z1 + a1*a3*b2*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + b1*b2*x3*y1*z1 + a1*b1*b2*x3*y1*z1 + a2*b1*b2*x3*y1*z1 + a3*b1*b2*x3*y1*z1 + b2^2*x3*y1*z1 + a3*b2^2*x3*y1*z1 + a3*b1*b2^2*x3*y1*z1 + a2*b3*x3*y1*z1 + a2*b1*b3*x3*y1*z1 + 2*b2*b3*x3*y1*z1 + 3*b1*b2*b3*x3*y1*z1 + a1*b1*b2*b3*x3*y1*z1 + a2*b1*b2*b3*x3*y1*z1 + b1^2*b2*b3*x3*y1*z1 + a3*y2*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + 2*a3*b1*y2*z1 + a1*a3*b1*y2*z1 + a3*b1^2*y2*z1 + a1*a3*b1^2*y2*z1 + 2*a3*b2*y2*z1 + a1*a3*b2*y2*z1 + a3*b1*b2*y2*z1 + 2*a1*a3*b1*b2*y2*z1 + a3*b1*b2^2*y2*z1 + 2*b1*b3*y2*z1 + a2*b1*b3*y2*z1 + a1*a2*b1*b3*y2*z1 + a3*b1*b3*y2*z1 + a1*a3*b1*b3*y2*z1 + a3*b1^2*b3*y2*z1 + a2*b2*b3*y2*z1 + 2*b1*b2*b3*y2*z1 + a1*b1*b2*b3*y2*z1 + a2*b1*b2*b3*y2*z1 + b1^2*b2*b3*y2*z1 + b2^2*b3*y2*z1 + a1*b1*b2^2*b3*y2*z1 + a3*x1*y2*z1 + a3*b2*x1*y2*z1 + a1*a3*b2*x1*y2*z1 + b3*x1*y2*z1 + a1*b3*x1*y2*z1 + b1*b3*x1*y2*z1 + b1^2*b3*x1*y2*z1 + a1*b2*b3*x1*y2*z1 + b1*b2*b3*x1*y2*z1 + a1*b1*b2*b3*x1*y2*z1 + a3*x2*y2*z1 + a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + b3*x2*y2*z1 + b1*b3*x2*y2*z1 + 2*b1*b2*b3*x2*y2*z1 + b1^2*b2*b3*x2*y2*z1 + a1*x3*y2*z1 + a1*a2*x3*y2*z1 + a2*a3*x3*y2*z1 + a1*b1*x3*y2*z1 + a1*a2*b1*x3*y2*z1 + a3*b1*x3*y2*z1 + a1*b1^2*x3*y2*z1 + a1*a2*b1^2*x3*y2*z1 + a2*b2*x3*y2*z1 + a1*a2*b2*x3*y2*z1 + a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a1*b1*b2*x3*y2*z1 + a1*a2*b1*b2*x3*y2*z1 + 2*a3*b1*b2*x3*y2*z1 + a2*a3*b1*b2*x3*y2*z1 + a1*b1^2*b2*x3*y2*z1 + b2^2*x3*y2*z1 + a3*b2^2*x3*y2*z1 + a1*a3*b2^2*x3*y2*z1 + b1*b2^2*x3*y2*z1 + a3*b1*b2^2*x3*y2*z1 + a3*b1^2*b2^2*x3*y2*z1 + 2*b3*x3*y2*z1 + a1*b3*x3*y2*z1 + b1*b3*x3*y2*z1 + a1*b1*b3*x3*y2*z1 + a2*b1*b3*x3*y2*z1 + a1*a2*b1*b3*x3*y2*z1 + a1*b1^2*b3*x3*y2*z1 + 2*b2*b3*x3*y2*z1 + 2*a2*b2*b3*x3*y2*z1 + a1*a2*b2*b3*x3*y2*z1 + a3*b2*b3*x3*y2*z1 + 3*b1*b2*b3*x3*y2*z1 + 2*a1*b1*b2*b3*x3*y2*z1 + 2*a2*b1*b2*b3*x3*y2*z1 + b1^2*b2*b3*x3*y2*z1 + a2*b1^2*b2*b3*x3*y2*z1 + b2^2*b3*x3*y2*z1 + b2*b3^2*x3*y2*z1 + a3*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a3*b1*b2*y1*y2*z1 + b3*y1*y2*z1 + a1*b3*y1*y2*z1 + 2*b1*b3*y1*y2*z1 + a1*b1*b3*y1*y2*z1 + b2*b3*y1*y2*z1 + a1*b2*b3*y1*y2*z1 + b1*b2*b3*y1*y2*z1 + a1*b1*b2*b3*y1*y2*z1 + b1^2*b2*b3*y1*y2*z1 + a1*a2*y3*z1 + a2*a3*y3*z1 + a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a2*a3*b1^2*y3*z1 + b2*y3*z1 + a1*a2*b2*y3*z1 + a1*a3*b2*y3*z1 + b1*b2*y3*z1 + 2*a1*b1*b2*y3*z1 + 2*a2*b1*b2*y3*z1 + a3*b1*b2*y3*z1 + b2^2*y3*z1 + a1*b2^2*y3*z1 + a2*b2^2*y3*z1 + b1*b2^2*y3*z1 + b1^2*b2^2*y3*z1 + b2*b3*y3*z1 + a2*b2*b3*y3*z1 + a3*b2*b3*y3*z1 + a1*a3*b2*b3*y3*z1 + a2*a3*b2*b3*y3*z1 + 2*b1*b2*b3*y3*z1 + a1*b1*b2*b3*y3*z1 + a2*b1*b2*b3*y3*z1 + a3*b1*b2*b3*y3*z1 + b1^2*b2*b3*y3*z1 + a2*b1^2*b2*b3*y3*z1 + b2^2*b3*y3*z1 + a1*b2^2*b3*y3*z1 + a3*b2^2*b3*y3*z1 + b1*b2^2*b3*y3*z1 + a3*b1*b2^2*b3*y3*z1 + a2*b1*x1*y3*z1 + 2*b2*x1*y3*z1 + 2*a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + 2*a3*b2*x1*y3*z1 + a1*a3*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a1*b1*b2*x1*y3*z1 + a2*b1*b2*x1*y3*z1 + b1^2*b2*x1*y3*z1 + b2^2*x1*y3*z1 + b1*b2^2*x1*y3*z1 + a3*b1*b2^2*x1*y3*z1 + a2*b3*x1*y3*z1 + a2*b1*b3*x1*y3*z1 + b2*b3*x1*y3*z1 + a1*b2*b3*x1*y3*z1 + a2*b2*b3*x1*y3*z1 + 2*b1*b2*b3*x1*y3*z1 + a1*b1*b2*b3*x1*y3*z1 + a2*b1*b2*b3*x1*y3*z1 + x2*y3*z1 + a1*a2*x2*y3*z1 + a2*a3*x2*y3*z1 + a1*b1*x2*y3*z1 + 2*a2*b1*x2*y3*z1 + a1*a2*b1*x2*y3*z1 + a3*b1*x2*y3*z1 + a1*b1^2*x2*y3*z1 + a2*b1^2*x2*y3*z1 + a1*a2*b1^2*x2*y3*z1 + a2*b2*x2*y3*z1 + a1*a2*b2*x2*y3*z1 + a3*b2*x2*y3*z1 + a2*a3*b2*x2*y3*z1 + b1*b2*x2*y3*z1 + a1*b1*b2*x2*y3*z1 + 2*a2*b1*b2*x2*y3*z1 + a1*a2*b1*b2*x2*y3*z1 + 2*a3*b1*b2*x2*y3*z1 + a2*a3*b1*b2*x2*y3*z1 + b1^2*b2*x2*y3*z1 + a1*b1^2*b2*x2*y3*z1 + b2^2*x2*y3*z1 + a1*b2^2*x2*y3*z1 + a1*a3*b2^2*x2*y3*z1 + 2*b1*b2^2*x2*y3*z1 + a3*b1*b2^2*x2*y3*z1 + b1^2*b2^2*x2*y3*z1 + a3*b1^2*b2^2*x2*y3*z1 + 2*b3*x2*y3*z1 + a1*b3*x2*y3*z1 + 2*b1*b3*x2*y3*z1 + a1*b1*b3*x2*y3*z1 + 2*a2*b1*b3*x2*y3*z1 + a1*a2*b1*b3*x2*y3*z1 + a1*b1^2*b3*x2*y3*z1 + 2*b2*b3*x2*y3*z1 + a2*b2*b3*x2*y3*z1 + a1*a2*b2*b3*x2*y3*z1 + a3*b2*b3*x2*y3*z1 + 4*b1*b2*b3*x2*y3*z1 + 2*a1*b1*b2*b3*x2*y3*z1 + 2*a2*b1*b2*b3*x2*y3*z1 + b1^2*b2*b3*x2*y3*z1 + a2*b1^2*b2*b3*x2*y3*z1 + b2^2*b3*x2*y3*z1 + b2*b3^2*x2*y3*z1 + a2*b1*x3*y3*z1 + 2*a1*b2*x3*y3*z1 + 2*a2*b2*x3*y3*z1 + a3*b2*x3*y3*z1 + 2*b1*b2*x3*y3*z1 + a1*b1*b2*x3*y3*z1 + a2*b1*b2*x3*y3*z1 + a3*b1*b2*x3*y3*z1 + a1*b2^2*x3*y3*z1 + a2*b2^2*x3*y3*z1 + a3*b2^2*x3*y3*z1 + b1^2*b2^2*x3*y3*z1 + 2*b2*b3*x3*y3*z1 + 3*b1*b2*b3*x3*y3*z1 + b1^2*b2*b3*x3*y3*z1 + b2^2*b3*x3*y3*z1 + b1*b2^2*b3*x3*y3*z1 + a2*y1*y3*z1 + a2*b1*y1*y3*z1 + 2*a1*b2*y1*y3*z1 + 2*a2*b2*y1*y3*z1 + a3*b2*y1*y3*z1 + a1*a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + 3*b1*b2*y1*y3*z1 + a1*b1*b2*y1*y3*z1 + a2*b1*b2*y1*y3*z1 + a3*b1*b2*y1*y3*z1 + a3*b2^2*y1*y3*z1 + b1*b2^2*y1*y3*z1 + a3*b1*b2^2*y1*y3*z1 + a2*b3*y1*y3*z1 + a2*b1*b3*y1*y3*z1 + b2*b3*y1*y3*z1 + 2*b1*b2*b3*y1*y3*z1 + a1*b1*b2*b3*y1*y3*z1 + a2*b1*b2*b3*y1*y3*z1 + b1^2*b2*b3*y1*y3*z1 + a1*y2*y3*z1 + a2*y2*y3*z1 + a1*a2*y2*y3*z1 + a3*y2*y3*z1 + a2*a3*y2*y3*z1 + 2*b1*y2*y3*z1 + a1*a2*b1*y2*y3*z1 + a3*b1*y2*y3*z1 + b1^2*y2*y3*z1 + a1*a2*b1^2*y2*y3*z1 + 2*b2*y2*y3*z1 + a1*b2*y2*y3*z1 + 2*a2*b2*y2*y3*z1 + a1*a2*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + 2*b1*b2*y2*y3*z1 + a2*b1*b2*y2*y3*z1 + a1*a2*b1*b2*y2*y3*z1 + a3*b1*b2*y2*y3*z1 + a2*a3*b1*b2*y2*y3*z1 + a1*b1^2*b2*y2*y3*z1 + a1*b2^2*y2*y3*z1 + a3*b2^2*y2*y3*z1 + a1*a3*b2^2*y2*y3*z1 + 2*b1*b2^2*y2*y3*z1 + a3*b1*b2^2*y2*y3*z1 + b1^2*b2^2*y2*y3*z1 + a3*b1^2*b2^2*y2*y3*z1 + b3*y2*y3*z1 + a1*b3*y2*y3*z1 + 2*b1*b3*y2*y3*z1 + 2*a1*b1*b3*y2*y3*z1 + a2*b1*b3*y2*y3*z1 + a1*a2*b1*b3*y2*y3*z1 + b1^2*b3*y2*y3*z1 + a1*b1^2*b3*y2*y3*z1 + 2*b2*b3*y2*y3*z1 + a1*b2*b3*y2*y3*z1 + 2*a2*b2*b3*y2*y3*z1 + a1*a2*b2*b3*y2*y3*z1 + a3*b2*b3*y2*y3*z1 + 2*b1*b2*b3*y2*y3*z1 + 2*a1*b1*b2*b3*y2*y3*z1 + 2*a2*b1*b2*b3*y2*y3*z1 + a2*b1^2*b2*b3*y2*y3*z1 + b2^2*b3*y2*y3*z1 + b2*b3^2*y2*y3*z1 + (a2*a3*z1*(1 + z1))/2 + (a3*b1*b2*z1*(1 + z1))/2 + (a3*b2^2*z1*(1 + z1))/2 + (a2*b3*z1*(1 + z1))/2 + (b2*b3*z1*(1 + z1))/2 + (a1*b2*b3*z1*(1 + z1))/2 + (b1*b2*b3*z1*(1 + z1))/2 + (b1^2*b2*b3*z1*(1 + z1))/2 + (b2^2*b3*z1*(1 + z1))/2 + a3*b1*b2*z2 + 2*a1*a3*b1*b2*z2 + 2*a3*b1^2*b2*z2 + a1*b1*b3*z2 + a1*a2*b1*b3*z2 + a1*a3*b1*b3*z2 + b1^2*b3*z2 + a3*b1^2*b3*z2 + b1*b2*b3*z2 + a1*b1*b2*b3*z2 + b1^2*b2*b3*z2 + a1*b1^2*b2*b3*z2 + a1*b1*b2^2*b3*z2 + a2*a3*x1*z2 + a1*a3*b1*x1*z2 + a1*a3*b1^2*x1*z2 + a3*b2*x1*z2 + 2*a3*b1*b2*x1*z2 + 2*a1*a3*b1*b2*x1*z2 + a3*b1^2*b2*x1*z2 + a3*b1*b2^2*x1*z2 + a1*a3*b3*x1*z2 + b1*b3*x1*z2 + a2*b1*b3*x1*z2 + a1*a2*b1*b3*x1*z2 + a3*b1*b3*x1*z2 + a1*a3*b1*b3*x1*z2 + a3*b1^2*b3*x1*z2 + a2*b2*b3*x1*z2 + a2*b1*b2*b3*x1*z2 + b2^2*b3*x1*z2 + a1*b1*b2^2*b3*x1*z2 + a3*b1^2*x2*z2 + a1*a3*b1^2*x2*z2 + a3*b1*b2*x2*z2 + a3*b1^2*b2*x2*z2 + a1*a2*b3*x2*z2 + a2*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a3*b1^2*b3*x2*z2 + 2*b1*b2*b3*x2*z2 + a1*b1*b2*b3*x2*z2 + b1^2*b2*b3*x2*z2 + a1*b1^2*b2*b3*x2*z2 + a1*b2^2*b3*x2*z2 + b1*b2^2*b3*x2*z2 + a3*b1*x1*x2*z2 + a3*b2*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a3*b1^2*b2*x1*x2*z2 + 2*b3*x1*x2*z2 + a2*b3*x1*x2*z2 + a3*b3*x1*x2*z2 + 3*b1*b3*x1*x2*z2 + a1*b1*b3*x1*x2*z2 + b2*b3*x1*x2*z2 + a1*b2*b3*x1*x2*z2 + b1*b2*b3*x1*x2*z2 + a1*b1*b2*b3*x1*x2*z2 + b2^2*b3*x1*x2*z2 + b3^2*x1*x2*z2 + a1*a2*b1*x3*z2 + b1^2*x3*z2 + a1*b1^2*x3*z2 + a3*b1^2*x3*z2 + a1*a3*b1^2*x3*z2 + a2*a3*b1^2*x3*z2 + 3*a1*b1*b2*x3*z2 + a1*a3*b1*b2*x3*z2 + 2*b1^2*b2*x3*z2 + a1*b1^2*b2*x3*z2 + a2*b1^2*b2*x3*z2 + a3*b1^2*b2*x3*z2 + a1*a3*b1^2*b2*x3*z2 + a1*a3*b2^2*x3*z2 + a3*b1*b2^2*x3*z2 + 2*a1*b1*b3*x3*z2 + b1^2*b3*x3*z2 + a1*a2*b2*b3*x3*z2 + a2*b1*b2*b3*x3*z2 + 2*a1*a2*b1*b2*b3*x3*z2 + a3*b1*b2*b3*x3*z2 + a1*a2*b2^2*b3*x3*z2 + b1*b2^2*b3*x3*z2 + a2*b1*b2^2*b3*x3*z2 + a3*b1*b2^2*b3*x3*z2 + x1*x3*z2 + a2*x1*x3*z2 + a3*x1*x3*z2 + a2*a3*x1*x3*z2 + b1*x1*x3*z2 + 2*a1*b1*x1*x3*z2 + a2*b1*x1*x3*z2 + a1*a2*b1*x1*x3*z2 + a2*b1^2*x1*x3*z2 + a1*a2*b1^2*x1*x3*z2 + b2*x1*x3*z2 + a1*b2*x1*x3*z2 + a2*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + a2*a3*b2*x1*x3*z2 + 2*b1*b2*x1*x3*z2 + a1*b1*b2*x1*x3*z2 + a2*b1*b2*x1*x3*z2 + a1*a2*b1*b2*x1*x3*z2 + a3*b1*b2*x1*x3*z2 + a2*a3*b1*b2*x1*x3*z2 + b1^2*b2*x1*x3*z2 + a3*b1^2*b2*x1*x3*z2 + b2^2*x1*x3*z2 + a1*a3*b2^2*x1*x3*z2 + b1*b2^2*x1*x3*z2 + a3*b1^2*b2^2*x1*x3*z2 + b3*x1*x3*z2 + a1*b3*x1*x3*z2 + a3*b3*x1*x3*z2 + 2*b1*b3*x1*x3*z2 + a1*b1*b3*x1*x3*z2 + 2*a2*b1*b3*x1*x3*z2 + a1*a2*b1*b3*x1*x3*z2 + a1*b1^2*b3*x1*x3*z2 + 2*b2*b3*x1*x3*z2 + a1*b2*b3*x1*x3*z2 + a2*b2*b3*x1*x3*z2 + a1*a2*b2*b3*x1*x3*z2 + a3*b2*b3*x1*x3*z2 + 3*b1*b2*b3*x1*x3*z2 + 2*a1*b1*b2*b3*x1*x3*z2 + a2*b1*b2*b3*x1*x3*z2 + b1^2*b2*b3*x1*x3*z2 + a2*b1^2*b2*b3*x1*x3*z2 + b2^2*b3*x1*x3*z2 + b3^2*x1*x3*z2 + b2*b3^2*x1*x3*z2 + b1*x2*x3*z2 + a1*b1*x2*x3*z2 + a2*b1*x2*x3*z2 + b1^2*x2*x3*z2 + a1*b1^2*x2*x3*z2 + a2*b1^2*x2*x3*z2 + a1*b2*x2*x3*z2 + b1*b2*x2*x3*z2 + a1*b1*b2*x2*x3*z2 + a2*b1*b2*x2*x3*z2 + a2*b1^2*b2*x2*x3*z2 + a1*b3*x2*x3*z2 + a1*a2*b3*x2*x3*z2 + b1*b3*x2*x3*z2 + a2*b1*b3*x2*x3*z2 + b1^2*b3*x2*x3*z2 + a1*b2*b3*x2*x3*z2 + 2*b1*b2*b3*x2*x3*z2 + a1*b1*b2*b3*x2*x3*z2 + a2*a3*y1*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 + a3*b1^2*y1*z2 + a1*a3*b1^2*y1*z2 + a3*b2*y1*z2 + a3*b1*b2*y1*z2 + 2*a1*a3*b1*b2*y1*z2 + a3*b1^2*b2*y1*z2 + a3*b1*b2^2*y1*z2 + a2*b3*y1*z2 + a3*b3*y1*z2 + a1*a3*b3*y1*z2 + 2*b1*b3*y1*z2 + 2*a2*b1*b3*y1*z2 + a1*a2*b1*b3*y1*z2 + a3*b1*b3*y1*z2 + a1*a3*b1*b3*y1*z2 + b1^2*b3*y1*z2 + a1*b1^2*b3*y1*z2 + a3*b1^2*b3*y1*z2 + a2*b2*b3*y1*z2 + 2*b1*b2*b3*y1*z2 + a2*b1*b2*b3*y1*z2 + b1*b2^2*b3*y1*z2 + a1*b1*b2^2*b3*y1*z2 + a3*b2*x1*y1*z2 + a3*b1*b2*x1*y1*z2 + b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a1*b1*b3*x1*y1*z2 + b1^2*b3*x1*y1*z2 + b2*b3*x1*y1*z2 + 2*b1*b2*b3*x1*y1*z2 + b1^2*b2*b3*x1*y1*z2 + a3*b1*x2*y1*z2 + 2*a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a3*b1^2*b2*x2*y1*z2 + b3*x2*y1*z2 + a1*b3*x2*y1*z2 + a2*b3*x2*y1*z2 + a3*b3*x2*y1*z2 + 3*b1*b3*x2*y1*z2 + a1*b1*b3*x2*y1*z2 + 2*b2*b3*x2*y1*z2 + a1*b2*b3*x2*y1*z2 + 2*b1*b2*b3*x2*y1*z2 + a1*b1*b2*b3*x2*y1*z2 + b2^2*b3*x2*y1*z2 + b3^2*x2*y1*z2 + x3*y1*z2 + a3*x3*y1*z2 + a2*a3*x3*y1*z2 + 2*b1*x3*y1*z2 + a1*b1*x3*y1*z2 + a1*a2*b1*x3*y1*z2 + a1*a2*b1^2*x3*y1*z2 + 2*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + a2*a3*b2*x3*y1*z2 + 3*b1*b2*x3*y1*z2 + a1*b1*b2*x3*y1*z2 + a1*a2*b1*b2*x3*y1*z2 + a3*b1*b2*x3*y1*z2 + a2*a3*b1*b2*x3*y1*z2 + a2*b1^2*b2*x3*y1*z2 + a3*b1^2*b2*x3*y1*z2 + b2^2*x3*y1*z2 + a3*b2^2*x3*y1*z2 + a1*a3*b2^2*x3*y1*z2 + b1*b2^2*x3*y1*z2 + a3*b1^2*b2^2*x3*y1*z2 + a3*b3*x3*y1*z2 + 2*b1*b3*x3*y1*z2 + 2*a1*b1*b3*x3*y1*z2 + a1*a2*b1*b3*x3*y1*z2 + a1*b1^2*b3*x3*y1*z2 + a2*b1^2*b3*x3*y1*z2 + 2*b2*b3*x3*y1*z2 + a1*b2*b3*x3*y1*z2 + 2*a2*b2*b3*x3*y1*z2 + a1*a2*b2*b3*x3*y1*z2 + a3*b2*b3*x3*y1*z2 + 2*b1*b2*b3*x3*y1*z2 + 2*a1*b1*b2*b3*x3*y1*z2 + a2*b1*b2*b3*x3*y1*z2 + b1^2*b2*b3*x3*y1*z2 + a2*b1^2*b2*b3*x3*y1*z2 + b2^2*b3*x3*y1*z2 + b3^2*x3*y1*z2 + b2*b3^2*x3*y1*z2 + a1*a3*b1^2*y2*z2 + a3*b1*b2*y2*z2 + a3*b1^2*b2*y2*z2 + a1*a2*b3*y2*z2 + a3*b1*b3*y2*z2 + a1*b1^2*b3*y2*z2 + a3*b1^2*b3*y2*z2 + a1*b1*b2*b3*y2*z2 + a1*b1^2*b2*b3*y2*z2 + a1*b2^2*b3*y2*z2 + a3*x1*y2*z2 + a3*b1*x1*y2*z2 + 2*a3*b2*x1*y2*z2 + a1*a3*b2*x1*y2*z2 + a3*b1*b2*x1*y2*z2 + a3*b1^2*b2*x1*y2*z2 + 2*b3*x1*y2*z2 + a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + 3*b1*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + b2*b3*x1*y2*z2 + a1*b2*b3*x1*y2*z2 + b1*b2*b3*x1*y2*z2 + a1*b1*b2*b3*x1*y2*z2 + b1^2*b2*b3*x1*y2*z2 + b2^2*b3*x1*y2*z2 + b3^2*x1*y2*z2 + a1*b3*x2*y2*z2 + b1*b2*b3*x2*y2*z2 + b1^2*x3*y2*z2 + a1*b1^2*x3*y2*z2 + a2*b1^2*x3*y2*z2 + a1*b1*b2*x3*y2*z2 + a2*b1*b2*x3*y2*z2 + b1^2*b2*x3*y2*z2 + a2*b1^2*b2*x3*y2*z2 + a1*a2*b3*x3*y2*z2 + b1*b3*x3*y2*z2 + a1*b1*b3*x3*y2*z2 + b1^2*b3*x3*y2*z2 + a1*b2*b3*x3*y2*z2 + b1*b2*b3*x3*y2*z2 + a1*b1*b2*b3*x3*y2*z2 + a3*y1*y2*z2 + a3*b1*y1*y2*z2 + a3*b2*y1*y2*z2 + a1*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a3*b1^2*b2*y1*y2*z2 + b3*y1*y2*z2 + a1*b3*y1*y2*z2 + a2*b3*y1*y2*z2 + a3*b3*y1*y2*z2 + 2*b1*b3*y1*y2*z2 + a1*b1*b3*y1*y2*z2 + b1^2*b3*y1*y2*z2 + 2*b2*b3*y1*y2*z2 + a1*b2*b3*y1*y2*z2 + a1*b1*b2*b3*y1*y2*z2 + b1^2*b2*b3*y1*y2*z2 + b2^2*b3*y1*y2*z2 + b3^2*y1*y2*z2 + a1*a2*b1*y3*z2 + b1^2*y3*z2 + a1*b1^2*y3*z2 + a2*b1^2*y3*z2 + a3*b1^2*y3*z2 + a2*a3*b1^2*y3*z2 + 2*a1*b1*b2*y3*z2 + a1*a3*b1*b2*y3*z2 + b1^2*b2*y3*z2 + a2*b1^2*b2*y3*z2 + 2*a3*b1^2*b2*y3*z2 + a1*a3*b1^2*b2*y3*z2 + 2*a1*b1*b3*y3*z2 + a1*b1^2*b3*y3*z2 + a1*a2*b2*b3*y3*z2 + a2*b1*b2*b3*y3*z2 + 2*a1*a2*b1*b2*b3*y3*z2 + a3*b1*b2*b3*y3*z2 + b1^2*b2*b3*y3*z2 + a1*a2*b2^2*b3*y3*z2 + a2*b1*b2^2*b3*y3*z2 + a3*b1*b2^2*b3*y3*z2 + a1*x1*y3*z2 + a2*a3*x1*y3*z2 + 2*b1*x1*y3*z2 + a1*b1*x1*y3*z2 + a2*b1*x1*y3*z2 + a1*a2*b1*x1*y3*z2 + a1*b1^2*x1*y3*z2 + a2*b1^2*x1*y3*z2 + a1*a2*b1^2*x1*y3*z2 + 2*b2*x1*y3*z2 + 2*a1*b2*x1*y3*z2 + 2*a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + a2*a3*b2*x1*y3*z2 + 2*b1*b2*x1*y3*z2 + 2*a2*b1*b2*x1*y3*z2 + a1*a2*b1*b2*x1*y3*z2 + 2*a3*b1*b2*x1*y3*z2 + a2*a3*b1*b2*x1*y3*z2 + 2*b1^2*b2*x1*y3*z2 + a3*b1^2*b2*x1*y3*z2 + b2^2*x1*y3*z2 + a1*b2^2*x1*y3*z2 + a1*a3*b2^2*x1*y3*z2 + b1*b2^2*x1*y3*z2 + b1^2*b2^2*x1*y3*z2 + a3*b1^2*b2^2*x1*y3*z2 + b3*x1*y3*z2 + a3*b3*x1*y3*z2 + b1*b3*x1*y3*z2 + 2*a1*b1*b3*x1*y3*z2 + 2*a2*b1*b3*x1*y3*z2 + a1*a2*b1*b3*x1*y3*z2 + b1^2*b3*x1*y3*z2 + a1*b1^2*b3*x1*y3*z2 + b2*b3*x1*y3*z2 + a2*b2*b3*x1*y3*z2 + a1*a2*b2*b3*x1*y3*z2 + a3*b2*b3*x1*y3*z2 + 3*b1*b2*b3*x1*y3*z2 + 2*a1*b1*b2*b3*x1*y3*z2 + a2*b1*b2*b3*x1*y3*z2 + a2*b1^2*b2*b3*x1*y3*z2 + b2^2*b3*x1*y3*z2 + b3^2*x1*y3*z2 + b2*b3^2*x1*y3*z2 + 2*b1*x2*y3*z2 + a1*b1*x2*y3*z2 + a2*b1*x2*y3*z2 + a1*b1^2*x2*y3*z2 + a2*b1^2*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*b1*b2*x2*y3*z2 + a2*b1*b2*x2*y3*z2 + b1^2*b2*x2*y3*z2 + a2*b1^2*b2*x2*y3*z2 + a1*b3*x2*y3*z2 + a1*a2*b3*x2*y3*z2 + 2*b1*b3*x2*y3*z2 + a2*b1*b3*x2*y3*z2 + a1*b2*b3*x2*y3*z2 + 2*b1*b2*b3*x2*y3*z2 + a1*b1*b2*b3*x2*y3*z2 + a1*b1^2*x3*y3*z2 + b1*b2*x3*y3*z2 + 2*a1*b1*b2*x3*y3*z2 + b1^2*b2*x3*y3*z2 + b1*b2^2*x3*y3*z2 + a1*b1*b3*x3*y3*z2 + a1*b1^2*b3*x3*y3*z2 + b1*b2*b3*x3*y3*z2 + 2*a1*b1*b2*b3*x3*y3*z2 + b1^2*b2*b3*x3*y3*z2 + a1*b2^2*b3*x3*y3*z2 + a1*y1*y3*z2 + a2*y1*y3*z2 + a2*a3*y1*y3*z2 + 2*b1*y1*y3*z2 + 2*a1*b1*y1*y3*z2 + a1*a2*b1*y1*y3*z2 + b1^2*y1*y3*z2 + a1*b1^2*y1*y3*z2 + a1*a2*b1^2*y1*y3*z2 + b2*y1*y3*z2 + a1*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + a2*a3*b2*y1*y3*z2 + 2*b1*b2*y1*y3*z2 + a2*b1*b2*y1*y3*z2 + a1*a2*b1*b2*y1*y3*z2 + 2*a3*b1*b2*y1*y3*z2 + a2*a3*b1*b2*y1*y3*z2 + 2*b1^2*b2*y1*y3*z2 + a2*b1^2*b2*y1*y3*z2 + a3*b1^2*b2*y1*y3*z2 + a1*b2^2*y1*y3*z2 + a3*b2^2*y1*y3*z2 + a1*a3*b2^2*y1*y3*z2 + b1*b2^2*y1*y3*z2 + b1^2*b2^2*y1*y3*z2 + a3*b1^2*b2^2*y1*y3*z2 + a1*b3*y1*y3*z2 + a3*b3*y1*y3*z2 + 2*b1*b3*y1*y3*z2 + a1*b1*b3*y1*y3*z2 + a1*a2*b1*b3*y1*y3*z2 + a1*b1^2*b3*y1*y3*z2 + a2*b1^2*b3*y1*y3*z2 + 2*b2*b3*y1*y3*z2 + 2*a1*b2*b3*y1*y3*z2 + 2*a2*b2*b3*y1*y3*z2 + a1*a2*b2*b3*y1*y3*z2 + a3*b2*b3*y1*y3*z2 + 2*b1*b2*b3*y1*y3*z2 + 2*a1*b1*b2*b3*y1*y3*z2 + a2*b1*b2*b3*y1*y3*z2 + a2*b1^2*b2*b3*y1*y3*z2 + b2^2*b3*y1*y3*z2 + b3^2*y1*y3*z2 + b2*b3^2*y1*y3*z2 + a1*b1^2*y2*y3*z2 + a2*b1^2*y2*y3*z2 + b1*b2*y2*y3*z2 + a1*b1*b2*y2*y3*z2 + a2*b1*b2*y2*y3*z2 + a2*b1^2*b2*y2*y3*z2 + a1*a2*b3*y2*y3*z2 + a1*b1*b3*y2*y3*z2 + a1*b2*b3*y2*y3*z2 + b1*b2*b3*y2*y3*z2 + a1*b1*b2*b3*y2*y3*z2 + a2*a3*z1*z2 + a1*a3*b1*z1*z2 + a3*b1^2*z1*z2 + a1*a3*b1^2*z1*z2 + 2*a1*a3*b2*z1*z2 + 3*a3*b1*b2*z1*z2 + 2*a1*a3*b1*b2*z1*z2 + a3*b1^2*b2*z1*z2 + a3*b2^2*z1*z2 + a3*b1*b2^2*z1*z2 + a2*b3*z1*z2 + b1*b3*z1*z2 + a1*b1*b3*z1*z2 + a2*b1*b3*z1*z2 + a1*a2*b1*b3*z1*z2 + a1*a3*b1*b3*z1*z2 + a3*b1^2*b3*z1*z2 + b2*b3*z1*z2 + a1*b2*b3*z1*z2 + b1*b2*b3*z1*z2 + a2*b1*b2*b3*z1*z2 + b2^2*b3*z1*z2 + a1*b1*b2^2*b3*z1*z2 + a1*a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + b3*x1*z1*z2 + a1*b3*x1*z1*z2 + 2*b1*b3*x1*z1*z2 + b1^2*b3*x1*z1*z2 + a1*b2*b3*x1*z1*z2 + a1*b1*b2*b3*x1*z1*z2 + a3*x2*z1*z2 + a3*b1*x2*z1*z2 + a3*b2*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a3*b1*b2*x2*z1*z2 + a3*b1^2*b2*x2*z1*z2 + a2*b3*x2*z1*z2 + a3*b3*x2*z1*z2 + 3*b1*b3*x2*z1*z2 + a1*b1*b3*x2*z1*z2 + 2*b2*b3*x2*z1*z2 + a1*b2*b3*x2*z1*z2 + b1*b2*b3*x2*z1*z2 + a1*b1*b2*b3*x2*z1*z2 + b2^2*b3*x2*z1*z2 + b3^2*x2*z1*z2 + a2*x3*z1*z2 + a1*a2*x3*z1*z2 + a3*x3*z1*z2 + a2*a3*x3*z1*z2 + b1*x3*z1*z2 + a1*b1*x3*z1*z2 + a1*a2*b1*x3*z1*z2 + a1*b1^2*x3*z1*z2 + a1*a2*b1^2*x3*z1*z2 + a2*b2*x3*z1*z2 + a1*a2*b2*x3*z1*z2 + a3*b2*x3*z1*z2 + a1*a3*b2*x3*z1*z2 + 2*b1*b2*x3*z1*z2 + a1*b1*b2*x3*z1*z2 + a1*a2*b1*b2*x3*z1*z2 + 2*a3*b1*b2*x3*z1*z2 + a2*a3*b1*b2*x3*z1*z2 + a1*b1^2*b2*x3*z1*z2 + a3*b1^2*b2*x3*z1*z2 + a1*a3*b2^2*x3*z1*z2 + b1*b2^2*x3*z1*z2 + a3*b1*b2^2*x3*z1*z2 + a3*b1^2*b2^2*x3*z1*z2 + a2*b3*x3*z1*z2 + a3*b3*x3*z1*z2 + b1*b3*x3*z1*z2 + 2*a1*b1*b3*x3*z1*z2 + 2*a2*b1*b3*x3*z1*z2 + a1*a2*b1*b3*x3*z1*z2 + b1^2*b3*x3*z1*z2 + a1*b1^2*b3*x3*z1*z2 + b2*b3*x3*z1*z2 + 2*a2*b2*b3*x3*z1*z2 + a1*a2*b2*b3*x3*z1*z2 + a3*b2*b3*x3*z1*z2 + 3*b1*b2*b3*x3*z1*z2 + 2*a1*b1*b2*b3*x3*z1*z2 + 2*a2*b1*b2*b3*x3*z1*z2 + b1^2*b2*b3*x3*z1*z2 + a2*b1^2*b2*b3*x3*z1*z2 + b2^2*b3*x3*z1*z2 + b3^2*x3*z1*z2 + b2*b3^2*x3*z1*z2 + a1*a3*b2*y1*z1*z2 + 2*a3*b1*b2*y1*z1*z2 + b3*y1*z1*z2 + a1*b3*y1*z1*z2 + b1*b3*y1*z1*z2 + a1*b1*b3*y1*z1*z2 + a1*b2*b3*y1*z1*z2 + b1*b2*b3*y1*z1*z2 + a1*b1*b2*b3*y1*z1*z2 + b1^2*b2*b3*y1*z1*z2 + a3*b1*y2*z1*z2 + a3*b2*y2*z1*z2 + a1*a3*b2*y2*z1*z2 + 2*a3*b1*b2*y2*z1*z2 + a3*b1^2*b2*y2*z1*z2 + a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + 3*b1*b3*y2*z1*z2 + a1*b1*b3*y2*z1*z2 + b2*b3*y2*z1*z2 + a1*b2*b3*y2*z1*z2 + a1*b1*b2*b3*y2*z1*z2 + b1^2*b2*b3*y2*z1*z2 + b2^2*b3*y2*z1*z2 + b3^2*y2*z1*z2 + y3*z1*z2 + a1*a2*y3*z1*z2 + a2*a3*y3*z1*z2 + a1*a2*b1*y3*z1*z2 + b1^2*y3*z1*z2 + a1*a2*b1^2*y3*z1*z2 + 2*a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a1*a2*b2*y3*z1*z2 + a3*b2*y3*z1*z2 + a1*a3*b2*y3*z1*z2 + 4*b1*b2*y3*z1*z2 + a2*b1*b2*y3*z1*z2 + a1*a2*b1*b2*y3*z1*z2 + 3*a3*b1*b2*y3*z1*z2 + a2*a3*b1*b2*y3*z1*z2 + b1^2*b2*y3*z1*z2 + a1*b1^2*b2*y3*z1*z2 + a3*b1^2*b2*y3*z1*z2 + a1*b2^2*y3*z1*z2 + a1*a3*b2^2*y3*z1*z2 + 2*b1*b2^2*y3*z1*z2 + a3*b1*b2^2*y3*z1*z2 + b1^2*b2^2*y3*z1*z2 + a3*b1^2*b2^2*y3*z1*z2 + a2*b3*y3*z1*z2 + a3*b3*y3*z1*z2 + a1*b1*b3*y3*z1*z2 + 2*a2*b1*b3*y3*z1*z2 + a1*a2*b1*b3*y3*z1*z2 + a1*b1^2*b3*y3*z1*z2 + a1*b2*b3*y3*z1*z2 + 2*a2*b2*b3*y3*z1*z2 + a1*a2*b2*b3*y3*z1*z2 + a3*b2*b3*y3*z1*z2 + 4*b1*b2*b3*y3*z1*z2 + 2*a1*b1*b2*b3*y3*z1*z2 + 2*a2*b1*b2*b3*y3*z1*z2 + a2*b1^2*b2*b3*y3*z1*z2 + b2^2*b3*y3*z1*z2 + b3^2*y3*z1*z2 + b2*b3^2*y3*z1*z2 + (a1*a3*b1*z2*(1 + z2))/2 + (a3*b1^2*z2*(1 + z2))/2 + (a1*a3*b2*z2*(1 + z2))/2 + (a3*b1*b2*z2*(1 + z2))/2 + (a1*b3*z2*(1 + z2))/2 + (a1*a2*b3*z2*(1 + z2))/2 + (a1*a3*b3*z2*(1 + z2))/2 + (a3*b1*b3*z2*(1 + z2))/2 + (a1*b1^2*b3*z2*(1 + z2))/2 + (b1*b2*b3*z2*(1 + z2))/2 + (a1*b1*b2*b3*z2*(1 + z2))/2 + (b1^2*b2*b3*z2*(1 + z2))/2 + (a1*b2^2*b3*z2*(1 + z2))/2 + a1*a2*b1*b2*z3 + a3*b1*b2*z3 + b1^2*b2*z3 + a1*b1^2*b2*z3 + a2*b1^2*b2*z3 + a1*b2^2*z3 + a1*a2*b2^2*z3 + b1*b2^2*z3 + a1*b1*b2^2*z3 + a1*a2*b2*b3*z3 + a1*b1*b2*b3*z3 + a3*b1*b2*b3*z3 + a2*a3*b1*b2*b3*z3 + a1*b1*b2^2*b3*z3 + a2*b1*b2^2*b3*z3 + a1*a2*x1*z3 + a2*b1*x1*z3 + a1*a2*b1*x1*z3 + a2*a3*b1*x1*z3 + a2*b1^2*x1*z3 + a2*a3*b1^2*x1*z3 + 2*a1*b2*x1*z3 + a1*a2*b2*x1*z3 + 2*a1*a3*b2*x1*z3 + a2*a3*b2*x1*z3 + b1*b2*x1*z3 + 2*a1*b1*b2*x1*z3 + 2*a2*b1*b2*x1*z3 + a3*b1*b2*x1*z3 + b1^2*b2*x1*z3 + a2*b1^2*b2*x1*z3 + a3*b1^2*b2*x1*z3 + a1*b2^2*x1*z3 + a2*b2^2*x1*z3 + b1*b2^2*x1*z3 + a3*b1*b2^2*x1*z3 + b1^2*b2^2*x1*z3 + a3*b2*b3*x1*z3 + a1*a3*b2*b3*x1*z3 + a2*a3*b2*b3*x1*z3 + a1*b1*b2*b3*x1*z3 + 2*a3*b1*b2*b3*x1*z3 + b1^2*b2*b3*x1*z3 + a2*b1^2*b2*b3*x1*z3 + a1*b2^2*b3*x1*z3 + a3*b2^2*b3*x1*z3 + a3*b1*b2^2*b3*x1*z3 + a1*x2*z3 + b1*x2*z3 + a2*b1*x2*z3 + a1*a3*b1*x2*z3 + a2*a3*b1*x2*z3 + b1^2*x2*z3 + a1*b1^2*x2*z3 + a1*a2*b1^2*x2*z3 + a1*a3*b2*x2*z3 + b1*b2*x2*z3 + a1*b1*b2*x2*z3 + a1*a3*b1*b2*x2*z3 + a2*a3*b1*b2*x2*z3 + b1^2*b2*x2*z3 + a1*a3*b1^2*b2*x2*z3 + a2*b1*b2^2*x2*z3 + a1*b1^2*b2^2*x2*z3 + a1*a2*b3*x2*z3 + b1*b3*x2*z3 + a3*b1*b3*x2*z3 + a2*a3*b1*b3*x2*z3 + a1*b1^2*b3*x2*z3 + a1*a2*b2*b3*x2*z3 + b1*b2*b3*x2*z3 + a1*b1*b2*b3*x2*z3 + a2*b1*b2*b3*x2*z3 + 2*a1*a2*b1*b2*b3*x2*z3 + a1*a2*b2^2*b3*x2*z3 + b1*b2^2*b3*x2*z3 + a1*b1*b2^2*b3*x2*z3 + a2*b1*b2^2*b3*x2*z3 + a3*b1*b2^2*b3*x2*z3 + a1*a2*x1*x2*z3 + a2*a3*x1*x2*z3 + b1*x1*x2*z3 + a1*b1*x1*x2*z3 + a2*b1*x1*x2*z3 + a1*a2*b1*x1*x2*z3 + a3*b1*x1*x2*z3 + b1^2*x1*x2*z3 + a1*b1^2*x1*x2*z3 + a1*a2*b1^2*x1*x2*z3 + a1*b2*x1*x2*z3 + 2*a2*b2*x1*x2*z3 + a1*a2*b2*x1*x2*z3 + a3*b2*x1*x2*z3 + a1*a3*b2*x1*x2*z3 + b1*b2*x1*x2*z3 + a2*b1*b2*x1*x2*z3 + a1*a2*b1*b2*x1*x2*z3 + 2*a3*b1*b2*x1*x2*z3 + a2*a3*b1*b2*x1*x2*z3 + a1*b1^2*b2*x1*x2*z3 + a2*b1^2*b2*x1*x2*z3 + a3*b1^2*b2*x1*x2*z3 + a1*b2^2*x1*x2*z3 + a1*a3*b2^2*x1*x2*z3 + b1*b2^2*x1*x2*z3 + a1*b1*b2^2*x1*x2*z3 + b1^2*b2^2*x1*x2*z3 + a3*b1^2*b2^2*x1*x2*z3 + 2*b3*x1*x2*z3 + a1*b3*x1*x2*z3 + a3*b3*x1*x2*z3 + 3*b1*b3*x1*x2*z3 + 2*a1*b1*b3*x1*x2*z3 + 2*a2*b1*b3*x1*x2*z3 + a1*a2*b1*b3*x1*x2*z3 + a1*b1^2*b3*x1*x2*z3 + 2*b2*b3*x1*x2*z3 + a1*b2*b3*x1*x2*z3 + 2*a2*b2*b3*x1*x2*z3 + a1*a2*b2*b3*x1*x2*z3 + a3*b2*b3*x1*x2*z3 + 3*b1*b2*b3*x1*x2*z3 + 3*a1*b1*b2*b3*x1*x2*z3 + a2*b1*b2*b3*x1*x2*z3 + b1^2*b2*b3*x1*x2*z3 + a2*b1^2*b2*b3*x1*x2*z3 + b3^2*x1*x2*z3 + b2*b3^2*x1*x2*z3 + a1*b2*x3*z3 + a1*a2*b2*x3*z3 + 2*b1*b2*x3*z3 + a1*b1*b2*x3*z3 + a3*b1*b2*x3*z3 + 2*a1*a3*b1*b2*x3*z3 + b1^2*b2*x3*z3 + a1*b2^2*x3*z3 + a1*a3*b2^2*x3*z3 + b1*b2^2*x3*z3 + a1*b1*b2^2*x3*z3 + a1*a2*b3*x3*z3 + a2*a3*b1*b3*x3*z3 + a1*b1*b2*b3*x3*z3 + a3*b1*b2*b3*x3*z3 + a1*b2^2*b3*x3*z3 + a3*b1*b2^2*b3*x3*z3 + a2*x1*x3*z3 + a2*b1*x1*x3*z3 + b2*x1*x3*z3 + 2*a1*b2*x1*x3*z3 + a2*b2*x1*x3*z3 + a3*b2*x1*x3*z3 + a1*a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + 3*b1*b2*x1*x3*z3 + a1*b1*b2*x1*x3*z3 + a3*b1*b2*x1*x3*z3 + a1*b1^2*b2*x1*x3*z3 + a2*b1^2*b2*x1*x3*z3 + a3*b1^2*b2*x1*x3*z3 + a3*b2^2*x1*x3*z3 + b1*b2^2*x1*x3*z3 + a1*b1*b2^2*x1*x3*z3 + a2*b1*b2^2*x1*x3*z3 + 2*b2*b3*x1*x3*z3 + 2*b1*b2*b3*x1*x3*z3 + a1*b1*b2*b3*x1*x3*z3 + a2*b1*b2*b3*x1*x3*z3 + b1^2*b2*b3*x1*x3*z3 + b2^2*b3*x1*x3*z3 + b1*b2^2*b3*x1*x3*z3 + a1*b1*b2*x2*x3*z3 + a2*b1*b2*x2*x3*z3 + a1*b1^2*b2*x2*x3*z3 + a1*b2^2*x2*x3*z3 + a1*b1*b2^2*x2*x3*z3 + a2*b1*b2^2*x2*x3*z3 + b1*b3*x2*x3*z3 + a1*b1*b3*x2*x3*z3 + a2*b1*b3*x2*x3*z3 + a1*b2*b3*x2*x3*z3 + b1*b2*b3*x2*x3*z3 + a1*b1*b2*b3*x2*x3*z3 + a2*b1*b2*b3*x2*x3*z3 + a1*b2^2*b3*x2*x3*z3 + a1*a2*y1*z3 + 2*a2*b1*y1*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + a1*b2*y1*z3 + a2*b2*y1*z3 + a1*a2*b2*y1*z3 + a3*b2*y1*z3 + 2*a1*a3*b2*y1*z3 + a2*a3*b2*y1*z3 + 3*b1*b2*y1*z3 + a1*b1*b2*y1*z3 + 2*a2*b1*b2*y1*z3 + a3*b1*b2*y1*z3 + 2*b1^2*b2*y1*z3 + a1*b1^2*b2*y1*z3 + a2*b1^2*b2*y1*z3 + a3*b1^2*b2*y1*z3 + b2^2*y1*z3 + a1*b2^2*y1*z3 + a2*b2^2*y1*z3 + b1*b2^2*y1*z3 + a3*b1*b2^2*y1*z3 + b1^2*b2^2*y1*z3 + a2*b3*y1*z3 + a2*b1*b3*y1*z3 + a2*b1^2*b3*y1*z3 + a1*b2*b3*y1*z3 + a2*b2*b3*y1*z3 + a1*a3*b2*b3*y1*z3 + a2*a3*b2*b3*y1*z3 + b1*b2*b3*y1*z3 + 3*a1*b1*b2*b3*y1*z3 + 2*a2*b1*b2*b3*y1*z3 + 2*a3*b1*b2*b3*y1*z3 + a2*b2^2*b3*y1*z3 + a3*b2^2*b3*y1*z3 + b1*b2^2*b3*y1*z3 + a3*b1*b2^2*b3*y1*z3 + 2*b2*x1*y1*z3 + 2*a1*b2*x1*y1*z3 + 2*a2*b2*x1*y1*z3 + a3*b2*x1*y1*z3 + b1*b2*x1*y1*z3 + a3*b1*b2*x1*y1*z3 + 2*b1^2*b2*x1*y1*z3 + a3*b2^2*x1*y1*z3 + a2*b3*x1*y1*z3 + 2*b2*b3*x1*y1*z3 + a1*b2*b3*x1*y1*z3 + a2*b2*b3*x1*y1*z3 + b1^2*b2*b3*x1*y1*z3 + x2*y1*z3 + a1*x2*y1*z3 + a1*a2*x2*y1*z3 + a2*a3*x2*y1*z3 + 2*b1*x2*y1*z3 + 2*a1*b1*x2*y1*z3 + 2*a2*b1*x2*y1*z3 + a1*a2*b1*x2*y1*z3 + a3*b1*x2*y1*z3 + a1*b1^2*x2*y1*z3 + a2*b1^2*x2*y1*z3 + a1*a2*b1^2*x2*y1*z3 + b2*x2*y1*z3 + a1*a2*b2*x2*y1*z3 + a1*a3*b2*x2*y1*z3 + 2*b1*b2*x2*y1*z3 + a1*a2*b1*b2*x2*y1*z3 + 2*a3*b1*b2*x2*y1*z3 + a2*a3*b1*b2*x2*y1*z3 + 2*b1^2*b2*x2*y1*z3 + a1*b1^2*b2*x2*y1*z3 + 2*a2*b1^2*b2*x2*y1*z3 + a3*b1^2*b2*x2*y1*z3 + a1*b2^2*x2*y1*z3 + a3*b2^2*x2*y1*z3 + a1*a3*b2^2*x2*y1*z3 + a1*b1*b2^2*x2*y1*z3 + a3*b1^2*b2^2*x2*y1*z3 + 2*b3*x2*y1*z3 + a2*b3*x2*y1*z3 + a3*b3*x2*y1*z3 + b1*b3*x2*y1*z3 + a1*b1*b3*x2*y1*z3 + a1*a2*b1*b3*x2*y1*z3 + b1^2*b3*x2*y1*z3 + a1*b1^2*b3*x2*y1*z3 + a2*b1^2*b3*x2*y1*z3 + 2*b2*b3*x2*y1*z3 + a1*b2*b3*x2*y1*z3 + a2*b2*b3*x2*y1*z3 + a1*a2*b2*b3*x2*y1*z3 + a3*b2*b3*x2*y1*z3 + 2*b1*b2*b3*x2*y1*z3 + 3*a1*b1*b2*b3*x2*y1*z3 + a2*b1*b2*b3*x2*y1*z3 + a2*b1^2*b2*b3*x2*y1*z3 + b3^2*x2*y1*z3 + b2*b3^2*x2*y1*z3 + a2*x3*y1*z3 + a2*b1*x3*y1*z3 + 2*a1*b2*x3*y1*z3 + a2*b2*x3*y1*z3 + a1*a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + 3*b1*b2*x3*y1*z3 + a1*b1*b2*x3*y1*z3 + a3*b1*b2*x3*y1*z3 + 2*b1^2*b2*x3*y1*z3 + a1*b1^2*b2*x3*y1*z3 + a2*b1^2*b2*x3*y1*z3 + a3*b1^2*b2*x3*y1*z3 + a3*b2^2*x3*y1*z3 + 2*b1*b2^2*x3*y1*z3 + a1*b1*b2^2*x3*y1*z3 + a2*b1*b2^2*x3*y1*z3 + b1^2*b2^2*x3*y1*z3 + 2*b2*b3*x3*y1*z3 + b1*b2*b3*x3*y1*z3 + a1*b1*b2*b3*x3*y1*z3 + a2*b1*b2*b3*x3*y1*z3 + b1*b2^2*b3*x3*y1*z3 + a1*y2*z3 + a2*b1*y2*z3 + a3*b1*y2*z3 + a1*a3*b1*y2*z3 + 2*a2*a3*b1*y2*z3 + b1^2*y2*z3 + a2*b1^2*y2*z3 + a1*a2*b1^2*y2*z3 + a1*b2*y2*z3 + a1*a3*b2*y2*z3 + b1*b2*y2*z3 + 2*a2*b1*b2*y2*z3 + a3*b1*b2*y2*z3 + a1*a3*b1*b2*y2*z3 + a2*a3*b1*b2*y2*z3 + a3*b1^2*b2*y2*z3 + a1*a3*b1^2*b2*y2*z3 + 2*b1*b2^2*y2*z3 + a2*b1*b2^2*y2*z3 + b1^2*b2^2*y2*z3 + a1*b1^2*b2^2*y2*z3 + a1*a2*b3*y2*z3 + b1*b3*y2*z3 + a3*b1*b3*y2*z3 + a2*a3*b1*b3*y2*z3 + b1^2*b3*y2*z3 + a1*b1^2*b3*y2*z3 + a1*b2*b3*y2*z3 + a1*a2*b2*b3*y2*z3 + b1*b2*b3*y2*z3 + a1*b1*b2*b3*y2*z3 + a2*b1*b2*b3*y2*z3 + 2*a1*a2*b1*b2*b3*y2*z3 + a3*b1*b2*b3*y2*z3 + a1*b2^2*b3*y2*z3 + a1*a2*b2^2*b3*y2*z3 + a1*b1*b2^2*b3*y2*z3 + a2*b1*b2^2*b3*y2*z3 + a3*b1*b2^2*b3*y2*z3 + x1*y2*z3 + a1*x1*y2*z3 + a1*a2*x1*y2*z3 + a3*x1*y2*z3 + a2*a3*x1*y2*z3 + a2*b1*x1*y2*z3 + a1*a2*b1*x1*y2*z3 + a3*b1*x1*y2*z3 + b1^2*x1*y2*z3 + a2*b1^2*x1*y2*z3 + a1*a2*b1^2*x1*y2*z3 + a2*b2*x1*y2*z3 + a1*a2*b2*x1*y2*z3 + a1*a3*b2*x1*y2*z3 + b1*b2*x1*y2*z3 + a1*b1*b2*x1*y2*z3 + a1*a2*b1*b2*x1*y2*z3 + a3*b1*b2*x1*y2*z3 + a2*a3*b1*b2*x1*y2*z3 + a1*b1^2*b2*x1*y2*z3 + a2*b1^2*b2*x1*y2*z3 + a3*b1^2*b2*x1*y2*z3 + b2^2*x1*y2*z3 + a1*b2^2*x1*y2*z3 + a3*b2^2*x1*y2*z3 + a1*a3*b2^2*x1*y2*z3 + a1*b1*b2^2*x1*y2*z3 + b1^2*b2^2*x1*y2*z3 + a3*b1^2*b2^2*x1*y2*z3 + b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + 2*b1*b3*x1*y2*z3 + a1*b1*b3*x1*y2*z3 + a2*b1*b3*x1*y2*z3 + a1*a2*b1*b3*x1*y2*z3 + b1^2*b3*x1*y2*z3 + a1*b1^2*b3*x1*y2*z3 + 2*b2*b3*x1*y2*z3 + a2*b2*b3*x1*y2*z3 + a1*a2*b2*b3*x1*y2*z3 + a3*b2*b3*x1*y2*z3 + b1*b2*b3*x1*y2*z3 + 3*a1*b1*b2*b3*x1*y2*z3 + a2*b1*b2*b3*x1*y2*z3 + a2*b1^2*b2*b3*x1*y2*z3 + b3^2*x1*y2*z3 + b2*b3^2*x1*y2*z3 + a1*x2*y2*z3 + b1*x2*y2*z3 + a1*b1*x2*y2*z3 + a2*b1*x2*y2*z3 + b1^2*x2*y2*z3 + a1*b2*x2*y2*z3 + 3*b1*b2*x2*y2*z3 + 2*a2*b1*b2*x2*y2*z3 + b1^2*b2*x2*y2*z3 + 2*b1*b2^2*x2*y2*z3 + a1*b3*x2*y2*z3 + 2*b1*b3*x2*y2*z3 + a1*b1*b3*x2*y2*z3 + a2*b1*b3*x2*y2*z3 + b1^2*b3*x2*y2*z3 + 2*a1*b2*b3*x2*y2*z3 + 2*b1*b2*b3*x2*y2*z3 + 2*b1*x3*y2*z3 + 2*a2*b1*x3*y2*z3 + a1*b1*b2*x3*y2*z3 + a2*b1*b2*x3*y2*z3 + b1^2*b2*x3*y2*z3 + a1*b1^2*b2*x3*y2*z3 + a1*b2^2*x3*y2*z3 + a1*b1*b2^2*x3*y2*z3 + a2*b1*b2^2*x3*y2*z3 + b1*b3*x3*y2*z3 + a1*b1*b3*x3*y2*z3 + a2*b1*b3*x3*y2*z3 + a1*b2*b3*x3*y2*z3 + b1*b2*b3*x3*y2*z3 + a1*b1*b2*b3*x3*y2*z3 + a2*b1*b2*b3*x3*y2*z3 + a1*b2^2*b3*x3*y2*z3 + y1*y2*z3 + a1*a2*y1*y2*z3 + a3*y1*y2*z3 + a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a1*b1*y1*y2*z3 + 2*a2*b1*y1*y2*z3 + a1*a2*b1*y1*y2*z3 + a3*b1*y1*y2*z3 + b1^2*y1*y2*z3 + a1*a2*b1^2*y1*y2*z3 + 2*b2*y1*y2*z3 + a1*b2*y1*y2*z3 + a2*b2*y1*y2*z3 + a1*a2*b2*y1*y2*z3 + a3*b2*y1*y2*z3 + a1*a3*b2*y1*y2*z3 + 3*b1*b2*y1*y2*z3 + a1*b1*b2*y1*y2*z3 + a2*b1*b2*y1*y2*z3 + a1*a2*b1*b2*y1*y2*z3 + a3*b1*b2*y1*y2*z3 + a2*a3*b1*b2*y1*y2*z3 + b1^2*b2*y1*y2*z3 + a1*b1^2*b2*y1*y2*z3 + 2*a2*b1^2*b2*y1*y2*z3 + a3*b1^2*b2*y1*y2*z3 + b2^2*y1*y2*z3 + a1*b2^2*y1*y2*z3 + a1*a3*b2^2*y1*y2*z3 + b1*b2^2*y1*y2*z3 + a1*b1*b2^2*y1*y2*z3 + a3*b1^2*b2^2*y1*y2*z3 + b3*y1*y2*z3 + a2*b3*y1*y2*z3 + a3*b3*y1*y2*z3 + 3*b1*b3*y1*y2*z3 + 2*a1*b1*b3*y1*y2*z3 + a2*b1*b3*y1*y2*z3 + a1*a2*b1*b3*y1*y2*z3 + b1^2*b3*y1*y2*z3 + a1*b1^2*b3*y1*y2*z3 + a2*b1^2*b3*y1*y2*z3 + b2*b3*y1*y2*z3 + 2*a1*b2*b3*y1*y2*z3 + 2*a2*b2*b3*y1*y2*z3 + a1*a2*b2*b3*y1*y2*z3 + a3*b2*b3*y1*y2*z3 + 2*b1*b2*b3*y1*y2*z3 + 3*a1*b1*b2*b3*y1*y2*z3 + a2*b1*b2*b3*y1*y2*z3 + b1^2*b2*b3*y1*y2*z3 + a2*b1^2*b2*b3*y1*y2*z3 + b3^2*y1*y2*z3 + b2*b3^2*y1*y2*z3 + a2*a3*b1*y3*z3 + a1*a2*b2*y3*z3 + 2*a1*b1*b2*y3*z3 + 2*a1*a3*b1*b2*y3*z3 + b1^2*b2*y3*z3 + a3*b1^2*b2*y3*z3 + a1*a3*b2^2*y3*z3 + b1*b2^2*y3*z3 + a1*b1*b2^2*y3*z3 + a1*a2*b3*y3*z3 + a2*a3*b1*b3*y3*z3 + a1*b1*b2*b3*y3*z3 + a3*b1*b2^2*b3*y3*z3 + a2*b2*x1*y3*z3 + a1*a3*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + a2*b1*b2*x1*y3*z3 + a1*b1^2*b2*x1*y3*z3 + a2*b1^2*b2*x1*y3*z3 + a3*b1^2*b2*x1*y3*z3 + b2^2*x1*y3*z3 + a1*b2^2*x1*y3*z3 + a2*b2^2*x1*y3*z3 + b1*b2^2*x1*y3*z3 + a1*b1*b2^2*x1*y3*z3 + a2*b1*b2^2*x1*y3*z3 + b1^2*b2^2*x1*y3*z3 + b2*b3*x1*y3*z3 + b1*b2*b3*x1*y3*z3 + a1*b1*b2*b3*x1*y3*z3 + a2*b1*b2*b3*x1*y3*z3 + a1*x2*y3*z3 + 2*a1*b1*x2*y3*z3 + a1*b1^2*x2*y3*z3 + 2*a1*b2*x2*y3*z3 + 3*a1*b1*b2*x2*y3*z3 + a2*b1*b2*x2*y3*z3 + a1*b1^2*b2*x2*y3*z3 + a1*b2^2*x2*y3*z3 + a1*b1*b2^2*x2*y3*z3 + a2*b1*b2^2*x2*y3*z3 + a1*b3*x2*y3*z3 + b1*b3*x2*y3*z3 + 2*a1*b1*b3*x2*y3*z3 + a2*b1*b3*x2*y3*z3 + a1*b1^2*b3*x2*y3*z3 + a1*b2*b3*x2*y3*z3 + 2*b1*b2*b3*x2*y3*z3 + a1*b1*b2*b3*x2*y3*z3 + a2*b1*b2*b3*x2*y3*z3 + b1*b2^2*b3*x2*y3*z3 + 2*a2*b1*x3*y3*z3 + b1^2*b2*x3*y3*z3 + 2*b1*b2*b3*x3*y3*z3 + a2*b2*y1*y3*z3 + a3*b2*y1*y3*z3 + a1*a3*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + b1*b2*y1*y3*z3 + a2*b1*b2*y1*y3*z3 + b1^2*b2*y1*y3*z3 + a1*b1^2*b2*y1*y3*z3 + a2*b1^2*b2*y1*y3*z3 + a3*b1^2*b2*y1*y3*z3 + a1*b2^2*y1*y3*z3 + a2*b2^2*y1*y3*z3 + 2*b1*b2^2*y1*y3*z3 + a1*b1*b2^2*y1*y3*z3 + a2*b1*b2^2*y1*y3*z3 + b2*b3*y1*y3*z3 + 2*b1*b2*b3*y1*y3*z3 + a1*b1*b2*b3*y1*y3*z3 + a2*b1*b2*b3*y1*y3*z3 + b1^2*b2*b3*y1*y3*z3 + a1*y2*y3*z3 + 2*b1*y2*y3*z3 + 2*a1*b1*y2*y3*z3 + 2*a2*b1*y2*y3*z3 + b1^2*y2*y3*z3 + a1*b1^2*y2*y3*z3 + 2*a1*b2*y2*y3*z3 + 2*b1*b2*y2*y3*z3 + 3*a1*b1*b2*y2*y3*z3 + a2*b1*b2*y2*y3*z3 + b1^2*b2*y2*y3*z3 + a1*b1^2*b2*y2*y3*z3 + a1*b2^2*y2*y3*z3 + a1*b1*b2^2*y2*y3*z3 + a2*b1*b2^2*y2*y3*z3 + a1*b3*y2*y3*z3 + 2*b1*b3*y2*y3*z3 + 2*a1*b1*b3*y2*y3*z3 + a2*b1*b3*y2*y3*z3 + b1^2*b3*y2*y3*z3 + a1*b1^2*b3*y2*y3*z3 + a1*b2*b3*y2*y3*z3 + 2*b1*b2*b3*y2*y3*z3 + a1*b1*b2*b3*y2*y3*z3 + a2*b1*b2*b3*y2*y3*z3 + b1*b2^2*b3*y2*y3*z3 + a1*a2*b1*z1*z3 + a2*b1^2*z1*z3 + a2*a3*b1^2*z1*z3 + a1*b2*z1*z3 + a2*b2*z1*z3 + a1*a2*b2*z1*z3 + 2*a1*a3*b2*z1*z3 + a2*a3*b2*z1*z3 + 2*a1*b1*b2*z1*z3 + 3*a2*b1*b2*z1*z3 + 2*a3*b1*b2*z1*z3 + b1^2*b2*z1*z3 + a2*b1^2*b2*z1*z3 + a3*b1^2*b2*z1*z3 + a1*b2^2*z1*z3 + a2*b2^2*z1*z3 + a3*b1*b2^2*z1*z3 + b1^2*b2^2*z1*z3 + a1*a3*b2*b3*z1*z3 + a2*a3*b2*b3*z1*z3 + b1*b2*b3*z1*z3 + a1*b1*b2*b3*z1*z3 + a2*b1*b2*b3*z1*z3 + 2*a3*b1*b2*b3*z1*z3 + b1^2*b2*b3*z1*z3 + a2*b1^2*b2*b3*z1*z3 + a1*b2^2*b3*z1*z3 + a3*b2^2*b3*z1*z3 + a3*b1*b2^2*b3*z1*z3 + b2*x1*z1*z3 + a1*b2*x1*z1*z3 + 2*a3*b2*x1*z1*z3 + a1*a3*b2*x1*z1*z3 + a2*a3*b2*x1*z1*z3 + 2*a1*b1*b2*x1*z1*z3 + 2*a2*b1*b2*x1*z1*z3 + a3*b1*b2*x1*z1*z3 + b1^2*b2*x1*z1*z3 + a3*b1*b2^2*x1*z1*z3 + a2*b3*x1*z1*z3 + a2*b1*b3*x1*z1*z3 + b2*b3*x1*z1*z3 + a1*b2*b3*x1*z1*z3 + a2*b2*b3*x1*z1*z3 + b1*b2*b3*x1*z1*z3 + a1*b1*b2*b3*x1*z1*z3 + a2*b1*b2*b3*x1*z1*z3 + x2*z1*z3 + a1*x2*z1*z3 + a2*x2*z1*z3 + a3*x2*z1*z3 + a2*a3*x2*z1*z3 + 2*b1*x2*z1*z3 + 2*a1*b1*x2*z1*z3 + a2*b1*x2*z1*z3 + a1*a2*b1*x2*z1*z3 + a3*b1*x2*z1*z3 + b1^2*x2*z1*z3 + a1*a2*b1^2*x2*z1*z3 + b2*x2*z1*z3 + a1*b2*x2*z1*z3 + 2*a2*b2*x2*z1*z3 + 2*a1*a2*b2*x2*z1*z3 + a3*b2*x2*z1*z3 + a1*a3*b2*x2*z1*z3 + a2*a3*b2*x2*z1*z3 + b1*b2*x2*z1*z3 + 2*a1*b1*b2*x2*z1*z3 + 2*a2*b1*b2*x2*z1*z3 + a1*a2*b1*b2*x2*z1*z3 + 3*a3*b1*b2*x2*z1*z3 + a2*a3*b1*b2*x2*z1*z3 + 2*a1*b1^2*b2*x2*z1*z3 + a2*b1^2*b2*x2*z1*z3 + a3*b1^2*b2*x2*z1*z3 + a1*a3*b2^2*x2*z1*z3 + a1*b1*b2^2*x2*z1*z3 + a3*b1*b2^2*x2*z1*z3 + b1^2*b2^2*x2*z1*z3 + a3*b1^2*b2^2*x2*z1*z3 + b3*x2*z1*z3 + a1*b3*x2*z1*z3 + a2*b3*x2*z1*z3 + a3*b3*x2*z1*z3 + b1*b3*x2*z1*z3 + 2*a1*b1*b3*x2*z1*z3 + 2*a2*b1*b3*x2*z1*z3 + a1*a2*b1*b3*x2*z1*z3 + b1^2*b3*x2*z1*z3 + a1*b1^2*b3*x2*z1*z3 + 2*b2*b3*x2*z1*z3 + a1*b2*b3*x2*z1*z3 + a2*b2*b3*x2*z1*z3 + a1*a2*b2*b3*x2*z1*z3 + a3*b2*b3*x2*z1*z3 + 3*b1*b2*b3*x2*z1*z3 + 3*a1*b1*b2*b3*x2*z1*z3 + 2*a2*b1*b2*b3*x2*z1*z3 + b1^2*b2*b3*x2*z1*z3 + a2*b1^2*b2*b3*x2*z1*z3 + b3^2*x2*z1*z3 + b2*b3^2*x2*z1*z3 + a2*b1*x3*z1*z3 + b2*x3*z1*z3 + a1*b2*x3*z1*z3 + a2*b2*x3*z1*z3 + a1*a3*b2*x3*z1*z3 + a2*a3*b2*x3*z1*z3 + 3*b1*b2*x3*z1*z3 + 2*a1*b1*b2*x3*z1*z3 + a2*b1*b2*x3*z1*z3 + 2*a3*b1*b2*x3*z1*z3 + a1*b1^2*b2*x3*z1*z3 + a2*b1^2*b2*x3*z1*z3 + a3*b1^2*b2*x3*z1*z3 + b2^2*x3*z1*z3 + a3*b2^2*x3*z1*z3 + b1*b2^2*x3*z1*z3 + a1*b1*b2^2*x3*z1*z3 + a2*b1*b2^2*x3*z1*z3 + 2*b2*b3*x3*z1*z3 + b1*b2*b3*x3*z1*z3 + a1*b1*b2*b3*x3*z1*z3 + a2*b1*b2*b3*x3*z1*z3 + b1^2*b2*b3*x3*z1*z3 + b2^2*b3*x3*z1*z3 + b1*b2^2*b3*x3*z1*z3 + 2*b2*y1*z1*z3 + 2*a1*b2*y1*z1*z3 + 2*a2*b2*y1*z1*z3 + 2*a3*b2*y1*z1*z3 + a1*a3*b2*y1*z1*z3 + a2*a3*b2*y1*z1*z3 + 4*b1*b2*y1*z1*z3 + 2*a1*b1*b2*y1*z1*z3 + 2*a2*b1*b2*y1*z1*z3 + 2*a3*b1*b2*y1*z1*z3 + b1^2*b2*y1*z1*z3 + a3*b2^2*y1*z1*z3 + a3*b1*b2^2*y1*z1*z3 + a2*b3*y1*z1*z3 + a2*b1*b3*y1*z1*z3 + 2*b2*b3*y1*z1*z3 + 3*b1*b2*b3*y1*z1*z3 + a1*b1*b2*b3*y1*z1*z3 + a2*b1*b2*b3*y1*z1*z3 + b1^2*b2*b3*y1*z1*z3 + y2*z1*z3 + a1*y2*z1*z3 + a2*y2*z1*z3 + a2*a3*y2*z1*z3 + 2*b1*y2*z1*z3 + a1*b1*y2*z1*z3 + a2*b1*y2*z1*z3 + a1*a2*b1*y2*z1*z3 + a3*b1*y2*z1*z3 + a1*b1^2*y2*z1*z3 + a2*b1^2*y2*z1*z3 + a1*a2*b1^2*y2*z1*z3 + 2*b2*y2*z1*z3 + a1*b2*y2*z1*z3 + 2*a1*a2*b2*y2*z1*z3 + a3*b2*y2*z1*z3 + a1*a3*b2*y2*z1*z3 + a2*a3*b2*y2*z1*z3 + 3*a1*b1*b2*y2*z1*z3 + a2*b1*b2*y2*z1*z3 + a1*a2*b1*b2*y2*z1*z3 + 2*a3*b1*b2*y2*z1*z3 + a2*a3*b1*b2*y2*z1*z3 + b1^2*b2*y2*z1*z3 + 2*a1*b1^2*b2*y2*z1*z3 + a2*b1^2*b2*y2*z1*z3 + a3*b1^2*b2*y2*z1*z3 + a3*b2^2*y2*z1*z3 + a1*a3*b2^2*y2*z1*z3 + b1*b2^2*y2*z1*z3 + a1*b1*b2^2*y2*z1*z3 + a3*b1*b2^2*y2*z1*z3 + b1^2*b2^2*y2*z1*z3 + a3*b1^2*b2^2*y2*z1*z3 + b3*y2*z1*z3 + a1*b3*y2*z1*z3 + a2*b3*y2*z1*z3 + a3*b3*y2*z1*z3 + 2*b1*b3*y2*z1*z3 + a1*b1*b3*y2*z1*z3 + a2*b1*b3*y2*z1*z3 + a1*a2*b1*b3*y2*z1*z3 + a1*b1^2*b3*y2*z1*z3 + b2*b3*y2*z1*z3 + 2*a2*b2*b3*y2*z1*z3 + a1*a2*b2*b3*y2*z1*z3 + a3*b2*b3*y2*z1*z3 + 2*b1*b2*b3*y2*z1*z3 + 3*a1*b1*b2*b3*y2*z1*z3 + 2*a2*b1*b2*b3*y2*z1*z3 + a2*b1^2*b2*b3*y2*z1*z3 + b3^2*y2*z1*z3 + b2*b3^2*y2*z1*z3 + a1*a3*b2*y3*z1*z3 + a2*a3*b2*y3*z1*z3 + a1*b1*b2*y3*z1*z3 + 2*a2*b1*b2*y3*z1*z3 + a3*b1*b2*y3*z1*z3 + a1*b1^2*b2*y3*z1*z3 + a2*b1^2*b2*y3*z1*z3 + a3*b1^2*b2*y3*z1*z3 + a1*b2^2*y3*z1*z3 + a2*b2^2*y3*z1*z3 + 2*b1*b2^2*y3*z1*z3 + a1*b1*b2^2*y3*z1*z3 + a2*b1*b2^2*y3*z1*z3 + b1^2*b2^2*y3*z1*z3 + b1*b2*b3*y3*z1*z3 + a1*b1*b2*b3*y3*z1*z3 + a2*b1*b2*b3*y3*z1*z3 + a1*a2*b1*z2*z3 + a1*b1^2*z2*z3 + a1*a2*b1^2*z2*z3 + a3*b1^2*z2*z3 + a1*a3*b1^2*z2*z3 + a2*a3*b1^2*z2*z3 + 2*a1*b1*b2*z2*z3 + a2*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + 2*b1^2*b2*z2*z3 + a1*b1^2*b2*z2*z3 + 2*a2*b1^2*b2*z2*z3 + a3*b1^2*b2*z2*z3 + a1*a3*b1^2*b2*z2*z3 + b1*b2^2*z2*z3 + a3*b1*b2^2*z2*z3 + a1*b1^2*b2^2*z2*z3 + a1*b1*b3*z2*z3 + b1^2*b3*z2*z3 + a1*b1^2*b3*z2*z3 + a1*a2*b2*b3*z2*z3 + a2*b1*b2*b3*z2*z3 + 2*a1*a2*b1*b2*b3*z2*z3 + b1^2*b2*b3*z2*z3 + a1*a2*b2^2*b3*z2*z3 + b1*b2^2*b3*z2*z3 + a2*b1*b2^2*b3*z2*z3 + a3*b1*b2^2*b3*z2*z3 + a1*x1*z2*z3 + a1*a2*x1*z2*z3 + a2*a3*x1*z2*z3 + b1*x1*z2*z3 + 2*a1*b1*x1*z2*z3 + a2*b1*x1*z2*z3 + a1*a2*b1*x1*z2*z3 + b1^2*x1*z2*z3 + a1*b1^2*x1*z2*z3 + a1*a2*b1^2*x1*z2*z3 + 2*a1*b2*x1*z2*z3 + a2*b2*x1*z2*z3 + a1*a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + a2*a3*b2*x1*z2*z3 + 2*b1*b2*x1*z2*z3 + a2*b1*b2*x1*z2*z3 + a1*a2*b1*b2*x1*z2*z3 + 2*a3*b1*b2*x1*z2*z3 + a2*a3*b1*b2*x1*z2*z3 + a1*b1^2*b2*x1*z2*z3 + a2*b1^2*b2*x1*z2*z3 + b2^2*x1*z2*z3 + a1*b2^2*x1*z2*z3 + a1*a3*b2^2*x1*z2*z3 + b1*b2^2*x1*z2*z3 + a1*b1*b2^2*x1*z2*z3 + b1^2*b2^2*x1*z2*z3 + a3*b1^2*b2^2*x1*z2*z3 + b3*x1*z2*z3 + a2*b3*x1*z2*z3 + 2*b1*b3*x1*z2*z3 + 2*a1*b1*b3*x1*z2*z3 + 2*a2*b1*b3*x1*z2*z3 + a1*a2*b1*b3*x1*z2*z3 + a1*b1^2*b3*x1*z2*z3 + b2*b3*x1*z2*z3 + a2*b2*b3*x1*z2*z3 + a1*a2*b2*b3*x1*z2*z3 + a3*b2*b3*x1*z2*z3 + 2*b1*b2*b3*x1*z2*z3 + 3*a1*b1*b2*b3*x1*z2*z3 + a2*b1*b2*b3*x1*z2*z3 + a2*b1^2*b2*b3*x1*z2*z3 + b2*b3^2*x1*z2*z3 + a1*x2*z2*z3 + b1*x2*z2*z3 + a1*b1*x2*z2*z3 + a2*b1*x2*z2*z3 + a2*b1^2*x2*z2*z3 + a1*b2*x2*z2*z3 + a1*b1*b2*x2*z2*z3 + a2*b1*b2*x2*z2*z3 + b1^2*b2*x2*z2*z3 + a2*b1^2*b2*x2*z2*z3 + b1*b2^2*x2*z2*z3 + b1^2*b2^2*x2*z2*z3 + a1*a2*b3*x2*z2*z3 + 2*b1*b3*x2*z2*z3 + a1*b1*b3*x2*z2*z3 + a2*b1*b3*x2*z2*z3 + b1^2*b3*x2*z2*z3 + a1*b2*b3*x2*z2*z3 + b1*b2*b3*x2*z2*z3 + a1*b1*b2*b3*x2*z2*z3 + b1^2*b2*b3*x2*z2*z3 + b1^2*x3*z2*z3 + a1*b1^2*x3*z2*z3 + a2*b1^2*x3*z2*z3 + b1*b2*x3*z2*z3 + a1*b1*b2*x3*z2*z3 + a2*b1*b2*x3*z2*z3 + b1^2*b2*x3*z2*z3 + a1*b1^2*b2*x3*z2*z3 + b1*b2^2*x3*z2*z3 + a1*b1*b2^2*x3*z2*z3 + a2*b1*b2^2*x3*z2*z3 + b1*b2*b3*x3*z2*z3 + a1*b1*b2*b3*x3*z2*z3 + a2*b1*b2*b3*x3*z2*z3 + a1*b2^2*b3*x3*z2*z3 + y1*z2*z3 + a1*a2*y1*z2*z3 + a2*a3*y1*z2*z3 + a1*b1*y1*z2*z3 + a1*a2*b1*y1*z2*z3 + b1^2*y1*z2*z3 + a1*b1^2*y1*z2*z3 + a2*b1^2*y1*z2*z3 + a1*a2*b1^2*y1*z2*z3 + b2*y1*z2*z3 + a1*b2*y1*z2*z3 + a2*b2*y1*z2*z3 + a1*a2*b2*y1*z2*z3 + a3*b2*y1*z2*z3 + a2*a3*b2*y1*z2*z3 + b1*b2*y1*z2*z3 + a1*a2*b1*b2*y1*z2*z3 + 2*a3*b1*b2*y1*z2*z3 + a2*a3*b1*b2*y1*z2*z3 + b1^2*b2*y1*z2*z3 + a1*b1^2*b2*y1*z2*z3 + 2*a2*b1^2*b2*y1*z2*z3 + b2^2*y1*z2*z3 + a1*b2^2*y1*z2*z3 + a3*b2^2*y1*z2*z3 + a1*a3*b2^2*y1*z2*z3 + a1*b1*b2^2*y1*z2*z3 + a3*b1^2*b2^2*y1*z2*z3 + b3*y1*z2*z3 + a2*b3*y1*z2*z3 + a1*b1*b3*y1*z2*z3 + a1*a2*b1*b3*y1*z2*z3 + b1^2*b3*y1*z2*z3 + a1*b1^2*b3*y1*z2*z3 + a2*b1^2*b3*y1*z2*z3 + b2*b3*y1*z2*z3 + 2*a1*b2*b3*y1*z2*z3 + 2*a2*b2*b3*y1*z2*z3 + a1*a2*b2*b3*y1*z2*z3 + a3*b2*b3*y1*z2*z3 + 2*b1*b2*b3*y1*z2*z3 + 3*a1*b1*b2*b3*y1*z2*z3 + a2*b1*b2*b3*y1*z2*z3 + b1^2*b2*b3*y1*z2*z3 + a2*b1^2*b2*b3*y1*z2*z3 + b2*b3^2*y1*z2*z3 + a2*b1^2*y2*z2*z3 + b1*b2*y2*z2*z3 + a1*b1*b2*y2*z2*z3 + a2*b1*b2*y2*z2*z3 + b1^2*b2*y2*z2*z3 + a2*b1^2*b2*y2*z2*z3 + b1*b2^2*y2*z2*z3 + b1^2*b2^2*y2*z2*z3 + a1*a2*b3*y2*z2*z3 + a1*b2*b3*y2*z2*z3 + a1*b1*b2*b3*y2*z2*z3 + b1^2*b2*b3*y2*z2*z3 + a2*b1^2*y3*z2*z3 + b1*b2*y3*z2*z3 + a1*b1*b2*y3*z2*z3 + a2*b1*b2*y3*z2*z3 + 2*b1^2*b2*y3*z2*z3 + a1*b1^2*b2*y3*z2*z3 + b1*b2^2*y3*z2*z3 + a1*b1*b2^2*y3*z2*z3 + a2*b1*b2^2*y3*z2*z3 + a1*b1*b3*y3*z2*z3 + a1*b1^2*b3*y3*z2*z3 + b1*b2*b3*y3*z2*z3 + a1*b1*b2*b3*y3*z2*z3 + a2*b1*b2*b3*y3*z2*z3 + b1^2*b2*b3*y3*z2*z3 + a2*a3*z1*z2*z3 + a1*b1*z1*z2*z3 + a2*b1*z1*z2*z3 + a1*a2*b1*z1*z2*z3 + b1^2*z1*z2*z3 + a1*b1^2*z1*z2*z3 + a2*b1^2*z1*z2*z3 + a1*a2*b1^2*z1*z2*z3 + b2*z1*z2*z3 + 2*a1*b2*z1*z2*z3 + a2*b2*z1*z2*z3 + 2*a1*a2*b2*z1*z2*z3 + a3*b2*z1*z2*z3 + b1*b2*z1*z2*z3 + 3*a1*b1*b2*z1*z2*z3 + a2*b1*b2*z1*z2*z3 + a1*a2*b1*b2*z1*z2*z3 + 2*a3*b1*b2*z1*z2*z3 + a2*a3*b1*b2*z1*z2*z3 + 2*b1^2*b2*z1*z2*z3 + 2*a1*b1^2*b2*z1*z2*z3 + a2*b1^2*b2*z1*z2*z3 + b2^2*z1*z2*z3 + a1*a3*b2^2*z1*z2*z3 + b1*b2^2*z1*z2*z3 + a1*b1*b2^2*z1*z2*z3 + a3*b1*b2^2*z1*z2*z3 + b1^2*b2^2*z1*z2*z3 + a3*b1^2*b2^2*z1*z2*z3 + b1*b3*z1*z2*z3 + 2*a1*b1*b3*z1*z2*z3 + 2*a2*b1*b3*z1*z2*z3 + a1*a2*b1*b3*z1*z2*z3 + b1^2*b3*z1*z2*z3 + a1*b1^2*b3*z1*z2*z3 + 2*b2*b3*z1*z2*z3 + 2*a2*b2*b3*z1*z2*z3 + a1*a2*b2*b3*z1*z2*z3 + a3*b2*b3*z1*z2*z3 + 4*b1*b2*b3*z1*z2*z3 + 3*a1*b1*b2*b3*z1*z2*z3 + 2*a2*b1*b2*b3*z1*z2*z3 + a2*b1^2*b2*b3*z1*z2*z3 + b2*b3^2*z1*z2*z3 + (a2*b1*z3*(1 + z3))/2 + (a1*a2*b1*z3*(1 + z3))/2 + (a2*b1^2*z3*(1 + z3))/2 + (a1*b2*z3*(1 + z3))/2 + (a1*a2*b2*z3*(1 + z3))/2 + 2*b1*b2*z3*(1 + z3) + a1*b1*b2*z3*(1 + z3) + a2*b1*b2*z3*(1 + z3) + (b1^2*b2*z3*(1 + z3))/2 + (b1*b2^2*z3*(1 + z3))/2 + (b1^2*b2^2*z3*(1 + z3))/2 + (a1*a2*b3*z3*(1 + z3))/2 + (a2*b1*b3*z3*(1 + z3))/2 + b1*b2*b3*z3*(1 + z3) + (a1*b1*b2*b3*z3*(1 + z3))/2 + (a2*b1*b2*b3*z3*(1 + z3))/2 + (a3*b1*b2*b3*z3*(1 + z3))/2;
end;
#####################################################################
C2in82:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];
return a2*a3*x1 + 3*a2*a3*b1*x1 + a3*b2*x1 + 3*a1*a3*b2*x1 + 3*a2*a3*b2*x1 + a3*b1*b2*x1 + 2*a3*b1^2*b2*x1 + a3*b1*b2^2*x1 + a2*b3*x1 + a2*b1*b3*x1 + b2*b3*x1 + a1*b2*b3*x1 + 2*a2*b2*b3*x1 + a3*b2*b3*x1 + b1*b2*b3*x1 + 3*a1*b1*b2*b3*x1 + b2^2*b3*x1 + b1*b2^2*b3*x1 + (a2*a3*x1*(1 + x1))/2 + (a3*b2*x1*(1 + x1))/2 + (a3*b1*b2*x1*(1 + x1))/2 + (a3*b2^2*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + (b2*b3*x1*(1 + x1))/2 + (a1*b2*b3*x1*(1 + x1))/2 + b1*b2*b3*x1*(1 + x1) + (b1^2*b2*b3*x1*(1 + x1))/2 + b1*b2*b3*x1^2*(1 + x1) + (b2^2*b3*x1^2*(1 + x1))/2 + 2*a3*b1*x2 + 2*a1*a3*b1*x2 + a3*b1^2*x2 + 2*a1*a3*b2*x2 + 2*a3*b1*b2*x2 + 2*a1*a3*b1*b2*x2 + a3*b1^2*b2*x2 + a1*b3*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + b1*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + 2*a3*b1*b3*x2 + a1*a3*b1*b3*x2 + a1*b1^2*b3*x2 + a3*b1^2*b3*x2 + a1*b2*b3*x2 + b1*b2*b3*x2 + b1^2*b2*b3*x2 + a1*b1^2*b2*b3*x2 + a1*b2^2*b3*x2 + b1*b2^2*b3*x2 + a1*b1*b2^2*b3*x2 + a3*x1*x2 + 2*a1*a3*x1*x2 + a2*a3*x1*x2 + 2*a3*b1*x1*x2 + a1*a3*b1*x1*x2 + 2*a3*b1^2*x1*x2 + a1*a3*b1^2*x1*x2 + 2*a3*b2*x1*x2 + 2*a1*a3*b2*x1*x2 + 4*a3*b1*b2*x1*x2 + 2*a1*a3*b1*b2*x1*x2 + a3*b1^2*b2*x1*x2 + a3*b2^2*x1*x2 + a3*b1*b2^2*x1*x2 + a1*b3*x1*x2 + 2*a2*b3*x1*x2 + a1*a2*b3*x1*x2 + a3*b3*x1*x2 + a1*a3*b3*x1*x2 + 3*b1*b3*x1*x2 + 2*a1*b1*b3*x1*x2 + 4*a2*b1*b3*x1*x2 + 2*a1*a2*b1*b3*x1*x2 + 3*a3*b1*b3*x1*x2 + a1*a3*b1*b3*x1*x2 + b1^2*b3*x1*x2 + a1*b1^2*b3*x1*x2 + a3*b1^2*b3*x1*x2 + b2*b3*x1*x2 + 2*a1*b2*b3*x1*x2 + b1*b2*b3*x1*x2 + 2*a1*b1*b2*b3*x1*x2 + 2*a2*b1*b2*b3*x1*x2 + a3*b1*b2*b3*x1*x2 + b2^2*b3*x1*x2 + b1*b2^2*b3*x1*x2 + a1*b1*b2^2*b3*x1*x2 + (a1*b3*x1*(1 + x1)*x2)/2 + (a1*a2*b3*x1*(1 + x1)*x2)/2 + (b1*b3*x1*(1 + x1)*x2)/2 + (a1*b1*b3*x1*(1 + x1)*x2)/2 + (a1*b2*b3*x1*(1 + x1)*x2)/2 + (b1*b2*b3*x1*(1 + x1)*x2)/2 + (a1*b1*b2*b3*x1*(1 + x1)*x2)/2 + (b2^2*b3*x1*(1 + x1)*x2)/2 + (a3*b1*x2*(1 + x2))/2 + (a1*a3*b1*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a3*b1*b2*x2*(1 + x2))/2 + (a1*b3*x2*(1 + x2))/2 + (a1*a2*b3*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + (b1*b3*x2*(1 + x2))/2 + (a3*b1*b3*x2*(1 + x2))/2 + (b1^2*b3*x2*(1 + x2))/2 + (a1*b1^2*b3*x2*(1 + x2))/2 + (3*b1*b2*b3*x2*(1 + x2))/2 + (a1*b1*b2*b3*x2*(1 + x2))/2 + (a1*b2^2*b3*x2*(1 + x2))/2 + (a1*b3*x1*x2*(1 + x2))/2 + (a1*a2*b3*x1*x2*(1 + x2))/2 + (b1*b3*x1*x2*(1 + x2))/2 + (a1*b1*b3*x1*x2*(1 + x2))/2 + (a1*b2*b3*x1*x2*(1 + x2))/2 + b1*b2*b3*x1*x2*(1 + x2) + (a1*b1*b2*b3*x1*x2*(1 + x2))/2 + (b2^2*b3*x1*x2*(1 + x2))/2 + (b1*b2*b3*x2^2*(1 + x2))/2 + a2*b1*x3 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*b2*x3 + a1*a2*b2*x3 + 4*b1*b2*x3 + 2*a1*b1*b2*x3 + 2*a2*b1*b2*x3 + a1*a2*b1*b2*x3 + 2*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*b1^2*b2*x3 + a2*b1^2*b2*x3 + a1*b2^2*x3 + a1*a2*b2^2*x3 + b1*b2^2*x3 + 2*a1*b1*b2^2*x3 + a2*b1*b2^2*x3 + a3*b1*b2^2*x3 + a1*a2*b3*x3 + a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*b2*b3*x3 + a1*a2*b2*b3*x3 + a1*b1*b2*b3*x3 + 2*a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*a3*b1*b2*b3*x3 + b1*b2^2*b3*x3 + a1*b1*b2^2*b3*x3 + a2*b1*b2^2*b3*x3 + a3*b1*b2^2*b3*x3 + a2*x1*x3 + 2*a2*a3*x1*x3 + 2*a2*b1*x1*x3 + a1*a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a2*b1^2*x1*x3 + a2*a3*b1^2*x1*x3 + 2*b2*x1*x3 + a1*b2*x1*x3 + 2*a2*b2*x1*x3 + 2*a1*a2*b2*x1*x3 + 2*a3*b2*x1*x3 + a1*a3*b2*x1*x3 + 2*b1*b2*x1*x3 + 3*a1*b1*b2*x1*x3 + 4*a2*b1*b2*x1*x3 + a3*b1*b2*x1*x3 + 2*b1^2*b2*x1*x3 + 2*b2^2*x1*x3 + 2*a1*b2^2*x1*x3 + 2*a2*b2^2*x1*x3 + a3*b2^2*x1*x3 + b1^2*b2^2*x1*x3 + a2*b3*x1*x3 + a2*a3*b3*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + a2*b2*b3*x1*x3 + 2*a3*b2*b3*x1*x3 + a1*a3*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + b1*b2*b3*x1*x3 + a1*b1*b2*b3*x1*x3 + 2*a3*b1*b2*b3*x1*x3 + a2*b1^2*b2*b3*x1*x3 + a1*b2^2*b3*x1*x3 + 2*a3*b2^2*b3*x1*x3 + a3*b1*b2^2*b3*x1*x3 + (b1*b2*x1*(1 + x1)*x3)/2 + (b2^2*x1*(1 + x1)*x3)/2 + 2*b1*x2*x3 + a1*b1*x2*x3 + 2*a2*b1*x2*x3 + a3*b1*x2*x3 + a1*a3*b1*x2*x3 + a2*a3*b1*x2*x3 + 2*a1*b2*x2*x3 + a1*a3*b2*x2*x3 + b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a3*b1*b2*x2*x3 + a2*a3*b1*b2*x2*x3 + b1^2*b2*x2*x3 + a1*b1^2*b2*x2*x3 + a1*a3*b1^2*b2*x2*x3 + a1*a3*b2^2*x2*x3 + a1*b3*x2*x3 + a1*a2*b3*x2*x3 + b1*b3*x2*x3 + a1*b1*b3*x2*x3 + a2*b1*b3*x2*x3 + 2*a3*b1*b3*x2*x3 + a2*a3*b1*b3*x2*x3 + a1*a2*b2*b3*x2*x3 + 2*b1*b2*b3*x2*x3 + a1*b1*b2*b3*x2*x3 + 2*a2*b1*b2*b3*x2*x3 + 2*a1*a2*b1*b2*b3*x2*x3 + a1*a2*b2^2*b3*x2*x3 + b1*b2^2*b3*x2*x3 + a1*b1*b2^2*b3*x2*x3 + a2*b1*b2^2*b3*x2*x3 + a3*b1*b2^2*b3*x2*x3 + a2*a3*x1*x2*x3 + b1*x1*x2*x3 + a1*b1*x1*x2*x3 + 2*a2*b1*x1*x2*x3 + a1*a2*b1*x1*x2*x3 + a3*b1*x1*x2*x3 + a2*b1^2*x1*x2*x3 + a1*a2*b1^2*x1*x2*x3 + b2*x1*x2*x3 + a2*b2*x1*x2*x3 + a3*b2*x1*x2*x3 + a2*a3*b2*x1*x2*x3 + 3*b1*b2*x1*x2*x3 + a1*b1*b2*x1*x2*x3 + a2*b1*b2*x1*x2*x3 + a1*a2*b1*b2*x1*x2*x3 + a3*b1*b2*x1*x2*x3 + a2*a3*b1*b2*x1*x2*x3 + b1^2*b2*x1*x2*x3 + b2^2*x1*x2*x3 + a1*a3*b2^2*x1*x2*x3 + 2*b1*b2^2*x1*x2*x3 + a3*b1^2*b2^2*x1*x2*x3 + 2*a2*b3*x1*x2*x3 + a2*a3*b3*x1*x2*x3 + 2*b1*b3*x1*x2*x3 + a1*b1*b3*x1*x2*x3 + 2*a2*b1*b3*x1*x2*x3 + a1*a2*b1*b3*x1*x2*x3 + a1*b1^2*b3*x1*x2*x3 + 2*b2*b3*x1*x2*x3 + 4*a2*b2*b3*x1*x2*x3 + a1*a2*b2*b3*x1*x2*x3 + 2*a3*b2*b3*x1*x2*x3 + 3*b1*b2*b3*x1*x2*x3 + 2*a1*b1*b2*b3*x1*x2*x3 + a2*b1*b2*b3*x1*x2*x3 + a2*b1^2*b2*b3*x1*x2*x3 + 2*b2^2*b3*x1*x2*x3 + a2*b2^2*b3*x1*x2*x3 + b2*b3^2*x1*x2*x3 + (a2*b1*x3*(1 + x3))/2 + (a1*a2*b1*x3*(1 + x3))/2 + (a2*b1^2*x3*(1 + x3))/2 + (a1*a2*b2*x3*(1 + x3))/2 + b1*b2*x3*(1 + x3) + a1*b1*b2*x3*(1 + x3) + (a2*b1*b2*x3*(1 + x3))/2 + (a3*b1*b2*x3*(1 + x3))/2 + (a1*b2^2*x3*(1 + x3))/2 + (b1*b2^2*x3*(1 + x3))/2 + (b1^2*b2^2*x3*(1 + x3))/2 + (a1*a2*b3*x3*(1 + x3))/2 + (a2*b1*b3*x3*(1 + x3))/2 + (b1*b2*b3*x3*(1 + x3))/2 + (a1*b1*b2*b3*x3*(1 + x3))/2 + (a2*b1*b2*b3*x3*(1 + x3))/2 + (a3*b1*b2*b3*x3*(1 + x3))/2 + (b1*b2*x1*x3*(1 + x3))/2 + (b1^2*b2*x1*x3*(1 + x3))/2 + (b1*b2*b3*x1*x3*(1 + x3))/2 + (b2^2*b3*x1*x3*(1 + x3))/2 + (a1*a2*x2*x3*(1 + x3))/2 + (a1*a3*x2*x3*(1 + x3))/2 + (a1*b1*b2*x2*x3*(1 + x3))/2 + a2*a3*y1 + 3*a2*a3*b1*y1 + 3*a3*b2*y1 + 3*a1*a3*b2*y1 + 3*a2*a3*b2*y1 + a3*b1*b2*y1 + 2*a3*b1^2*b2*y1 + a3*b1*b2^2*y1 + a2*b3*y1 + a2*b1*b3*y1 + 2*b2*b3*y1 + a1*b2*b3*y1 + 2*a2*b2*b3*y1 + a3*b2*b3*y1 + b1*b2*b3*y1 + 3*a1*b1*b2*b3*y1 + b2^2*b3*y1 + b1*b2^2*b3*y1 + a2*a3*x1*y1 + 2*a3*b2*x1*y1 + a3*b1*b2*x1*y1 + a3*b2^2*x1*y1 + a2*b3*x1*y1 + 3*b2*b3*x1*y1 + a1*b2*b3*x1*y1 + b1*b2*b3*x1*y1 + b1^2*b2*b3*x1*y1 + b2^2*b3*x1*y1 + (a2*b3*x1*(1 + x1)*y1)/2 + (b2*b3*x1*(1 + x1)*y1)/2 + (b1*b2*b3*x1*(1 + x1)*y1)/2 + (b2^2*b3*x1*(1 + x1)*y1)/2 + a3*x2*y1 + 2*a1*a3*x2*y1 + a2*a3*x2*y1 + 2*a3*b1*x2*y1 + a1*a3*b1*x2*y1 + 2*a3*b1^2*x2*y1 + a1*a3*b1^2*x2*y1 + a3*b2*x2*y1 + 2*a1*a3*b2*x2*y1 + 3*a3*b1*b2*x2*y1 + 2*a1*a3*b1*b2*x2*y1 + a3*b1^2*b2*x2*y1 + a3*b2^2*x2*y1 + a3*b1*b2^2*x2*y1 + 2*b3*x2*y1 + 2*a1*b3*x2*y1 + a1*a2*b3*x2*y1 + a3*b3*x2*y1 + a1*a3*b3*x2*y1 + 2*b1*b3*x2*y1 + 2*a1*b1*b3*x2*y1 + 2*a2*b1*b3*x2*y1 + 2*a1*a2*b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a1*a3*b1*b3*x2*y1 + 2*a1*b1^2*b3*x2*y1 + a3*b1^2*b3*x2*y1 + b2*b3*x2*y1 + 2*a1*b2*b3*x2*y1 + 3*b1*b2*b3*x2*y1 + 2*a1*b1*b2*b3*x2*y1 + 2*a2*b1*b2*b3*x2*y1 + a3*b1*b2*b3*x2*y1 + b1^2*b2*b3*x2*y1 + a1*b1*b2^2*b3*x2*y1 + a3*b1*b2*x1*x2*y1 + b3*x1*x2*y1 + a2*b3*x1*x2*y1 + b1*b3*x1*x2*y1 + a1*b1*b3*x1*x2*y1 + b1^2*b3*x1*x2*y1 + b2*b3*x1*x2*y1 + b1*b2*b3*x1*x2*y1 + b1^2*b2*b3*x1*x2*y1 + b2^2*b3*x1*x2*y1 + (a3*x2*(1 + x2)*y1)/2 + (b3*x2*(1 + x2)*y1)/2 + (a1*b3*x2*(1 + x2)*y1)/2 + (a2*b3*x2*(1 + x2)*y1)/2 + (a1*a2*b3*x2*(1 + x2)*y1)/2 + (a1*b1*b3*x2*(1 + x2)*y1)/2 + b2*b3*x2*(1 + x2)*y1 + (a1*b2*b3*x2*(1 + x2)*y1)/2 + (b1*b2*b3*x2*(1 + x2)*y1)/2 + (a1*b1*b2*b3*x2*(1 + x2)*y1)/2 + (b2^2*b3*x2*(1 + x2)*y1)/2 + 2*a2*a3*x3*y1 + a2*b1*x3*y1 + a1*a2*b1*x3*y1 + a2*a3*b1*x3*y1 + a2*b1^2*x3*y1 + 3*b2*x3*y1 + 4*a1*b2*x3*y1 + 2*a2*b2*x3*y1 + a1*a2*b2*x3*y1 + 2*a3*b2*x3*y1 + a1*a3*b2*x3*y1 + a2*a3*b2*x3*y1 + 2*b1*b2*x3*y1 + 2*a1*b1*b2*x3*y1 + 4*a2*b1*b2*x3*y1 + a3*b1*b2*x3*y1 + b1^2*b2*x3*y1 + a1*b1^2*b2*x3*y1 + a2*b1^2*b2*x3*y1 + a3*b1^2*b2*x3*y1 + 2*a1*b2^2*x3*y1 + 2*a2*b2^2*x3*y1 + b1^2*b2^2*x3*y1 + 2*a2*b3*x3*y1 + a2*a3*b3*x3*y1 + a2*b1*b3*x3*y1 + a2*b1^2*b3*x3*y1 + b2*b3*x3*y1 + 2*a1*b2*b3*x3*y1 + 2*a2*b2*b3*x3*y1 + a3*b2*b3*x3*y1 + a1*a3*b2*b3*x3*y1 + a2*a3*b2*b3*x3*y1 + 2*b1*b2*b3*x3*y1 + 3*a1*b1*b2*b3*x3*y1 + 2*a2*b1*b2*b3*x3*y1 + 2*a3*b1*b2*b3*x3*y1 + b1^2*b2*b3*x3*y1 + b2^2*b3*x3*y1 + 2*a2*b2^2*b3*x3*y1 + 2*a3*b2^2*b3*x3*y1 + b1*b2^2*b3*x3*y1 + a3*b1*b2^2*b3*x3*y1 + a2*x1*x3*y1 + a1*b2*x1*x3*y1 + a2*b2*x1*x3*y1 + b1*b2*x1*x3*y1 + a3*b1*b2*x1*x3*y1 + b1^2*b2*x1*x3*y1 + b2^2*x1*x3*y1 + a3*b2^2*x1*x3*y1 + a2*b3*x1*x3*y1 + 2*b2*b3*x1*x3*y1 + a1*b2*b3*x1*x3*y1 + a2*b2*b3*x1*x3*y1 + b1^2*b2*b3*x1*x3*y1 + x2*x3*y1 + a1*x2*x3*y1 + 2*a2*x2*x3*y1 + a1*a2*x2*x3*y1 + a3*x2*x3*y1 + 2*a2*a3*x2*x3*y1 + 3*a2*b1*x2*x3*y1 + a1*a2*b1*x2*x3*y1 + a3*b1*x2*x3*y1 + a1*a2*b1^2*x2*x3*y1 + b2*x2*x3*y1 + 2*a1*b2*x2*x3*y1 + a2*b2*x2*x3*y1 + 2*a3*b2*x2*x3*y1 + a2*a3*b2*x2*x3*y1 + 2*b1*b2*x2*x3*y1 + a1*b1*b2*x2*x3*y1 + a1*a2*b1*b2*x2*x3*y1 + a3*b1*b2*x2*x3*y1 + a2*a3*b1*b2*x2*x3*y1 + b1^2*b2*x2*x3*y1 + a2*b1^2*b2*x2*x3*y1 + b2^2*x2*x3*y1 + a3*b2^2*x2*x3*y1 + a1*a3*b2^2*x2*x3*y1 + 2*b1*b2^2*x2*x3*y1 + a3*b1^2*b2^2*x2*x3*y1 + a2*b3*x2*x3*y1 + a2*a3*b3*x2*x3*y1 + 3*b1*b3*x2*x3*y1 + 2*a1*b1*b3*x2*x3*y1 + a1*a2*b1*b3*x2*x3*y1 + a1*b1^2*b3*x2*x3*y1 + a2*b1^2*b3*x2*x3*y1 + 3*b2*b3*x2*x3*y1 + 2*a1*b2*b3*x2*x3*y1 + 2*a2*b2*b3*x2*x3*y1 + a1*a2*b2*b3*x2*x3*y1 + 2*a3*b2*b3*x2*x3*y1 + 3*b1*b2*b3*x2*x3*y1 + 2*a1*b1*b2*b3*x2*x3*y1 + a2*b1*b2*b3*x2*x3*y1 + a2*b1^2*b2*b3*x2*x3*y1 + b2^2*b3*x2*x3*y1 + a2*b2^2*b3*x2*x3*y1 + b2*b3^2*x2*x3*y1 + (b1^2*b2*x3*(1 + x3)*y1)/2 + (b2*b3*x3*(1 + x3)*y1)/2 + (b1*b2*b3*x3*(1 + x3)*y1)/2 + (b2^2*b3*x3*(1 + x3)*y1)/2 + (a2*a3*y1*(1 + y1))/2 + (a3*b2*y1*(1 + y1))/2 + (a3*b1*b2*y1*(1 + y1))/2 + (a3*b2^2*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (b2*b3*y1*(1 + y1))/2 + (a1*b2*b3*y1*(1 + y1))/2 + b1*b2*b3*y1*(1 + y1) + (b1^2*b2*b3*y1*(1 + y1))/2 + (a2*b3*x1*y1*(1 + y1))/2 + (b2*b3*x1*y1*(1 + y1))/2 + (b1*b2*b3*x1*y1*(1 + y1))/2 + (b2^2*b3*x1*y1*(1 + y1))/2 + (b3*x2*y1*(1 + y1))/2 + (a1*b3*x2*y1*(1 + y1))/2 + (a2*b3*x2*y1*(1 + y1))/2 + (a1*a2*b3*x2*y1*(1 + y1))/2 + (a1*b1*b3*x2*y1*(1 + y1))/2 + (b2*b3*x2*y1*(1 + y1))/2 + (a1*b2*b3*x2*y1*(1 + y1))/2 + (a1*b1*b2*b3*x2*y1*(1 + y1))/2 + (b2^2*b3*x2*y1*(1 + y1))/2 + (b1*b2*x3*y1*(1 + y1))/2 + (b2^2*x3*y1*(1 + y1))/2 + b1*b2*b3*y1^2*(1 + y1) + (b2^2*b3*y1^2*(1 + y1))/2 + a3*b1*y2 + 2*a1*a3*b1*y2 + a3*b1^2*y2 + 2*a1*a3*b2*y2 + 3*a3*b1*b2*y2 + 2*a1*a3*b1*b2*y2 + a3*b1^2*b2*y2 + a1*b3*y2 + a1*a2*b3*y2 + a1*a3*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + 2*a3*b1*b3*y2 + a1*a3*b1*b3*y2 + b1^2*b3*y2 + a1*b1^2*b3*y2 + a3*b1^2*b3*y2 + a1*b2*b3*y2 + b1*b2*b3*y2 + a1*b1^2*b2*b3*y2 + a1*b2^2*b3*y2 + b1*b2^2*b3*y2 + a1*b1*b2^2*b3*y2 + 2*a1*a3*x1*y2 + a2*a3*x1*y2 + 2*a3*b1*x1*y2 + a1*a3*b1*x1*y2 + 2*a3*b1^2*x1*y2 + a1*a3*b1^2*x1*y2 + a3*b2*x1*y2 + 2*a1*a3*b2*x1*y2 + 4*a3*b1*b2*x1*y2 + 2*a1*a3*b1*b2*x1*y2 + a3*b1^2*b2*x1*y2 + a3*b2^2*x1*y2 + a3*b1*b2^2*x1*y2 + 2*b3*x1*y2 + 2*a2*b3*x1*y2 + a1*a2*b3*x1*y2 + a3*b3*x1*y2 + a1*a3*b3*x1*y2 + 3*b1*b3*x1*y2 + 2*a1*b1*b3*x1*y2 + 2*a2*b1*b3*x1*y2 + 2*a1*a2*b1*b3*x1*y2 + 2*a3*b1*b3*x1*y2 + a1*a3*b1*b3*x1*y2 + a1*b1^2*b3*x1*y2 + a3*b1^2*b3*x1*y2 + 2*b2*b3*x1*y2 + 2*a1*b2*b3*x1*y2 + 2*b1*b2*b3*x1*y2 + 2*a1*b1*b2*b3*x1*y2 + 2*a2*b1*b2*b3*x1*y2 + a3*b1*b2*b3*x1*y2 + b1^2*b2*b3*x1*y2 + 2*b2^2*b3*x1*y2 + a1*b1*b2^2*b3*x1*y2 + (a2*b3*x1*(1 + x1)*y2)/2 + (a1*a2*b3*x1*(1 + x1)*y2)/2 + (a1*b1*b3*x1*(1 + x1)*y2)/2 + (b2*b3*x1*(1 + x1)*y2)/2 + (a1*b2*b3*x1*(1 + x1)*y2)/2 + (a1*b1*b2*b3*x1*(1 + x1)*y2)/2 + (b2^2*b3*x1*(1 + x1)*y2)/2 + a1*a3*b1*x2*y2 + a1*a3*b2*x2*y2 + a1*a2*b3*x2*y2 + a1*a3*b3*x2*y2 + a1*b1*b2*b3*x2*y2 + a1*b2^2*b3*x2*y2 + a3*x1*x2*y2 + a3*b2*x1*x2*y2 + a3*b1*b2*x1*x2*y2 + b3*x1*x2*y2 + a3*b3*x1*x2*y2 + b1*b3*x1*x2*y2 + 3*b2*b3*x1*x2*y2 + 2*b1*b2*b3*x1*x2*y2 + b1^2*b2*b3*x1*x2*y2 + (b1*b3*x2*(1 + x2)*y2)/2 + 2*b1*x3*y2 + 2*a1*b1*x3*y2 + 2*a3*b1*x3*y2 + a1*a3*b1*x3*y2 + 2*a2*a3*b1*x3*y2 + b1^2*x3*y2 + a1*b2*x3*y2 + a1*a3*b2*x3*y2 + 2*b1*b2*x3*y2 + 2*a1*b1*b2*x3*y2 + a2*b1*b2*x3*y2 + a1*a3*b1*b2*x3*y2 + a2*a3*b1*b2*x3*y2 + b1^2*b2*x3*y2 + a1*b1^2*b2*x3*y2 + a3*b1^2*b2*x3*y2 + a1*a3*b1^2*b2*x3*y2 + a1*a3*b2^2*x3*y2 + a1*b3*x3*y2 + a1*a2*b3*x3*y2 + 3*b1*b3*x3*y2 + a1*b1*b3*x3*y2 + a3*b1*b3*x3*y2 + a2*a3*b1*b3*x3*y2 + a1*b2*b3*x3*y2 + a1*a2*b2*b3*x3*y2 + a1*b1*b2*b3*x3*y2 + 2*a2*b1*b2*b3*x3*y2 + 2*a1*a2*b1*b2*b3*x3*y2 + a3*b1*b2*b3*x3*y2 + a1*b2^2*b3*x3*y2 + a1*a2*b2^2*b3*x3*y2 + b1*b2^2*b3*x3*y2 + a1*b1*b2^2*b3*x3*y2 + a2*b1*b2^2*b3*x3*y2 + a3*b1*b2^2*b3*x3*y2 + 2*x1*x3*y2 + 2*a2*x1*x3*y2 + a3*x1*x3*y2 + a2*a3*x1*x3*y2 + b1*x1*x3*y2 + a2*b1*x1*x3*y2 + a1*a2*b1*x1*x3*y2 + a3*b1*x1*x3*y2 + a1*b1^2*x1*x3*y2 + a1*a2*b1^2*x1*x3*y2 + a2*b2*x1*x3*y2 + 2*a3*b2*x1*x3*y2 + a2*a3*b2*x1*x3*y2 + a1*a2*b1*b2*x1*x3*y2 + 2*a3*b1*b2*x1*x3*y2 + a2*a3*b1*b2*x1*x3*y2 + b1^2*b2*x1*x3*y2 + b2^2*x1*x3*y2 + a3*b2^2*x1*x3*y2 + a1*a3*b2^2*x1*x3*y2 + 2*b1*b2^2*x1*x3*y2 + a3*b1^2*b2^2*x1*x3*y2 + 2*b3*x1*x3*y2 + 2*a2*b3*x1*x3*y2 + a3*b3*x1*x3*y2 + a2*a3*b3*x1*x3*y2 + 2*b1*b3*x1*x3*y2 + 2*a1*b1*b3*x1*x3*y2 + a2*b1*b3*x1*x3*y2 + a1*a2*b1*b3*x1*x3*y2 + b1^2*b3*x1*x3*y2 + a1*b1^2*b3*x1*x3*y2 + b2*b3*x1*x3*y2 + a1*b2*b3*x1*x3*y2 + 3*a2*b2*b3*x1*x3*y2 + a1*a2*b2*b3*x1*x3*y2 + 2*a3*b2*b3*x1*x3*y2 + 2*b1*b2*b3*x1*x3*y2 + 2*a1*b1*b2*b3*x1*x3*y2 + a2*b1*b2*b3*x1*x3*y2 + b1^2*b2*b3*x1*x3*y2 + a2*b1^2*b2*b3*x1*x3*y2 + b2^2*b3*x1*x3*y2 + a2*b2^2*b3*x1*x3*y2 + b2*b3^2*x1*x3*y2 + b1*x2*x3*y2 + a1*b1*x2*x3*y2 + a2*b1*x2*x3*y2 + a1*b2*x2*x3*y2 + b1*b2*x2*x3*y2 + 2*a2*b1*b2*x2*x3*y2 + b1*b3*x2*x3*y2 + a1*b1*b3*x2*x3*y2 + a2*b1*b3*x2*x3*y2 + 2*a1*b2*b3*x2*x3*y2 + (a1*x3*(1 + x3)*y2)/2 + (a1*a2*x3*(1 + x3)*y2)/2 + (a1*a3*x3*(1 + x3)*y2)/2 + (b1*b2*x3*(1 + x3)*y2)/2 + (a1*b1*b2*x3*(1 + x3)*y2)/2 + 2*a3*y1*y2 + 2*a1*a3*y1*y2 + a2*a3*y1*y2 + 2*a3*b1*y1*y2 + a1*a3*b1*y1*y2 + a3*b1^2*y1*y2 + a1*a3*b1^2*y1*y2 + 2*a3*b2*y1*y2 + 2*a1*a3*b2*y1*y2 + 3*a3*b1*b2*y1*y2 + 2*a1*a3*b1*b2*y1*y2 + a3*b1^2*b2*y1*y2 + a3*b2^2*y1*y2 + a3*b1*b2^2*y1*y2 + 2*b3*y1*y2 + a1*b3*y1*y2 + a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a1*a3*b3*y1*y2 + b1*b3*y1*y2 + 2*a1*b1*b3*y1*y2 + 4*a2*b1*b3*y1*y2 + 2*a1*a2*b1*b3*y1*y2 + 2*a3*b1*b3*y1*y2 + a1*a3*b1*b3*y1*y2 + b1^2*b3*y1*y2 + 2*a1*b1^2*b3*y1*y2 + a3*b1^2*b3*y1*y2 + 2*a1*b2*b3*y1*y2 + 2*a1*b1*b2*b3*y1*y2 + 2*a2*b1*b2*b3*y1*y2 + a3*b1*b2*b3*y1*y2 + b1^2*b2*b3*y1*y2 + b2^2*b3*y1*y2 + b1*b2^2*b3*y1*y2 + a1*b1*b2^2*b3*y1*y2 + a3*b1*b2*x1*y1*y2 + b3*x1*y1*y2 + a2*b3*x1*y1*y2 + a1*b1*b3*x1*y1*y2 + b1^2*b3*x1*y1*y2 + b2*b3*x1*y1*y2 + b1*b2*b3*x1*y1*y2 + b1^2*b2*b3*x1*y1*y2 + b2^2*b3*x1*y1*y2 + a3*x2*y1*y2 + a3*b2*x2*y1*y2 + a3*b1*b2*x2*y1*y2 + a3*b3*x2*y1*y2 + 2*b1*b3*x2*y1*y2 + b1^2*b3*x2*y1*y2 + 3*b2*b3*x2*y1*y2 + 2*b1*b2*b3*x2*y1*y2 + b1^2*b2*b3*x2*y1*y2 + x3*y1*y2 + a2*x3*y1*y2 + a1*a2*x3*y1*y2 + a3*x3*y1*y2 + 2*a2*a3*x3*y1*y2 + 2*b1*x3*y1*y2 + a1*b1*x3*y1*y2 + 2*a2*b1*x3*y1*y2 + a1*a2*b1*x3*y1*y2 + a3*b1*x3*y1*y2 + b1^2*x3*y1*y2 + a1*b1^2*x3*y1*y2 + a2*b1^2*x3*y1*y2 + a1*a2*b1^2*x3*y1*y2 + b2*x3*y1*y2 + a1*b2*x3*y1*y2 + 2*a2*b2*x3*y1*y2 + 2*a3*b2*x3*y1*y2 + a2*a3*b2*x3*y1*y2 + 2*b1*b2*x3*y1*y2 + a2*b1*b2*x3*y1*y2 + a1*a2*b1*b2*x3*y1*y2 + 2*a3*b1*b2*x3*y1*y2 + a2*a3*b1*b2*x3*y1*y2 + a2*b1^2*b2*x3*y1*y2 + b2^2*x3*y1*y2 + a1*a3*b2^2*x3*y1*y2 + 2*b1*b2^2*x3*y1*y2 + a3*b1^2*b2^2*x3*y1*y2 + b3*x3*y1*y2 + a2*b3*x3*y1*y2 + a3*b3*x3*y1*y2 + a2*a3*b3*x3*y1*y2 + 2*b1*b3*x3*y1*y2 + a1*b1*b3*x3*y1*y2 + a2*b1*b3*x3*y1*y2 + a1*a2*b1*b3*x3*y1*y2 + a1*b1^2*b3*x3*y1*y2 + a2*b1^2*b3*x3*y1*y2 + 2*b2*b3*x3*y1*y2 + a1*b2*b3*x3*y1*y2 + 3*a2*b2*b3*x3*y1*y2 + a1*a2*b2*b3*x3*y1*y2 + 2*a3*b2*b3*x3*y1*y2 + 2*b1*b2*b3*x3*y1*y2 + 2*a1*b1*b2*b3*x3*y1*y2 + a2*b1*b2*b3*x3*y1*y2 + b1^2*b2*b3*x3*y1*y2 + a2*b1^2*b2*b3*x3*y1*y2 + b2^2*b3*x3*y1*y2 + a2*b2^2*b3*x3*y1*y2 + b2*b3^2*x3*y1*y2 + (a1*a2*b3*y1*(1 + y1)*y2)/2 + (b1*b3*y1*(1 + y1)*y2)/2 + (a1*b1*b3*y1*(1 + y1)*y2)/2 + (a1*b2*b3*y1*(1 + y1)*y2)/2 + (b1*b2*b3*y1*(1 + y1)*y2)/2 + (a1*b1*b2*b3*y1*(1 + y1)*y2)/2 + (b2^2*b3*y1*(1 + y1)*y2)/2 + (a1*a3*b1*y2*(1 + y2))/2 + (a1*a3*b2*y2*(1 + y2))/2 + (a3*b1*b2*y2*(1 + y2))/2 + (a1*b3*y2*(1 + y2))/2 + (a1*a2*b3*y2*(1 + y2))/2 + (a1*a3*b3*y2*(1 + y2))/2 + (a3*b1*b3*y2*(1 + y2))/2 + (a1*b1^2*b3*y2*(1 + y2))/2 + b1*b2*b3*y2*(1 + y2) + (a1*b1*b2*b3*y2*(1 + y2))/2 + (a1*b2^2*b3*y2*(1 + y2))/2 + (a2*b3*x1*y2*(1 + y2))/2 + (a1*a2*b3*x1*y2*(1 + y2))/2 + (a1*b1*b3*x1*y2*(1 + y2))/2 + (b2*b3*x1*y2*(1 + y2))/2 + (a1*b2*b3*x1*y2*(1 + y2))/2 + (b1*b2*b3*x1*y2*(1 + y2))/2 + (a1*b1*b2*b3*x1*y2*(1 + y2))/2 + (b2^2*b3*x1*y2*(1 + y2))/2 + (b1*b3*x2*y2*(1 + y2))/2 + (a3*y1*y2*(1 + y2))/2 + (a1*a2*b3*y1*y2*(1 + y2))/2 + (b1*b3*y1*y2*(1 + y2))/2 + (a1*b1*b3*y1*y2*(1 + y2))/2 + (b2*b3*y1*y2*(1 + y2))/2 + (a1*b2*b3*y1*y2*(1 + y2))/2 + b1*b2*b3*y1*y2*(1 + y2) + (a1*b1*b2*b3*y1*y2*(1 + y2))/2 + (b2^2*b3*y1*y2*(1 + y2))/2 + (b1*b2*b3*y2^2*(1 + y2))/2 + a2*b1*y3 + a1*a2*b1*y3 + a2*a3*b1*y3 + a1*b2*y3 + a1*a2*b2*y3 + 2*b1*b2*y3 + a1*b1*b2*y3 + 3*a2*b1*b2*y3 + a1*a2*b1*b2*y3 + a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*b1^2*b2*y3 + a2*b1^2*b2*y3 + a1*a2*b2^2*y3 + b1*b2^2*y3 + 2*a1*b1*b2^2*y3 + a2*b1*b2^2*y3 + a3*b1*b2^2*y3 + a1*a2*b3*y3 + a2*a3*b1*b3*y3 + a1*a2*b2*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a2*a3*b1*b2*b3*y3 + b1*b2^2*b3*y3 + a1*b1*b2^2*b3*y3 + a2*b1*b2^2*b3*y3 + a3*b1*b2^2*b3*y3 + a2*x1*y3 + 2*a2*a3*x1*y3 + 2*a2*b1*x1*y3 + a1*a2*b1*x1*y3 + a2*a3*b1*x1*y3 + a2*a3*b1^2*x1*y3 + b2*x1*y3 + 3*a1*b2*x1*y3 + a2*b2*x1*y3 + 2*a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + 2*b1*b2*x1*y3 + 3*a1*b1*b2*x1*y3 + 4*a2*b1*b2*x1*y3 + a3*b1*b2*x1*y3 + b1^2*b2*x1*y3 + b2^2*x1*y3 + 2*a1*b2^2*x1*y3 + 2*a2*b2^2*x1*y3 + b1^2*b2^2*x1*y3 + a2*a3*b3*x1*y3 + b2*b3*x1*y3 + 2*a2*b2*b3*x1*y3 + a3*b2*b3*x1*y3 + a1*a3*b2*b3*x1*y3 + a2*a3*b2*b3*x1*y3 + 3*b1*b2*b3*x1*y3 + a1*b1*b2*b3*x1*y3 + 2*a3*b1*b2*b3*x1*y3 + b1^2*b2*b3*x1*y3 + a2*b1^2*b2*b3*x1*y3 + 2*b2^2*b3*x1*y3 + a1*b2^2*b3*x1*y3 + 2*a3*b2^2*b3*x1*y3 + b1*b2^2*b3*x1*y3 + a3*b1*b2^2*b3*x1*y3 + (b1*b2*x1*(1 + x1)*y3)/2 + (b2^2*x1*(1 + x1)*y3)/2 + a1*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b1^2*x2*y3 + a1*a3*b1^2*x2*y3 + a1*b2*x2*y3 + a1*a3*b2*x2*y3 + b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a1*a3*b1*b2*x2*y3 + a2*a3*b1*b2*x2*y3 + b1^2*b2*x2*y3 + a1*a3*b1^2*b2*x2*y3 + a1*b3*x2*y3 + a1*a2*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a3*b1*b3*x2*y3 + a2*a3*b1*b3*x2*y3 + a1*b1^2*b3*x2*y3 + a1*a2*b2*b3*x2*y3 + a1*b1*b2*b3*x2*y3 + 2*a2*b1*b2*b3*x2*y3 + 2*a1*a2*b1*b2*b3*x2*y3 + a1*a2*b2^2*b3*x2*y3 + b1*b2^2*b3*x2*y3 + a1*b1*b2^2*b3*x2*y3 + a2*b1*b2^2*b3*x2*y3 + a3*b1*b2^2*b3*x2*y3 + x1*x2*y3 + a1*x1*x2*y3 + a2*x1*x2*y3 + a3*x1*x2*y3 + a2*a3*x1*x2*y3 + 2*b1*x1*x2*y3 + 2*a2*b1*x1*x2*y3 + a1*a2*b1*x1*x2*y3 + a3*b1*x1*x2*y3 + a1*b1^2*x1*x2*y3 + a2*b1^2*x1*x2*y3 + a1*a2*b1^2*x1*x2*y3 + 2*a3*b2*x1*x2*y3 + a2*a3*b2*x1*x2*y3 + b1*b2*x1*x2*y3 + 2*a2*b1*b2*x1*x2*y3 + a1*a2*b1*b2*x1*x2*y3 + 2*a3*b1*b2*x1*x2*y3 + a2*a3*b1*b2*x1*x2*y3 + b1^2*b2*x1*x2*y3 + b2^2*x1*x2*y3 + a1*b2^2*x1*x2*y3 + a1*a3*b2^2*x1*x2*y3 + 2*b1*b2^2*x1*x2*y3 + b1^2*b2^2*x1*x2*y3 + a3*b1^2*b2^2*x1*x2*y3 + b3*x1*x2*y3 + a1*b3*x1*x2*y3 + a2*b3*x1*x2*y3 + a3*b3*x1*x2*y3 + a2*a3*b3*x1*x2*y3 + 3*b1*b3*x1*x2*y3 + 2*a1*b1*b3*x1*x2*y3 + 2*a2*b1*b3*x1*x2*y3 + a1*a2*b1*b3*x1*x2*y3 + b1^2*b3*x1*x2*y3 + a1*b1^2*b3*x1*x2*y3 + 4*b2*b3*x1*x2*y3 + a1*b2*b3*x1*x2*y3 + 4*a2*b2*b3*x1*x2*y3 + a1*a2*b2*b3*x1*x2*y3 + 2*a3*b2*b3*x1*x2*y3 + 3*b1*b2*b3*x1*x2*y3 + 2*a1*b1*b2*b3*x1*x2*y3 + a2*b1*b2*b3*x1*x2*y3 + b1^2*b2*b3*x1*x2*y3 + a2*b1^2*b2*b3*x1*x2*y3 + b2^2*b3*x1*x2*y3 + a2*b2^2*b3*x1*x2*y3 + b2*b3^2*x1*x2*y3 + a1*a2*b1*x3*y3 + a2*a3*b1*x3*y3 + a2*b1^2*x3*y3 + a1*a2*b2*x3*y3 + a1*b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a3*b1^2*b2*x3*y3 + a1*b2^2*x3*y3 + b1*b2^2*x3*y3 + b1^2*b2^2*x3*y3 + a1*a2*b3*x3*y3 + a1*b1*b2*b3*x3*y3 + a2*b1*b2*b3*x3*y3 + a1*b2^2*b3*x3*y3 + b1*b2^2*b3*x3*y3 + 2*a2*x1*x3*y3 + 2*a2*b1*x1*x3*y3 + b2*x1*x3*y3 + a1*b2*x1*x3*y3 + a2*b2*x1*x3*y3 + a3*b2*x1*x3*y3 + 4*b1*b2*x1*x3*y3 + a1*b1*b2*x1*x3*y3 + a2*b1*b2*x1*x3*y3 + a3*b1*b2*x1*x3*y3 + b1^2*b2*x1*x3*y3 + a1*b2^2*x1*x3*y3 + a2*b2^2*x1*x3*y3 + a3*b2^2*x1*x3*y3 + b1*b2^2*x1*x3*y3 + b1^2*b2^2*x1*x3*y3 + 3*b2*b3*x1*x3*y3 + 3*b1*b2*b3*x1*x3*y3 + b1^2*b2*b3*x1*x3*y3 + b2^2*b3*x1*x3*y3 + b1*b2^2*b3*x1*x3*y3 + a1*x2*x3*y3 + 2*a1*b1*x2*x3*y3 + a1*b1^2*x2*x3*y3 + 2*a1*b2*x2*x3*y3 + b1*b2*x2*x3*y3 + 2*a1*b1*b2*x2*x3*y3 + b1*b2^2*x2*x3*y3 + a1*b3*x2*x3*y3 + b1*b3*x2*x3*y3 + a1*b1*b3*x2*x3*y3 + a1*b1^2*b3*x2*x3*y3 + 2*a1*b1*b2*b3*x2*x3*y3 + a1*b2^2*b3*x2*x3*y3 + b1*b2^2*b3*x2*x3*y3 + 2*a2*y1*y3 + 2*a2*a3*y1*y3 + 3*a2*b1*y1*y3 + a1*a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a2*b1^2*y1*y3 + 2*b2*y1*y3 + 3*a1*b2*y1*y3 + 4*a2*b2*y1*y3 + a1*a2*b2*y1*y3 + 2*a3*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + 4*b1*b2*y1*y3 + 2*a1*b1*b2*y1*y3 + 4*a2*b1*b2*y1*y3 + a3*b1*b2*y1*y3 + 2*b1^2*b2*y1*y3 + a1*b1^2*b2*y1*y3 + a2*b1^2*b2*y1*y3 + a3*b1^2*b2*y1*y3 + b2^2*y1*y3 + 2*a1*b2^2*y1*y3 + 2*a2*b2^2*y1*y3 + b1^2*b2^2*y1*y3 + a2*b3*y1*y3 + a2*a3*b3*y1*y3 + a2*b1*b3*y1*y3 + a2*b1^2*b3*y1*y3 + 2*b2*b3*y1*y3 + a1*b2*b3*y1*y3 + 3*a2*b2*b3*y1*y3 + 2*a3*b2*b3*y1*y3 + a1*a3*b2*b3*y1*y3 + a2*a3*b2*b3*y1*y3 + 2*b1*b2*b3*y1*y3 + 3*a1*b1*b2*b3*y1*y3 + 2*a2*b1*b2*b3*y1*y3 + 2*a3*b1*b2*b3*y1*y3 + b1^2*b2*b3*y1*y3 + 2*b2^2*b3*y1*y3 + 2*a2*b2^2*b3*y1*y3 + 2*a3*b2^2*b3*y1*y3 + a3*b1*b2^2*b3*y1*y3 + a2*x1*y1*y3 + b2*x1*y1*y3 + a1*b2*x1*y1*y3 + a2*b2*x1*y1*y3 + 2*b1*b2*x1*y1*y3 + a3*b1*b2*x1*y1*y3 + b1^2*b2*x1*y1*y3 + 2*b2^2*x1*y1*y3 + a3*b2^2*x1*y1*y3 + a2*b3*x1*y1*y3 + b2*b3*x1*y1*y3 + a1*b2*b3*x1*y1*y3 + a2*b2*b3*x1*y1*y3 + b1^2*b2*b3*x1*y1*y3 + x2*y1*y3 + a1*x2*y1*y3 + a1*a2*x2*y1*y3 + a3*x2*y1*y3 + 2*a2*a3*x2*y1*y3 + 2*b1*x2*y1*y3 + a1*b1*x2*y1*y3 + 3*a2*b1*x2*y1*y3 + a1*a2*b1*x2*y1*y3 + a3*b1*x2*y1*y3 + b1^2*x2*y1*y3 + a1*b1^2*x2*y1*y3 + a1*a2*b1^2*x2*y1*y3 + b2*x2*y1*y3 + 2*a1*b2*x2*y1*y3 + 2*a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + a2*a3*b2*x2*y1*y3 + 3*b1*b2*x2*y1*y3 + a2*b1*b2*x2*y1*y3 + a1*a2*b1*b2*x2*y1*y3 + 2*a3*b1*b2*x2*y1*y3 + a2*a3*b1*b2*x2*y1*y3 + a2*b1^2*b2*x2*y1*y3 + 2*b2^2*x2*y1*y3 + a1*b2^2*x2*y1*y3 + a3*b2^2*x2*y1*y3 + a1*a3*b2^2*x2*y1*y3 + 2*b1*b2^2*x2*y1*y3 + b1^2*b2^2*x2*y1*y3 + a3*b1^2*b2^2*x2*y1*y3 + b3*x2*y1*y3 + a1*b3*x2*y1*y3 + a3*b3*x2*y1*y3 + a2*a3*b3*x2*y1*y3 + 3*b1*b3*x2*y1*y3 + a1*b1*b3*x2*y1*y3 + a1*a2*b1*b3*x2*y1*y3 + a1*b1^2*b3*x2*y1*y3 + a2*b1^2*b3*x2*y1*y3 + 3*b2*b3*x2*y1*y3 + a1*b2*b3*x2*y1*y3 + 2*a2*b2*b3*x2*y1*y3 + a1*a2*b2*b3*x2*y1*y3 + 2*a3*b2*b3*x2*y1*y3 + 3*b1*b2*b3*x2*y1*y3 + 2*a1*b1*b2*b3*x2*y1*y3 + a2*b1*b2*b3*x2*y1*y3 + b1^2*b2*b3*x2*y1*y3 + a2*b1^2*b2*b3*x2*y1*y3 + 2*b2^2*b3*x2*y1*y3 + a2*b2^2*b3*x2*y1*y3 + b2*b3^2*x2*y1*y3 + 2*a2*x3*y1*y3 + 2*a2*b1*x3*y1*y3 + 2*b2*x3*y1*y3 + 2*a1*b2*x3*y1*y3 + 2*a2*b2*x3*y1*y3 + 5*b1*b2*x3*y1*y3 + a1*b1*b2*x3*y1*y3 + a2*b1*b2*x3*y1*y3 + a3*b1*b2*x3*y1*y3 + 2*b1^2*b2*x3*y1*y3 + b2^2*x3*y1*y3 + a1*b2^2*x3*y1*y3 + a2*b2^2*x3*y1*y3 + a3*b2^2*x3*y1*y3 + b1*b2^2*x3*y1*y3 + b1^2*b2^2*x3*y1*y3 + 3*b2*b3*x3*y1*y3 + b1*b2*b3*x3*y1*y3 + b1^2*b2*b3*x3*y1*y3 + b2^2*b3*x3*y1*y3 + b1*b2^2*b3*x3*y1*y3 + (b1*b2*y1*(1 + y1)*y3)/2 + (b2^2*y1*(1 + y1)*y3)/2 + a1*y2*y3 + 2*a2*b1*y2*y3 + a3*b1*y2*y3 + a1*a3*b1*y2*y3 + 2*a2*a3*b1*y2*y3 + a1*b1^2*y2*y3 + a3*b1^2*y2*y3 + a1*a3*b1^2*y2*y3 + a1*a3*b2*y2*y3 + b1*b2*y2*y3 + a1*b1*b2*y2*y3 + 2*a2*b1*b2*y2*y3 + 2*a3*b1*b2*y2*y3 + a1*a3*b1*b2*y2*y3 + a2*a3*b1*b2*y2*y3 + a3*b1^2*b2*y2*y3 + a1*a3*b1^2*b2*y2*y3 + a1*b3*y2*y3 + a1*a2*b3*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + 2*a3*b1*b3*y2*y3 + a2*a3*b1*b3*y2*y3 + b1^2*b3*y2*y3 + a1*b1^2*b3*y2*y3 + a1*b2*b3*y2*y3 + a1*a2*b2*b3*y2*y3 + 3*b1*b2*b3*y2*y3 + a1*b1*b2*b3*y2*y3 + 2*a2*b1*b2*b3*y2*y3 + 2*a1*a2*b1*b2*b3*y2*y3 + a3*b1*b2*b3*y2*y3 + a1*b2^2*b3*y2*y3 + a1*a2*b2^2*b3*y2*y3 + b1*b2^2*b3*y2*y3 + a1*b1*b2^2*b3*y2*y3 + a2*b1*b2^2*b3*y2*y3 + a3*b1*b2^2*b3*y2*y3 + x1*y2*y3 + a1*x1*y2*y3 + a2*x1*y2*y3 + a2*a3*x1*y2*y3 + b1*x1*y2*y3 + a1*b1*x1*y2*y3 + a2*b1*x1*y2*y3 + a1*a2*b1*x1*y2*y3 + a3*b1*x1*y2*y3 + b1^2*x1*y2*y3 + a1*a2*b1^2*x1*y2*y3 + 2*b2*x1*y2*y3 + a3*b2*x1*y2*y3 + a2*a3*b2*x1*y2*y3 + 2*b1*b2*x1*y2*y3 + a1*b1*b2*x1*y2*y3 + a2*b1*b2*x1*y2*y3 + a1*a2*b1*b2*x1*y2*y3 + a3*b1*b2*x1*y2*y3 + a2*a3*b1*b2*x1*y2*y3 + b1^2*b2*x1*y2*y3 + 2*b2^2*x1*y2*y3 + a1*b2^2*x1*y2*y3 + a3*b2^2*x1*y2*y3 + a1*a3*b2^2*x1*y2*y3 + 2*b1*b2^2*x1*y2*y3 + b1^2*b2^2*x1*y2*y3 + a3*b1^2*b2^2*x1*y2*y3 + b3*x1*y2*y3 + a1*b3*x1*y2*y3 + a2*b3*x1*y2*y3 + a2*a3*b3*x1*y2*y3 + 2*b1*b3*x1*y2*y3 + a1*b1*b3*x1*y2*y3 + a2*b1*b3*x1*y2*y3 + a1*a2*b1*b3*x1*y2*y3 + a1*b1^2*b3*x1*y2*y3 + 3*a2*b2*b3*x1*y2*y3 + a1*a2*b2*b3*x1*y2*y3 + 2*a3*b2*b3*x1*y2*y3 + 2*b1*b2*b3*x1*y2*y3 + 2*a1*b1*b2*b3*x1*y2*y3 + a2*b1*b2*b3*x1*y2*y3 + a2*b1^2*b2*b3*x1*y2*y3 + 2*b2^2*b3*x1*y2*y3 + a2*b2^2*b3*x1*y2*y3 + b2*b3^2*x1*y2*y3 + a1*b1*x2*y2*y3 + a2*b1*x2*y2*y3 + a1*b2*x2*y2*y3 + b1*b2*x2*y2*y3 + 2*a2*b1*b2*x2*y2*y3 + b1*b3*x2*y2*y3 + a1*b1*b3*x2*y2*y3 + a2*b1*b3*x2*y2*y3 + 2*a1*b2*b3*x2*y2*y3 + a1*x3*y2*y3 + 2*b1*x3*y2*y3 + 2*a1*b1*x3*y2*y3 + b1^2*x3*y2*y3 + a1*b1^2*x3*y2*y3 + 2*a1*b2*x3*y2*y3 + b1*b2*x3*y2*y3 + 2*a1*b1*b2*x3*y2*y3 + b1*b2^2*x3*y2*y3 + a1*b3*x3*y2*y3 + 2*b1*b3*x3*y2*y3 + a1*b1*b3*x3*y2*y3 + b1^2*b3*x3*y2*y3 + a1*b1^2*b3*x3*y2*y3 + 2*b1*b2*b3*x3*y2*y3 + 2*a1*b1*b2*b3*x3*y2*y3 + a1*b2^2*b3*x3*y2*y3 + b1*b2^2*b3*x3*y2*y3 + y1*y2*y3 + 2*a1*y1*y2*y3 + a2*y1*y2*y3 + a1*a2*y1*y2*y3 + a3*y1*y2*y3 + 2*a2*a3*y1*y2*y3 + b1*y1*y2*y3 + 2*a2*b1*y1*y2*y3 + a1*a2*b1*y1*y2*y3 + a3*b1*y1*y2*y3 + b1^2*y1*y2*y3 + a2*b1^2*y1*y2*y3 + a1*a2*b1^2*y1*y2*y3 + 2*b2*y1*y2*y3 + a1*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + a3*b2*y1*y2*y3 + a2*a3*b2*y1*y2*y3 + b1*b2*y1*y2*y3 + a1*b1*b2*y1*y2*y3 + 2*a2*b1*b2*y1*y2*y3 + a1*a2*b1*b2*y1*y2*y3 + a3*b1*b2*y1*y2*y3 + a2*a3*b1*b2*y1*y2*y3 + b1^2*b2*y1*y2*y3 + a2*b1^2*b2*y1*y2*y3 + b2^2*y1*y2*y3 + a1*b2^2*y1*y2*y3 + a1*a3*b2^2*y1*y2*y3 + 2*b1*b2^2*y1*y2*y3 + b1^2*b2^2*y1*y2*y3 + a3*b1^2*b2^2*y1*y2*y3 + a1*b3*y1*y2*y3 + a2*a3*b3*y1*y2*y3 + b1*b3*y1*y2*y3 + 2*a1*b1*b3*y1*y2*y3 + a2*b1*b3*y1*y2*y3 + a1*a2*b1*b3*y1*y2*y3 + a1*b1^2*b3*y1*y2*y3 + a2*b1^2*b3*y1*y2*y3 + b2*b3*y1*y2*y3 + 2*a1*b2*b3*y1*y2*y3 + 3*a2*b2*b3*y1*y2*y3 + a1*a2*b2*b3*y1*y2*y3 + 2*a3*b2*b3*y1*y2*y3 + 2*b1*b2*b3*y1*y2*y3 + 2*a1*b1*b2*b3*y1*y2*y3 + a2*b1*b2*b3*y1*y2*y3 + a2*b1^2*b2*b3*y1*y2*y3 + 2*b2^2*b3*y1*y2*y3 + a2*b2^2*b3*y1*y2*y3 + b2*b3^2*y1*y2*y3 + a2*b1*y3*(1 + y3) + (a1*a2*b1*y3*(1 + y3))/2 + (a2*b1^2*y3*(1 + y3))/2 + (a1*a2*b2*y3*(1 + y3))/2 + (b1*b2*y3*(1 + y3))/2 + a1*b1*b2*y3*(1 + y3) + (a2*b1*b2*y3*(1 + y3))/2 + (a3*b1*b2*y3*(1 + y3))/2 + (b1^2*b2*y3*(1 + y3))/2 + (a1*b2^2*y3*(1 + y3))/2 + (b1*b2^2*y3*(1 + y3))/2 + (b1^2*b2^2*y3*(1 + y3))/2 + (a1*a2*b3*y3*(1 + y3))/2 + (a2*b1*b3*y3*(1 + y3))/2 + b1*b2*b3*y3*(1 + y3) + (a1*b1*b2*b3*y3*(1 + y3))/2 + (a2*b1*b2*b3*y3*(1 + y3))/2 + (a3*b1*b2*b3*y3*(1 + y3))/2 + (b1*b2*x1*y3*(1 + y3))/2 + (b1^2*b2*x1*y3*(1 + y3))/2 + (b1*b2*b3*x1*y3*(1 + y3))/2 + (b2^2*b3*x1*y3*(1 + y3))/2 + (a1*a2*x2*y3*(1 + y3))/2 + (a1*a3*x2*y3*(1 + y3))/2 + (a1*b1*b2*x2*y3*(1 + y3))/2 + (b1*b3*x2*y3*(1 + y3))/2 + (a3*b1*b3*x2*y3*(1 + y3))/2 + (b1^2*b2*y1*y3*(1 + y3))/2 + (b2*b3*y1*y3*(1 + y3))/2 + (b1*b2*b3*y1*y3*(1 + y3))/2 + (b2^2*b3*y1*y3*(1 + y3))/2 + (a1*y2*y3*(1 + y3))/2 + (a1*a2*y2*y3*(1 + y3))/2 + (a1*a3*y2*y3*(1 + y3))/2 + (b1*b2*y2*y3*(1 + y3))/2 + (a1*b1*b2*y2*y3*(1 + y3))/2 + (b1*b3*y2*y3*(1 + y3))/2 + (a3*b1*b3*y2*y3*(1 + y3))/2 + 3*a2*a3*b1*z1 + a3*b2*z1 + 3*a1*a3*b2*z1 + 3*a2*a3*b2*z1 + 2*a3*b1*b2*z1 + 2*a3*b1^2*b2*z1 + a3*b2^2*z1 + a3*b1*b2^2*z1 + a2*b1*b3*z1 + 2*a1*b2*b3*z1 + 2*a2*b2*b3*z1 + a3*b2*b3*z1 + 2*b1*b2*b3*z1 + 3*a1*b1*b2*b3*z1 + b1^2*b2*b3*z1 + 2*b2^2*b3*z1 + b1*b2^2*b3*z1 + a2*a3*x1*z1 + 2*a3*b2*x1*z1 + 2*a3*b1*b2*x1*z1 + a2*b1*b3*x1*z1 + b2*b3*x1*z1 + a1*b2*b3*x1*z1 + 2*a2*b2*b3*x1*z1 + a3*b2*b3*x1*z1 + 3*b1*b2*b3*x1*z1 + 2*b2^2*b3*x1*z1 + b1*b2^2*b3*x1*z1 + (b2*b3*x1*(1 + x1)*z1)/2 + b1*b2*b3*x1*(1 + x1)*z1 + (b2^2*b3*x1*(1 + x1)*z1)/2 + 2*a1*a3*x2*z1 + a2*a3*x2*z1 + a3*b1*x2*z1 + a1*a3*b1*x2*z1 + 2*a3*b1^2*x2*z1 + a1*a3*b1^2*x2*z1 + 2*a3*b2*x2*z1 + 2*a1*a3*b2*x2*z1 + 2*a3*b1*b2*x2*z1 + 2*a1*a3*b1*b2*x2*z1 + a3*b1^2*b2*x2*z1 + a3*b1*b2^2*x2*z1 + b1*b3*x2*z1 + 3*a1*b1*b3*x2*z1 + 4*a2*b1*b3*x2*z1 + 2*a1*a2*b1*b3*x2*z1 + a3*b1*b3*x2*z1 + a1*a3*b1*b3*x2*z1 + a1*b1^2*b3*x2*z1 + a3*b1^2*b3*x2*z1 + b2*b3*x2*z1 + 2*a2*b2*b3*x2*z1 + a3*b2*b3*x2*z1 + 2*b1*b2*b3*x2*z1 + a1*b1*b2*b3*x2*z1 + 2*a2*b1*b2*b3*x2*z1 + a3*b1*b2*b3*x2*z1 + 2*b2^2*b3*x2*z1 + b1*b2^2*b3*x2*z1 + a1*b1*b2^2*b3*x2*z1 + a3*x1*x2*z1 + a1*a3*b2*x1*x2*z1 + b3*x1*x2*z1 + 2*a1*b3*x1*x2*z1 + a1*a2*b3*x1*x2*z1 + 3*b1*b3*x1*x2*z1 + a1*b1*b3*x1*x2*z1 + b1^2*b3*x1*x2*z1 + 2*b2*b3*x1*x2*z1 + 2*a1*b2*b3*x1*x2*z1 + b1*b2*b3*x1*x2*z1 + 2*a1*b1*b2*b3*x1*x2*z1 + b2^2*b3*x1*x2*z1 + (a1*b3*x2*(1 + x2)*z1)/2 + (a1*a2*b3*x2*(1 + x2)*z1)/2 + (a1*b1*b3*x2*(1 + x2)*z1)/2 + (b2*b3*x2*(1 + x2)*z1)/2 + (a1*b2*b3*x2*(1 + x2)*z1)/2 + b1*b2*b3*x2*(1 + x2)*z1 + (a1*b1*b2*b3*x2*(1 + x2)*z1)/2 + (b2^2*b3*x2*(1 + x2)*z1)/2 + a2*x3*z1 + a1*a2*x3*z1 + 2*a2*a3*x3*z1 + 3*a2*b1*x3*z1 + a1*a2*b1*x3*z1 + a2*b1^2*x3*z1 + a2*a3*b1^2*x3*z1 + b2*x3*z1 + 2*a1*b2*x3*z1 + 3*a2*b2*x3*z1 + 2*a1*a2*b2*x3*z1 + a3*b2*x3*z1 + a1*a3*b2*x3*z1 + 3*b1*b2*x3*z1 + 3*a1*b1*b2*x3*z1 + 4*a2*b1*b2*x3*z1 + a3*b1*b2*x3*z1 + 2*b1^2*b2*x3*z1 + b2^2*x3*z1 + 2*a1*b2^2*x3*z1 + 2*a2*b2^2*x3*z1 + a3*b2^2*x3*z1 + a2*a3*b2^2*x3*z1 + b1*b2^2*x3*z1 + b1^2*b2^2*x3*z1 + a2*b3*x3*z1 + a2*a3*b3*x3*z1 + b2*b3*x3*z1 + a1*b2*b3*x3*z1 + 2*a2*b2*b3*x3*z1 + a1*a3*b2*b3*x3*z1 + 2*a2*a3*b2*b3*x3*z1 + b1*b2*b3*x3*z1 + a1*b1*b2*b3*x3*z1 + a2*b1*b2*b3*x3*z1 + 2*a3*b1*b2*b3*x3*z1 + a2*b1^2*b2*b3*x3*z1 + a1*b2^2*b3*x3*z1 + a2*b2^2*b3*x3*z1 + 2*a3*b2^2*b3*x3*z1 + a3*b1*b2^2*b3*x3*z1 + a2*b1*x1*x3*z1 + b2*x1*x3*z1 + a1*b2*x1*x3*z1 + a3*b2*x1*x3*z1 + a1*a3*b2*x1*x3*z1 + a2*a3*b2*x1*x3*z1 + b1*b2*x1*x3*z1 + a1*b1*b2*x1*x3*z1 + a2*b1*b2*x1*x3*z1 + b1^2*b2*x1*x3*z1 + b2^2*x1*x3*z1 + a3*b1*b2^2*x1*x3*z1 + a2*b3*x1*x3*z1 + a2*b1*b3*x1*x3*z1 + 2*b2*b3*x1*x3*z1 + a1*b2*b3*x1*x3*z1 + a2*b2*b3*x1*x3*z1 + b1*b2*b3*x1*x3*z1 + a1*b1*b2*b3*x1*x3*z1 + a2*b1*b2*b3*x1*x3*z1 + 2*a2*x2*x3*z1 + a1*a2*x2*x3*z1 + a3*x2*x3*z1 + a2*a3*x2*x3*z1 + 3*a2*b1*x2*x3*z1 + a1*a2*b1*x2*x3*z1 + a3*b1*x2*x3*z1 + a2*b1^2*x2*x3*z1 + a1*a2*b1^2*x2*x3*z1 + b2*x2*x3*z1 + a1*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + a1*a2*b2*x2*x3*z1 + 2*a2*a3*b2*x2*x3*z1 + 2*b1*b2*x2*x3*z1 + a2*b1*b2*x2*x3*z1 + a1*a2*b1*b2*x2*x3*z1 + a3*b1*b2*x2*x3*z1 + a2*a3*b1*b2*x2*x3*z1 + b1^2*b2*x2*x3*z1 + a1*b1^2*b2*x2*x3*z1 + b2^2*x2*x3*z1 + a1*a3*b2^2*x2*x3*z1 + 2*b1*b2^2*x2*x3*z1 + a3*b1*b2^2*x2*x3*z1 + a3*b1^2*b2^2*x2*x3*z1 + b3*x2*x3*z1 + a1*b3*x2*x3*z1 + a2*b3*x2*x3*z1 + a2*a3*b3*x2*x3*z1 + 2*b1*b3*x2*x3*z1 + 2*a1*b1*b3*x2*x3*z1 + 2*a2*b1*b3*x2*x3*z1 + a1*a2*b1*b3*x2*x3*z1 + b1^2*b3*x2*x3*z1 + a1*b1^2*b3*x2*x3*z1 + 5*b2*b3*x2*x3*z1 + a1*b2*b3*x2*x3*z1 + 3*a2*b2*b3*x2*x3*z1 + a1*a2*b2*b3*x2*x3*z1 + 2*a3*b2*b3*x2*x3*z1 + 4*b1*b2*b3*x2*x3*z1 + 2*a1*b1*b2*b3*x2*x3*z1 + 2*a2*b1*b2*b3*x2*x3*z1 + a2*b1^2*b2*b3*x2*x3*z1 + 2*b2^2*b3*x2*x3*z1 + a2*b2^2*b3*x2*x3*z1 + b2*b3^2*x2*x3*z1 + (a2*a3*b2*x3*(1 + x3)*z1)/2 + (b1^2*b2*x3*(1 + x3)*z1)/2 + (a2*a3*b3*x3*(1 + x3)*z1)/2 + (b2*b3*x3*(1 + x3)*z1)/2 + (a2*b2*b3*x3*(1 + x3)*z1)/2 + (b1*b2*b3*x3*(1 + x3)*z1)/2 + (b2^2*b3*x3*(1 + x3)*z1)/2 + (a2*b2^2*b3*x3*(1 + x3)*z1)/2 + a2*a3*y1*z1 + 4*a3*b2*y1*z1 + 2*a3*b1*b2*y1*z1 + a2*b1*b3*y1*z1 + 2*b2*b3*y1*z1 + a1*b2*b3*y1*z1 + 2*a2*b2*b3*y1*z1 + a3*b2*b3*y1*z1 + b1*b2*b3*y1*z1 + 2*b2^2*b3*y1*z1 + b1*b2^2*b3*y1*z1 + a3*b2*x1*y1*z1 + a2*b3*x1*y1*z1 + 3*b2*b3*x1*y1*z1 + 2*b1*b2*b3*x1*y1*z1 + b2^2*b3*x1*y1*z1 + a3*x2*y1*z1 + a3*b2*x2*y1*z1 + a1*a3*b2*x2*y1*z1 + a3*b1*b2*x2*y1*z1 + 2*b3*x2*y1*z1 + a1*b3*x2*y1*z1 + a2*b3*x2*y1*z1 + 2*b1*b3*x2*y1*z1 + a1*b1*b3*x2*y1*z1 + 2*b2*b3*x2*y1*z1 + a1*b2*b3*x2*y1*z1 + 2*b1*b2*b3*x2*y1*z1 + a1*b1*b2*b3*x2*y1*z1 + b1^2*b2*b3*x2*y1*z1 + b2^2*b3*x2*y1*z1 + a2*x3*y1*z1 + a2*b1*x3*y1*z1 + b2*x3*y1*z1 + a1*b2*x3*y1*z1 + a2*b2*x3*y1*z1 + 2*a3*b2*x3*y1*z1 + a1*a3*b2*x3*y1*z1 + a2*a3*b2*x3*y1*z1 + b1*b2*x3*y1*z1 + a1*b1*b2*x3*y1*z1 + a2*b1*b2*x3*y1*z1 + a3*b1*b2*x3*y1*z1 + b2^2*x3*y1*z1 + a3*b2^2*x3*y1*z1 + a3*b1*b2^2*x3*y1*z1 + a2*b3*x3*y1*z1 + a2*b1*b3*x3*y1*z1 + 3*b2*b3*x3*y1*z1 + 3*b1*b2*b3*x3*y1*z1 + a1*b1*b2*b3*x3*y1*z1 + a2*b1*b2*b3*x3*y1*z1 + b1^2*b2*b3*x3*y1*z1 + (a2*b3*y1*(1 + y1)*z1)/2 + b2*b3*y1*(1 + y1)*z1 + (b1*b2*b3*y1*(1 + y1)*z1)/2 + (b2^2*b3*y1*(1 + y1)*z1)/2 + a3*y2*z1 + 2*a1*a3*y2*z1 + a2*a3*y2*z1 + 2*a3*b1*y2*z1 + a1*a3*b1*y2*z1 + 2*a3*b1^2*y2*z1 + a1*a3*b1^2*y2*z1 + 3*a3*b2*y2*z1 + 2*a1*a3*b2*y2*z1 + 2*a3*b1*b2*y2*z1 + 2*a1*a3*b1*b2*y2*z1 + a3*b1^2*b2*y2*z1 + a3*b1*b2^2*y2*z1 + a2*b3*y2*z1 + a3*b3*y2*z1 + 2*b1*b3*y2*z1 + a1*b1*b3*y2*z1 + 2*a2*b1*b3*y2*z1 + 2*a1*a2*b1*b3*y2*z1 + 2*a3*b1*b3*y2*z1 + a1*a3*b1*b3*y2*z1 + b1^2*b3*y2*z1 + a1*b1^2*b3*y2*z1 + a3*b1^2*b3*y2*z1 + 2*a2*b2*b3*y2*z1 + a3*b2*b3*y2*z1 + 3*b1*b2*b3*y2*z1 + a1*b1*b2*b3*y2*z1 + 2*a2*b1*b2*b3*y2*z1 + a3*b1*b2*b3*y2*z1 + b1^2*b2*b3*y2*z1 + b2^2*b3*y2*z1 + a1*b1*b2^2*b3*y2*z1 + a3*x1*y2*z1 + a3*b2*x1*y2*z1 + a1*a3*b2*x1*y2*z1 + b3*x1*y2*z1 + a1*b3*x1*y2*z1 + a2*b3*x1*y2*z1 + a1*a2*b3*x1*y2*z1 + b1*b3*x1*y2*z1 + a1*b1*b3*x1*y2*z1 + b1^2*b3*x1*y2*z1 + 2*b2*b3*x1*y2*z1 + 2*a1*b2*b3*x1*y2*z1 + b1*b2*b3*x1*y2*z1 + 2*a1*b1*b2*b3*x1*y2*z1 + b2^2*b3*x1*y2*z1 + a3*x2*y2*z1 + 2*a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + b3*x2*y2*z1 + a3*b3*x2*y2*z1 + 2*b1*b3*x2*y2*z1 + b2*b3*x2*y2*z1 + 3*b1*b2*b3*x2*y2*z1 + b1^2*b2*b3*x2*y2*z1 + x3*y2*z1 + a1*x3*y2*z1 + a2*x3*y2*z1 + a1*a2*x3*y2*z1 + a2*a3*x3*y2*z1 + a1*b1*x3*y2*z1 + a1*a2*b1*x3*y2*z1 + a3*b1*x3*y2*z1 + a1*b1^2*x3*y2*z1 + a1*a2*b1^2*x3*y2*z1 + 2*a2*b2*x3*y2*z1 + a1*a2*b2*x3*y2*z1 + 2*a3*b2*x3*y2*z1 + a2*a3*b2*x3*y2*z1 + a1*b1*b2*x3*y2*z1 + a1*a2*b1*b2*x3*y2*z1 + 2*a3*b1*b2*x3*y2*z1 + a2*a3*b1*b2*x3*y2*z1 + a1*b1^2*b2*x3*y2*z1 + b2^2*x3*y2*z1 + a3*b2^2*x3*y2*z1 + a1*a3*b2^2*x3*y2*z1 + 2*b1*b2^2*x3*y2*z1 + a3*b1*b2^2*x3*y2*z1 + a3*b1^2*b2^2*x3*y2*z1 + 3*b3*x3*y2*z1 + a1*b3*x3*y2*z1 + a2*b3*x3*y2*z1 + a3*b3*x3*y2*z1 + b1*b3*x3*y2*z1 + a1*b1*b3*x3*y2*z1 + a2*b1*b3*x3*y2*z1 + a1*a2*b1*b3*x3*y2*z1 + a1*b1^2*b3*x3*y2*z1 + 2*b2*b3*x3*y2*z1 + 3*a2*b2*b3*x3*y2*z1 + a1*a2*b2*b3*x3*y2*z1 + 2*a3*b2*b3*x3*y2*z1 + 4*b1*b2*b3*x3*y2*z1 + 2*a1*b1*b2*b3*x3*y2*z1 + 2*a2*b1*b2*b3*x3*y2*z1 + b1^2*b2*b3*x3*y2*z1 + a2*b1^2*b2*b3*x3*y2*z1 + b2^2*b3*x3*y2*z1 + b2*b3^2*x3*y2*z1 + a3*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a3*b1*b2*y1*y2*z1 + b3*y1*y2*z1 + a1*b3*y1*y2*z1 + a2*b3*y1*y2*z1 + 2*b1*b3*y1*y2*z1 + a1*b1*b3*y1*y2*z1 + 3*b2*b3*y1*y2*z1 + a1*b2*b3*y1*y2*z1 + b1*b2*b3*y1*y2*z1 + a1*b1*b2*b3*y1*y2*z1 + b1^2*b2*b3*y1*y2*z1 + b2^2*b3*y1*y2*z1 + (a3*b2*y2*(1 + y2)*z1)/2 + (b3*y2*(1 + y2)*z1)/2 + (a1*a2*b3*y2*(1 + y2)*z1)/2 + (a3*b3*y2*(1 + y2)*z1)/2 + (b1*b3*y2*(1 + y2)*z1)/2 + (a1*b1*b3*y2*(1 + y2)*z1)/2 + (b2*b3*y2*(1 + y2)*z1)/2 + (a1*b2*b3*y2*(1 + y2)*z1)/2 + (b1*b2*b3*y2*(1 + y2)*z1)/2 + (a1*b1*b2*b3*y2*(1 + y2)*z1)/2 + a1*a2*y3*z1 + 2*a2*a3*y3*z1 + 2*a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a2*a3*b1^2*y3*z1 + 2*b2*y3*z1 + 2*a1*b2*y3*z1 + 2*a2*b2*y3*z1 + 2*a1*a2*b2*y3*z1 + a3*b2*y3*z1 + a1*a3*b2*y3*z1 + 4*b1*b2*y3*z1 + 3*a1*b1*b2*y3*z1 + 4*a2*b1*b2*y3*z1 + a3*b1*b2*y3*z1 + b1^2*b2*y3*z1 + b2^2*y3*z1 + 2*a1*b2^2*y3*z1 + a2*b2^2*y3*z1 + a3*b2^2*y3*z1 + a2*a3*b2^2*y3*z1 + b1*b2^2*y3*z1 + b1^2*b2^2*y3*z1 + a2*a3*b3*y3*z1 + 3*b2*b3*y3*z1 + 2*a2*b2*b3*y3*z1 + 2*a3*b2*b3*y3*z1 + a1*a3*b2*b3*y3*z1 + 2*a2*a3*b2*b3*y3*z1 + 4*b1*b2*b3*y3*z1 + a1*b1*b2*b3*y3*z1 + a2*b1*b2*b3*y3*z1 + 2*a3*b1*b2*b3*y3*z1 + b1^2*b2*b3*y3*z1 + a2*b1^2*b2*b3*y3*z1 + b2^2*b3*y3*z1 + a1*b2^2*b3*y3*z1 + a2*b2^2*b3*y3*z1 + 2*a3*b2^2*b3*y3*z1 + b1*b2^2*b3*y3*z1 + a3*b1*b2^2*b3*y3*z1 + a2*b1*x1*y3*z1 + 2*b2*x1*y3*z1 + 2*a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + 2*a3*b2*x1*y3*z1 + a1*a3*b2*x1*y3*z1 + a2*a3*b2*x1*y3*z1 + a1*b1*b2*x1*y3*z1 + a2*b1*b2*x1*y3*z1 + b1^2*b2*x1*y3*z1 + b2^2*x1*y3*z1 + b1*b2^2*x1*y3*z1 + a3*b1*b2^2*x1*y3*z1 + a2*b3*x1*y3*z1 + a2*b1*b3*x1*y3*z1 + 2*b2*b3*x1*y3*z1 + a1*b2*b3*x1*y3*z1 + a2*b2*b3*x1*y3*z1 + 2*b1*b2*b3*x1*y3*z1 + a1*b1*b2*b3*x1*y3*z1 + a2*b1*b2*b3*x1*y3*z1 + 2*x2*y3*z1 + a2*x2*y3*z1 + a1*a2*x2*y3*z1 + a2*a3*x2*y3*z1 + b1*x2*y3*z1 + a1*b1*x2*y3*z1 + 3*a2*b1*x2*y3*z1 + a1*a2*b1*x2*y3*z1 + a3*b1*x2*y3*z1 + a1*b1^2*x2*y3*z1 + a2*b1^2*x2*y3*z1 + a1*a2*b1^2*x2*y3*z1 + b2*x2*y3*z1 + a2*b2*x2*y3*z1 + a1*a2*b2*x2*y3*z1 + 2*a3*b2*x2*y3*z1 + 2*a2*a3*b2*x2*y3*z1 + 2*b1*b2*x2*y3*z1 + a1*b1*b2*x2*y3*z1 + 2*a2*b1*b2*x2*y3*z1 + a1*a2*b1*b2*x2*y3*z1 + 2*a3*b1*b2*x2*y3*z1 + a2*a3*b1*b2*x2*y3*z1 + b1^2*b2*x2*y3*z1 + a1*b1^2*b2*x2*y3*z1 + b2^2*x2*y3*z1 + a1*b2^2*x2*y3*z1 + a1*a3*b2^2*x2*y3*z1 + 3*b1*b2^2*x2*y3*z1 + a3*b1*b2^2*x2*y3*z1 + b1^2*b2^2*x2*y3*z1 + a3*b1^2*b2^2*x2*y3*z1 + 2*b3*x2*y3*z1 + a1*b3*x2*y3*z1 + a3*b3*x2*y3*z1 + a2*a3*b3*x2*y3*z1 + 2*b1*b3*x2*y3*z1 + a1*b1*b3*x2*y3*z1 + 2*a2*b1*b3*x2*y3*z1 + a1*a2*b1*b3*x2*y3*z1 + a1*b1^2*b3*x2*y3*z1 + 3*b2*b3*x2*y3*z1 + 3*a2*b2*b3*x2*y3*z1 + a1*a2*b2*b3*x2*y3*z1 + 2*a3*b2*b3*x2*y3*z1 + 5*b1*b2*b3*x2*y3*z1 + 2*a1*b1*b2*b3*x2*y3*z1 + 2*a2*b1*b2*b3*x2*y3*z1 + b1^2*b2*b3*x2*y3*z1 + a2*b1^2*b2*b3*x2*y3*z1 + b2^2*b3*x2*y3*z1 + a2*b2^2*b3*x2*y3*z1 + b2*b3^2*x2*y3*z1 + 2*a2*b1*x3*y3*z1 + b2*x3*y3*z1 + 2*a1*b2*x3*y3*z1 + 2*a2*b2*x3*y3*z1 + 2*a3*b2*x3*y3*z1 + 3*b1*b2*x3*y3*z1 + a1*b1*b2*x3*y3*z1 + a2*b1*b2*x3*y3*z1 + a3*b1*b2*x3*y3*z1 + b1^2*b2*x3*y3*z1 + a1*b2^2*x3*y3*z1 + a2*b2^2*x3*y3*z1 + a3*b2^2*x3*y3*z1 + b1^2*b2^2*x3*y3*z1 + 3*b2*b3*x3*y3*z1 + 4*b1*b2*b3*x3*y3*z1 + b1^2*b2*b3*x3*y3*z1 + b2^2*b3*x3*y3*z1 + b1*b2^2*b3*x3*y3*z1 + a2*y1*y3*z1 + a2*b1*y1*y3*z1 + 2*a1*b2*y1*y3*z1 + 2*a2*b2*y1*y3*z1 + a3*b2*y1*y3*z1 + a1*a3*b2*y1*y3*z1 + a2*a3*b2*y1*y3*z1 + 3*b1*b2*y1*y3*z1 + a1*b1*b2*y1*y3*z1 + a2*b1*b2*y1*y3*z1 + a3*b1*b2*y1*y3*z1 + a3*b2^2*y1*y3*z1 + b1*b2^2*y1*y3*z1 + a3*b1*b2^2*y1*y3*z1 + a2*b3*y1*y3*z1 + a2*b1*b3*y1*y3*z1 + 2*b2*b3*y1*y3*z1 + 2*b1*b2*b3*y1*y3*z1 + a1*b1*b2*b3*y1*y3*z1 + a2*b1*b2*b3*y1*y3*z1 + b1^2*b2*b3*y1*y3*z1 + a1*y2*y3*z1 + 2*a2*y2*y3*z1 + a1*a2*y2*y3*z1 + a3*y2*y3*z1 + a2*a3*y2*y3*z1 + 2*b1*y2*y3*z1 + a1*a2*b1*y2*y3*z1 + a3*b1*y2*y3*z1 + b1^2*y2*y3*z1 + a1*a2*b1^2*y2*y3*z1 + 2*b2*y2*y3*z1 + a1*b2*y2*y3*z1 + 3*a2*b2*y2*y3*z1 + a1*a2*b2*y2*y3*z1 + a3*b2*y2*y3*z1 + a2*a3*b2*y2*y3*z1 + 2*b1*b2*y2*y3*z1 + a2*b1*b2*y2*y3*z1 + a1*a2*b1*b2*y2*y3*z1 + a3*b1*b2*y2*y3*z1 + a2*a3*b1*b2*y2*y3*z1 + a1*b1^2*b2*y2*y3*z1 + a1*b2^2*y2*y3*z1 + a3*b2^2*y2*y3*z1 + a1*a3*b2^2*y2*y3*z1 + 3*b1*b2^2*y2*y3*z1 + a3*b1*b2^2*y2*y3*z1 + b1^2*b2^2*y2*y3*z1 + a3*b1^2*b2^2*y2*y3*z1 + 2*b3*y2*y3*z1 + a1*b3*y2*y3*z1 + a2*b3*y2*y3*z1 + a3*b3*y2*y3*z1 + 2*b1*b3*y2*y3*z1 + 2*a1*b1*b3*y2*y3*z1 + a2*b1*b3*y2*y3*z1 + a1*a2*b1*b3*y2*y3*z1 + b1^2*b3*y2*y3*z1 + a1*b1^2*b3*y2*y3*z1 + 2*b2*b3*y2*y3*z1 + a1*b2*b3*y2*y3*z1 + 3*a2*b2*b3*y2*y3*z1 + a1*a2*b2*b3*y2*y3*z1 + 2*a3*b2*b3*y2*y3*z1 + 3*b1*b2*b3*y2*y3*z1 + 2*a1*b1*b2*b3*y2*y3*z1 + 2*a2*b1*b2*b3*y2*y3*z1 + a2*b1^2*b2*b3*y2*y3*z1 + b2^2*b3*y2*y3*z1 + b2*b3^2*y2*y3*z1 + (b2*y3*(1 + y3)*z1)/2 + (a2*b2*y3*(1 + y3)*z1)/2 + (a3*b2*y3*(1 + y3)*z1)/2 + (a2*a3*b2*y3*(1 + y3)*z1)/2 + (b1^2*b2*y3*(1 + y3)*z1)/2 + (a2*b3*y3*(1 + y3)*z1)/2 + (a2*a3*b3*y3*(1 + y3)*z1)/2 + (a2*b2*b3*y3*(1 + y3)*z1)/2 + (b1*b2*b3*y3*(1 + y3)*z1)/2 + (a2*b2^2*b3*y3*(1 + y3)*z1)/2 + (a2*a3*z1*(1 + z1))/2 + (a3*b1*b2*z1*(1 + z1))/2 + (a3*b2^2*z1*(1 + z1))/2 + a2*b3*z1*(1 + z1) + (b2*b3*z1*(1 + z1))/2 + (a1*b2*b3*z1*(1 + z1))/2 + b1*b2*b3*z1*(1 + z1) + (b1^2*b2*b3*z1*(1 + z1))/2 + (b2^2*b3*z1*(1 + z1))/2 + b1*b2*b3*x1*z1*(1 + z1) + (b2^2*b3*x1*z1*(1 + z1))/2 + (a1*b3*x2*z1*(1 + z1))/2 + (a1*a2*b3*x2*z1*(1 + z1))/2 + (a1*b1*b3*x2*z1*(1 + z1))/2 + (a1*b2*b3*x2*z1*(1 + z1))/2 + (b1*b2*b3*x2*z1*(1 + z1))/2 + (a1*b1*b2*b3*x2*z1*(1 + z1))/2 + (b2^2*b3*x2*z1*(1 + z1))/2 + (b2*x3*z1*(1 + z1))/2 + (b1*b2*x3*z1*(1 + z1))/2 + (b2^2*x3*z1*(1 + z1))/2 + (a2*b3*y1*z1*(1 + z1))/2 + (b2*b3*y1*z1*(1 + z1))/2 + (b1*b2*b3*y1*z1*(1 + z1))/2 + (b2^2*b3*y1*z1*(1 + z1))/2 + (a2*b3*y2*z1*(1 + z1))/2 + (a1*a2*b3*y2*z1*(1 + z1))/2 + (b1*b3*y2*z1*(1 + z1))/2 + (a1*b1*b3*y2*z1*(1 + z1))/2 + (b2*b3*y2*z1*(1 + z1))/2 + (a1*b2*b3*y2*z1*(1 + z1))/2 + (a1*b1*b2*b3*y2*z1*(1 + z1))/2 + (b2^2*b3*y2*z1*(1 + z1))/2 + (b2*y3*z1*(1 + z1))/2 + (b1*b2*y3*z1*(1 + z1))/2 + (b2^2*y3*z1*(1 + z1))/2 + (b2*b3*z1^2*(1 + z1))/2 + b1*b2*b3*z1^2*(1 + z1) + (b2^2*b3*z1^2*(1 + z1))/2 + a3*b1*z2 + a3*b1*b2*z2 + 2*a1*a3*b1*b2*z2 + 2*a3*b1^2*b2*z2 + a1*b1*b3*z2 + a1*a2*b1*b3*z2 + a3*b1*b3*z2 + a1*a3*b1*b3*z2 + b1^2*b3*z2 + a3*b1^2*b3*z2 + b1*b2*b3*z2 + a1*b1*b2*b3*z2 + b1^2*b2*b3*z2 + a1*b1^2*b2*b3*z2 + a1*b1*b2^2*b3*z2 + a2*a3*x1*z2 + a1*a3*b1*x1*z2 + a1*a3*b1^2*x1*z2 + 2*a3*b2*x1*z2 + a1*a3*b2*x1*z2 + 4*a3*b1*b2*x1*z2 + 2*a1*a3*b1*b2*x1*z2 + 2*a3*b1^2*b2*x1*z2 + a3*b1*b2^2*x1*z2 + a1*a3*b3*x1*z2 + b1*b3*x1*z2 + 2*a2*b1*b3*x1*z2 + 2*a1*a2*b1*b3*x1*z2 + 2*a3*b1*b3*x1*z2 + a1*a3*b1*b3*x1*z2 + a1*b1^2*b3*x1*z2 + a3*b1^2*b3*x1*z2 + b2*b3*x1*z2 + 2*a2*b2*b3*x1*z2 + a3*b2*b3*x1*z2 + b1*b2*b3*x1*z2 + 2*a2*b1*b2*b3*x1*z2 + a3*b1*b2*b3*x1*z2 + 2*b2^2*b3*x1*z2 + a1*b1*b2^2*b3*x1*z2 + (b3*x1*(1 + x1)*z2)/2 + (a1*b3*x1*(1 + x1)*z2)/2 + (a1*a2*b3*x1*(1 + x1)*z2)/2 + b1*b3*x1*(1 + x1)*z2 + a1*b1*b3*x1*(1 + x1)*z2 + (a2*b1*b3*x1*(1 + x1)*z2)/2 + (b1^2*b3*x1*(1 + x1)*z2)/2 + (b2*b3*x1*(1 + x1)*z2)/2 + (a1*b2*b3*x1*(1 + x1)*z2)/2 + (b1*b2*b3*x1*(1 + x1)*z2)/2 + (a1*b1*b2*b3*x1*(1 + x1)*z2)/2 + (b2^2*b3*x1*(1 + x1)*z2)/2 + a3*b1^2*x2*z2 + a1*a3*b1^2*x2*z2 + a3*b1*b2*x2*z2 + a3*b1^2*b2*x2*z2 + a1*a2*b3*x2*z2 + a2*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a3*b1^2*b3*x2*z2 + 2*b1*b2*b3*x2*z2 + a1*b1*b2*b3*x2*z2 + b1^2*b2*b3*x2*z2 + a1*b1^2*b2*b3*x2*z2 + a1*b2^2*b3*x2*z2 + b1*b2^2*b3*x2*z2 + a3*x1*x2*z2 + a3*b1*x1*x2*z2 + 2*a3*b2*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a3*b1^2*b2*x1*x2*z2 + 2*b3*x1*x2*z2 + a1*b3*x1*x2*z2 + 2*a2*b3*x1*x2*z2 + a1*a2*b3*x1*x2*z2 + 2*a3*b3*x1*x2*z2 + 5*b1*b3*x1*x2*z2 + 3*a1*b1*b3*x1*x2*z2 + a2*b1*b3*x1*x2*z2 + a1*a2*b1*b3*x1*x2*z2 + b1^2*b3*x1*x2*z2 + a1*b1^2*b3*x1*x2*z2 + 2*b2*b3*x1*x2*z2 + 2*a1*b2*b3*x1*x2*z2 + 3*b1*b2*b3*x1*x2*z2 + 2*a1*b1*b2*b3*x1*x2*z2 + b2^2*b3*x1*x2*z2 + b3^2*x1*x2*z2 + b1*b3*x2*(1 + x2)*z2 + (a2*b1*b3*x2*(1 + x2)*z2)/2 + (b1^2*b3*x2*(1 + x2)*z2)/2 + (b1*b2*b3*x2*(1 + x2)*z2)/2 + b1*x3*z2 + a1*a2*b1*x3*z2 + a3*b1*x3*z2 + b1^2*x3*z2 + a1*b1^2*x3*z2 + a3*b1^2*x3*z2 + a1*a3*b1^2*x3*z2 + a2*a3*b1^2*x3*z2 + 3*a1*b1*b2*x3*z2 + a1*a3*b1*b2*x3*z2 + 2*b1^2*b2*x3*z2 + a1*b1^2*b2*x3*z2 + a2*b1^2*b2*x3*z2 + a3*b1^2*b2*x3*z2 + a1*a3*b1^2*b2*x3*z2 + a1*a3*b2^2*x3*z2 + a3*b1*b2^2*x3*z2 + b1*b3*x3*z2 + 2*a1*b1*b3*x3*z2 + a3*b1*b3*x3*z2 + b1^2*b3*x3*z2 + a1*a2*b2*b3*x3*z2 + a2*b1*b2*b3*x3*z2 + 2*a1*a2*b1*b2*b3*x3*z2 + a3*b1*b2*b3*x3*z2 + a1*a2*b2^2*b3*x3*z2 + b1*b2^2*b3*x3*z2 + a2*b1*b2^2*b3*x3*z2 + a3*b1*b2^2*b3*x3*z2 + x1*x3*z2 + 2*a2*x1*x3*z2 + 2*a3*x1*x3*z2 + a2*a3*x1*x3*z2 + b1*x1*x3*z2 + 2*a1*b1*x1*x3*z2 + a2*b1*x1*x3*z2 + a1*a2*b1*x1*x3*z2 + a2*b1^2*x1*x3*z2 + a1*a2*b1^2*x1*x3*z2 + b2*x1*x3*z2 + a1*b2*x1*x3*z2 + 2*a2*b2*x1*x3*z2 + a3*b2*x1*x3*z2 + a1*a3*b2*x1*x3*z2 + 2*a2*a3*b2*x1*x3*z2 + 4*b1*b2*x1*x3*z2 + a1*b1*b2*x1*x3*z2 + a2*b1*b2*x1*x3*z2 + a1*a2*b1*b2*x1*x3*z2 + a3*b1*b2*x1*x3*z2 + a2*a3*b1*b2*x1*x3*z2 + 2*b1^2*b2*x1*x3*z2 + a3*b1^2*b2*x1*x3*z2 + b2^2*x1*x3*z2 + a1*a3*b2^2*x1*x3*z2 + 2*b1*b2^2*x1*x3*z2 + a3*b1^2*b2^2*x1*x3*z2 + b3*x1*x3*z2 + a1*b3*x1*x3*z2 + a2*b3*x1*x3*z2 + 2*a3*b3*x1*x3*z2 + a2*a3*b3*x1*x3*z2 + 2*b1*b3*x1*x3*z2 + a1*b1*b3*x1*x3*z2 + 2*a2*b1*b3*x1*x3*z2 + a1*a2*b1*b3*x1*x3*z2 + a1*b1^2*b3*x1*x3*z2 + 3*b2*b3*x1*x3*z2 + a1*b2*b3*x1*x3*z2 + 3*a2*b2*b3*x1*x3*z2 + a1*a2*b2*b3*x1*x3*z2 + 2*a3*b2*b3*x1*x3*z2 + 4*b1*b2*b3*x1*x3*z2 + 2*a1*b1*b2*b3*x1*x3*z2 + a2*b1*b2*b3*x1*x3*z2 + b1^2*b2*b3*x1*x3*z2 + a2*b1^2*b2*b3*x1*x3*z2 + b2^2*b3*x1*x3*z2 + a2*b2^2*b3*x1*x3*z2 + b3^2*x1*x3*z2 + b2*b3^2*x1*x3*z2 + b1*x2*x3*z2 + a1*b1*x2*x3*z2 + a2*b1*x2*x3*z2 + b1^2*x2*x3*z2 + a1*b1^2*x2*x3*z2 + a2*b1^2*x2*x3*z2 + a1*b2*x2*x3*z2 + b1*b2*x2*x3*z2 + a1*b1*b2*x2*x3*z2 + a2*b1*b2*x2*x3*z2 + a2*b1^2*b2*x2*x3*z2 + a1*b3*x2*x3*z2 + a1*a2*b3*x2*x3*z2 + b1*b3*x2*x3*z2 + a2*b1*b3*x2*x3*z2 + b1^2*b3*x2*x3*z2 + a1*b2*b3*x2*x3*z2 + 2*b1*b2*b3*x2*x3*z2 + a1*b1*b2*b3*x2*x3*z2 + (a1*a2*x3*(1 + x3)*z2)/2 + (a1*a3*x3*(1 + x3)*z2)/2 + (b1*x3*(1 + x3)*z2)/2 + (a1*b1*x3*(1 + x3)*z2)/2 + (a2*b1*x3*(1 + x3)*z2)/2 + (a3*b1*x3*(1 + x3)*z2)/2 + (b1*b2*x3*(1 + x3)*z2)/2 + (a1*b1*b2*x3*(1 + x3)*z2)/2 + a2*a3*y1*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 + a3*b1^2*y1*z2 + a1*a3*b1^2*y1*z2 + 3*a3*b2*y1*z2 + a1*a3*b2*y1*z2 + 3*a3*b1*b2*y1*z2 + 2*a1*a3*b1*b2*y1*z2 + 2*a3*b1^2*b2*y1*z2 + a3*b1*b2^2*y1*z2 + a2*b3*y1*z2 + a3*b3*y1*z2 + a1*a3*b3*y1*z2 + 2*b1*b3*y1*z2 + 4*a2*b1*b3*y1*z2 + 2*a1*a2*b1*b3*y1*z2 + 2*a3*b1*b3*y1*z2 + a1*a3*b1*b3*y1*z2 + 2*b1^2*b3*y1*z2 + 2*a1*b1^2*b3*y1*z2 + a3*b1^2*b3*y1*z2 + b2*b3*y1*z2 + 2*a2*b2*b3*y1*z2 + a3*b2*b3*y1*z2 + 3*b1*b2*b3*y1*z2 + 2*a2*b1*b2*b3*y1*z2 + a3*b1*b2*b3*y1*z2 + b2^2*b3*y1*z2 + b1*b2^2*b3*y1*z2 + a1*b1*b2^2*b3*y1*z2 + a3*b2*x1*y1*z2 + a3*b1*b2*x1*y1*z2 + b3*x1*y1*z2 + a2*b3*x1*y1*z2 + b1*b3*x1*y1*z2 + a1*b1*b3*x1*y1*z2 + b1^2*b3*x1*y1*z2 + 3*b2*b3*x1*y1*z2 + 2*b1*b2*b3*x1*y1*z2 + b1^2*b2*b3*x1*y1*z2 + b2^2*b3*x1*y1*z2 + a3*x2*y1*z2 + a3*b1*x2*y1*z2 + 3*a3*b2*x2*y1*z2 + a1*a3*b2*x2*y1*z2 + a3*b1^2*b2*x2*y1*z2 + 2*b3*x2*y1*z2 + 2*a1*b3*x2*y1*z2 + a2*b3*x2*y1*z2 + a1*a2*b3*x2*y1*z2 + 2*a3*b3*x2*y1*z2 + 3*b1*b3*x2*y1*z2 + 3*a1*b1*b3*x2*y1*z2 + a1*a2*b1*b3*x2*y1*z2 + a1*b1^2*b3*x2*y1*z2 + 4*b2*b3*x2*y1*z2 + 2*a1*b2*b3*x2*y1*z2 + 3*b1*b2*b3*x2*y1*z2 + 2*a1*b1*b2*b3*x2*y1*z2 + b2^2*b3*x2*y1*z2 + b3^2*x2*y1*z2 + x3*y1*z2 + a2*x3*y1*z2 + 2*a3*x3*y1*z2 + a2*a3*x3*y1*z2 + 2*b1*x3*y1*z2 + a1*b1*x3*y1*z2 + a1*a2*b1*x3*y1*z2 + a1*a2*b1^2*x3*y1*z2 + 3*b2*x3*y1*z2 + a1*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + a1*a3*b2*x3*y1*z2 + 2*a2*a3*b2*x3*y1*z2 + 5*b1*b2*x3*y1*z2 + a1*b1*b2*x3*y1*z2 + a1*a2*b1*b2*x3*y1*z2 + a3*b1*b2*x3*y1*z2 + a2*a3*b1*b2*x3*y1*z2 + b1^2*b2*x3*y1*z2 + a2*b1^2*b2*x3*y1*z2 + a3*b1^2*b2*x3*y1*z2 + b2^2*x3*y1*z2 + a3*b2^2*x3*y1*z2 + a1*a3*b2^2*x3*y1*z2 + 2*b1*b2^2*x3*y1*z2 + a3*b1^2*b2^2*x3*y1*z2 + a2*b3*x3*y1*z2 + 2*a3*b3*x3*y1*z2 + a2*a3*b3*x3*y1*z2 + 2*b1*b3*x3*y1*z2 + 2*a1*b1*b3*x3*y1*z2 + a1*a2*b1*b3*x3*y1*z2 + a1*b1^2*b3*x3*y1*z2 + a2*b1^2*b3*x3*y1*z2 + 3*b2*b3*x3*y1*z2 + a1*b2*b3*x3*y1*z2 + 4*a2*b2*b3*x3*y1*z2 + a1*a2*b2*b3*x3*y1*z2 + 2*a3*b2*b3*x3*y1*z2 + 3*b1*b2*b3*x3*y1*z2 + 2*a1*b1*b2*b3*x3*y1*z2 + a2*b1*b2*b3*x3*y1*z2 + b1^2*b2*b3*x3*y1*z2 + a2*b1^2*b2*b3*x3*y1*z2 + 2*b2^2*b3*x3*y1*z2 + a2*b2^2*b3*x3*y1*z2 + b3^2*x3*y1*z2 + b2*b3^2*x3*y1*z2 + (a1*b3*y1*(1 + y1)*z2)/2 + (a2*b3*y1*(1 + y1)*z2)/2 + (a1*a2*b3*y1*(1 + y1)*z2)/2 + a1*b1*b3*y1*(1 + y1)*z2 + (a2*b1*b3*y1*(1 + y1)*z2)/2 + (b1^2*b3*y1*(1 + y1)*z2)/2 + b2*b3*y1*(1 + y1)*z2 + (a1*b2*b3*y1*(1 + y1)*z2)/2 + (a1*b1*b2*b3*y1*(1 + y1)*z2)/2 + (b2^2*b3*y1*(1 + y1)*z2)/2 + a1*a3*b1^2*y2*z2 + a3*b1*b2*y2*z2 + a3*b1^2*b2*y2*z2 + a1*a2*b3*y2*z2 + a3*b1*b3*y2*z2 + a1*b1^2*b3*y2*z2 + a3*b1^2*b3*y2*z2 + a1*b1*b2*b3*y2*z2 + a1*b1^2*b2*b3*y2*z2 + a1*b2^2*b3*y2*z2 + 2*a3*x1*y2*z2 + a3*b1*x1*y2*z2 + 2*a3*b2*x1*y2*z2 + a1*a3*b2*x1*y2*z2 + a3*b1*b2*x1*y2*z2 + a3*b1^2*b2*x1*y2*z2 + 3*b3*x1*y2*z2 + 2*a2*b3*x1*y2*z2 + a3*b3*x1*y2*z2 + 3*b1*b3*x1*y2*z2 + a1*b1*b3*x1*y2*z2 + a1*a2*b1*b3*x1*y2*z2 + a1*b1^2*b3*x1*y2*z2 + 2*b2*b3*x1*y2*z2 + a1*b2*b3*x1*y2*z2 + 2*b1*b2*b3*x1*y2*z2 + a1*b1*b2*b3*x1*y2*z2 + b1^2*b2*b3*x1*y2*z2 + 2*b2^2*b3*x1*y2*z2 + b3^2*x1*y2*z2 + a1*b3*x2*y2*z2 + b1*b2*b3*x2*y2*z2 + b1^2*x3*y2*z2 + a1*b1^2*x3*y2*z2 + a2*b1^2*x3*y2*z2 + a1*b1*b2*x3*y2*z2 + a2*b1*b2*x3*y2*z2 + b1^2*b2*x3*y2*z2 + a2*b1^2*b2*x3*y2*z2 + a1*a2*b3*x3*y2*z2 + b1*b3*x3*y2*z2 + a1*b1*b3*x3*y2*z2 + b1^2*b3*x3*y2*z2 + a1*b2*b3*x3*y2*z2 + b1*b2*b3*x3*y2*z2 + a1*b1*b2*b3*x3*y2*z2 + 2*a3*y1*y2*z2 + a3*b1*y1*y2*z2 + a3*b2*y1*y2*z2 + a1*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a3*b1^2*b2*y1*y2*z2 + 2*b3*y1*y2*z2 + a1*b3*y1*y2*z2 + 2*a2*b3*y1*y2*z2 + a3*b3*y1*y2*z2 + 2*b1*b3*y1*y2*z2 + a1*b1*b3*y1*y2*z2 + a2*b1*b3*y1*y2*z2 + a1*a2*b1*b3*y1*y2*z2 + 2*b1^2*b3*y1*y2*z2 + a1*b1^2*b3*y1*y2*z2 + 3*b2*b3*y1*y2*z2 + a1*b2*b3*y1*y2*z2 + b1*b2*b3*y1*y2*z2 + a1*b1*b2*b3*y1*y2*z2 + b1^2*b2*b3*y1*y2*z2 + 2*b2^2*b3*y1*y2*z2 + b3^2*y1*y2*z2 + (a2*b1*b3*y2*(1 + y2)*z2)/2 + (b1^2*b3*y2*(1 + y2)*z2)/2 + a1*a2*b1*y3*z2 + a3*b1*y3*z2 + b1^2*y3*z2 + a1*b1^2*y3*z2 + a2*b1^2*y3*z2 + a3*b1^2*y3*z2 + a2*a3*b1^2*y3*z2 + 2*a1*b1*b2*y3*z2 + a1*a3*b1*b2*y3*z2 + b1^2*b2*y3*z2 + a2*b1^2*b2*y3*z2 + 2*a3*b1^2*b2*y3*z2 + a1*a3*b1^2*b2*y3*z2 + 2*a1*b1*b3*y3*z2 + a3*b1*b3*y3*z2 + a1*b1^2*b3*y3*z2 + a1*a2*b2*b3*y3*z2 + a2*b1*b2*b3*y3*z2 + 2*a1*a2*b1*b2*b3*y3*z2 + a3*b1*b2*b3*y3*z2 + b1^2*b2*b3*y3*z2 + a1*a2*b2^2*b3*y3*z2 + a2*b1*b2^2*b3*y3*z2 + a3*b1*b2^2*b3*y3*z2 + a1*x1*y3*z2 + a2*x1*y3*z2 + a3*x1*y3*z2 + a2*a3*x1*y3*z2 + 2*b1*x1*y3*z2 + a1*b1*x1*y3*z2 + a2*b1*x1*y3*z2 + a1*a2*b1*x1*y3*z2 + a1*b1^2*x1*y3*z2 + a2*b1^2*x1*y3*z2 + a1*a2*b1^2*x1*y3*z2 + 3*b2*x1*y3*z2 + 2*a1*b2*x1*y3*z2 + 2*a2*b2*x1*y3*z2 + a3*b2*x1*y3*z2 + a1*a3*b2*x1*y3*z2 + 2*a2*a3*b2*x1*y3*z2 + 4*b1*b2*x1*y3*z2 + 2*a2*b1*b2*x1*y3*z2 + a1*a2*b1*b2*x1*y3*z2 + 2*a3*b1*b2*x1*y3*z2 + a2*a3*b1*b2*x1*y3*z2 + 3*b1^2*b2*x1*y3*z2 + a3*b1^2*b2*x1*y3*z2 + b2^2*x1*y3*z2 + a1*b2^2*x1*y3*z2 + a1*a3*b2^2*x1*y3*z2 + 2*b1*b2^2*x1*y3*z2 + b1^2*b2^2*x1*y3*z2 + a3*b1^2*b2^2*x1*y3*z2 + 2*b3*x1*y3*z2 + a3*b3*x1*y3*z2 + a2*a3*b3*x1*y3*z2 + b1*b3*x1*y3*z2 + 2*a1*b1*b3*x1*y3*z2 + 2*a2*b1*b3*x1*y3*z2 + a1*a2*b1*b3*x1*y3*z2 + b1^2*b3*x1*y3*z2 + a1*b1^2*b3*x1*y3*z2 + b2*b3*x1*y3*z2 + 3*a2*b2*b3*x1*y3*z2 + a1*a2*b2*b3*x1*y3*z2 + 2*a3*b2*b3*x1*y3*z2 + 4*b1*b2*b3*x1*y3*z2 + 2*a1*b1*b2*b3*x1*y3*z2 + a2*b1*b2*b3*x1*y3*z2 + a2*b1^2*b2*b3*x1*y3*z2 + 2*b2^2*b3*x1*y3*z2 + a2*b2^2*b3*x1*y3*z2 + b3^2*x1*y3*z2 + b2*b3^2*x1*y3*z2 + 2*b1*x2*y3*z2 + a1*b1*x2*y3*z2 + a2*b1*x2*y3*z2 + a1*b1^2*x2*y3*z2 + a2*b1^2*x2*y3*z2 + a1*b2*x2*y3*z2 + a1*b1*b2*x2*y3*z2 + a2*b1*b2*x2*y3*z2 + b1^2*b2*x2*y3*z2 + a2*b1^2*b2*x2*y3*z2 + a1*b3*x2*y3*z2 + a1*a2*b3*x2*y3*z2 + 2*b1*b3*x2*y3*z2 + a2*b1*b3*x2*y3*z2 + a1*b2*b3*x2*y3*z2 + 2*b1*b2*b3*x2*y3*z2 + a1*b1*b2*b3*x2*y3*z2 + a1*b1^2*x3*y3*z2 + b1*b2*x3*y3*z2 + 2*a1*b1*b2*x3*y3*z2 + b1^2*b2*x3*y3*z2 + b1*b2^2*x3*y3*z2 + a1*b1*b3*x3*y3*z2 + a1*b1^2*b3*x3*y3*z2 + b1*b2*b3*x3*y3*z2 + 2*a1*b1*b2*b3*x3*y3*z2 + b1^2*b2*b3*x3*y3*z2 + a1*b2^2*b3*x3*y3*z2 + a1*y1*y3*z2 + 2*a2*y1*y3*z2 + a3*y1*y3*z2 + a2*a3*y1*y3*z2 + 2*b1*y1*y3*z2 + 2*a1*b1*y1*y3*z2 + a1*a2*b1*y1*y3*z2 + b1^2*y1*y3*z2 + a1*b1^2*y1*y3*z2 + a1*a2*b1^2*y1*y3*z2 + b2*y1*y3*z2 + 2*a1*b2*y1*y3*z2 + 2*a2*b2*y1*y3*z2 + a3*b2*y1*y3*z2 + a1*a3*b2*y1*y3*z2 + 2*a2*a3*b2*y1*y3*z2 + 4*b1*b2*y1*y3*z2 + a2*b1*b2*y1*y3*z2 + a1*a2*b1*b2*y1*y3*z2 + 2*a3*b1*b2*y1*y3*z2 + a2*a3*b1*b2*y1*y3*z2 + 3*b1^2*b2*y1*y3*z2 + a2*b1^2*b2*y1*y3*z2 + a3*b1^2*b2*y1*y3*z2 + a1*b2^2*y1*y3*z2 + a3*b2^2*y1*y3*z2 + a1*a3*b2^2*y1*y3*z2 + 2*b1*b2^2*y1*y3*z2 + b1^2*b2^2*y1*y3*z2 + a3*b1^2*b2^2*y1*y3*z2 + b3*y1*y3*z2 + a1*b3*y1*y3*z2 + a3*b3*y1*y3*z2 + a2*a3*b3*y1*y3*z2 + 2*b1*b3*y1*y3*z2 + a1*b1*b3*y1*y3*z2 + a1*a2*b1*b3*y1*y3*z2 + a1*b1^2*b3*y1*y3*z2 + a2*b1^2*b3*y1*y3*z2 + 2*b2*b3*y1*y3*z2 + 2*a1*b2*b3*y1*y3*z2 + 4*a2*b2*b3*y1*y3*z2 + a1*a2*b2*b3*y1*y3*z2 + 2*a3*b2*b3*y1*y3*z2 + 3*b1*b2*b3*y1*y3*z2 + 2*a1*b1*b2*b3*y1*y3*z2 + a2*b1*b2*b3*y1*y3*z2 + a2*b1^2*b2*b3*y1*y3*z2 + b2^2*b3*y1*y3*z2 + a2*b2^2*b3*y1*y3*z2 + b3^2*y1*y3*z2 + b2*b3^2*y1*y3*z2 + a1*b1^2*y2*y3*z2 + a2*b1^2*y2*y3*z2 + b1*b2*y2*y3*z2 + a1*b1*b2*y2*y3*z2 + a2*b1*b2*y2*y3*z2 + a2*b1^2*b2*y2*y3*z2 + a1*a2*b3*y2*y3*z2 + a1*b1*b3*y2*y3*z2 + a1*b2*b3*y2*y3*z2 + b1*b2*b3*y2*y3*z2 + a1*b1*b2*b3*y2*y3*z2 + (a1*a2*y3*(1 + y3)*z2)/2 + (a1*a3*y3*(1 + y3)*z2)/2 + (b1*y3*(1 + y3)*z2)/2 + (a1*b1*y3*(1 + y3)*z2)/2 + (a2*b1*y3*(1 + y3)*z2)/2 + (a3*b1*y3*(1 + y3)*z2)/2 + (b1*b2*y3*(1 + y3)*z2)/2 + (a1*b1*b2*y3*(1 + y3)*z2)/2 + (b1*b3*y3*(1 + y3)*z2)/2 + (a3*b1*b3*y3*(1 + y3)*z2)/2 + a2*a3*z1*z2 + a1*a3*b1*z1*z2 + a3*b1^2*z1*z2 + a1*a3*b1^2*z1*z2 + 3*a1*a3*b2*z1*z2 + 4*a3*b1*b2*z1*z2 + 2*a1*a3*b1*b2*z1*z2 + 2*a3*b1^2*b2*z1*z2 + a3*b2^2*z1*z2 + a3*b1*b2^2*z1*z2 + 2*a2*b3*z1*z2 + a1*a2*b3*z1*z2 + 2*b1*b3*z1*z2 + 2*a1*b1*b3*z1*z2 + 3*a2*b1*b3*z1*z2 + 2*a1*a2*b1*b3*z1*z2 + a3*b1*b3*z1*z2 + a1*a3*b1*b3*z1*z2 + b1^2*b3*z1*z2 + a1*b1^2*b3*z1*z2 + a3*b1^2*b3*z1*z2 + b2*b3*z1*z2 + 2*a1*b2*b3*z1*z2 + b1*b2*b3*z1*z2 + a1*b1*b2*b3*z1*z2 + 2*a2*b1*b2*b3*z1*z2 + a3*b1*b2*b3*z1*z2 + b2^2*b3*z1*z2 + a1*b1*b2^2*b3*z1*z2 + a1*a3*b2*x1*z1*z2 + a3*b1*b2*x1*z1*z2 + 2*b3*x1*z1*z2 + 2*a1*b3*x1*z1*z2 + a1*a2*b3*x1*z1*z2 + 4*b1*b3*x1*z1*z2 + 2*a1*b1*b3*x1*z1*z2 + a2*b1*b3*x1*z1*z2 + 2*b1^2*b3*x1*z1*z2 + 2*a1*b2*b3*x1*z1*z2 + b1*b2*b3*x1*z1*z2 + 2*a1*b1*b2*b3*x1*z1*z2 + b2^2*b3*x1*z1*z2 + 2*a3*x2*z1*z2 + a3*b1*x2*z1*z2 + 2*a3*b2*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a3*b1*b2*x2*z1*z2 + a3*b1^2*b2*x2*z1*z2 + a1*b3*x2*z1*z2 + 2*a2*b3*x2*z1*z2 + a1*a2*b3*x2*z1*z2 + 2*a3*b3*x2*z1*z2 + 5*b1*b3*x2*z1*z2 + 3*a1*b1*b3*x2*z1*z2 + a2*b1*b3*x2*z1*z2 + a1*a2*b1*b3*x2*z1*z2 + b1^2*b3*x2*z1*z2 + a1*b1^2*b3*x2*z1*z2 + 2*b2*b3*x2*z1*z2 + 2*a1*b2*b3*x2*z1*z2 + 3*b1*b2*b3*x2*z1*z2 + 2*a1*b1*b2*b3*x2*z1*z2 + b2^2*b3*x2*z1*z2 + b3^2*x2*z1*z2 + 2*a2*x3*z1*z2 + a1*a2*x3*z1*z2 + 2*a3*x3*z1*z2 + a2*a3*x3*z1*z2 + b1*x3*z1*z2 + a1*b1*x3*z1*z2 + a1*a2*b1*x3*z1*z2 + a1*b1^2*x3*z1*z2 + a1*a2*b1^2*x3*z1*z2 + b2*x3*z1*z2 + 2*a2*b2*x3*z1*z2 + a1*a2*b2*x3*z1*z2 + 2*a3*b2*x3*z1*z2 + a1*a3*b2*x3*z1*z2 + a2*a3*b2*x3*z1*z2 + 3*b1*b2*x3*z1*z2 + a1*b1*b2*x3*z1*z2 + a1*a2*b1*b2*x3*z1*z2 + 2*a3*b1*b2*x3*z1*z2 + a2*a3*b1*b2*x3*z1*z2 + b1^2*b2*x3*z1*z2 + a1*b1^2*b2*x3*z1*z2 + a3*b1^2*b2*x3*z1*z2 + b2^2*x3*z1*z2 + a1*a3*b2^2*x3*z1*z2 + 2*b1*b2^2*x3*z1*z2 + a3*b1*b2^2*x3*z1*z2 + a3*b1^2*b2^2*x3*z1*z2 + 2*a2*b3*x3*z1*z2 + 2*a3*b3*x3*z1*z2 + a2*a3*b3*x3*z1*z2 + b1*b3*x3*z1*z2 + 2*a1*b1*b3*x3*z1*z2 + 2*a2*b1*b3*x3*z1*z2 + a1*a2*b1*b3*x3*z1*z2 + b1^2*b3*x3*z1*z2 + a1*b1^2*b3*x3*z1*z2 + b2*b3*x3*z1*z2 + 4*a2*b2*b3*x3*z1*z2 + a1*a2*b2*b3*x3*z1*z2 + 2*a3*b2*b3*x3*z1*z2 + 4*b1*b2*b3*x3*z1*z2 + 2*a1*b1*b2*b3*x3*z1*z2 + 2*a2*b1*b2*b3*x3*z1*z2 + b1^2*b2*b3*x3*z1*z2 + a2*b1^2*b2*b3*x3*z1*z2 + b2^2*b3*x3*z1*z2 + a2*b2^2*b3*x3*z1*z2 + b3^2*x3*z1*z2 + b2*b3^2*x3*z1*z2 + a1*a3*b2*y1*z1*z2 + 2*a3*b1*b2*y1*z1*z2 + b3*y1*z1*z2 + a1*b3*y1*z1*z2 + a2*b3*y1*z1*z2 + b1*b3*y1*z1*z2 + a1*b1*b3*y1*z1*z2 + b2*b3*y1*z1*z2 + a1*b2*b3*y1*z1*z2 + b1*b2*b3*y1*z1*z2 + a1*b1*b2*b3*y1*z1*z2 + b1^2*b2*b3*y1*z1*z2 + b2^2*b3*y1*z1*z2 + a3*y2*z1*z2 + a3*b1*y2*z1*z2 + a3*b2*y2*z1*z2 + a1*a3*b2*y2*z1*z2 + 2*a3*b1*b2*y2*z1*z2 + a3*b1^2*b2*y2*z1*z2 + b3*y2*z1*z2 + 2*a2*b3*y2*z1*z2 + a3*b3*y2*z1*z2 + 3*b1*b3*y2*z1*z2 + a1*b1*b3*y2*z1*z2 + a1*a2*b1*b3*y2*z1*z2 + a1*b1^2*b3*y2*z1*z2 + 3*b2*b3*y2*z1*z2 + a1*b2*b3*y2*z1*z2 + b1*b2*b3*y2*z1*z2 + a1*b1*b2*b3*y2*z1*z2 + b1^2*b2*b3*y2*z1*z2 + 2*b2^2*b3*y2*z1*z2 + b3^2*y2*z1*z2 + y3*z1*z2 + a2*y3*z1*z2 + a1*a2*y3*z1*z2 + a3*y3*z1*z2 + a2*a3*y3*z1*z2 + a1*a2*b1*y3*z1*z2 + b1^2*y3*z1*z2 + a1*a2*b1^2*y3*z1*z2 + 2*b2*y3*z1*z2 + 2*a1*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + a1*a2*b2*y3*z1*z2 + a3*b2*y3*z1*z2 + a1*a3*b2*y3*z1*z2 + a2*a3*b2*y3*z1*z2 + 5*b1*b2*y3*z1*z2 + a2*b1*b2*y3*z1*z2 + a1*a2*b1*b2*y3*z1*z2 + 3*a3*b1*b2*y3*z1*z2 + a2*a3*b1*b2*y3*z1*z2 + 2*b1^2*b2*y3*z1*z2 + a1*b1^2*b2*y3*z1*z2 + a3*b1^2*b2*y3*z1*z2 + b2^2*y3*z1*z2 + a1*b2^2*y3*z1*z2 + a1*a3*b2^2*y3*z1*z2 + 3*b1*b2^2*y3*z1*z2 + a3*b1*b2^2*y3*z1*z2 + b1^2*b2^2*y3*z1*z2 + a3*b1^2*b2^2*y3*z1*z2 + b3*y3*z1*z2 + a2*b3*y3*z1*z2 + a3*b3*y3*z1*z2 + a2*a3*b3*y3*z1*z2 + a1*b1*b3*y3*z1*z2 + 2*a2*b1*b3*y3*z1*z2 + a1*a2*b1*b3*y3*z1*z2 + a1*b1^2*b3*y3*z1*z2 + b2*b3*y3*z1*z2 + a1*b2*b3*y3*z1*z2 + 4*a2*b2*b3*y3*z1*z2 + a1*a2*b2*b3*y3*z1*z2 + 2*a3*b2*b3*y3*z1*z2 + 5*b1*b2*b3*y3*z1*z2 + 2*a1*b1*b2*b3*y3*z1*z2 + 2*a2*b1*b2*b3*y3*z1*z2 + a2*b1^2*b2*b3*y3*z1*z2 + 2*b2^2*b3*y3*z1*z2 + a2*b2^2*b3*y3*z1*z2 + b3^2*y3*z1*z2 + b2*b3^2*y3*z1*z2 + (a1*b3*z1*(1 + z1)*z2)/2 + (a1*a2*b3*z1*(1 + z1)*z2)/2 + (b1*b3*z1*(1 + z1)*z2)/2 + a1*b1*b3*z1*(1 + z1)*z2 + (a2*b1*b3*z1*(1 + z1)*z2)/2 + (b1^2*b3*z1*(1 + z1)*z2)/2 + (b2*b3*z1*(1 + z1)*z2)/2 + (a1*b2*b3*z1*(1 + z1)*z2)/2 + (b1*b2*b3*z1*(1 + z1)*z2)/2 + (a1*b1*b2*b3*z1*(1 + z1)*z2)/2 + (b2^2*b3*z1*(1 + z1)*z2)/2 + (a1*a3*b1*z2*(1 + z2))/2 + (a3*b1^2*z2*(1 + z2))/2 + (a1*a3*b2*z2*(1 + z2))/2 + (a3*b1*b2*z2*(1 + z2))/2 + (a1*b3*z2*(1 + z2))/2 + (a1*a2*b3*z2*(1 + z2))/2 + (a1*a3*b3*z2*(1 + z2))/2 + (b1*b3*z2*(1 + z2))/2 + (a3*b1*b3*z2*(1 + z2))/2 + (a1*b1^2*b3*z2*(1 + z2))/2 + b1*b2*b3*z2*(1 + z2) + (a1*b1*b2*b3*z2*(1 + z2))/2 + (b1^2*b2*b3*z2*(1 + z2))/2 + (a1*b2^2*b3*z2*(1 + z2))/2 + (b3*x1*z2*(1 + z2))/2 + (a1*b3*x1*z2*(1 + z2))/2 + (a1*a2*b3*x1*z2*(1 + z2))/2 + b1*b3*x1*z2*(1 + z2) + a1*b1*b3*x1*z2*(1 + z2) + (a2*b1*b3*x1*z2*(1 + z2))/2 + (b1^2*b3*x1*z2*(1 + z2))/2 + (a1*b2*b3*x1*z2*(1 + z2))/2 + b1*b2*b3*x1*z2*(1 + z2) + (a1*b1*b2*b3*x1*z2*(1 + z2))/2 + (b2^2*b3*x1*z2*(1 + z2))/2 + b1*b3*x2*z2*(1 + z2) + (a2*b1*b3*x2*z2*(1 + z2))/2 + (b1^2*b3*x2*z2*(1 + z2))/2 + (b1*b2*b3*x2*z2*(1 + z2))/2 + (a3*y1*z2*(1 + z2))/2 + (a1*b3*y1*z2*(1 + z2))/2 + (a2*b3*y1*z2*(1 + z2))/2 + (a1*a2*b3*y1*z2*(1 + z2))/2 + a1*b1*b3*y1*z2*(1 + z2) + (a2*b1*b3*y1*z2*(1 + z2))/2 + (b1^2*b3*y1*z2*(1 + z2))/2 + b2*b3*y1*z2*(1 + z2) + (a1*b2*b3*y1*z2*(1 + z2))/2 + (b1*b2*b3*y1*z2*(1 + z2))/2 + (a1*b1*b2*b3*y1*z2*(1 + z2))/2 + (b2^2*b3*y1*z2*(1 + z2))/2 + (a2*b1*b3*y2*z2*(1 + z2))/2 + (b1^2*b3*y2*z2*(1 + z2))/2 + (a1*b3*z1*z2*(1 + z2))/2 + (a1*a2*b3*z1*z2*(1 + z2))/2 + (b1*b3*z1*z2*(1 + z2))/2 + a1*b1*b3*z1*z2*(1 + z2) + (a2*b1*b3*z1*z2*(1 + z2))/2 + (b1^2*b3*z1*z2*(1 + z2))/2 + (b2*b3*z1*z2*(1 + z2))/2 + (a1*b2*b3*z1*z2*(1 + z2))/2 + b1*b2*b3*z1*z2*(1 + z2) + (a1*b1*b2*b3*z1*z2*(1 + z2))/2 + (b2^2*b3*z1*z2*(1 + z2))/2 + (b1*b3*z2^2*(1 + z2))/2 + (b1*b2*b3*z2^2*(1 + z2))/2 + a1*a2*b1*b2*z3 + a3*b1*b2*z3 + b1^2*b2*z3 + a1*b1^2*b2*z3 + a2*b1^2*b2*z3 + a1*b2^2*z3 + a1*a2*b2^2*z3 + b1*b2^2*z3 + a1*b1*b2^2*z3 + a1*a2*b2*b3*z3 + a1*b1*b2*b3*z3 + a3*b1*b2*b3*z3 + a2*a3*b1*b2*b3*z3 + a1*b1*b2^2*b3*z3 + a2*b1*b2^2*b3*z3 + 2*a1*a2*x1*z3 + a2*b1*x1*z3 + a1*a2*b1*x1*z3 + a2*a3*b1*x1*z3 + a2*b1^2*x1*z3 + a2*a3*b1^2*x1*z3 + b2*x1*z3 + 2*a1*b2*x1*z3 + 2*a2*b2*x1*z3 + 2*a1*a2*b2*x1*z3 + a3*b2*x1*z3 + 2*a1*a3*b2*x1*z3 + a2*a3*b2*x1*z3 + 2*b1*b2*x1*z3 + 3*a1*b1*b2*x1*z3 + 4*a2*b1*b2*x1*z3 + 2*a3*b1*b2*x1*z3 + b1^2*b2*x1*z3 + a2*b1^2*b2*x1*z3 + a3*b1^2*b2*x1*z3 + a1*b2^2*x1*z3 + 2*a2*b2^2*x1*z3 + a3*b2^2*x1*z3 + 2*b1*b2^2*x1*z3 + a3*b1*b2^2*x1*z3 + b1^2*b2^2*x1*z3 + a2*a3*b3*x1*z3 + b2*b3*x1*z3 + a2*b2*b3*x1*z3 + 2*a3*b2*b3*x1*z3 + a1*a3*b2*b3*x1*z3 + a2*a3*b2*b3*x1*z3 + 2*b1*b2*b3*x1*z3 + a1*b1*b2*b3*x1*z3 + 3*a3*b1*b2*b3*x1*z3 + b1^2*b2*b3*x1*z3 + a2*b1^2*b2*b3*x1*z3 + a1*b2^2*b3*x1*z3 + 2*a3*b2^2*b3*x1*z3 + a3*b1*b2^2*b3*x1*z3 + (b2*x1*(1 + x1)*z3)/2 + (b1*b2*x1*(1 + x1)*z3)/2 + (b2^2*x1*(1 + x1)*z3)/2 + a1*x2*z3 + b1*x2*z3 + a2*b1*x2*z3 + a1*a3*b1*x2*z3 + a2*a3*b1*x2*z3 + b1^2*x2*z3 + a1*b1^2*x2*z3 + a1*a2*b1^2*x2*z3 + a1*a3*b2*x2*z3 + b1*b2*x2*z3 + a1*b1*b2*x2*z3 + a1*a3*b1*b2*x2*z3 + a2*a3*b1*b2*x2*z3 + b1^2*b2*x2*z3 + a1*a3*b1^2*b2*x2*z3 + a2*b1*b2^2*x2*z3 + a1*b1^2*b2^2*x2*z3 + a1*a2*b3*x2*z3 + b1*b3*x2*z3 + 2*a3*b1*b3*x2*z3 + a2*a3*b1*b3*x2*z3 + a1*b1^2*b3*x2*z3 + a1*a2*b2*b3*x2*z3 + b1*b2*b3*x2*z3 + a1*b1*b2*b3*x2*z3 + a2*b1*b2*b3*x2*z3 + 2*a1*a2*b1*b2*b3*x2*z3 + a1*a2*b2^2*b3*x2*z3 + b1*b2^2*b3*x2*z3 + a1*b1*b2^2*b3*x2*z3 + a2*b1*b2^2*b3*x2*z3 + a3*b1*b2^2*b3*x2*z3 + x1*x2*z3 + a2*x1*x2*z3 + a1*a2*x1*x2*z3 + a3*x1*x2*z3 + a2*a3*x1*x2*z3 + 2*b1*x1*x2*z3 + a1*b1*x1*x2*z3 + 2*a2*b1*x1*x2*z3 + a1*a2*b1*x1*x2*z3 + a3*b1*x1*x2*z3 + b1^2*x1*x2*z3 + a1*b1^2*x1*x2*z3 + a1*a2*b1^2*x1*x2*z3 + 2*b2*x1*x2*z3 + a1*b2*x1*x2*z3 + 2*a2*b2*x1*x2*z3 + a1*a2*b2*x1*x2*z3 + 2*a3*b2*x1*x2*z3 + a1*a3*b2*x1*x2*z3 + a2*a3*b2*x1*x2*z3 + 3*b1*b2*x1*x2*z3 + a2*b1*b2*x1*x2*z3 + a1*a2*b1*b2*x1*x2*z3 + 2*a3*b1*b2*x1*x2*z3 + a2*a3*b1*b2*x1*x2*z3 + a1*b1^2*b2*x1*x2*z3 + a2*b1^2*b2*x1*x2*z3 + a3*b1^2*b2*x1*x2*z3 + b2^2*x1*x2*z3 + a1*b2^2*x1*x2*z3 + a2*b2^2*x1*x2*z3 + a3*b2^2*x1*x2*z3 + a1*a3*b2^2*x1*x2*z3 + 2*b1*b2^2*x1*x2*z3 + a1*b1*b2^2*x1*x2*z3 + b1^2*b2^2*x1*x2*z3 + a3*b1^2*b2^2*x1*x2*z3 + 3*b3*x1*x2*z3 + a1*b3*x1*x2*z3 + 2*a3*b3*x1*x2*z3 + a2*a3*b3*x1*x2*z3 + 3*b1*b3*x1*x2*z3 + 2*a1*b1*b3*x1*x2*z3 + 2*a2*b1*b3*x1*x2*z3 + a1*a2*b1*b3*x1*x2*z3 + a1*b1^2*b3*x1*x2*z3 + 4*b2*b3*x1*x2*z3 + a1*b2*b3*x1*x2*z3 + 3*a2*b2*b3*x1*x2*z3 + a1*a2*b2*b3*x1*x2*z3 + 3*a3*b2*b3*x1*x2*z3 + 4*b1*b2*b3*x1*x2*z3 + 3*a1*b1*b2*b3*x1*x2*z3 + a2*b1*b2*b3*x1*x2*z3 + b1^2*b2*b3*x1*x2*z3 + a2*b1^2*b2*b3*x1*x2*z3 + b2^2*b3*x1*x2*z3 + a2*b2^2*b3*x1*x2*z3 + b3^2*x1*x2*z3 + b2*b3^2*x1*x2*z3 + a1*b2*x3*z3 + a1*a2*b2*x3*z3 + 2*b1*b2*x3*z3 + a1*b1*b2*x3*z3 + a3*b1*b2*x3*z3 + 2*a1*a3*b1*b2*x3*z3 + b1^2*b2*x3*z3 + a1*b2^2*x3*z3 + a1*a3*b2^2*x3*z3 + b1*b2^2*x3*z3 + a1*b1*b2^2*x3*z3 + a1*a2*b3*x3*z3 + a2*a3*b1*b3*x3*z3 + a1*b1*b2*b3*x3*z3 + a3*b1*b2*b3*x3*z3 + a1*b2^2*b3*x3*z3 + a3*b1*b2^2*b3*x3*z3 + 2*a2*x1*x3*z3 + 2*a2*b1*x1*x3*z3 + 2*b2*x1*x3*z3 + 2*a1*b2*x1*x3*z3 + 2*a2*b2*x1*x3*z3 + 2*a3*b2*x1*x3*z3 + a1*a3*b2*x1*x3*z3 + a2*a3*b2*x1*x3*z3 + 5*b1*b2*x1*x3*z3 + a1*b1*b2*x1*x3*z3 + a2*b1*b2*x1*x3*z3 + a3*b1*b2*x1*x3*z3 + a1*b1^2*b2*x1*x3*z3 + a2*b1^2*b2*x1*x3*z3 + a3*b1^2*b2*x1*x3*z3 + b2^2*x1*x3*z3 + 2*a3*b2^2*x1*x3*z3 + 2*b1*b2^2*x1*x3*z3 + a1*b1*b2^2*x1*x3*z3 + a2*b1*b2^2*x1*x3*z3 + 4*b2*b3*x1*x3*z3 + a3*b2*b3*x1*x3*z3 + 3*b1*b2*b3*x1*x3*z3 + a1*b1*b2*b3*x1*x3*z3 + a2*b1*b2*b3*x1*x3*z3 + b1^2*b2*b3*x1*x3*z3 + b2^2*b3*x1*x3*z3 + b1*b2^2*b3*x1*x3*z3 + a1*b1*b2*x2*x3*z3 + a2*b1*b2*x2*x3*z3 + a1*b1^2*b2*x2*x3*z3 + a1*b2^2*x2*x3*z3 + a1*b1*b2^2*x2*x3*z3 + a2*b1*b2^2*x2*x3*z3 + b1*b3*x2*x3*z3 + a1*b1*b3*x2*x3*z3 + a2*b1*b3*x2*x3*z3 + a1*b2*b3*x2*x3*z3 + b1*b2*b3*x2*x3*z3 + a1*b1*b2*b3*x2*x3*z3 + a2*b1*b2*b3*x2*x3*z3 + a1*b2^2*b3*x2*x3*z3 + a2*y1*z3 + a1*a2*y1*z3 + a2*a3*y1*z3 + 2*a2*b1*y1*z3 + a1*a2*b1*y1*z3 + a2*a3*b1*y1*z3 + 2*b2*y1*z3 + 2*a1*b2*y1*z3 + 3*a2*b2*y1*z3 + a1*a2*b2*y1*z3 + 3*a3*b2*y1*z3 + 2*a1*a3*b2*y1*z3 + 2*a2*a3*b2*y1*z3 + 3*b1*b2*y1*z3 + 2*a1*b1*b2*y1*z3 + 4*a2*b1*b2*y1*z3 + 2*a3*b1*b2*y1*z3 + 2*b1^2*b2*y1*z3 + a1*b1^2*b2*y1*z3 + a2*b1^2*b2*y1*z3 + a3*b1^2*b2*y1*z3 + 2*b2^2*y1*z3 + 2*a1*b2^2*y1*z3 + a2*b2^2*y1*z3 + 2*b1*b2^2*y1*z3 + a3*b1*b2^2*y1*z3 + b1^2*b2^2*y1*z3 + a2*b3*y1*z3 + a2*a3*b3*y1*z3 + a2*b1*b3*y1*z3 + a2*b1^2*b3*y1*z3 + b2*b3*y1*z3 + a1*b2*b3*y1*z3 + 3*a2*b2*b3*y1*z3 + a3*b2*b3*y1*z3 + a1*a3*b2*b3*y1*z3 + a2*a3*b2*b3*y1*z3 + 3*b1*b2*b3*y1*z3 + 3*a1*b1*b2*b3*y1*z3 + 2*a2*b1*b2*b3*y1*z3 + 3*a3*b1*b2*b3*y1*z3 + 2*a2*b2^2*b3*y1*z3 + 2*a3*b2^2*b3*y1*z3 + b1*b2^2*b3*y1*z3 + a3*b1*b2^2*b3*y1*z3 + 3*b2*x1*y1*z3 + 2*a1*b2*x1*y1*z3 + 2*a2*b2*x1*y1*z3 + a3*b2*x1*y1*z3 + 2*b1*b2*x1*y1*z3 + a3*b1*b2*x1*y1*z3 + 2*b1^2*b2*x1*y1*z3 + b2^2*x1*y1*z3 + a3*b2^2*x1*y1*z3 + a2*b3*x1*y1*z3 + 2*b2*b3*x1*y1*z3 + a1*b2*b3*x1*y1*z3 + a2*b2*b3*x1*y1*z3 + b1^2*b2*b3*x1*y1*z3 + 2*x2*y1*z3 + a1*x2*y1*z3 + a2*x2*y1*z3 + 2*a1*a2*x2*y1*z3 + a3*x2*y1*z3 + 2*a2*a3*x2*y1*z3 + 3*b1*x2*y1*z3 + 2*a1*b1*x2*y1*z3 + 3*a2*b1*x2*y1*z3 + a1*a2*b1*x2*y1*z3 + a3*b1*x2*y1*z3 + a1*b1^2*x2*y1*z3 + a2*b1^2*x2*y1*z3 + a1*a2*b1^2*x2*y1*z3 + b2*x2*y1*z3 + 2*a1*b2*x2*y1*z3 + 2*a2*b2*x2*y1*z3 + a1*a2*b2*x2*y1*z3 + a3*b2*x2*y1*z3 + a1*a3*b2*x2*y1*z3 + a2*a3*b2*x2*y1*z3 + 4*b1*b2*x2*y1*z3 + a1*a2*b1*b2*x2*y1*z3 + 2*a3*b1*b2*x2*y1*z3 + a2*a3*b1*b2*x2*y1*z3 + 2*b1^2*b2*x2*y1*z3 + a1*b1^2*b2*x2*y1*z3 + 2*a2*b1^2*b2*x2*y1*z3 + a3*b1^2*b2*x2*y1*z3 + b2^2*x2*y1*z3 + a1*b2^2*x2*y1*z3 + a2*b2^2*x2*y1*z3 + 2*a3*b2^2*x2*y1*z3 + a1*a3*b2^2*x2*y1*z3 + b1*b2^2*x2*y1*z3 + a1*b1*b2^2*x2*y1*z3 + a3*b1^2*b2^2*x2*y1*z3 + 3*b3*x2*y1*z3 + a2*b3*x2*y1*z3 + 2*a3*b3*x2*y1*z3 + a2*a3*b3*x2*y1*z3 + b1*b3*x2*y1*z3 + a1*b1*b3*x2*y1*z3 + a1*a2*b1*b3*x2*y1*z3 + b1^2*b3*x2*y1*z3 + a1*b1^2*b3*x2*y1*z3 + a2*b1^2*b3*x2*y1*z3 + 3*b2*b3*x2*y1*z3 + a1*b2*b3*x2*y1*z3 + 3*a2*b2*b3*x2*y1*z3 + a1*a2*b2*b3*x2*y1*z3 + 3*a3*b2*b3*x2*y1*z3 + 3*b1*b2*b3*x2*y1*z3 + 3*a1*b1*b2*b3*x2*y1*z3 + a2*b1*b2*b3*x2*y1*z3 + a2*b1^2*b2*b3*x2*y1*z3 + a2*b2^2*b3*x2*y1*z3 + b3^2*x2*y1*z3 + b2*b3^2*x2*y1*z3 + 2*a2*x3*y1*z3 + a1*a2*x3*y1*z3 + a2*a3*x3*y1*z3 + 2*a2*b1*x3*y1*z3 + 3*a1*b2*x3*y1*z3 + a2*b2*x3*y1*z3 + 2*a3*b2*x3*y1*z3 + a1*a3*b2*x3*y1*z3 + a2*a3*b2*x3*y1*z3 + 5*b1*b2*x3*y1*z3 + a1*b1*b2*x3*y1*z3 + a2*b1*b2*x3*y1*z3 + a3*b1*b2*x3*y1*z3 + 2*b1^2*b2*x3*y1*z3 + a1*b1^2*b2*x3*y1*z3 + a2*b1^2*b2*x3*y1*z3 + a3*b1^2*b2*x3*y1*z3 + a1*b2^2*x3*y1*z3 + a2*b2^2*x3*y1*z3 + a3*b2^2*x3*y1*z3 + 3*b1*b2^2*x3*y1*z3 + a1*b1*b2^2*x3*y1*z3 + a2*b1*b2^2*x3*y1*z3 + b1^2*b2^2*x3*y1*z3 + 3*b2*b3*x3*y1*z3 + a2*b2*b3*x3*y1*z3 + a3*b2*b3*x3*y1*z3 + 2*b1*b2*b3*x3*y1*z3 + a1*b1*b2*b3*x3*y1*z3 + a2*b1*b2*b3*x3*y1*z3 + b2^2*b3*x3*y1*z3 + b1*b2^2*b3*x3*y1*z3 + (b2*y1*(1 + y1)*z3)/2 + (b1*b2*y1*(1 + y1)*z3)/2 + (b2^2*y1*(1 + y1)*z3)/2 + a1*y2*z3 + a2*b1*y2*z3 + a3*b1*y2*z3 + a1*a3*b1*y2*z3 + 2*a2*a3*b1*y2*z3 + b1^2*y2*z3 + a2*b1^2*y2*z3 + a1*a2*b1^2*y2*z3 + a1*b2*y2*z3 + a1*a3*b2*y2*z3 + b1*b2*y2*z3 + 2*a2*b1*b2*y2*z3 + a3*b1*b2*y2*z3 + a1*a3*b1*b2*y2*z3 + a2*a3*b1*b2*y2*z3 + a3*b1^2*b2*y2*z3 + a1*a3*b1^2*b2*y2*z3 + 2*b1*b2^2*y2*z3 + a2*b1*b2^2*y2*z3 + b1^2*b2^2*y2*z3 + a1*b1^2*b2^2*y2*z3 + a1*a2*b3*y2*z3 + b1*b3*y2*z3 + 2*a3*b1*b3*y2*z3 + a2*a3*b1*b3*y2*z3 + b1^2*b3*y2*z3 + a1*b1^2*b3*y2*z3 + a1*b2*b3*y2*z3 + a1*a2*b2*b3*y2*z3 + b1*b2*b3*y2*z3 + a1*b1*b2*b3*y2*z3 + a2*b1*b2*b3*y2*z3 + 2*a1*a2*b1*b2*b3*y2*z3 + a3*b1*b2*b3*y2*z3 + a1*b2^2*b3*y2*z3 + a1*a2*b2^2*b3*y2*z3 + a1*b1*b2^2*b3*y2*z3 + a2*b1*b2^2*b3*y2*z3 + a3*b1*b2^2*b3*y2*z3 + x1*y2*z3 + a1*x1*y2*z3 + a1*a2*x1*y2*z3 + 2*a3*x1*y2*z3 + a2*a3*x1*y2*z3 + a2*b1*x1*y2*z3 + a1*a2*b1*x1*y2*z3 + a3*b1*x1*y2*z3 + b1^2*x1*y2*z3 + a2*b1^2*x1*y2*z3 + a1*a2*b1^2*x1*y2*z3 + a2*b2*x1*y2*z3 + a1*a2*b2*x1*y2*z3 + a1*a3*b2*x1*y2*z3 + a2*a3*b2*x1*y2*z3 + b1*b2*x1*y2*z3 + a1*b1*b2*x1*y2*z3 + a1*a2*b1*b2*x1*y2*z3 + a3*b1*b2*x1*y2*z3 + a2*a3*b1*b2*x1*y2*z3 + a1*b1^2*b2*x1*y2*z3 + a2*b1^2*b2*x1*y2*z3 + a3*b1^2*b2*x1*y2*z3 + b2^2*x1*y2*z3 + a1*b2^2*x1*y2*z3 + a2*b2^2*x1*y2*z3 + 2*a3*b2^2*x1*y2*z3 + a1*a3*b2^2*x1*y2*z3 + b1*b2^2*x1*y2*z3 + a1*b1*b2^2*x1*y2*z3 + b1^2*b2^2*x1*y2*z3 + a3*b1^2*b2^2*x1*y2*z3 + 2*b3*x1*y2*z3 + a1*b3*x1*y2*z3 + a3*b3*x1*y2*z3 + a2*a3*b3*x1*y2*z3 + 2*b1*b3*x1*y2*z3 + a1*b1*b3*x1*y2*z3 + a2*b1*b3*x1*y2*z3 + a1*a2*b1*b3*x1*y2*z3 + b1^2*b3*x1*y2*z3 + a1*b1^2*b3*x1*y2*z3 + 3*b2*b3*x1*y2*z3 + 2*a2*b2*b3*x1*y2*z3 + a1*a2*b2*b3*x1*y2*z3 + 3*a3*b2*b3*x1*y2*z3 + 2*b1*b2*b3*x1*y2*z3 + 3*a1*b1*b2*b3*x1*y2*z3 + a2*b1*b2*b3*x1*y2*z3 + a2*b1^2*b2*b3*x1*y2*z3 + a2*b2^2*b3*x1*y2*z3 + b3^2*x1*y2*z3 + b2*b3^2*x1*y2*z3 + a1*x2*y2*z3 + b1*x2*y2*z3 + a1*b1*x2*y2*z3 + a2*b1*x2*y2*z3 + b1^2*x2*y2*z3 + a1*b2*x2*y2*z3 + 3*b1*b2*x2*y2*z3 + 2*a2*b1*b2*x2*y2*z3 + b1^2*b2*x2*y2*z3 + 2*b1*b2^2*x2*y2*z3 + a1*b3*x2*y2*z3 + 2*b1*b3*x2*y2*z3 + a1*b1*b3*x2*y2*z3 + a2*b1*b3*x2*y2*z3 + b1^2*b3*x2*y2*z3 + 2*a1*b2*b3*x2*y2*z3 + 2*b1*b2*b3*x2*y2*z3 + 2*b1*x3*y2*z3 + 2*a2*b1*x3*y2*z3 + a1*b1*b2*x3*y2*z3 + a2*b1*b2*x3*y2*z3 + b1^2*b2*x3*y2*z3 + a1*b1^2*b2*x3*y2*z3 + a1*b2^2*x3*y2*z3 + a1*b1*b2^2*x3*y2*z3 + a2*b1*b2^2*x3*y2*z3 + b1*b3*x3*y2*z3 + a1*b1*b3*x3*y2*z3 + a2*b1*b3*x3*y2*z3 + a1*b2*b3*x3*y2*z3 + b1*b2*b3*x3*y2*z3 + a1*b1*b2*b3*x3*y2*z3 + a2*b1*b2*b3*x3*y2*z3 + a1*b2^2*b3*x3*y2*z3 + y1*y2*z3 + 2*a1*a2*y1*y2*z3 + 2*a3*y1*y2*z3 + 2*a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a1*b1*y1*y2*z3 + 2*a2*b1*y1*y2*z3 + a1*a2*b1*y1*y2*z3 + a3*b1*y1*y2*z3 + b1^2*y1*y2*z3 + a1*a2*b1^2*y1*y2*z3 + 3*b2*y1*y2*z3 + 2*a1*b2*y1*y2*z3 + 2*a2*b2*y1*y2*z3 + a1*a2*b2*y1*y2*z3 + 2*a3*b2*y1*y2*z3 + a1*a3*b2*y1*y2*z3 + a2*a3*b2*y1*y2*z3 + 3*b1*b2*y1*y2*z3 + a1*b1*b2*y1*y2*z3 + a2*b1*b2*y1*y2*z3 + a1*a2*b1*b2*y1*y2*z3 + a3*b1*b2*y1*y2*z3 + a2*a3*b1*b2*y1*y2*z3 + b1^2*b2*y1*y2*z3 + a1*b1^2*b2*y1*y2*z3 + 2*a2*b1^2*b2*y1*y2*z3 + a3*b1^2*b2*y1*y2*z3 + b2^2*y1*y2*z3 + a1*b2^2*y1*y2*z3 + a2*b2^2*y1*y2*z3 + a3*b2^2*y1*y2*z3 + a1*a3*b2^2*y1*y2*z3 + 2*b1*b2^2*y1*y2*z3 + a1*b1*b2^2*y1*y2*z3 + a3*b1^2*b2^2*y1*y2*z3 + 2*b3*y1*y2*z3 + a2*b3*y1*y2*z3 + a3*b3*y1*y2*z3 + a2*a3*b3*y1*y2*z3 + 3*b1*b3*y1*y2*z3 + 2*a1*b1*b3*y1*y2*z3 + a2*b1*b3*y1*y2*z3 + a1*a2*b1*b3*y1*y2*z3 + b1^2*b3*y1*y2*z3 + a1*b1^2*b3*y1*y2*z3 + a2*b1^2*b3*y1*y2*z3 + b2*b3*y1*y2*z3 + 2*a1*b2*b3*y1*y2*z3 + 4*a2*b2*b3*y1*y2*z3 + a1*a2*b2*b3*y1*y2*z3 + 3*a3*b2*b3*y1*y2*z3 + 3*b1*b2*b3*y1*y2*z3 + 3*a1*b1*b2*b3*y1*y2*z3 + a2*b1*b2*b3*y1*y2*z3 + b1^2*b2*b3*y1*y2*z3 + a2*b1^2*b2*b3*y1*y2*z3 + a2*b2^2*b3*y1*y2*z3 + b3^2*y1*y2*z3 + b2*b3^2*y1*y2*z3 + a2*a3*b1*y3*z3 + a1*a2*b2*y3*z3 + 2*a1*b1*b2*y3*z3 + 2*a1*a3*b1*b2*y3*z3 + b1^2*b2*y3*z3 + a3*b1^2*b2*y3*z3 + a1*a3*b2^2*y3*z3 + b1*b2^2*y3*z3 + a1*b1*b2^2*y3*z3 + a1*a2*b3*y3*z3 + a2*a3*b1*b3*y3*z3 + a1*b1*b2*b3*y3*z3 + a3*b1*b2^2*b3*y3*z3 + 2*a2*b2*x1*y3*z3 + a1*a3*b2*x1*y3*z3 + a2*a3*b2*x1*y3*z3 + 2*a2*b1*b2*x1*y3*z3 + a1*b1^2*b2*x1*y3*z3 + a2*b1^2*b2*x1*y3*z3 + a3*b1^2*b2*x1*y3*z3 + b2^2*x1*y3*z3 + a1*b2^2*x1*y3*z3 + a2*b2^2*x1*y3*z3 + a3*b2^2*x1*y3*z3 + 2*b1*b2^2*x1*y3*z3 + a1*b1*b2^2*x1*y3*z3 + a2*b1*b2^2*x1*y3*z3 + b1^2*b2^2*x1*y3*z3 + 2*b2*b3*x1*y3*z3 + a3*b2*b3*x1*y3*z3 + 2*b1*b2*b3*x1*y3*z3 + a1*b1*b2*b3*x1*y3*z3 + a2*b1*b2*b3*x1*y3*z3 + b2^2*b3*x1*y3*z3 + a1*x2*y3*z3 + 2*a1*b1*x2*y3*z3 + a1*b1^2*x2*y3*z3 + 2*a1*b2*x2*y3*z3 + 3*a1*b1*b2*x2*y3*z3 + a2*b1*b2*x2*y3*z3 + a1*b1^2*b2*x2*y3*z3 + a1*b2^2*x2*y3*z3 + a1*b1*b2^2*x2*y3*z3 + a2*b1*b2^2*x2*y3*z3 + a1*b3*x2*y3*z3 + b1*b3*x2*y3*z3 + 2*a1*b1*b3*x2*y3*z3 + a2*b1*b3*x2*y3*z3 + a1*b1^2*b3*x2*y3*z3 + a1*b2*b3*x2*y3*z3 + 2*b1*b2*b3*x2*y3*z3 + a1*b1*b2*b3*x2*y3*z3 + a2*b1*b2*b3*x2*y3*z3 + b1*b2^2*b3*x2*y3*z3 + 2*a2*b1*x3*y3*z3 + b1^2*b2*x3*y3*z3 + 2*b1*b2*b3*x3*y3*z3 + a1*a2*y1*y3*z3 + a2*a3*y1*y3*z3 + 2*b2*y1*y3*z3 + 2*a1*b2*y1*y3*z3 + 2*a2*b2*y1*y3*z3 + 3*a3*b2*y1*y3*z3 + a1*a3*b2*y1*y3*z3 + a2*a3*b2*y1*y3*z3 + b1*b2*y1*y3*z3 + 2*a2*b1*b2*y1*y3*z3 + b1^2*b2*y1*y3*z3 + a1*b1^2*b2*y1*y3*z3 + a2*b1^2*b2*y1*y3*z3 + a3*b1^2*b2*y1*y3*z3 + b2^2*y1*y3*z3 + 2*a1*b2^2*y1*y3*z3 + 2*a2*b2^2*y1*y3*z3 + 3*b1*b2^2*y1*y3*z3 + a1*b1*b2^2*y1*y3*z3 + a2*b1*b2^2*y1*y3*z3 + b2*b3*y1*y3*z3 + a2*b2*b3*y1*y3*z3 + a3*b2*b3*y1*y3*z3 + 3*b1*b2*b3*y1*y3*z3 + a1*b1*b2*b3*y1*y3*z3 + a2*b1*b2*b3*y1*y3*z3 + b1^2*b2*b3*y1*y3*z3 + b2^2*b3*y1*y3*z3 + a1*y2*y3*z3 + 2*b1*y2*y3*z3 + 2*a1*b1*y2*y3*z3 + 2*a2*b1*y2*y3*z3 + b1^2*y2*y3*z3 + a1*b1^2*y2*y3*z3 + 2*a1*b2*y2*y3*z3 + 2*b1*b2*y2*y3*z3 + 3*a1*b1*b2*y2*y3*z3 + a2*b1*b2*y2*y3*z3 + b1^2*b2*y2*y3*z3 + a1*b1^2*b2*y2*y3*z3 + a1*b2^2*y2*y3*z3 + a1*b1*b2^2*y2*y3*z3 + a2*b1*b2^2*y2*y3*z3 + a1*b3*y2*y3*z3 + 2*b1*b3*y2*y3*z3 + 2*a1*b1*b3*y2*y3*z3 + a2*b1*b3*y2*y3*z3 + b1^2*b3*y2*y3*z3 + a1*b1^2*b3*y2*y3*z3 + a1*b2*b3*y2*y3*z3 + 2*b1*b2*b3*y2*y3*z3 + a1*b1*b2*b3*y2*y3*z3 + a2*b1*b2*b3*y2*y3*z3 + b1*b2^2*b3*y2*y3*z3 + a1*a2*z1*z3 + a1*a2*b1*z1*z3 + a2*b1^2*z1*z3 + a2*a3*b1^2*z1*z3 + 2*a1*b2*z1*z3 + a2*b2*z1*z3 + 2*a1*a2*b2*z1*z3 + 2*a1*a3*b2*z1*z3 + 2*a2*a3*b2*z1*z3 + 3*a1*b1*b2*z1*z3 + 5*a2*b1*b2*z1*z3 + 3*a3*b1*b2*z1*z3 + b1^2*b2*z1*z3 + a2*b1^2*b2*z1*z3 + a3*b1^2*b2*z1*z3 + a1*b2^2*z1*z3 + 2*a2*b2^2*z1*z3 + a3*b2^2*z1*z3 + a2*a3*b2^2*z1*z3 + b1*b2^2*z1*z3 + a3*b1*b2^2*z1*z3 + b1^2*b2^2*z1*z3 + a2*b2*b3*z1*z3 + a1*a3*b2*b3*z1*z3 + 2*a2*a3*b2*b3*z1*z3 + 3*b1*b2*b3*z1*z3 + a1*b1*b2*b3*z1*z3 + a2*b1*b2*b3*z1*z3 + 3*a3*b1*b2*b3*z1*z3 + b1^2*b2*b3*z1*z3 + a2*b1^2*b2*b3*z1*z3 + a1*b2^2*b3*z1*z3 + 2*a3*b2^2*b3*z1*z3 + a3*b1*b2^2*b3*z1*z3 + 2*b2*x1*z1*z3 + a1*b2*x1*z1*z3 + 2*a3*b2*x1*z1*z3 + a1*a3*b2*x1*z1*z3 + a2*a3*b2*x1*z1*z3 + 2*a1*b1*b2*x1*z1*z3 + 2*a2*b1*b2*x1*z1*z3 + a3*b1*b2*x1*z1*z3 + b1^2*b2*x1*z1*z3 + a3*b1*b2^2*x1*z1*z3 + a2*b3*x1*z1*z3 + a2*b1*b3*x1*z1*z3 + 2*b2*b3*x1*z1*z3 + a1*b2*b3*x1*z1*z3 + a2*b2*b3*x1*z1*z3 + b1*b2*b3*x1*z1*z3 + a1*b1*b2*b3*x1*z1*z3 + a2*b1*b2*b3*x1*z1*z3 + x2*z1*z3 + a1*x2*z1*z3 + a2*x2*z1*z3 + 2*a3*x2*z1*z3 + a2*a3*x2*z1*z3 + 3*b1*x2*z1*z3 + 2*a1*b1*x2*z1*z3 + 2*a2*b1*x2*z1*z3 + a1*a2*b1*x2*z1*z3 + a3*b1*x2*z1*z3 + b1^2*x2*z1*z3 + a1*a2*b1^2*x2*z1*z3 + b2*x2*z1*z3 + a1*b2*x2*z1*z3 + 2*a2*b2*x2*z1*z3 + 2*a1*a2*b2*x2*z1*z3 + 2*a3*b2*x2*z1*z3 + a1*a3*b2*x2*z1*z3 + 2*a2*a3*b2*x2*z1*z3 + 3*b1*b2*x2*z1*z3 + 2*a1*b1*b2*x2*z1*z3 + 2*a2*b1*b2*x2*z1*z3 + a1*a2*b1*b2*x2*z1*z3 + 3*a3*b1*b2*x2*z1*z3 + a2*a3*b1*b2*x2*z1*z3 + 2*a1*b1^2*b2*x2*z1*z3 + a2*b1^2*b2*x2*z1*z3 + a3*b1^2*b2*x2*z1*z3 + a2*b2^2*x2*z1*z3 + a3*b2^2*x2*z1*z3 + a1*a3*b2^2*x2*z1*z3 + b1*b2^2*x2*z1*z3 + a1*b1*b2^2*x2*z1*z3 + a3*b1*b2^2*x2*z1*z3 + b1^2*b2^2*x2*z1*z3 + a3*b1^2*b2^2*x2*z1*z3 + 2*b3*x2*z1*z3 + a1*b3*x2*z1*z3 + a2*b3*x2*z1*z3 + 2*a3*b3*x2*z1*z3 + a2*a3*b3*x2*z1*z3 + b1*b3*x2*z1*z3 + 2*a1*b1*b3*x2*z1*z3 + 2*a2*b1*b3*x2*z1*z3 + a1*a2*b1*b3*x2*z1*z3 + b1^2*b3*x2*z1*z3 + a1*b1^2*b3*x2*z1*z3 + 3*b2*b3*x2*z1*z3 + a1*b2*b3*x2*z1*z3 + 2*a2*b2*b3*x2*z1*z3 + a1*a2*b2*b3*x2*z1*z3 + 3*a3*b2*b3*x2*z1*z3 + 4*b1*b2*b3*x2*z1*z3 + 3*a1*b1*b2*b3*x2*z1*z3 + 2*a2*b1*b2*b3*x2*z1*z3 + b1^2*b2*b3*x2*z1*z3 + a2*b1^2*b2*b3*x2*z1*z3 + b2^2*b3*x2*z1*z3 + a2*b2^2*b3*x2*z1*z3 + b3^2*x2*z1*z3 + b2*b3^2*x2*z1*z3 + 2*a2*b1*x3*z1*z3 + 2*b2*x3*z1*z3 + a1*b2*x3*z1*z3 + a2*b2*x3*z1*z3 + a3*b2*x3*z1*z3 + a1*a3*b2*x3*z1*z3 + 2*a2*a3*b2*x3*z1*z3 + 5*b1*b2*x3*z1*z3 + 2*a1*b1*b2*x3*z1*z3 + 2*a2*b1*b2*x3*z1*z3 + 2*a3*b1*b2*x3*z1*z3 + a1*b1^2*b2*x3*z1*z3 + a2*b1^2*b2*x3*z1*z3 + a3*b1^2*b2*x3*z1*z3 + b2^2*x3*z1*z3 + 2*a3*b2^2*x3*z1*z3 + a2*a3*b2^2*x3*z1*z3 + 2*b1*b2^2*x3*z1*z3 + a1*b1*b2^2*x3*z1*z3 + a2*b1*b2^2*x3*z1*z3 + a2*a3*b3*x3*z1*z3 + 3*b2*b3*x3*z1*z3 + a3*b2*b3*x3*z1*z3 + a2*a3*b2*b3*x3*z1*z3 + 2*b1*b2*b3*x3*z1*z3 + a1*b1*b2*b3*x3*z1*z3 + a2*b1*b2*b3*x3*z1*z3 + b1^2*b2*b3*x3*z1*z3 + b2^2*b3*x3*z1*z3 + b1*b2^2*b3*x3*z1*z3 + 3*b2*y1*z1*z3 + 2*a1*b2*y1*z1*z3 + 2*a2*b2*y1*z1*z3 + 2*a3*b2*y1*z1*z3 + a1*a3*b2*y1*z1*z3 + a2*a3*b2*y1*z1*z3 + 4*b1*b2*y1*z1*z3 + 2*a1*b1*b2*y1*z1*z3 + 2*a2*b1*b2*y1*z1*z3 + 2*a3*b1*b2*y1*z1*z3 + b1^2*b2*y1*z1*z3 + a3*b2^2*y1*z1*z3 + a3*b1*b2^2*y1*z1*z3 + a2*b3*y1*z1*z3 + a2*b1*b3*y1*z1*z3 + 3*b2*b3*y1*z1*z3 + 3*b1*b2*b3*y1*z1*z3 + a1*b1*b2*b3*y1*z1*z3 + a2*b1*b2*b3*y1*z1*z3 + b1^2*b2*b3*y1*z1*z3 + y2*z1*z3 + a1*y2*z1*z3 + a2*y2*z1*z3 + a3*y2*z1*z3 + a2*a3*y2*z1*z3 + 2*b1*y2*z1*z3 + a1*b1*y2*z1*z3 + a2*b1*y2*z1*z3 + a1*a2*b1*y2*z1*z3 + a3*b1*y2*z1*z3 + a1*b1^2*y2*z1*z3 + a2*b1^2*y2*z1*z3 + a1*a2*b1^2*y2*z1*z3 + 2*b2*y2*z1*z3 + a1*b2*y2*z1*z3 + 2*a1*a2*b2*y2*z1*z3 + a3*b2*y2*z1*z3 + a1*a3*b2*y2*z1*z3 + a2*a3*b2*y2*z1*z3 + 3*a1*b1*b2*y2*z1*z3 + a2*b1*b2*y2*z1*z3 + a1*a2*b1*b2*y2*z1*z3 + 2*a3*b1*b2*y2*z1*z3 + a2*a3*b1*b2*y2*z1*z3 + b1^2*b2*y2*z1*z3 + 2*a1*b1^2*b2*y2*z1*z3 + a2*b1^2*b2*y2*z1*z3 + a3*b1^2*b2*y2*z1*z3 + a3*b2^2*y2*z1*z3 + a1*a3*b2^2*y2*z1*z3 + 2*b1*b2^2*y2*z1*z3 + a1*b1*b2^2*y2*z1*z3 + a3*b1*b2^2*y2*z1*z3 + b1^2*b2^2*y2*z1*z3 + a3*b1^2*b2^2*y2*z1*z3 + 2*b3*y2*z1*z3 + a1*b3*y2*z1*z3 + a2*b3*y2*z1*z3 + a3*b3*y2*z1*z3 + 2*b1*b3*y2*z1*z3 + a1*b1*b3*y2*z1*z3 + a2*b1*b3*y2*z1*z3 + a1*a2*b1*b3*y2*z1*z3 + a1*b1^2*b3*y2*z1*z3 + b2*b3*y2*z1*z3 + 3*a2*b2*b3*y2*z1*z3 + a1*a2*b2*b3*y2*z1*z3 + 2*a3*b2*b3*y2*z1*z3 + 3*b1*b2*b3*y2*z1*z3 + 3*a1*b1*b2*b3*y2*z1*z3 + 2*a2*b1*b2*b3*y2*z1*z3 + a2*b1^2*b2*b3*y2*z1*z3 + b2^2*b3*y2*z1*z3 + b3^2*y2*z1*z3 + b2*b3^2*y2*z1*z3 + a1*a3*b2*y3*z1*z3 + a2*a3*b2*y3*z1*z3 + a1*b1*b2*y3*z1*z3 + 3*a2*b1*b2*y3*z1*z3 + a3*b1*b2*y3*z1*z3 + a1*b1^2*b2*y3*z1*z3 + a2*b1^2*b2*y3*z1*z3 + a3*b1^2*b2*y3*z1*z3 + a1*b2^2*y3*z1*z3 + 2*a2*b2^2*y3*z1*z3 + a2*a3*b2^2*y3*z1*z3 + 3*b1*b2^2*y3*z1*z3 + a1*b1*b2^2*y3*z1*z3 + a2*b1*b2^2*y3*z1*z3 + b1^2*b2^2*y3*z1*z3 + a2*a3*b2*b3*y3*z1*z3 + 2*b1*b2*b3*y3*z1*z3 + a1*b1*b2*b3*y3*z1*z3 + a2*b1*b2*b3*y3*z1*z3 + a2*b2^2*b3*y3*z1*z3 + (b1*b2*z1*(1 + z1)*z3)/2 + (b2^2*z1*(1 + z1)*z3)/2 + a1*a2*b1*z2*z3 + a1*b1^2*z2*z3 + a1*a2*b1^2*z2*z3 + a3*b1^2*z2*z3 + a1*a3*b1^2*z2*z3 + a2*a3*b1^2*z2*z3 + 2*a1*b1*b2*z2*z3 + a2*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + 2*b1^2*b2*z2*z3 + a1*b1^2*b2*z2*z3 + 2*a2*b1^2*b2*z2*z3 + a3*b1^2*b2*z2*z3 + a1*a3*b1^2*b2*z2*z3 + b1*b2^2*z2*z3 + a3*b1*b2^2*z2*z3 + a1*b1^2*b2^2*z2*z3 + a1*b1*b3*z2*z3 + a3*b1*b3*z2*z3 + b1^2*b3*z2*z3 + a1*b1^2*b3*z2*z3 + a1*a2*b2*b3*z2*z3 + a2*b1*b2*b3*z2*z3 + 2*a1*a2*b1*b2*b3*z2*z3 + b1^2*b2*b3*z2*z3 + a1*a2*b2^2*b3*z2*z3 + b1*b2^2*b3*z2*z3 + a2*b1*b2^2*b3*z2*z3 + a3*b1*b2^2*b3*z2*z3 + a1*x1*z2*z3 + a1*a2*x1*z2*z3 + a2*a3*x1*z2*z3 + 2*b1*x1*z2*z3 + 2*a1*b1*x1*z2*z3 + a2*b1*x1*z2*z3 + a1*a2*b1*x1*z2*z3 + 2*b1^2*x1*z2*z3 + a1*b1^2*x1*z2*z3 + a1*a2*b1^2*x1*z2*z3 + b2*x1*z2*z3 + 2*a1*b2*x1*z2*z3 + a2*b2*x1*z2*z3 + a1*a2*b2*x1*z2*z3 + a3*b2*x1*z2*z3 + 2*a2*a3*b2*x1*z2*z3 + 4*b1*b2*x1*z2*z3 + a2*b1*b2*x1*z2*z3 + a1*a2*b1*b2*x1*z2*z3 + 2*a3*b1*b2*x1*z2*z3 + a2*a3*b1*b2*x1*z2*z3 + b1^2*b2*x1*z2*z3 + a1*b1^2*b2*x1*z2*z3 + a2*b1^2*b2*x1*z2*z3 + 2*b2^2*x1*z2*z3 + a1*b2^2*x1*z2*z3 + a2*b2^2*x1*z2*z3 + a3*b2^2*x1*z2*z3 + a1*a3*b2^2*x1*z2*z3 + 2*b1*b2^2*x1*z2*z3 + a1*b1*b2^2*x1*z2*z3 + b1^2*b2^2*x1*z2*z3 + a3*b1^2*b2^2*x1*z2*z3 + b3*x1*z2*z3 + a2*b3*x1*z2*z3 + a2*a3*b3*x1*z2*z3 + 2*b1*b3*x1*z2*z3 + 2*a1*b1*b3*x1*z2*z3 + 2*a2*b1*b3*x1*z2*z3 + a1*a2*b1*b3*x1*z2*z3 + a1*b1^2*b3*x1*z2*z3 + 2*b2*b3*x1*z2*z3 + 2*a2*b2*b3*x1*z2*z3 + a1*a2*b2*b3*x1*z2*z3 + 3*a3*b2*b3*x1*z2*z3 + 3*b1*b2*b3*x1*z2*z3 + 3*a1*b1*b2*b3*x1*z2*z3 + a2*b1*b2*b3*x1*z2*z3 + a2*b1^2*b2*b3*x1*z2*z3 + a2*b2^2*b3*x1*z2*z3 + b2*b3^2*x1*z2*z3 + a1*x2*z2*z3 + b1*x2*z2*z3 + a1*b1*x2*z2*z3 + a2*b1*x2*z2*z3 + a2*b1^2*x2*z2*z3 + a1*b2*x2*z2*z3 + a1*b1*b2*x2*z2*z3 + a2*b1*b2*x2*z2*z3 + b1^2*b2*x2*z2*z3 + a2*b1^2*b2*x2*z2*z3 + b1*b2^2*x2*z2*z3 + b1^2*b2^2*x2*z2*z3 + a1*a2*b3*x2*z2*z3 + 2*b1*b3*x2*z2*z3 + a1*b1*b3*x2*z2*z3 + a2*b1*b3*x2*z2*z3 + b1^2*b3*x2*z2*z3 + a1*b2*b3*x2*z2*z3 + b1*b2*b3*x2*z2*z3 + a1*b1*b2*b3*x2*z2*z3 + b1^2*b2*b3*x2*z2*z3 + b1^2*x3*z2*z3 + a1*b1^2*x3*z2*z3 + a2*b1^2*x3*z2*z3 + b1*b2*x3*z2*z3 + a1*b1*b2*x3*z2*z3 + a2*b1*b2*x3*z2*z3 + b1^2*b2*x3*z2*z3 + a1*b1^2*b2*x3*z2*z3 + b1*b2^2*x3*z2*z3 + a1*b1*b2^2*x3*z2*z3 + a2*b1*b2^2*x3*z2*z3 + b1*b2*b3*x3*z2*z3 + a1*b1*b2*b3*x3*z2*z3 + a2*b1*b2*b3*x3*z2*z3 + a1*b2^2*b3*x3*z2*z3 + 2*y1*z2*z3 + a1*y1*z2*z3 + a2*y1*z2*z3 + a1*a2*y1*z2*z3 + a3*y1*z2*z3 + a2*a3*y1*z2*z3 + b1*y1*z2*z3 + a1*b1*y1*z2*z3 + a1*a2*b1*y1*z2*z3 + 2*b1^2*y1*z2*z3 + a1*b1^2*y1*z2*z3 + a2*b1^2*y1*z2*z3 + a1*a2*b1^2*y1*z2*z3 + 3*b2*y1*z2*z3 + 2*a1*b2*y1*z2*z3 + 2*a2*b2*y1*z2*z3 + a1*a2*b2*y1*z2*z3 + 2*a3*b2*y1*z2*z3 + 2*a2*a3*b2*y1*z2*z3 + 3*b1*b2*y1*z2*z3 + a1*a2*b1*b2*y1*z2*z3 + 2*a3*b1*b2*y1*z2*z3 + a2*a3*b1*b2*y1*z2*z3 + 2*b1^2*b2*y1*z2*z3 + a1*b1^2*b2*y1*z2*z3 + 2*a2*b1^2*b2*y1*z2*z3 + 2*b2^2*y1*z2*z3 + a1*b2^2*y1*z2*z3 + a2*b2^2*y1*z2*z3 + 2*a3*b2^2*y1*z2*z3 + a1*a3*b2^2*y1*z2*z3 + b1*b2^2*y1*z2*z3 + a1*b1*b2^2*y1*z2*z3 + a3*b1^2*b2^2*y1*z2*z3 + b3*y1*z2*z3 + a2*b3*y1*z2*z3 + a2*a3*b3*y1*z2*z3 + a1*b1*b3*y1*z2*z3 + a1*a2*b1*b3*y1*z2*z3 + b1^2*b3*y1*z2*z3 + a1*b1^2*b3*y1*z2*z3 + a2*b1^2*b3*y1*z2*z3 + b2*b3*y1*z2*z3 + 2*a1*b2*b3*y1*z2*z3 + 3*a2*b2*b3*y1*z2*z3 + a1*a2*b2*b3*y1*z2*z3 + 3*a3*b2*b3*y1*z2*z3 + 3*b1*b2*b3*y1*z2*z3 + 3*a1*b1*b2*b3*y1*z2*z3 + a2*b1*b2*b3*y1*z2*z3 + b1^2*b2*b3*y1*z2*z3 + a2*b1^2*b2*b3*y1*z2*z3 + b2^2*b3*y1*z2*z3 + a2*b2^2*b3*y1*z2*z3 + b2*b3^2*y1*z2*z3 + a2*b1^2*y2*z2*z3 + b1*b2*y2*z2*z3 + a1*b1*b2*y2*z2*z3 + a2*b1*b2*y2*z2*z3 + b1^2*b2*y2*z2*z3 + a2*b1^2*b2*y2*z2*z3 + b1*b2^2*y2*z2*z3 + b1^2*b2^2*y2*z2*z3 + a1*a2*b3*y2*z2*z3 + a1*b2*b3*y2*z2*z3 + a1*b1*b2*b3*y2*z2*z3 + b1^2*b2*b3*y2*z2*z3 + a2*b1^2*y3*z2*z3 + b1*b2*y3*z2*z3 + a1*b1*b2*y3*z2*z3 + a2*b1*b2*y3*z2*z3 + 2*b1^2*b2*y3*z2*z3 + a1*b1^2*b2*y3*z2*z3 + b1*b2^2*y3*z2*z3 + a1*b1*b2^2*y3*z2*z3 + a2*b1*b2^2*y3*z2*z3 + a1*b1*b3*y3*z2*z3 + a1*b1^2*b3*y3*z2*z3 + b1*b2*b3*y3*z2*z3 + a1*b1*b2*b3*y3*z2*z3 + a2*b1*b2*b3*y3*z2*z3 + b1^2*b2*b3*y3*z2*z3 + a2*a3*z1*z2*z3 + a1*b1*z1*z2*z3 + a2*b1*z1*z2*z3 + a1*a2*b1*z1*z2*z3 + 2*b1^2*z1*z2*z3 + a1*b1^2*z1*z2*z3 + a2*b1^2*z1*z2*z3 + a1*a2*b1^2*z1*z2*z3 + b2*z1*z2*z3 + 2*a1*b2*z1*z2*z3 + a2*b2*z1*z2*z3 + 2*a1*a2*b2*z1*z2*z3 + a3*b2*z1*z2*z3 + a2*a3*b2*z1*z2*z3 + 2*b1*b2*z1*z2*z3 + 3*a1*b1*b2*z1*z2*z3 + a2*b1*b2*z1*z2*z3 + a1*a2*b1*b2*z1*z2*z3 + 2*a3*b1*b2*z1*z2*z3 + a2*a3*b1*b2*z1*z2*z3 + 3*b1^2*b2*z1*z2*z3 + 2*a1*b1^2*b2*z1*z2*z3 + a2*b1^2*b2*z1*z2*z3 + b2^2*z1*z2*z3 + a2*b2^2*z1*z2*z3 + a3*b2^2*z1*z2*z3 + a1*a3*b2^2*z1*z2*z3 + 2*b1*b2^2*z1*z2*z3 + a1*b1*b2^2*z1*z2*z3 + a3*b1*b2^2*z1*z2*z3 + b1^2*b2^2*z1*z2*z3 + a3*b1^2*b2^2*z1*z2*z3 + a2*a3*b3*z1*z2*z3 + b1*b3*z1*z2*z3 + 2*a1*b1*b3*z1*z2*z3 + 2*a2*b1*b3*z1*z2*z3 + a1*a2*b1*b3*z1*z2*z3 + b1^2*b3*z1*z2*z3 + a1*b1^2*b3*z1*z2*z3 + 2*b2*b3*z1*z2*z3 + 3*a2*b2*b3*z1*z2*z3 + a1*a2*b2*b3*z1*z2*z3 + 3*a3*b2*b3*z1*z2*z3 + 5*b1*b2*b3*z1*z2*z3 + 3*a1*b1*b2*b3*z1*z2*z3 + 2*a2*b1*b2*b3*z1*z2*z3 + a2*b1^2*b2*b3*z1*z2*z3 + a2*b2^2*b3*z1*z2*z3 + b2*b3^2*z1*z2*z3 + (a2*b1*z3*(1 + z3))/2 + (a1*a2*b1*z3*(1 + z3))/2 + (a2*b1^2*z3*(1 + z3))/2 + (a1*b2*z3*(1 + z3))/2 + (a1*a2*b2*z3*(1 + z3))/2 + 2*b1*b2*z3*(1 + z3) + a1*b1*b2*z3*(1 + z3) + a2*b1*b2*z3*(1 + z3) + (b1^2*b2*z3*(1 + z3))/2 + (b1*b2^2*z3*(1 + z3))/2 + (b1^2*b2^2*z3*(1 + z3))/2 + (a1*a2*b3*z3*(1 + z3))/2 + (a2*b1*b3*z3*(1 + z3))/2 + b1*b2*b3*z3*(1 + z3) + (a1*b1*b2*b3*z3*(1 + z3))/2 + (a2*b1*b2*b3*z3*(1 + z3))/2 + (a3*b1*b2*b3*z3*(1 + z3))/2 + (b1^2*b2*x1*z3*(1 + z3))/2 + (b2*b3*x1*z3*(1 + z3))/2 + (b1*b2*b3*x1*z3*(1 + z3))/2 + (b2^2*b3*x1*z3*(1 + z3))/2 + (a1*a2*x2*z3*(1 + z3))/2 + (a1*a3*x2*z3*(1 + z3))/2 + (b1*x2*z3*(1 + z3))/2 + (b1*b2*x2*z3*(1 + z3))/2 + (a1*b1*b2*x2*z3*(1 + z3))/2 + (b1*b2*y1*z3*(1 + z3))/2 + (b1^2*b2*y1*z3*(1 + z3))/2 + (b1*b2*b3*y1*z3*(1 + z3))/2 + (b2^2*b3*y1*z3*(1 + z3))/2 + (a1*y2*z3*(1 + z3))/2 + (a1*a2*y2*z3*(1 + z3))/2 + (a1*a3*y2*z3*(1 + z3))/2 + (b1*y2*z3*(1 + z3))/2 + (a1*b1*b2*y2*z3*(1 + z3))/2 + (a2*a3*b2*z1*z3*(1 + z3))/2 + (b1*b2*z1*z3*(1 + z3))/2 + (b1^2*b2*z1*z3*(1 + z3))/2 + (b2^2*z1*z3*(1 + z3))/2 + (a2*b2^2*z1*z3*(1 + z3))/2 + (a3*b2^2*z1*z3*(1 + z3))/2 + (a2*a3*b3*z1*z3*(1 + z3))/2 + (a3*b2*b3*z1*z3*(1 + z3))/2 + (b1*b2*b3*z1*z3*(1 + z3))/2 + (a2*b2^2*b3*z1*z3*(1 + z3))/2 + (a1*a2*z2*z3*(1 + z3))/2 + (a1*a3*z2*z3*(1 + z3))/2 + (b1*z2*z3*(1 + z3))/2 + (a1*b1*z2*z3*(1 + z3))/2 + (a2*b1*z2*z3*(1 + z3))/2 + (a3*b1*z2*z3*(1 + z3))/2 + (a1*b1*b2*z2*z3*(1 + z3))/2;
end;
#####################################################################
#####################################################################
#Space Group No. 83 ( P4/m)
#####################################################################
Aiin83:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin83:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Axyin83:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin83:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain83:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + c1*c2;
end;
#####################################################################
Bxyin83:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 - b1)*x2*y1 + b1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 84 ( P4_2/m)
#####################################################################
Aiin84:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin84:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Axyin84:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain84:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + c1*c2;
end;
#####################################################################
Bczin84:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + b1*b2*c1 + a1*c2 + b1*c2 + b1*b2*c2 + b2*z1;
end;
#####################################################################
Bxyin84:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
Bzxyin84:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + b1*c2*x1 + b2*c2*x1 + a2*y1 + c2*y1 + b1*c2*y1 + b2*c2*y1 + x1*z2 + y1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 85 ( P4/n)
#####################################################################
Aiin85:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin85:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Azin85:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain85:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + c1*c2;
end;
#####################################################################
Bcxyin85:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*b2 + a2*b2*c1 + b1*c2 + c1*c2 + a2*x1 + b2*x1 + b1*b2*x1 + a2*y1 + b1*b2*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 86 ( P4_2/n)
#####################################################################
Aiin86:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin86:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Axyzin86:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain86:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + c1*c2;
end;
#####################################################################
#####################################################################
#Space Group No. 87 ( I4/m)
#####################################################################
Aiin87:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin87:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Axyzin87:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain87:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + c1*c2;
end;
#####################################################################
Bphiin87:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1*x1 + b2*x1 + a1*b2*x1 + a2*b2*x1 + a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a2*z1 + a2*b1*z1 + a1*b2*z1 + a2*b2*z1 + b1*b2*z1;
end;
#####################################################################
Bxyzin87:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*x1*x2 + b1*x2*y1 + b1*x1*y2 + b1*y1*y2 + x1*z2 + b1*x1*z2 + b1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
CGAPin87:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return b2*(b3 + c3)*x1 + b1*(a3 + b3)*x2 + b1*(a1 + b1)*(a3 + b3)*x2 + 2*b1*b3*(b1 + c1)*x2 + b2*b3*(b1 + c1)*x2 + (a3 + b3)*(b1 + c1)*x2 + b1*(a3 + b3)*(b1 + c1)*x2 + b1*b3*(b2 + c2)*x2 + b1*(b3 + c3)*x2 + 3*(a1 + b1)*(b3 + c3)*x2 + b1*(a1 + b1)*(b3 + c3)*x2 + 2*b1*b2*(b3 + c3)*x2 + b1*b3*(b3 + c3)*x2 + b3*(b1 + c1)*x1*x2 + b1*b3*(b1 + c1)*x1*x2 + b3*(b2 + c2)*x1*x2 + (b3 + c3)*x1*x2 + b1*(b3 + c3)*x1*x2 + b2*(b3 + c3)*x1*x2 + b3*(b3 + c3)*x1*x2 + (b1*b3*x2*(1 + x2))/2 + (b1*(a3 + b3)*x2*(1 + x2))/2 + b3*x1*x2*(1 + x2) + (b1*b3*x1*x2*(1 + x2))/2 + 2*b2*(b1 + c1)*x3 + b1*b2*(b1 + c1)*x3 + (a2 + b2)*(b1 + c1)*x3 + b1*(a2 + b2)*(b1 + c1)*x3 + b2*(a2 + b2)*(b1 + c1)*x3 + b2*b3*(b1 + c1)*x3 + b1*b2*(b2 + c2)*x3 + b1*(a2 + b2)*(b2 + c2)*x3 + (a1 + b1)*b2*(b3 + c3)*x3 + b1*(a1 + b1)*b2*(b3 + c3)*x3 + b1*(a2 + b2)*(b3 + c3)*x3 + (a1 + b1)*(a2 + b2)*(b3 + c3)*x3 + b1*b2*(a2 + b2)*(b3 + c3)*x3 + (a1 + b1)*b2*x1*x3 + b1*(a1 + b1)*b2*x1*x3 + (a2 + b2)*x1*x3 + b1*(a2 + b2)*x1*x3 + (a1 + b1)*(a2 + b2)*x1*x3 + b2*(a2 + b2)*x1*x3 + b1*b2*(a2 + b2)*x1*x3 + 3*b2*(b1 + c1)*x1*x3 + (a2 + b2)*(b1 + c1)*x1*x3 + b2*b3*(b1 + c1)*x1*x3 + 3*b2*(b2 + c2)*x1*x3 + (a2 + b2)*(b2 + c2)*x1*x3 + b2*b3*(b2 + c2)*x1*x3 + 2*b2*(b3 + c3)*x1*x3 + (a2 + b2)*(b3 + c3)*x1*x3 + b2*x1*(1 + x1)*x3 + (3*(a2 + b2)*x1*(1 + x1)*x3)/2 + (b2*(a2 + b2)*x1*(1 + x1)*x3)/2 + (3*b2*b3*x1*(1 + x1)*x3)/2 + (a1 + b1)*b2*x2*x3 + b1*(a1 + b1)*b2*x2*x3 + b1*(a2 + b2)*x2*x3 + (a1 + b1)*(a2 + b2)*x2*x3 + b1*b2*(a2 + b2)*x2*x3 + 3*(b1 + c1)*x2*x3 + 3*b1*(b1 + c1)*x2*x3 + 2*(a1 + b1)*(b1 + c1)*x2*x3 + 5*b2*(b1 + c1)*x2*x3 + (a1 + b1)*b2*(b1 + c1)*x2*x3 + (a2 + b2)*(b1 + c1)*x2*x3 + b2*(a2 + b2)*(b1 + c1)*x2*x3 + b3*(b1 + c1)*x2*x3 + b1*b3*(b1 + c1)*x2*x3 + (a1 + b1)*b3*(b1 + c1)*x2*x3 + b2*b3*(b1 + c1)*x2*x3 + 3*b1*(b2 + c2)*x2*x3 + 2*(a1 + b1)*(b2 + c2)*x2*x3 + (a1 + b1)*b2*(b2 + c2)*x2*x3 + b1*b3*(b2 + c2)*x2*x3 + (a1 + b1)*b3*(b2 + c2)*x2*x3 + b1*(b3 + c3)*x2*x3 + (a1 + b1)*b2*(b3 + c3)*x2*x3 + b1*b3*(b3 + c3)*x2*x3 + (a1 + b1)*b3*(b3 + c3)*x2*x3 + x1*x2*x3 + 5*b2*x1*x2*x3 + 2*(a2 + b2)*x1*x2*x3 + b2*(a2 + b2)*x1*x2*x3 + 2*b3*x1*x2*x3 + 2*b2*b3*x1*x2*x3 + (b1*b2*x3*(1 + x3))/2 + ((a1 + b1)*b2*x3*(1 + x3))/2 + (b1*(a1 + b1)*b2*x3*(1 + x3))/2 + b1*(a2 + b2)*x3*(1 + x3) + ((a1 + b1)*(a2 + b2)*x3*(1 + x3))/2 + (b1*b2*(a2 + b2)*x3*(1 + x3))/2 + (3*b2*x1*x3*(1 + x3))/2 + (a2 + b2)*x1*x3*(1 + x3) + (b2*b3*x1*x3*(1 + x3))/2 + b1*x2*x3*(1 + x3) + (a1 + b1)*x2*x3*(1 + x3) + b2*(b3 + c3)*y1 + 2*b3*(b1 + c1)*x2*y1 + b1*b3*(b1 + c1)*x2*y1 + (a1 + b1)*(b3 + c3)*x2*y1 + b3*x2*(1 + x2)*y1 + (b1*b3*x2*(1 + x2)*y1)/2 + 3*b2*x3*y1 + (a1 + b1)*b2*x3*y1 + b1*(a1 + b1)*b2*x3*y1 + (a2 + b2)*x3*y1 + b1*(a2 + b2)*x3*y1 + (a1 + b1)*(a2 + b2)*x3*y1 + 4*b2*(a2 + b2)*x3*y1 + b1*b2*(a2 + b2)*x3*y1 + 2*b2*(b1 + c1)*x3*y1 + 2*(a2 + b2)*(b1 + c1)*x3*y1 + b2*b3*(b1 + c1)*x3*y1 + 2*b2*(b2 + c2)*x3*y1 + 2*(a2 + b2)*(b2 + c2)*x3*y1 + b2*b3*(b2 + c2)*x3*y1 + (a2 + b2)*(b3 + c3)*x3*y1 + 3*b2*x1*x3*y1 + 3*(a2 + b2)*x1*x3*y1 + b2*(a2 + b2)*x1*x3*y1 + 3*b2*b3*x1*x3*y1 + 3*x2*x3*y1 + 9*b2*x2*x3*y1 + 4*(a2 + b2)*x2*x3*y1 + b2*(a2 + b2)*x2*x3*y1 + 2*b3*x2*x3*y1 + 2*b2*b3*x2*x3*y1 + b2*x3*(1 + x3)*y1 + (3*(a2 + b2)*x3*(1 + x3)*y1)/2 + (b2*b3*x3*(1 + x3)*y1)/2 + b2*x3*y1*(1 + y1) + (3*(a2 + b2)*x3*y1*(1 + y1))/2 + (b2*(a2 + b2)*x3*y1*(1 + y1))/2 + (3*b2*b3*x3*y1*(1 + y1))/2 + 2*b1*(a3 + b3)*y2 + b1*(a1 + b1)*(a3 + b3)*y2 + 2*b1*b3*(b1 + c1)*y2 + b2*b3*(b1 + c1)*y2 + (a3 + b3)*(b1 + c1)*y2 + b1*(a3 + b3)*(b1 + c1)*y2 + b1*b3*(b2 + c2)*y2 + b1*(b3 + c3)*y2 + 2*(a1 + b1)*(b3 + c3)*y2 + b1*(a1 + b1)*(b3 + c3)*y2 + 2*b1*b2*(b3 + c3)*y2 + b1*b3*(b3 + c3)*y2 + b3*(b1 + c1)*x1*y2 + b1*b3*(b1 + c1)*x1*y2 + b3*(b2 + c2)*x1*y2 + b1*(b3 + c3)*x1*y2 + b2*(b3 + c3)*x1*y2 + b3*(b3 + c3)*x1*y2 + b1*b3*x2*y2 + b1*(a3 + b3)*x2*y2 + b1*(b3 + c3)*x2*y2 + (a1 + b1)*(b3 + c3)*x2*y2 + 2*b3*x1*x2*y2 + b1*b3*x1*x2*y2 + b1*b2*x3*y2 + (a1 + b1)*b2*x3*y2 + b1*(a1 + b1)*b2*x3*y2 + 2*b1*(a2 + b2)*x3*y2 + (a1 + b1)*(a2 + b2)*x3*y2 + b1*b2*(a2 + b2)*x3*y2 + 2*(b1 + c1)*x3*y2 + 3*b1*(b1 + c1)*x3*y2 + 2*(a1 + b1)*(b1 + c1)*x3*y2 + 5*b2*(b1 + c1)*x3*y2 + (a1 + b1)*b2*(b1 + c1)*x3*y2 + (a2 + b2)*(b1 + c1)*x3*y2 + b2*(a2 + b2)*(b1 + c1)*x3*y2 + 2*b3*(b1 + c1)*x3*y2 + b1*b3*(b1 + c1)*x3*y2 + (a1 + b1)*b3*(b1 + c1)*x3*y2 + b2*b3*(b1 + c1)*x3*y2 + 3*b1*(b2 + c2)*x3*y2 + 2*(a1 + b1)*(b2 + c2)*x3*y2 + (a1 + b1)*b2*(b2 + c2)*x3*y2 + b1*b3*(b2 + c2)*x3*y2 + (a1 + b1)*b3*(b2 + c2)*x3*y2 + b1*(b3 + c3)*x3*y2 + (a1 + b1)*b2*(b3 + c3)*x3*y2 + b1*b3*(b3 + c3)*x3*y2 + (a1 + b1)*b3*(b3 + c3)*x3*y2 + x1*x3*y2 + 5*b2*x1*x3*y2 + 2*(a2 + b2)*x1*x3*y2 + b2*(a2 + b2)*x1*x3*y2 + 2*b3*x1*x3*y2 + 2*b2*b3*x1*x3*y2 + b1*x3*(1 + x3)*y2 + (a1 + b1)*x3*(1 + x3)*y2 + 2*b3*(b1 + c1)*y1*y2 + b1*b3*(b1 + c1)*y1*y2 + (a1 + b1)*(b3 + c3)*y1*y2 + 2*b3*x2*y1*y2 + b1*b3*x2*y1*y2 + x3*y1*y2 + 6*b2*x3*y1*y2 + 3*(a2 + b2)*x3*y1*y2 + b2*(a2 + b2)*x3*y1*y2 + 2*b3*x3*y1*y2 + 2*b2*b3*x3*y1*y2 + (b1*b3*y2*(1 + y2))/2 + (b1*(a3 + b3)*y2*(1 + y2))/2 + b3*x1*y2*(1 + y2) + (b1*b3*x1*y2*(1 + y2))/2 + b3*y1*y2*(1 + y2) + (b1*b3*y1*y2*(1 + y2))/2 + 2*b2*(b1 + c1)*y3 + b1*b2*(b1 + c1)*y3 + (a2 + b2)*(b1 + c1)*y3 + b1*(a2 + b2)*(b1 + c1)*y3 + b2*(a2 + b2)*(b1 + c1)*y3 + b2*b3*(b1 + c1)*y3 + b1*b2*(b2 + c2)*y3 + b1*(a2 + b2)*(b2 + c2)*y3 + (a1 + b1)*b2*(b3 + c3)*y3 + b1*(a1 + b1)*b2*(b3 + c3)*y3 + b1*(a2 + b2)*(b3 + c3)*y3 + (a1 + b1)*(a2 + b2)*(b3 + c3)*y3 + b1*b2*(a2 + b2)*(b3 + c3)*y3 + (a1 + b1)*b2*x1*y3 + b1*(a1 + b1)*b2*x1*y3 + b1*(a2 + b2)*x1*y3 + (a1 + b1)*(a2 + b2)*x1*y3 + b2*(a2 + b2)*x1*y3 + b1*b2*(a2 + b2)*x1*y3 + 3*b2*(b1 + c1)*x1*y3 + (a2 + b2)*(b1 + c1)*x1*y3 + b2*b3*(b1 + c1)*x1*y3 + 3*b2*(b2 + c2)*x1*y3 + (a2 + b2)*(b2 + c2)*x1*y3 + b2*b3*(b2 + c2)*x1*y3 + 2*b2*(b3 + c3)*x1*y3 + (a2 + b2)*(b3 + c3)*x1*y3 + (3*b2*x1*(1 + x1)*y3)/2 + (3*(a2 + b2)*x1*(1 + x1)*y3)/2 + (b2*(a2 + b2)*x1*(1 + x1)*y3)/2 + (3*b2*b3*x1*(1 + x1)*y3)/2 + (a1 + b1)*b2*x2*y3 + b1*(a1 + b1)*b2*x2*y3 + b1*(a2 + b2)*x2*y3 + (a1 + b1)*(a2 + b2)*x2*y3 + b1*b2*(a2 + b2)*x2*y3 + 2*(b1 + c1)*x2*y3 + 2*b1*(b1 + c1)*x2*y3 + (a1 + b1)*(b1 + c1)*x2*y3 + 4*b2*(b1 + c1)*x2*y3 + (a1 + b1)*b2*(b1 + c1)*x2*y3 + (a2 + b2)*(b1 + c1)*x2*y3 + b2*(a2 + b2)*(b1 + c1)*x2*y3 + b3*(b1 + c1)*x2*y3 + b1*b3*(b1 + c1)*x2*y3 + (a1 + b1)*b3*(b1 + c1)*x2*y3 + b2*b3*(b1 + c1)*x2*y3 + 2*b1*(b2 + c2)*x2*y3 + (a1 + b1)*(b2 + c2)*x2*y3 + (a1 + b1)*b2*(b2 + c2)*x2*y3 + b1*b3*(b2 + c2)*x2*y3 + (a1 + b1)*b3*(b2 + c2)*x2*y3 + b1*(b3 + c3)*x2*y3 + (a1 + b1)*b2*(b3 + c3)*x2*y3 + b1*b3*(b3 + c3)*x2*y3 + (a1 + b1)*b3*(b3 + c3)*x2*y3 + 4*b2*x1*x2*y3 + 2*(a2 + b2)*x1*x2*y3 + b2*(a2 + b2)*x1*x2*y3 + 2*b3*x1*x2*y3 + 2*b2*b3*x1*x2*y3 + (a1 + b1)*b2*x3*y3 + b1*(a1 + b1)*b2*x3*y3 + b1*(a2 + b2)*x3*y3 + (a1 + b1)*(a2 + b2)*x3*y3 + b1*b2*(a2 + b2)*x3*y3 + 2*b2*(b1 + c1)*x3*y3 + 3*b2*x1*x3*y3 + 2*(a2 + b2)*x1*x3*y3 + b2*b3*x1*x3*y3 + 6*b2*y1*y3 + (a1 + b1)*b2*y1*y3 + b1*(a1 + b1)*b2*y1*y3 + b1*(a2 + b2)*y1*y3 + (a1 + b1)*(a2 + b2)*y1*y3 + 4*b2*(a2 + b2)*y1*y3 + b1*b2*(a2 + b2)*y1*y3 + 2*b2*(b1 + c1)*y1*y3 + 2*(a2 + b2)*(b1 + c1)*y1*y3 + b2*b3*(b1 + c1)*y1*y3 + 2*b2*(b2 + c2)*y1*y3 + 2*(a2 + b2)*(b2 + c2)*y1*y3 + b2*b3*(b2 + c2)*y1*y3 + (a2 + b2)*(b3 + c3)*y1*y3 + 2*b2*x1*y1*y3 + 3*(a2 + b2)*x1*y1*y3 + b2*(a2 + b2)*x1*y1*y3 + 3*b2*b3*x1*y1*y3 + 8*b2*x2*y1*y3 + 4*(a2 + b2)*x2*y1*y3 + b2*(a2 + b2)*x2*y1*y3 + 2*b3*x2*y1*y3 + 2*b2*b3*x2*y1*y3 + 5*b2*x3*y1*y3 + 2*(a2 + b2)*x3*y1*y3 + b2*b3*x3*y1*y3 + (3*b2*y1*(1 + y1)*y3)/2 + (3*(a2 + b2)*y1*(1 + y1)*y3)/2 + (b2*(a2 + b2)*y1*(1 + y1)*y3)/2 + (3*b2*b3*y1*(1 + y1)*y3)/2 + b1*y2*y3 + b1*b2*y2*y3 + (a1 + b1)*b2*y2*y3 + b1*(a1 + b1)*b2*y2*y3 + 2*b1*(a2 + b2)*y2*y3 + (a1 + b1)*(a2 + b2)*y2*y3 + b1*b2*(a2 + b2)*y2*y3 + 2*b1*(b1 + c1)*y2*y3 + (a1 + b1)*(b1 + c1)*y2*y3 + 6*b2*(b1 + c1)*y2*y3 + (a1 + b1)*b2*(b1 + c1)*y2*y3 + (a2 + b2)*(b1 + c1)*y2*y3 + b2*(a2 + b2)*(b1 + c1)*y2*y3 + 2*b3*(b1 + c1)*y2*y3 + b1*b3*(b1 + c1)*y2*y3 + (a1 + b1)*b3*(b1 + c1)*y2*y3 + b2*b3*(b1 + c1)*y2*y3 + 2*b1*(b2 + c2)*y2*y3 + (a1 + b1)*(b2 + c2)*y2*y3 + (a1 + b1)*b2*(b2 + c2)*y2*y3 + b1*b3*(b2 + c2)*y2*y3 + (a1 + b1)*b3*(b2 + c2)*y2*y3 + b1*(b3 + c3)*y2*y3 + (a1 + b1)*b2*(b3 + c3)*y2*y3 + b1*b3*(b3 + c3)*y2*y3 + (a1 + b1)*b3*(b3 + c3)*y2*y3 + 6*b2*x1*y2*y3 + 2*(a2 + b2)*x1*y2*y3 + b2*(a2 + b2)*x1*y2*y3 + 2*b3*x1*y2*y3 + 2*b2*b3*x1*y2*y3 + y1*y2*y3 + 7*b2*y1*y2*y3 + 3*(a2 + b2)*y1*y2*y3 + b2*(a2 + b2)*y1*y2*y3 + 2*b3*y1*y2*y3 + 2*b2*b3*y1*y2*y3 + (b1*b2*y3*(1 + y3))/2 + ((a1 + b1)*b2*y3*(1 + y3))/2 + (b1*(a1 + b1)*b2*y3*(1 + y3))/2 + b1*(a2 + b2)*y3*(1 + y3) + ((a1 + b1)*(a2 + b2)*y3*(1 + y3))/2 + (b1*b2*(a2 + b2)*y3*(1 + y3))/2 + (3*b2*x1*y3*(1 + y3))/2 + (a2 + b2)*x1*y3*(1 + y3) + (b2*b3*x1*y3*(1 + y3))/2 + (b1*x2*y3*(1 + y3))/2 + ((a1 + b1)*x2*y3*(1 + y3))/2 + b2*y1*y3*(1 + y3) + (3*(a2 + b2)*y1*y3*(1 + y3))/2 + (b2*b3*y1*y3*(1 + y3))/2 + (b1*y2*y3*(1 + y3))/2 + ((a1 + b1)*y2*y3*(1 + y3))/2 + b3*x2*z1 + b1*(a3 + b3)*x2*z1 + 2*b3*(b1 + c1)*x2*z1 + b1*b3*(b1 + c1)*x2*z1 + b3*(b2 + c2)*x2*z1 + (b3 + c3)*x2*z1 + b1*(b3 + c3)*x2*z1 + b2*(b3 + c3)*x2*z1 + b3*(b3 + c3)*x2*z1 + b3*x1*x2*z1 + (3*b3*x2*(1 + x2)*z1)/2 + (b1*b3*x2*(1 + x2)*z1)/2 + (a1 + b1)*b2*x3*z1 + b1*(a1 + b1)*b2*x3*z1 + (a2 + b2)*x3*z1 + b1*(a2 + b2)*x3*z1 + (a1 + b1)*(a2 + b2)*x3*z1 + b2*(a2 + b2)*x3*z1 + b1*b2*(a2 + b2)*x3*z1 + 4*b2*(b1 + c1)*x3*z1 + (a2 + b2)*(b1 + c1)*x3*z1 + 2*b2*b3*(b1 + c1)*x3*z1 + 4*b2*(b2 + c2)*x3*z1 + (a2 + b2)*(b2 + c2)*x3*z1 + 2*b2*b3*(b2 + c2)*x3*z1 + 3*b2*(b3 + c3)*x3*z1 + (a2 + b2)*(b3 + c3)*x3*z1 + b2*b3*(b3 + c3)*x3*z1 + 3*b2*x1*x3*z1 + b1*b2*x1*x3*z1 + 3*(a2 + b2)*x1*x3*z1 + b2*(a2 + b2)*x1*x3*z1 + 2*b2*b3*x1*x3*z1 + x2*x3*z1 + 5*b2*x2*x3*z1 + 2*(a2 + b2)*x2*x3*z1 + b2*(a2 + b2)*x2*x3*z1 + 2*b3*x2*x3*z1 + 2*b2*b3*x2*x3*z1 + (3*b2*x3*(1 + x3)*z1)/2 + (a2 + b2)*x3*(1 + x3)*z1 + (b2*b3*x3*(1 + x3)*z1)/2 + b3*x2*y1*z1 + 4*b2*x3*y1*z1 + b1*b2*x3*y1*z1 + 3*(a2 + b2)*x3*y1*z1 + b2*(a2 + b2)*x3*y1*z1 + 2*b2*b3*x3*y1*z1 + b3*y2*z1 + b1*(a3 + b3)*y2*z1 + 2*b3*(b1 + c1)*y2*z1 + b1*b3*(b1 + c1)*y2*z1 + b3*(b2 + c2)*y2*z1 + b1*(b3 + c3)*y2*z1 + b2*(b3 + c3)*y2*z1 + b3*(b3 + c3)*y2*z1 + b3*x1*y2*z1 + 3*b3*x2*y2*z1 + b1*b3*x2*y2*z1 + x3*y2*z1 + 5*b2*x3*y2*z1 + 2*(a2 + b2)*x3*y2*z1 + b2*(a2 + b2)*x3*y2*z1 + 2*b3*x3*y2*z1 + 2*b2*b3*x3*y2*z1 + b3*y1*y2*z1 + (3*b3*y2*(1 + y2)*z1)/2 + (b1*b3*y2*(1 + y2)*z1)/2 + (a1 + b1)*b2*y3*z1 + b1*(a1 + b1)*b2*y3*z1 + b1*(a2 + b2)*y3*z1 + (a1 + b1)*(a2 + b2)*y3*z1 + b2*(a2 + b2)*y3*z1 + b1*b2*(a2 + b2)*y3*z1 + 4*b2*(b1 + c1)*y3*z1 + (a2 + b2)*(b1 + c1)*y3*z1 + 2*b2*b3*(b1 + c1)*y3*z1 + 4*b2*(b2 + c2)*y3*z1 + (a2 + b2)*(b2 + c2)*y3*z1 + 2*b2*b3*(b2 + c2)*y3*z1 + 3*b2*(b3 + c3)*y3*z1 + (a2 + b2)*(b3 + c3)*y3*z1 + b2*b3*(b3 + c3)*y3*z1 + 4*b2*x1*y3*z1 + b1*b2*x1*y3*z1 + 3*(a2 + b2)*x1*y3*z1 + b2*(a2 + b2)*x1*y3*z1 + 2*b2*b3*x1*y3*z1 + 4*b2*x2*y3*z1 + 2*(a2 + b2)*x2*y3*z1 + b2*(a2 + b2)*x2*y3*z1 + 2*b3*x2*y3*z1 + 2*b2*b3*x2*y3*z1 + 3*b2*x3*y3*z1 + 2*(a2 + b2)*x3*y3*z1 + b2*b3*x3*y3*z1 + 3*b2*y1*y3*z1 + b1*b2*y1*y3*z1 + 3*(a2 + b2)*y1*y3*z1 + b2*(a2 + b2)*y1*y3*z1 + 2*b2*b3*y1*y3*z1 + 6*b2*y2*y3*z1 + 2*(a2 + b2)*y2*y3*z1 + b2*(a2 + b2)*y2*y3*z1 + 2*b3*y2*y3*z1 + 2*b2*b3*y2*y3*z1 + (3*b2*y3*(1 + y3)*z1)/2 + (a2 + b2)*y3*(1 + y3)*z1 + (b2*b3*y3*(1 + y3)*z1)/2 + (b2*b3*z1*(1 + z1))/2 + b2*x3*z1*(1 + z1) + (3*(a2 + b2)*x3*z1*(1 + z1))/2 + (b2*(a2 + b2)*x3*z1*(1 + z1))/2 + (3*b2*b3*x3*z1*(1 + z1))/2 + (3*b2*y3*z1*(1 + z1))/2 + (3*(a2 + b2)*y3*z1*(1 + z1))/2 + (b2*(a2 + b2)*y3*z1*(1 + z1))/2 + (3*b2*b3*y3*z1*(1 + z1))/2 + b3*(2*b2 + c2)*(x1 + y1 + z1) + (a1 + b1)*(a3 + b3)*z2 + b1*(a1 + b1)*(a3 + b3)*z2 + 2*b1*b3*(b1 + c1)*z2 + b2*b3*(b1 + c1)*z2 + b1*(a3 + b3)*(b1 + c1)*z2 + b1*b3*(b2 + c2)*z2 + b1*(b3 + c3)*z2 + 2*(a1 + b1)*(b3 + c3)*z2 + 2*b1*b2*(b3 + c3)*z2 + b1*b3*(b3 + c3)*z2 + b3*(b1 + c1)*x1*z2 + b1*b3*(b1 + c1)*x1*z2 + b3*(b2 + c2)*x1*z2 + b1*(b3 + c3)*x1*z2 + b2*(b3 + c3)*x1*z2 + b3*(b3 + c3)*x1*z2 + (3*b3*x1*(1 + x1)*z2)/2 + b1*b3*x2*z2 + 2*b3*(b1 + c1)*x2*z2 + b1*(b3 + c3)*x2*z2 + (a1 + b1)*(b3 + c3)*x2*z2 + b1*(a1 + b1)*(b3 + c3)*x2*z2 + 2*b3*x1*x2*z2 + b1*b3*x1*x2*z2 + (a1 + b1)*b2*x3*z2 + b1*(a1 + b1)*b2*x3*z2 + b1*(a2 + b2)*x3*z2 + (a1 + b1)*(a2 + b2)*x3*z2 + b1*b2*(a2 + b2)*x3*z2 + 3*(a1 + b1)*(b1 + c1)*x3*z2 + 5*b2*(b1 + c1)*x3*z2 + b1*b2*(b1 + c1)*x3*z2 + (a1 + b1)*b2*(b1 + c1)*x3*z2 + 2*(a2 + b2)*(b1 + c1)*x3*z2 + b2*(a2 + b2)*(b1 + c1)*x3*z2 + (a1 + b1)*b3*(b1 + c1)*x3*z2 + b2*b3*(b1 + c1)*x3*z2 + 3*(a1 + b1)*(b2 + c2)*x3*z2 + b1*b2*(b2 + c2)*x3*z2 + (a1 + b1)*b2*(b2 + c2)*x3*z2 + (a1 + b1)*b3*(b2 + c2)*x3*z2 + (a1 + b1)*(b3 + c3)*x3*z2 + b1*b2*(b3 + c3)*x3*z2 + (a1 + b1)*b2*(b3 + c3)*x3*z2 + (a1 + b1)*b3*(b3 + c3)*x3*z2 + 4*b2*x1*x3*z2 + 3*(a2 + b2)*x1*x3*z2 + b2*(a2 + b2)*x1*x3*z2 + b3*x1*x3*z2 + 2*b2*b3*x1*x3*z2 + (a1 + b1)*x3*(1 + x3)*z2 + 2*b3*(b1 + c1)*y1*z2 + b1*b3*(b1 + c1)*y1*z2 + b1*(b3 + c3)*y1*z2 + (a1 + b1)*(b3 + c3)*y1*z2 + 3*b3*x1*y1*z2 + 2*b3*x2*y1*z2 + b1*b3*x2*y1*z2 + 6*b2*x3*y1*z2 + 3*(a2 + b2)*x3*y1*z2 + b2*(a2 + b2)*x3*y1*z2 + b3*x3*y1*z2 + 2*b2*b3*x3*y1*z2 + (3*b3*y1*(1 + y1)*z2)/2 + b1*b3*y2*z2 + 2*b3*(b1 + c1)*y2*z2 + b1*(b3 + c3)*y2*z2 + b1*(a1 + b1)*(b3 + c3)*y2*z2 + 2*b3*x1*y2*z2 + b1*b3*x1*y2*z2 + 2*b3*y1*y2*z2 + b1*b3*y1*y2*z2 + (a1 + b1)*b2*y3*z2 + b1*(a1 + b1)*b2*y3*z2 + b1*(a2 + b2)*y3*z2 + (a1 + b1)*(a2 + b2)*y3*z2 + b1*b2*(a2 + b2)*y3*z2 + 2*(a1 + b1)*(b1 + c1)*y3*z2 + 4*b2*(b1 + c1)*y3*z2 + b1*b2*(b1 + c1)*y3*z2 + (a1 + b1)*b2*(b1 + c1)*y3*z2 + 2*(a2 + b2)*(b1 + c1)*y3*z2 + b2*(a2 + b2)*(b1 + c1)*y3*z2 + (a1 + b1)*b3*(b1 + c1)*y3*z2 + b2*b3*(b1 + c1)*y3*z2 + 2*(a1 + b1)*(b2 + c2)*y3*z2 + b1*b2*(b2 + c2)*y3*z2 + (a1 + b1)*b2*(b2 + c2)*y3*z2 + (a1 + b1)*b3*(b2 + c2)*y3*z2 + (a1 + b1)*(b3 + c3)*y3*z2 + b1*b2*(b3 + c3)*y3*z2 + (a1 + b1)*b2*(b3 + c3)*y3*z2 + (a1 + b1)*b3*(b3 + c3)*y3*z2 + 5*b2*x1*y3*z2 + 3*(a2 + b2)*x1*y3*z2 + b2*(a2 + b2)*x1*y3*z2 + b3*x1*y3*z2 + 2*b2*b3*x1*y3*z2 + 7*b2*y1*y3*z2 + 3*(a2 + b2)*y1*y3*z2 + b2*(a2 + b2)*y1*y3*z2 + b3*y1*y3*z2 + 2*b2*b3*y1*y3*z2 + ((a1 + b1)*y3*(1 + y3)*z2)/2 + b3*z1*z2 + (a3 + b3)*z1*z2 + b1*(a3 + b3)*z1*z2 + 3*b3*(b1 + c1)*z1*z2 + b1*b3*(b1 + c1)*z1*z2 + 2*b3*(b2 + c2)*z1*z2 + b1*(b3 + c3)*z1*z2 + 2*b2*(b3 + c3)*z1*z2 + 2*b3*(b3 + c3)*z1*z2 + b3*x1*z1*z2 + b3*x2*z1*z2 + b1*b3*x2*z1*z2 + 4*b2*x3*z1*z2 + 3*(a2 + b2)*x3*z1*z2 + b2*(a2 + b2)*x3*z1*z2 + b3*x3*z1*z2 + 2*b2*b3*x3*z1*z2 + b3*y1*z1*z2 + b3*y2*z1*z2 + b1*b3*y2*z1*z2 + 5*b2*y3*z1*z2 + 3*(a2 + b2)*y3*z1*z2 + b2*(a2 + b2)*y3*z1*z2 + b3*y3*z1*z2 + 2*b2*b3*y3*z1*z2 + (3*b3*z1*(1 + z1)*z2)/2 + (b1*b3*z2*(1 + z2))/2 + (b1*(a3 + b3)*z2*(1 + z2))/2 + b3*x1*z2*(1 + z2) + (b1*b3*x1*z2*(1 + z2))/2 + b3*y1*z2*(1 + z2) + (b1*b3*y1*z2*(1 + z2))/2 + (3*b3*z1*z2*(1 + z2))/2 + (b1*b3*z1*z2*(1 + z2))/2 + b2*(b1 + c1)*z3 + 2*(a2 + b2)*(b1 + c1)*z3 + b1*(a2 + b2)*(b1 + c1)*z3 + b2*(a2 + b2)*(b1 + c1)*z3 + b2*b3*(b1 + c1)*z3 + b1*(a2 + b2)*(b2 + c2)*z3 + (a1 + b1)*b2*(b3 + c3)*z3 + b1*(a1 + b1)*b2*(b3 + c3)*z3 + b1*(a2 + b2)*(b3 + c3)*z3 + (a1 + b1)*(a2 + b2)*(b3 + c3)*z3 + b1*b2*(a2 + b2)*(b3 + c3)*z3 + (a1 + b1)*b2*x1*z3 + b1*(a1 + b1)*b2*x1*z3 + b1*(a2 + b2)*x1*z3 + (a1 + b1)*(a2 + b2)*x1*z3 + b1*b2*(a2 + b2)*x1*z3 + 3*b2*(b1 + c1)*x1*z3 + (a2 + b2)*(b1 + c1)*x1*z3 + b2*b3*(b1 + c1)*x1*z3 + 3*b2*(b2 + c2)*x1*z3 + (a2 + b2)*(b2 + c2)*x1*z3 + b2*b3*(b2 + c2)*x1*z3 + 3*b2*(b3 + c3)*x1*z3 + (a2 + b2)*(b3 + c3)*x1*z3 + (3*b2*x1*(1 + x1)*z3)/2 + (a2 + b2)*x1*(1 + x1)*z3 + (b2*(a2 + b2)*x1*(1 + x1)*z3)/2 + (3*b2*b3*x1*(1 + x1)*z3)/2 + (a1 + b1)*b2*x2*z3 + b1*(a1 + b1)*b2*x2*z3 + b1*(a2 + b2)*x2*z3 + (a1 + b1)*(a2 + b2)*x2*z3 + b1*b2*(a2 + b2)*x2*z3 + 4*(b1 + c1)*x2*z3 + 4*b1*(b1 + c1)*x2*z3 + 4*(a1 + b1)*(b1 + c1)*x2*z3 + 6*b2*(b1 + c1)*x2*z3 + (a1 + b1)*b2*(b1 + c1)*x2*z3 + b2*(a2 + b2)*(b1 + c1)*x2*z3 + 2*b3*(b1 + c1)*x2*z3 + 2*b1*b3*(b1 + c1)*x2*z3 + (a1 + b1)*b3*(b1 + c1)*x2*z3 + b2*b3*(b1 + c1)*x2*z3 + 4*b1*(b2 + c2)*x2*z3 + 4*(a1 + b1)*(b2 + c2)*x2*z3 + (a1 + b1)*b2*(b2 + c2)*x2*z3 + 2*b1*b3*(b2 + c2)*x2*z3 + (a1 + b1)*b3*(b2 + c2)*x2*z3 + (a1 + b1)*b2*(b3 + c3)*x2*z3 + 2*b1*b3*(b3 + c3)*x2*z3 + (a1 + b1)*b3*(b3 + c3)*x2*z3 + 2*x1*x2*z3 + 2*b1*x1*x2*z3 + (a1 + b1)*x1*x2*z3 + 6*b2*x1*x2*z3 + b1*b2*x1*x2*z3 + (a2 + b2)*x1*x2*z3 + b2*(a2 + b2)*x1*x2*z3 + 3*b3*x1*x2*z3 + b1*b3*x1*x2*z3 + 2*b2*b3*x1*x2*z3 + (a1 + b1)*b2*x3*z3 + b1*(a1 + b1)*b2*x3*z3 + 2*b1*(a2 + b2)*x3*z3 + (a1 + b1)*(a2 + b2)*x3*z3 + 2*b1*b2*(a2 + b2)*x3*z3 + 6*b2*(b1 + c1)*x3*z3 + 2*(a2 + b2)*(b1 + c1)*x3*z3 + 6*b2*x1*x3*z3 + 3*(a2 + b2)*x1*x3*z3 + b2*b3*x1*x3*z3 + (a1 + b1)*b2*y1*z3 + b1*(a1 + b1)*b2*y1*z3 + 3*(a2 + b2)*y1*z3 + b1*(a2 + b2)*y1*z3 + (a1 + b1)*(a2 + b2)*y1*z3 + 3*b2*(a2 + b2)*y1*z3 + b1*b2*(a2 + b2)*y1*z3 + b2*(b1 + c1)*y1*z3 + 2*(a2 + b2)*(b1 + c1)*y1*z3 + b2*b3*(b1 + c1)*y1*z3 + b2*(b2 + c2)*y1*z3 + 2*(a2 + b2)*(b2 + c2)*y1*z3 + b2*b3*(b2 + c2)*y1*z3 + b2*(b3 + c3)*y1*z3 + (a2 + b2)*(b3 + c3)*y1*z3 + 4*b2*x1*y1*z3 + 2*(a2 + b2)*x1*y1*z3 + b2*(a2 + b2)*x1*y1*z3 + 3*b2*b3*x1*y1*z3 + x2*y1*z3 + 2*b1*x2*y1*z3 + (a1 + b1)*x2*y1*z3 + 8*b2*x2*y1*z3 + b1*b2*x2*y1*z3 + 3*(a2 + b2)*x2*y1*z3 + b2*(a2 + b2)*x2*y1*z3 + 3*b3*x2*y1*z3 + b1*b3*x2*y1*z3 + 2*b2*b3*x2*y1*z3 + 8*b2*x3*y1*z3 + 4*(a2 + b2)*x3*y1*z3 + b2*(a2 + b2)*x3*y1*z3 + b2*b3*x3*y1*z3 + (3*b2*y1*(1 + y1)*z3)/2 + (a2 + b2)*y1*(1 + y1)*z3 + (b2*(a2 + b2)*y1*(1 + y1)*z3)/2 + (3*b2*b3*y1*(1 + y1)*z3)/2 + (a1 + b1)*b2*y2*z3 + b1*(a1 + b1)*b2*y2*z3 + 2*b1*(a2 + b2)*y2*z3 + (a1 + b1)*(a2 + b2)*y2*z3 + b1*b2*(a2 + b2)*y2*z3 + 4*b1*(b1 + c1)*y2*z3 + 4*(a1 + b1)*(b1 + c1)*y2*z3 + 6*b2*(b1 + c1)*y2*z3 + (a1 + b1)*b2*(b1 + c1)*y2*z3 + b2*(a2 + b2)*(b1 + c1)*y2*z3 + 3*b3*(b1 + c1)*y2*z3 + 2*b1*b3*(b1 + c1)*y2*z3 + (a1 + b1)*b3*(b1 + c1)*y2*z3 + b2*b3*(b1 + c1)*y2*z3 + 4*b1*(b2 + c2)*y2*z3 + 4*(a1 + b1)*(b2 + c2)*y2*z3 + (a1 + b1)*b2*(b2 + c2)*y2*z3 + 2*b1*b3*(b2 + c2)*y2*z3 + (a1 + b1)*b3*(b2 + c2)*y2*z3 + (a1 + b1)*b2*(b3 + c3)*y2*z3 + 2*b1*b3*(b3 + c3)*y2*z3 + (a1 + b1)*b3*(b3 + c3)*y2*z3 + x1*y2*z3 + 2*b1*x1*y2*z3 + (a1 + b1)*x1*y2*z3 + 6*b2*x1*y2*z3 + b1*b2*x1*y2*z3 + (a2 + b2)*x1*y2*z3 + b2*(a2 + b2)*x1*y2*z3 + 3*b3*x1*y2*z3 + b1*b3*x1*y2*z3 + 2*b2*b3*x1*y2*z3 + 2*b1*y1*y2*z3 + (a1 + b1)*y1*y2*z3 + 6*b2*y1*y2*z3 + b1*b2*y1*y2*z3 + 2*(a2 + b2)*y1*y2*z3 + b2*(a2 + b2)*y1*y2*z3 + 3*b3*y1*y2*z3 + b1*b3*y1*y2*z3 + 2*b2*b3*y1*y2*z3 + (a1 + b1)*b2*y3*z3 + b1*(a1 + b1)*b2*y3*z3 + b1*(a2 + b2)*y3*z3 + (a1 + b1)*(a2 + b2)*y3*z3 + 2*b1*b2*(a2 + b2)*y3*z3 + 6*b2*(b1 + c1)*y3*z3 + 2*(a2 + b2)*(b1 + c1)*y3*z3 + 4*b2*x1*y3*z3 + 3*(a2 + b2)*x1*y3*z3 + b2*b3*x1*y3*z3 + 8*b2*y1*y3*z3 + 5*(a2 + b2)*y1*y3*z3 + b2*(a2 + b2)*y1*y3*z3 + b2*b3*y1*y3*z3 + (a1 + b1)*b2*z1*z3 + b1*(a1 + b1)*b2*z1*z3 + b1*(a2 + b2)*z1*z3 + (a1 + b1)*(a2 + b2)*z1*z3 + b1*b2*(a2 + b2)*z1*z3 + 5*b2*(b1 + c1)*z1*z3 + (a2 + b2)*(b1 + c1)*z1*z3 + 2*b2*b3*(b1 + c1)*z1*z3 + 5*b2*(b2 + c2)*z1*z3 + (a2 + b2)*(b2 + c2)*z1*z3 + 2*b2*b3*(b2 + c2)*z1*z3 + 3*b2*(b3 + c3)*z1*z3 + (a2 + b2)*(b3 + c3)*z1*z3 + b2*b3*(b3 + c3)*z1*z3 + 2*b2*x1*z1*z3 + b1*b2*x1*z1*z3 + 2*(a2 + b2)*x1*z1*z3 + b2*(a2 + b2)*x1*z1*z3 + 2*b2*b3*x1*z1*z3 + 2*x2*z1*z3 + b1*x2*z1*z3 + (a1 + b1)*x2*z1*z3 + 5*b2*x2*z1*z3 + b1*b2*x2*z1*z3 + (a2 + b2)*x2*z1*z3 + b2*(a2 + b2)*x2*z1*z3 + 2*b3*x2*z1*z3 + b1*b3*x2*z1*z3 + 2*b2*b3*x2*z1*z3 + 6*b2*x3*z1*z3 + 3*(a2 + b2)*x3*z1*z3 + b2*b3*x3*z1*z3 + 3*b2*y1*z1*z3 + b1*b2*y1*z1*z3 + 2*(a2 + b2)*y1*z1*z3 + b2*(a2 + b2)*y1*z1*z3 + 2*b2*b3*y1*z1*z3 + y2*z1*z3 + b1*y2*z1*z3 + (a1 + b1)*y2*z1*z3 + 5*b2*y2*z1*z3 + b1*b2*y2*z1*z3 + (a2 + b2)*y2*z1*z3 + b2*(a2 + b2)*y2*z1*z3 + 2*b3*y2*z1*z3 + b1*b3*y2*z1*z3 + 2*b2*b3*y2*z1*z3 + 4*b2*y3*z1*z3 + 3*(a2 + b2)*y3*z1*z3 + b2*b3*y3*z1*z3 + (3*b2*z1*(1 + z1)*z3)/2 + (a2 + b2)*z1*(1 + z1)*z3 + (b2*(a2 + b2)*z1*(1 + z1)*z3)/2 + (3*b2*b3*z1*(1 + z1)*z3)/2 + (a1 + b1)*b2*z2*z3 + b1*(a1 + b1)*b2*z2*z3 + b1*(a2 + b2)*z2*z3 + (a1 + b1)*(a2 + b2)*z2*z3 + b1*b2*(a2 + b2)*z2*z3 + (b1 + c1)*z2*z3 + b1*(b1 + c1)*z2*z3 + 5*(a1 + b1)*(b1 + c1)*z2*z3 + 5*b2*(b1 + c1)*z2*z3 + b1*b2*(b1 + c1)*z2*z3 + (a1 + b1)*b2*(b1 + c1)*z2*z3 + (a2 + b2)*(b1 + c1)*z2*z3 + b2*(a2 + b2)*(b1 + c1)*z2*z3 + b1*b3*(b1 + c1)*z2*z3 + (a1 + b1)*b3*(b1 + c1)*z2*z3 + b2*b3*(b1 + c1)*z2*z3 + b1*(b2 + c2)*z2*z3 + 5*(a1 + b1)*(b2 + c2)*z2*z3 + b1*b2*(b2 + c2)*z2*z3 + (a1 + b1)*b2*(b2 + c2)*z2*z3 + b1*b3*(b2 + c2)*z2*z3 + (a1 + b1)*b3*(b2 + c2)*z2*z3 + b1*(b3 + c3)*z2*z3 + (a1 + b1)*(b3 + c3)*z2*z3 + b1*b2*(b3 + c3)*z2*z3 + (a1 + b1)*b2*(b3 + c3)*z2*z3 + b1*b3*(b3 + c3)*z2*z3 + (a1 + b1)*b3*(b3 + c3)*z2*z3 + 2*b1*x1*z2*z3 + (a1 + b1)*x1*z2*z3 + 3*b2*x1*z2*z3 + b1*b2*x1*z2*z3 + 2*(a2 + b2)*x1*z2*z3 + b2*(a2 + b2)*x1*z2*z3 + b3*x1*z2*z3 + b1*b3*x1*z2*z3 + 2*b2*b3*x1*z2*z3 + 5*y1*z2*z3 + 2*b1*y1*z2*z3 + (a1 + b1)*y1*z2*z3 + 5*b2*y1*z2*z3 + b1*b2*y1*z2*z3 + 2*(a2 + b2)*y1*z2*z3 + b2*(a2 + b2)*y1*z2*z3 + b3*y1*z2*z3 + b1*b3*y1*z2*z3 + 2*b2*b3*y1*z2*z3 + b1*z1*z2*z3 + (a1 + b1)*z1*z2*z3 + 4*b2*z1*z2*z3 + b1*b2*z1*z2*z3 + 2*(a2 + b2)*z1*z2*z3 + b2*(a2 + b2)*z1*z2*z3 + 2*b3*z1*z2*z3 + b1*b3*z1*z2*z3 + 2*b2*b3*z1*z2*z3 + ((a1 + b1)*b2*z3*(1 + z3))/2 + (b1*(a1 + b1)*b2*z3*(1 + z3))/2 + b1*(a2 + b2)*z3*(1 + z3) + ((a1 + b1)*(a2 + b2)*z3*(1 + z3))/2 + (b1*b2*(a2 + b2)*z3*(1 + z3))/2 + 2*b2*x1*z3*(1 + z3) + (a2 + b2)*x1*z3*(1 + z3) + (b2*b3*x1*z3*(1 + z3))/2 + 2*b1*x2*z3*(1 + z3) + 2*(a1 + b1)*x2*z3*(1 + z3) + b2*y1*z3*(1 + z3) + (3*(a2 + b2)*y1*z3*(1 + z3))/2 + (b2*b3*y1*z3*(1 + z3))/2 + 2*b1*y2*z3*(1 + z3) + 2*(a1 + b1)*y2*z3*(1 + z3) + 2*b2*z1*z3*(1 + z3) + (a2 + b2)*z1*z3*(1 + z3) + (b2*b3*z1*z3*(1 + z3))/2 + 2*(a1 + b1)*z2*z3*(1 + z3) + b1*b2*(x3 + y3 + z3) + ((a1 + b1)*b2 + b1*(a1 + b1)*b2 + b1*(a2 + b2) + (a1 + b1)*(a2 + b2) + b1*b2*(a2 + b2) + (b1 + c1)*(3*b2 + c2))*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 88 ( I4_1/a)
#####################################################################
Aiin88:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Aqin88:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Bdeltain88:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b1*b2 + a2*b1*b2 + b2*c1 + b1*c2 + c1*c2;
end;
#####################################################################
Bxyzin88:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*a2*b1 + a1*b2 + b1*b2 + a2*b1*b2 + a1*a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*b2*c1 + a1*b1*b2*c1 + a1*c2 + a1*b1*c2 + a2*b1*c2 + a1*b2*c2 + c1*c2 + b1*b2*c1*c2 + a2*b1*x1 + a1*a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*b1*b2*x1 + a1*a2*b1*b2*x1 + a2*c1*x1 + a2*b1*c1*x1 + a1*a2*b1*c1*x1 + a2*b2*c1*x1 + a1*a2*b2*c1*x1 + b1*b2*c1*x1 + c2*x1 + b1*c2*x1 + b2*c2*x1 + b1*x2 + a1*b1*x2 + a1*a2*b2*x2 + b1*b2*x2 + a2*b1*b2*x2 + a1*a2*b1*b2*x2 + a2*c1*x2 + b1*c1*x2 + a2*b1*c1*x2 + a2*b2*c1*x2 + a1*a2*b2*c1*x2 + a2*b1*b2*c1*x2 + a1*a2*b1*b2*c1*x2 + b1*c2*x2 + x1*x2 + b1*x1*x2 + a1*b1*x1*x2 + a2*b1*x1*x2 + a1*b1*b2*x1*x2 + a2*b1*b2*x1*x2 + a2*b1*y1 + a2*c1*y1 + b1*b2*c1*y1 + c2*y1 + b1*c2*y1 + b2*c2*y1 + x2*y1 + b1*x2*y1 + b1*y2 + a1*b1*y2 + a2*b1*y2 + a1*a2*b1*y2 + a1*b2*y2 + a1*a2*b2*y2 + b1*b2*y2 + a1*b1*b2*y2 + a2*b1*b2*y2 + c1*y2 + a2*c1*y2 + b1*c1*y2 + a1*a2*b1*c1*y2 + a2*b1*b2*c1*y2 + a1*a2*b1*b2*c1*y2 + b1*c2*y2 + x1*y2 + b1*x1*y2 + a1*b1*x1*y2 + a2*b1*x1*y2 + a1*b1*b2*x1*y2 + a2*b1*b2*x1*y2 + a1*b1*x2*y2 + a2*b1*x2*y2 + a1*b1*b2*x2*y2 + a2*b1*b2*x2*y2 + y1*y2 + b1*y1*y2 + b1*b2*z1 + a2*b2*c1*z1 + a1*a2*b2*c1*z1 + a2*b1*b2*c1*z1 + a1*a2*b1*b2*c1*z1 + c2*z1 + b1*c2*z1 + b2*c2*z1 + a2*b1*x1*z1 + a1*b2*x1*z1 + a2*b2*x1*z1 + x2*z1 + a1*b1*x2*z1 + a1*a2*b1*x2*z1 + a2*b2*x2*z1 + a1*a2*b2*x2*z1 + a1*b1*b2*x2*z1 + a2*b1*b2*x2*z1 + y2*z1 + a2*b1*y2*z1 + a1*a2*b1*y2*z1 + a1*b2*y2*z1 + a1*a2*b2*y2*z1 + a1*b1*b2*y2*z1 + a2*b1*b2*y2*z1 + a1*z2 + a2*b1*z2 + a1*a2*b1*z2 + a1*b1*b2*z2 + a1*a2*b1*b2*z2 + c1*z2 + b1*c1*z2 + a2*b1*c1*z2 + a2*b2*c1*z2 + a1*a2*b2*c1*z2 + b1*b2*c1*z2 + a2*b1*b2*c1*z2 + a1*a2*b1*b2*c1*z2 + b1*c2*z2 + b1*x1*z2 + a1*b2*x1*z2 + a2*b2*x1*z2 + a1*b1*b2*x1*z2 + a2*b1*b2*x1*z2 + b1*x2*z2 + a1*b1*x2*z2 + a1*a2*b1*x2*z2 + a1*a2*b2*x2*z2 + a1*b1*b2*x2*z2 + a2*b1*b2*x2*z2 + b1*y1*z2 + b1*y2*z2 + a1*b1*y2*z2 + a1*a2*b1*y2*z2 + a1*b2*y2*z2 + a1*a2*b2*y2*z2 + z1*z2 + a1*b1*z1*z2 + a1*a2*b1*z1*z2 + a1*b2*z1*z2 + a1*a2*b2*z1*z2;
end;
#####################################################################
Cin88:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a2*b1*b2*b3 + a1*a2*b1*b2*b3 + a1*a2*a3*c1 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a2*b1*b3*c1 + a1*a2*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a2*a3*c2 + a1*a2*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a3*b1*b2*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a1*a2*a3*c1*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*b3*c1*c2 + a1*a2*b3*c1*c2 + a1*a3*b3*c1*c2 + a2*a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*b2*b3*c1*c2 + a2*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + b3*(a1*a2 + a1*b1*b2 + a2*b1*b2 + b2*c1 + b1*c2 + c1*c2) + a1*a2*b1*c3 + a1*a2*a3*b1*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*b2*b3*c3 + a1*b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a1*a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a1*a2*a3*c1*c3 + a2*b1*c1*c3 + a1*a2*b1*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a1*a2*b2*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*a3*c2*c3 + a1*b1*c2*c3 + a3*b1*c2*c3 + a1*a3*b1*c2*c3 + a1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a2*c1*c2*c3 + a2*a3*c1*c2*c3 + a2*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a3*b2*x1 + a1*a3*b1*b2*x1 + a2*a3*b1*b2*x1 + a1*a2*a3*b1*b2*x1 + a2*b1*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + b1*b2*b3*x1 + a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a1*a3*b2*c1*x1 + a2*a3*b2*c1*x1 + a1*a2*a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b1*b3*c1*x1 + b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a2*b1*b2*b3*c1*x1 + a3*b1*b2*b3*c1*x1 + a1*a2*a3*c2*x1 + a3*b1*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a1*a2*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a3*b3*c2*x1 + a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + a3*c1*c2*x1 + a1*a3*c1*c2*x1 + a1*b3*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*b2*b3*c1*c2*x1 + a2*c3*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a1*a2*b1*c3*x1 + a2*a3*b1*c3*x1 + a1*b2*c3*x1 + a2*b2*c3*x1 + b1*b2*c3*x1 + a1*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + a2*b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + b2*c1*c3*x1 + a1*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + a3*c2*c3*x1 + a1*a3*c2*c3*x1 + a2*a3*c2*c3*x1 + b1*c2*c3*x1 + b2*c2*c3*x1 + a3*b1*b2*c2*c3*x1 + b3*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a3*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a3*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + (a3*b2*x1*(1 + x1))/2 + (a3*b1*b2*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + (b2*b3*x1*(1 + x1))/2 + (a1*b2*b3*x1*(1 + x1))/2 + (a2*b2*b3*x1*(1 + x1))/2 + (a3*b2*b3*x1*(1 + x1))/2 + (b3*c2*x1*(1 + x1))/2 + (b1*b3*c2*x1*(1 + x1))/2 + (b2*c3*x1*(1 + x1))/2 + (b1*b2*c3*x1*(1 + x1))/2 + (b2*b3*c3*x1*(1 + x1))/2 + a3*b1*b2*x2 + a2*a3*b1*b2*x2 + a1*b3*x2 + a1*b1*b3*x2 + a3*b1*b3*x2 + a1*b2*b3*x2 + b1*b2*b3*x2 + a1*b1*b2*b3*x2 + a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a3*c1*x2 + a1*a3*c1*x2 + a2*a3*c1*x2 + a3*b1*c1*x2 + a1*a3*b1*c1*x2 + a2*a3*b2*c1*x2 + b3*c1*x2 + a1*b3*c1*x2 + a3*b3*c1*x2 + b1*b3*c1*x2 + a1*b1*b3*c1*x2 + b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a3*b1*c2*x2 + b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a1*a3*c1*c2*x2 + a3*b1*c1*c2*x2 + a1*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a1*c3*x2 + a1*a2*c3*x2 + b1*c3*x2 + a2*b1*c3*x2 + a1*a2*b1*c3*x2 + a1*b2*c3*x2 + a1*b1*b2*c3*x2 + b1*b3*c3*x2 + b1*b2*b3*c3*x2 + a2*c1*c3*x2 + a1*a2*c1*c3*x2 + a3*c1*c3*x2 + a1*a3*c1*c3*x2 + b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + b2*c1*c3*x2 + a1*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + b3*c1*c3*x2 + a1*b1*b3*c1*c3*x2 + a1*b2*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a3*x1*x2 + a1*a3*x1*x2 + a1*a2*a3*x1*x2 + a2*a3*b1*x1*x2 + a1*a3*b2*x1*x2 + a2*a3*b1*b2*x1*x2 + a1*b3*x1*x2 + a3*b3*x1*x2 + a2*b2*b3*x1*x2 + a3*b2*b3*x1*x2 + a3*c2*x1*x2 + a3*b1*c2*x1*x2 + b3*c2*x1*x2 + b1*b3*c2*x1*x2 + b2*b3*c2*x1*x2 + b1*b2*b3*c2*x1*x2 + a1*c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + b2*c3*x1*x2 + a1*b2*c3*x1*x2 + a2*b1*x3 + a2*a3*b1*x3 + a2*b1*b2*x3 + a2*a3*b1*b2*x3 + a2*c1*x3 + a2*a3*c1*x3 + b2*c1*x3 + a2*b2*c1*x3 + a3*b2*c1*x3 + a2*a3*b2*c1*x3 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*a3*b1*c2*x3 + a1*b2*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + a1*b3*c2*x3 + a1*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*a3*c1*c2*x3 + b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + b1*b2*c3*x3 + a3*b1*b2*c3*x3 + b1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + b2*c1*c3*x3 + a3*b2*c1*c3*x3 + b1*b2*c1*c3*x3 + a2*b1*b2*c1*c3*x3 + b2*b3*c1*c3*x3 + a1*a3*c2*c3*x3 + b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + b1*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a1*a2*x1*x3 + a1*a2*a3*x1*x3 + b2*x1*x3 + a1*b2*x1*x3 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + a3*b2*x1*x3 + a1*a3*b2*x1*x3 + b1*b2*x1*x3 + a3*b1*b2*x1*x3 + a2*b2*b3*x1*x3 + a1*a2*b2*b3*x1*x3 + a3*c2*x1*x3 + a3*b1*c2*x1*x3 + b3*c2*x1*x3 + b1*b3*c2*x1*x3 + a3*b2*c3*x1*x3 + b2*b3*c3*x1*x3 + a3*b2*y1 + a3*b1*b2*y1 + a1*a3*b1*b2*y1 + a1*a2*a3*b1*b2*y1 + a2*b1*b3*y1 + b2*b3*y1 + a3*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + b1*b2*b3*y1 + a2*a3*c1*y1 + a2*a3*b1*c1*y1 + a3*b2*c1*y1 + a1*a3*b2*c1*y1 + a1*a2*a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a2*b1*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a2*a3*c2*y1 + a1*a3*b1*c2*y1 + a2*a3*b1*c2*y1 + a1*a3*b2*c2*y1 + a2*a3*b2*c2*y1 + a1*a2*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + b3*c2*y1 + a1*b3*c2*y1 + a1*a2*b3*c2*y1 + a3*b3*c2*y1 + a2*a3*b3*c2*y1 + b1*b3*c2*y1 + a1*b1*b3*c2*y1 + a2*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a1*b2*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + a1*a3*c1*c2*y1 + a1*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a2*c3*y1 + a1*a2*c3*y1 + a2*a3*c3*y1 + a2*b1*c3*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a1*b2*c3*y1 + a2*b2*c3*y1 + b2*b3*c3*y1 + a1*b2*b3*c3*y1 + a3*b2*b3*c3*y1 + a2*b1*b2*b3*c3*y1 + a3*b1*b2*b3*c3*y1 + b2*c1*c3*y1 + a1*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*a3*c2*c3*y1 + a2*a3*c2*c3*y1 + b1*c2*c3*y1 + b2*c2*c3*y1 + a3*b1*b2*c2*c3*y1 + b3*c2*c3*y1 + a1*b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + a1*b1*b3*c2*c3*y1 + a2*b1*b3*c2*c3*y1 + a3*b1*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + a2*a3*x1*y1 + a2*b3*x1*y1 + a2*b2*b3*x1*y1 + a3*b2*b3*x1*y1 + b1*b2*b3*x1*y1 + b3*c2*x1*y1 + b1*b3*c2*x1*y1 + b1*b2*c3*x1*y1 + b2*b3*c3*x1*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a2*a3*b1*x2*y1 + a3*b2*x2*y1 + a1*a3*b2*x2*y1 + a2*a3*b1*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + a3*b3*x2*y1 + a2*b2*b3*x2*y1 + a3*b2*b3*x2*y1 + a3*c2*x2*y1 + a3*b1*c2*x2*y1 + b3*c2*x2*y1 + b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + c3*x2*y1 + a1*c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + a1*b2*c3*x2*y1 + a2*x3*y1 + a1*a2*x3*y1 + a2*a3*x3*y1 + a1*a2*a3*x3*y1 + a1*b2*x3*y1 + a1*a2*b2*x3*y1 + a1*a3*b2*x3*y1 + b1*b2*x3*y1 + a3*b1*b2*x3*y1 + a1*a2*b2*b3*x3*y1 + a3*c2*x3*y1 + a3*b1*c2*x3*y1 + b3*c2*x3*y1 + b1*b3*c2*x3*y1 + a3*b2*c3*x3*y1 + b2*b3*c3*x3*y1 + (a3*b2*y1*(1 + y1))/2 + (a3*b1*b2*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (a1*b2*b3*y1*(1 + y1))/2 + (a2*b2*b3*y1*(1 + y1))/2 + (a3*b2*b3*y1*(1 + y1))/2 + (b3*c2*y1*(1 + y1))/2 + (b1*b3*c2*y1*(1 + y1))/2 + (b2*c3*y1*(1 + y1))/2 + (b1*b2*c3*y1*(1 + y1))/2 + (b2*b3*c3*y1*(1 + y1))/2 + a1*b3*y2 + a1*b1*b3*y2 + a3*b1*b3*y2 + a1*b2*b3*y2 + a1*b1*b2*b3*y2 + a2*b1*b2*b3*y2 + a3*b1*b2*b3*y2 + a3*c1*y2 + a1*a3*c1*y2 + a2*a3*c1*y2 + a1*a3*b1*c1*y2 + a3*b2*c1*y2 + b3*c1*y2 + a1*b3*c1*y2 + a3*b3*c1*y2 + a1*b1*b3*c1*y2 + b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + a1*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a1*a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a1*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a1*c3*y2 + a1*a2*c3*y2 + a1*b1*c3*y2 + a1*a2*b1*c3*y2 + a1*b2*c3*y2 + a1*b1*b2*c3*y2 + b1*b3*c3*y2 + b1*b2*b3*c3*y2 + c1*c3*y2 + a1*c1*c3*y2 + a1*a2*c1*c3*y2 + a1*a3*c1*c3*y2 + b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + b2*c1*c3*y2 + a1*b2*c1*c3*y2 + b1*b2*c1*c3*y2 + b3*c1*c3*y2 + b1*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + b2*b3*c1*c3*y2 + a1*b2*b3*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a1*b3*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a3*x1*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a3*b1*x1*y2 + a2*a3*b1*x1*y2 + a3*b2*x1*y2 + a1*a3*b2*x1*y2 + a3*b1*b2*x1*y2 + a2*a3*b1*b2*x1*y2 + b3*x1*y2 + a1*b3*x1*y2 + a3*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + a2*b2*b3*x1*y2 + a3*b2*b3*x1*y2 + a3*c2*x1*y2 + a3*b1*c2*x1*y2 + b3*c2*x1*y2 + b1*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + b1*b2*b3*c2*x1*y2 + a1*c3*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + a1*b2*c3*x1*y2 + a1*a3*y1*y2 + a1*a2*a3*y1*y2 + a3*b1*y1*y2 + a2*a3*b1*y1*y2 + a1*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + a2*a3*b1*b2*y1*y2 + a1*b3*y1*y2 + a3*b3*y1*y2 + a1*b2*b3*y1*y2 + a2*b2*b3*y1*y2 + a3*b2*b3*y1*y2 + a3*c2*y1*y2 + a3*b1*c2*y1*y2 + b3*c2*y1*y2 + b1*b3*c2*y1*y2 + b2*b3*c2*y1*y2 + b1*b2*b3*c2*y1*y2 + c3*y1*y2 + a1*c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + b2*c3*y1*y2 + a1*b2*c3*y1*y2 + a1*c2*y3 + a1*a2*c2*y3 + a1*a3*c2*y3 + a1*b1*c2*y3 + a1*a3*b1*c2*y3 + a1*b2*c2*y3 + a1*a2*b2*c2*y3 + a1*a3*b2*c2*y3 + a1*b3*c2*y3 + a1*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*c1*c2*y3 + a1*a3*c1*c2*y3 + b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + b1*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a1*a2*c3*y3 + a1*a2*b2*c3*y3 + b1*b2*c3*y3 + a3*b1*b2*c3*y3 + b1*b2*b3*c3*y3 + a2*b1*c1*c3*y3 + b2*c1*c3*y3 + a3*b2*c1*c3*y3 + a2*b1*b2*c1*c3*y3 + b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*a3*c2*c3*y3 + b1*c2*c3*y3 + a3*b1*c2*c3*y3 + b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*b3*c2*c3*y3 + b1*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a2*a3*x1*y3 + a1*a2*a3*x1*y3 + b2*x1*y3 + a1*b2*x1*y3 + a2*b2*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + b2*b3*x1*y3 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a1*a2*b2*b3*x1*y3 + c2*x1*y3 + a3*c2*x1*y3 + b1*c2*x1*y3 + a3*b1*c2*x1*y3 + b3*c2*x1*y3 + b1*b3*c2*x1*y3 + b2*c3*x1*y3 + a3*b2*c3*x1*y3 + b2*b3*c3*x1*y3 + a1*a2*a3*y1*y3 + a1*b2*y1*y3 + a1*a2*b2*y1*y3 + a1*a3*b2*y1*y3 + a1*b2*b3*y1*y3 + a1*a2*b2*b3*y1*y3 + c2*y1*y3 + a3*c2*y1*y3 + b1*c2*y1*y3 + a3*b1*c2*y1*y3 + b3*c2*y1*y3 + b1*b3*c2*y1*y3 + b2*c3*y1*y3 + a3*b2*c3*y1*y3 + b2*b3*c3*y1*y3 + a1*a3*b1*b2*z1 + a2*a3*b1*b2*z1 + a1*a2*a3*b1*b2*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a1*a3*b2*b3*z1 + a2*a3*b2*b3*z1 + a2*b1*b2*b3*z1 + a2*a3*b1*c1*z1 + a1*a3*b2*c1*z1 + a1*a2*a3*b2*c1*z1 + a2*a3*b1*b2*c1*z1 + a2*b3*c1*z1 + a2*b1*b3*c1*z1 + a1*b2*b3*c1*z1 + a2*b2*b3*c1*z1 + a3*b2*b3*c1*z1 + a1*b1*b2*b3*c1*z1 + a2*b1*b2*b3*c1*z1 + a3*b1*b2*b3*c1*z1 + a1*a2*a3*c2*z1 + a3*b1*c2*z1 + a1*a3*b1*c2*z1 + a3*b2*c2*z1 + a1*a3*b2*c2*z1 + a2*a3*b2*c2*z1 + a1*a2*a3*b2*c2*z1 + a2*a3*b1*b2*c2*z1 + a2*b3*c2*z1 + a1*a2*b3*c2*z1 + a2*a3*b3*c2*z1 + b1*b3*c2*z1 + a3*b1*b3*c2*z1 + b2*b3*c2*z1 + a2*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a1*a3*c1*c2*z1 + a3*b1*c1*c2*z1 + b1*b3*c1*c2*z1 + a1*b1*b3*c1*c2*z1 + a1*b2*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a1*a2*b1*c3*z1 + a2*a3*b1*c3*z1 + a1*b2*c3*z1 + a2*b2*c3*z1 + a1*b1*b2*c3*z1 + a1*b2*b3*c3*z1 + a2*b2*b3*c3*z1 + a2*b1*b2*b3*c3*z1 + a3*b1*b2*b3*c3*z1 + a1*b1*b2*c1*c3*z1 + b2*b3*c1*c3*z1 + b1*b2*b3*c1*c3*z1 + c2*c3*z1 + a1*a3*c2*c3*z1 + a2*a3*c2*c3*z1 + b1*c2*c3*z1 + a3*b1*c2*c3*z1 + b2*c2*c3*z1 + a3*b2*c2*c3*z1 + a3*b1*b2*c2*c3*z1 + a1*b1*b3*c2*c3*z1 + a2*b1*b3*c2*c3*z1 + a3*b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + a1*b2*b3*c2*c3*z1 + a2*b2*b3*c2*c3*z1 + a2*a3*b1*x1*z1 + a1*a3*b2*x1*z1 + a2*a3*b2*x1*z1 + a3*b1*b2*x1*z1 + a2*b3*x1*z1 + a1*b2*b3*x1*z1 + a2*b2*b3*x1*z1 + a3*b2*b3*x1*z1 + b1*b2*b3*x1*z1 + a1*b1*b2*b3*x1*z1 + a3*c2*x1*z1 + b2*b3*c2*x1*z1 + b1*b2*c3*x1*z1 + b2*b3*c3*x1*z1 + a1*a3*x2*z1 + a1*a2*a3*x2*z1 + a3*b1*x2*z1 + a3*b2*x2*z1 + a1*a3*b2*x2*z1 + a2*a3*b2*x2*z1 + a3*b1*b2*x2*z1 + a2*a3*b1*b2*x2*z1 + b3*x2*z1 + a1*b3*x2*z1 + a3*b3*x2*z1 + b1*b3*x2*z1 + a2*b2*b3*x2*z1 + a3*b2*b3*x2*z1 + a3*b1*c2*x2*z1 + b1*b3*c2*x2*z1 + b1*b2*b3*c2*x2*z1 + c3*x2*z1 + a1*c3*x2*z1 + a2*c3*x2*z1 + a3*c3*x2*z1 + b1*c3*x2*z1 + a1*b2*c3*x2*z1 + b1*b2*c3*x2*z1 + a2*x3*z1 + a1*a2*x3*z1 + a2*a3*x3*z1 + a1*a2*a3*x3*z1 + a2*b1*x3*z1 + a2*a3*b1*x3*z1 + b2*x3*z1 + a1*b2*x3*z1 + a1*a2*b2*x3*z1 + a3*b2*x3*z1 + a1*a3*b2*x3*z1 + a2*b1*b2*x3*z1 + a1*a2*b2*b3*x3*z1 + a2*b1*b2*b3*x3*z1 + a3*b1*c2*x3*z1 + b1*b3*c2*x3*z1 + a3*b2*c3*x3*z1 + b2*b3*c3*x3*z1 + a2*a3*y1*z1 + a2*a3*b1*y1*z1 + a1*a3*b2*y1*z1 + a2*a3*b2*y1*z1 + a2*b3*y1*z1 + b2*b3*y1*z1 + a2*b2*b3*y1*z1 + a3*b2*b3*y1*z1 + b1*b2*b3*y1*z1 + a1*b1*b2*b3*y1*z1 + a3*c2*y1*z1 + b2*b3*c2*y1*z1 + b2*c3*y1*z1 + b1*b2*c3*y1*z1 + b2*b3*c3*y1*z1 + a3*y2*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b2*y2*z1 + a1*a3*b2*y2*z1 + a2*a3*b2*y2*z1 + a2*a3*b1*b2*y2*z1 + a1*b3*y2*z1 + a3*b3*y2*z1 + b1*b3*y2*z1 + a1*b2*b3*y2*z1 + a2*b2*b3*y2*z1 + a3*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + a3*b1*c2*y2*z1 + b1*b3*c2*y2*z1 + b1*b2*b3*c2*y2*z1 + c3*y2*z1 + a1*c3*y2*z1 + a2*c3*y2*z1 + a3*c3*y2*z1 + b1*c3*y2*z1 + b2*c3*y2*z1 + a1*b2*c3*y2*z1 + b1*b2*c3*y2*z1 + a1*a2*a3*y3*z1 + a2*a3*b1*y3*z1 + a1*b2*y3*z1 + a1*a2*b2*y3*z1 + a1*a3*b2*y3*z1 + b1*b2*y3*z1 + a2*b1*b2*y3*z1 + a3*b1*b2*y3*z1 + a1*b2*b3*y3*z1 + a1*a2*b2*b3*y3*z1 + b1*b2*b3*y3*z1 + a2*b1*b2*b3*y3*z1 + b1*c2*y3*z1 + a3*b1*c2*y3*z1 + b1*b3*c2*y3*z1 + b2*c3*y3*z1 + a3*b2*c3*y3*z1 + b2*b3*c3*y3*z1 + (a3*b1*b2*z1*(1 + z1))/2 + (a2*b3*z1*(1 + z1))/2 + (a1*b2*b3*z1*(1 + z1))/2 + (a2*b2*b3*z1*(1 + z1))/2 + (a3*b2*b3*z1*(1 + z1))/2 + (b1*b2*b3*z1*(1 + z1))/2 + (b1*b3*c2*z1*(1 + z1))/2 + (b1*b2*c3*z1*(1 + z1))/2 + (b2*b3*c3*z1*(1 + z1))/2 + a1*b1*b2*b3*z2 + a1*a3*b1*c1*z2 + a1*b1*b3*c1*z2 + a1*b1*b3*c2*z2 + a1*b1*b2*b3*c2*z2 + a1*a3*c1*c2*z2 + a1*b2*b3*c1*c2*z2 + a1*a2*b1*c3*z2 + a1*a2*c1*c3*z2 + a1*a3*c1*c3*z2 + a1*b1*b3*c1*c3*z2 + a1*b2*b3*c1*c3*z2 + a1*b1*b3*c2*c3*z2 + a1*a2*a3*x1*z2 + a2*a3*b1*x1*z2 + a2*a3*b2*x1*z2 + a2*a3*b1*b2*x1*z2 + a2*b3*x1*z2 + a1*b2*b3*x1*z2 + a2*b2*b3*x1*z2 + a3*b2*b3*x1*z2 + b1*b2*b3*x1*z2 + a3*c2*x1*z2 + a3*b1*c2*x1*z2 + b2*b3*c2*x1*z2 + b1*b2*b3*c2*x1*z2 + a1*b2*c3*x1*z2 + b1*b2*c3*x1*z2 + b2*b3*c3*x1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a2*a3*b1*y1*z2 + a2*a3*b2*y1*z2 + a2*a3*b1*b2*y1*z2 + a2*b3*y1*z2 + b2*b3*y1*z2 + a1*b2*b3*y1*z2 + a2*b2*b3*y1*z2 + a3*b2*b3*y1*z2 + b1*b2*b3*y1*z2 + a3*c2*y1*z2 + a3*b1*c2*y1*z2 + b2*b3*c2*y1*z2 + b1*b2*b3*c2*y1*z2 + b2*c3*y1*z2 + a1*b2*c3*y1*z2 + b1*b2*c3*y1*z2 + b2*b3*c3*y1*z2 + a1*a2*a3*z1*z2 + a2*a3*b1*b2*z1*z2 + a2*b3*z1*z2 + a1*b2*b3*z1*z2 + a2*b2*b3*z1*z2 + a3*b2*b3*z1*z2 + a3*b1*c2*z1*z2 + b1*b2*b3*c2*z1*z2 + a1*b2*c3*z1*z2 + b2*b3*c3*z1*z2 + a1*a3*b1*c2*z3 + a1*a2*b2*c2*z3 + a1*a3*b2*c2*z3 + a1*a3*c1*c2*z3 + a2*b1*b2*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a1*a2*b2*c3*z3 + a2*b1*b2*c1*c3*z3 + a1*a3*c2*c3*z3 + a3*b1*b2*c2*c3*z3 + a2*a3*x1*z3 + a1*a2*a3*x1*z3 + a2*b2*b3*x1*z3 + a1*a2*b2*b3*x1*z3 + a3*c2*x1*z3 + a3*b1*c2*x1*z3 + a3*b2*c3*x1*z3 + a1*a2*a3*y1*z3 + a1*a2*b2*b3*y1*z3 + a3*c2*y1*z3 + a3*b1*c2*y1*z3 + a3*b2*c3*y1*z3 + a1*a2*a3*z1*z3 + a2*a3*b1*z1*z3 + a1*a2*b2*b3*z1*z3 + a2*b1*b2*b3*z1*z3 + a3*b1*c2*z1*z3 + a3*b2*c3*z1*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 89 ( P422)
#####################################################################
Acpin89:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin89:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin89:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin89:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain89:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyin89:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 90 ( P42_12)
#####################################################################
Acpin90:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin90:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Azin90:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain90:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bphiin90:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*b2 + a2*b1*b2 + b1*c2 + b1*b2*c2 + a2*x1 + b2*x1 + b2*c1*x1 + c2*x1 + a2*y1 + b2*c1*y1 + c2*y1;
end;
#####################################################################
CGAPin90:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a1*a2*a3*b2 + a3*b1*b2 + a1*a3*b1*b2 + a1*a2*a3*b1*b2 + a1*a2*b3 + a2*b1*b3 + a1*a2*b1*b3 + a2*a3*b1*b3 + a1*a2*b2*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + a2*b1*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a2*a3*b1*c1 + a2*a3*b2*c1 + a1*a2*a3*b2*c1 + a1*a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a2*a3*b3*c1 + a2*b1*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a3*b2*b3*c1 + a1*a3*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a3*c2 + a3*b1*c2 + a2*a3*b1*c2 + a1*a3*b1*b2*c2 + a1*b3*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*a3*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a3*b1*c1*c2 + a1*a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a2*a3*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a3*b3*c1*c2 + b1*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*a2*a3*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a2*b1*c3 + a2*a3*b1*c3 + a1*b2*c3 + b1*b2*c3 + a1*a2*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*b1*b3*c3 + a1*a2*b2*b3*c3 + a1*a3*b2*b3*c3 + a1*b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*b2*c1*c3 + a1*a3*b2*c1*c3 + a2*a3*b2*c1*c3 + a1*a2*a3*b2*c1*c3 + a1*b1*b2*c1*c3 + a2*a3*b1*b2*c1*c3 + a2*b3*c1*c3 + a2*b1*b3*c1*c3 + b2*b3*c1*c3 + a1*b2*b3*c1*c3 + a2*b2*b3*c1*c3 + a3*b2*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a2*a3*b2*b3*c1*c3 + a1*a2*a3*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a3*b1*c2*c3 + a1*b2*c2*c3 + b1*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a1*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + b1*b2*b3*c2*c3 + b2*c1*c2*c3 + b3*c1*c2*c3 + a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a2*b1*b3*x1 + a1*b2*b3*x1 + a3*b2*c1*x1 + a2*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*a3*b2*c2*x1 + a2*a3*b2*c2*x1 + a1*a3*b1*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a3*b3*c2*x1 + a1*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a3*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*b2*c1*c2*x1 + a2*a3*b2*c1*c2*x1 + b3*c1*c2*x1 + a1*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a2*a3*b2*b3*c1*c2*x1 + a2*c3*x1 + b2*c3*x1 + a1*b2*c3*x1 + a2*b2*c3*x1 + a1*a2*b2*c3*x1 + a1*a3*b2*c3*x1 + a2*a3*b2*c3*x1 + b1*b2*c3*x1 + a1*b1*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a1*a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + b2*b3*c3*x1 + a1*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + a1*a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a2*c1*c3*x1 + b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + c2*c3*x1 + a1*c2*c3*x1 + a2*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + b1*b2*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + b1*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a1*a3*b1*b3*x2 + a1*b2*b3*x2 + a3*b2*c1*x2 + a1*a3*b2*c1*x2 + a1*a2*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + a1*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*a3*c2*x2 + a1*a3*b2*c2*x2 + a3*b1*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + a1*a3*b3*c2*x2 + b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a1*a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a1*a3*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a1*a2*b3*c1*c2*x2 + a1*a3*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a1*c3*x2 + a1*a2*c3*x2 + a1*a3*c3*x2 + a1*b1*c3*x2 + a1*b2*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + b1*b2*c3*x2 + a1*b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*a2*b1*b2*c3*x2 + a3*b1*b2*c3*x2 + a1*a3*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + a2*b1*b3*c3*x2 + a1*a2*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + a1*b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + a1*b2*c1*c3*x2 + a1*a2*b2*c1*c3*x2 + a1*a3*b2*c1*c3*x2 + a2*b3*c1*c3*x2 + a1*a2*b3*c1*c3*x2 + a3*b3*c1*c3*x2 + a1*a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + a1*c2*c3*x2 + b1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a1*b2*b3*c2*c3*x2 + b1*b2*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + a1*b2*b3*c1*c2*c3*x2 + b3*x1*x2 + a3*c2*x1*x2 + b3*c2*x1*x2 + c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + b2*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + b3*c2*c3*x1*x2 + c1*c2*c3*x1*x2 + a1*a2*x3 + a2*b1*x3 + a1*a2*b1*x3 + a1*a3*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a1*a2*b2*c1*x3 + a3*b2*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b3*c1*x3 + a2*a3*b3*c1*x3 + a2*b1*b3*c1*x3 + a3*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a1*b1*c2*x3 + a1*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*b1*b3*c2*x3 + a3*b1*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + b2*c1*c2*x3 + a1*b2*c1*c2*x3 + a1*a2*b2*c1*c2*x3 + a1*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b3*c1*c2*x3 + a1*a2*b3*c1*c2*x3 + a1*a3*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a2*b1*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + a1*b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a1*a2*b1*b2*c3*x3 + a1*a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a2*b1*b3*c3*x3 + a1*a2*b1*b3*c3*x3 + a2*a3*b1*b3*c3*x3 + a1*b2*b3*c3*x3 + a1*a3*b2*b3*c3*x3 + b1*b2*b3*c3*x3 + b2*c1*c3*x3 + a2*b2*c1*c3*x3 + a1*a2*b2*c1*c3*x3 + a1*a3*b2*c1*c3*x3 + a2*b3*c1*c3*x3 + a1*a2*b3*c1*c3*x3 + a2*a3*b3*c1*c3*x3 + b2*b3*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a3*b1*b2*b3*c1*c3*x3 + b1*c2*c3*x3 + a1*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a2*b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + a1*a3*b3*c2*c3*x3 + a1*b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + b1*c1*c2*c3*x3 + b2*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + a1*a2*b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + a1*a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a2*b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + a1*a2*b3*c1*c2*c3*x3 + a3*b3*c1*c2*c3*x3 + a1*a3*b3*c1*c2*c3*x3 + a2*b1*b3*c1*c2*c3*x3 + a3*b1*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + b2*x1*x3 + a2*c1*x1*x3 + a3*c2*x1*x3 + a2*b2*c2*x1*x3 + a3*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a3*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + c1*c2*x1*x3 + b2*c1*c2*x1*x3 + a2*b2*c1*c2*x1*x3 + a3*b2*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + a2*b3*c1*c2*x1*x3 + a3*b3*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + b2*c1*c3*x1*x3 + b2*c2*c3*x1*x3 + a2*b2*c2*c3*x1*x3 + a3*b2*c2*c3*x1*x3 + a2*b3*c2*c3*x1*x3 + a3*b3*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a2*b2*c1*c2*c3*x1*x3 + a3*b2*c1*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + a2*b3*c1*c2*c3*x1*x3 + a3*b3*c1*c2*c3*x1*x3 + b2*b3*c1*c2*c3*x1*x3 + a3*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a3*b2*b3*y1 + a3*b2*c1*y1 + b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a1*a3*b2*c2*y1 + a1*a3*b1*b2*c2*y1 + a1*b3*c2*y1 + a1*a2*b3*c2*y1 + a1*a3*b3*c2*y1 + a1*b1*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a3*b2*c1*c2*y1 + a2*a3*b2*c1*c2*y1 + b3*c1*c2*y1 + a1*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a2*a3*b2*b3*c1*c2*y1 + b2*c3*y1 + a2*b2*c3*y1 + a1*a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + b2*b3*c3*y1 + a1*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + a2*c1*c3*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + c2*c3*y1 + a1*c2*c3*y1 + a2*c2*c3*y1 + a1*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*b1*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + b3*x2*y1 + a3*c2*x2*y1 + b3*c2*x2*y1 + c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a3*b3*c3*x2*y1 + b2*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + c2*c3*x2*y1 + b3*c2*c3*x2*y1 + c1*c2*c3*x2*y1 + a2*x3*y1 + b2*x3*y1 + a2*c1*x3*y1 + c2*x3*y1 + a3*c2*x3*y1 + b2*c2*x3*y1 + c1*c2*x3*y1 + b2*c1*c2*x3*y1 + a2*b2*c1*c2*x3*y1 + a3*b2*c1*c2*x3*y1 + b3*c1*c2*x3*y1 + a2*b3*c1*c2*x3*y1 + a3*b3*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + b2*c3*x3*y1 + b2*c1*c3*x3*y1 + b2*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + a2*b2*c1*c2*c3*x3*y1 + a3*b2*c1*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + a2*b3*c1*c2*c3*x3*y1 + a3*b3*c1*c2*c3*x3*y1 + b2*b3*c1*c2*c3*x3*y1 + a1*a2*b3*y2 + a3*b1*b2*c1*y2 + a2*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*a3*c2*y2 + a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*a3*b3*c2*y2 + b1*b3*c2*y2 + a1*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a3*b1*b2*c1*c2*y2 + a1*b3*c1*c2*y2 + a2*b3*c1*c2*y2 + a3*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a1*a2*c3*y2 + a1*a3*c3*y2 + b1*c3*y2 + a1*b1*c3*y2 + a2*b1*c3*y2 + a3*b1*c3*y2 + a1*a2*b2*c3*y2 + a1*a3*b2*c3*y2 + a1*b1*b2*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + b2*c1*c3*y2 + a1*b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a3*b2*c1*c3*y2 + b1*b2*c1*c3*y2 + a2*b1*b2*c1*c3*y2 + a3*b1*b2*c1*c3*y2 + b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a3*b1*b3*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*c2*c3*y2 + a1*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*b3*c2*c3*y2 + b1*b3*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + b1*c1*c2*c3*y2 + b2*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*c2*x1*y2 + a3*b2*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + a2*b3*c3*x1*y2 + c1*c3*x1*y2 + b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b2*b3*c1*c2*c3*x1*y2 + a3*c2*y1*y2 + b3*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + a2*b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b3*c2*c3*y1*y2 + c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + b2*b3*c1*c2*c3*y1*y2 + a1*a2*y3 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*a2*b3*y3 + a2*b1*c1*y3 + a2*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b3*c1*y3 + a3*b2*b3*c1*y3 + a1*a2*c2*y3 + a1*a3*c2*y3 + a1*b1*c2*y3 + a3*b1*c2*y3 + a1*b2*c2*y3 + a1*b1*b2*c2*y3 + a2*b1*b2*c2*y3 + b1*b3*c2*y3 + a2*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + a1*b2*c1*c2*y3 + a2*b2*c1*c2*y3 + a3*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + a2*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a2*b1*b3*c1*c2*y3 + a3*b1*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a1*a2*c3*y3 + a2*b1*c3*y3 + a1*b2*c3*y3 + a1*a2*b2*c3*y3 + a1*a3*b2*c3*y3 + b1*b2*c3*y3 + a1*b1*b2*c3*y3 + a1*a2*b1*b2*c3*y3 + a3*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*a2*b1*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + b2*c1*c3*y3 + a3*b2*c1*c3*y3 + b1*b2*c1*c3*y3 + a2*b1*b2*c1*c3*y3 + a3*b1*b2*c1*c3*y3 + a2*b1*b3*c1*c3*y3 + b2*b3*c1*c3*y3 + a3*b2*b3*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a1*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*b3*c2*c3*y3 + a1*b1*b3*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + b1*c1*c2*c3*y3 + b2*c1*c2*c3*y3 + a2*b2*c1*c2*c3*y3 + a1*a2*b2*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + a1*a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a2*b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + a2*b3*c1*c2*c3*y3 + a1*a2*b3*c1*c2*c3*y3 + a3*b3*c1*c2*c3*y3 + a1*a3*b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + a2*b1*b3*c1*c2*c3*y3 + a3*b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*b2*b3*c1*c2*c3*y3 + a2*x1*y3 + a2*c1*x1*y3 + c2*x1*y3 + a3*c2*x1*y3 + b2*c2*x1*y3 + c1*c2*x1*y3 + b2*c1*c2*x1*y3 + a2*c3*x1*y3 + b2*c3*x1*y3 + a2*b2*c3*x1*y3 + a3*b2*c3*x1*y3 + a2*b3*c3*x1*y3 + b2*c1*c3*x1*y3 + a2*b2*c1*c3*x1*y3 + a3*b2*c1*c3*x1*y3 + a2*b3*c1*c3*x1*y3 + b2*c2*c3*x1*y3 + a2*b2*c2*c3*x1*y3 + a3*b2*c2*c3*x1*y3 + b3*c2*c3*x1*y3 + a2*b3*c2*c3*x1*y3 + a2*b2*c1*c2*c3*x1*y3 + a3*b2*c1*c2*c3*x1*y3 + a2*b3*c1*c2*c3*x1*y3 + a3*b3*c1*c2*c3*x1*y3 + a2*c1*y1*y3 + a3*c2*y1*y3 + c1*c2*y1*y3 + b2*c1*c2*y1*y3 + a2*c3*y1*y3 + b2*c1*c3*y1*y3 + a2*b2*c1*c3*y1*y3 + a3*b2*c1*c3*y1*y3 + a2*b3*c1*c3*y1*y3 + b2*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + a3*b3*c2*c3*y1*y3 + a2*b2*c1*c2*c3*y1*y3 + a3*b2*c1*c2*c3*y1*y3 + a2*b3*c1*c2*c3*y1*y3 + a3*b3*c1*c2*c3*y1*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 91 ( P4_122)
#####################################################################
Acpin91:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin91:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin91:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bxyin91:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 92 ( P4_12_12)
#####################################################################
Acpin92:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin92:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bphiin92:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + b2*c1*x1 + b1*x2 + b1*c1*x2 + b2*c1*x2 + a2*y1 + b2*c1*y1 + b1*c1*y2 + b2*c1*y2;
end;
#####################################################################
CGAPin92:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b1*b2 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + a1*a2*a3*b2*b3 + a2*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*b1*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a1*a2*b1*b3*c1 + a1*b2*b3*c1 + a1*a2*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a1*a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a3*b1*c2 + a1*a2*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*a3*b3*c2 + a2*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*b2*c3 + a1*a3*b2*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*a3*b3*c3 + a1*b2*b3*c3 + a1*a3*b2*b3*c3 + a2*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*a2*a3*b1*b2*b3*c3 + a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a1*b2*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a2*b1*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a1*a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*a2*b1*b2*c2*c3 + a1*a2*b3*c2*c3 + a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + 2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a2*a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + b2*b3*x1 + a1*b1*b2*b3*x1 + a2*b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a2*a3*b1*c1*x1 + a1*a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a2*a3*b3*c1*x1 + a1*a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a2*b1*b2*b3*c1*x1 + a3*b1*b2*b3*c1*x1 + a3*b1*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a1*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a2*b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*b1*c1*c2*x1 + a1*a3*b1*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a1*a3*b1*b2*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + a2*b1*b3*c1*c2*x1 + a1*a2*b1*b3*c1*c2*x1 + a3*b1*b3*c1*c2*x1 + a1*a3*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*b2*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a2*b1*c3*x1 + b2*c3*x1 + a1*b2*c3*x1 + a2*b2*c3*x1 + a1*a2*b2*c3*x1 + a3*b2*c3*x1 + a2*a3*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a2*a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a2*b1*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a1*b1*b2*b3*c3*x1 + a2*b1*b2*b3*c3*x1 + a2*b1*c1*c3*x1 + b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a1*a3*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a3*b1*b2*c1*c3*x1 + a1*a3*b1*b2*c1*c3*x1 + a2*a3*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a2*b2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a1*a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + a1*b1*b2*b3*c1*c3*x1 + a2*b1*b2*b3*c1*c3*x1 + a3*b1*b2*b3*c1*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a1*a2*b1*b2*c2*c3*x1 + a2*a3*b1*b2*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b1*b3*c2*c3*x1 + a3*b1*b3*c2*c3*x1 + a1*a3*b1*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + a1*a3*b2*b3*c2*c3*x1 + a2*a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + a2*b1*b2*b3*c2*c3*x1 + a3*b1*b2*b3*c2*c3*x1 + b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + a3*b1*b2*c1*c2*c3*x1 + a3*b2*b3*c1*c2*c3*x1 + a2*a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*a3*b2*b3*x2 + a2*a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*a3*b1*b2*c1*x2 + a2*b1*b3*c1*x2 + a1*a2*b1*b3*c1*x2 + a2*a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + a2*a3*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*a2*b3*c2*x2 + b1*b3*c2*x2 + a1*b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a2*a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a2*a3*b1*b2*c1*c2*x2 + b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a1*a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + a2*a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a3*b2*b3*c1*c2*x2 + a2*b1*c3*x2 + a1*b2*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + b1*b2*c3*x2 + a1*b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a3*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + b1*b3*c3*x2 + a1*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*a3*b1*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + a2*b1*c1*c3*x2 + a3*b2*c1*c3*x2 + b1*b3*c1*c3*x2 + a3*b1*b3*c1*c3*x2 + a3*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*a2*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + a1*a3*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a1*a3*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a1*a2*b1*b2*c2*c3*x2 + a2*a3*b1*b2*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a1*a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*a3*b1*b3*c2*c3*x2 + a1*a3*b2*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + a3*b1*b2*b3*c2*c3*x2 + b1*c1*c2*c3*x2 + a3*b1*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a3*b1*b2*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + a3*b1*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a3*b1*b2*b3*c1*c2*c3*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a1*b3*c1*c2*x1*x2 + a2*b3*c1*c2*x1*x2 + a3*b3*c1*c2*x1*x2 + b2*b3*c1*c2*x1*x2 + b3*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + a1*b1*c1*c2*c3*x1*x2 + a2*b1*c1*c2*c3*x1*x2 + a3*b1*c1*c2*c3*x1*x2 + b2*c1*c2*c3*x1*x2 + a1*b2*c1*c2*c3*x1*x2 + a2*b2*c1*c2*c3*x1*x2 + a3*b2*c1*c2*c3*x1*x2 + b1*b2*c1*c2*c3*x1*x2 + a1*b3*c1*c2*c3*x1*x2 + a2*b3*c1*c2*c3*x1*x2 + a3*b3*c1*c2*c3*x1*x2 + b2*b3*c1*c2*c3*x1*x2 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*a3*b2*x3 + b1*b2*x3 + a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*b1*b3*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*a3*b2*b3*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*a3*b2*c1*x3 + a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a1*a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a1*a2*b1*b3*c1*x3 + a2*a3*b1*b3*c1*x3 + b2*b3*c1*x3 + a3*b2*b3*c1*x3 + a1*a3*b2*b3*c1*x3 + a2*a3*b2*b3*c1*x3 + a1*a2*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*a3*b1*b2*c2*x3 + a2*b1*b3*c2*x3 + a1*a2*b1*b3*c2*x3 + a2*a3*b1*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*a3*b2*c1*c2*x3 + a2*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*a3*b1*b2*c1*c2*x3 + a2*a3*b1*b2*c1*c2*x3 + b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + a1*a3*b2*b3*c1*c2*x3 + a2*a3*b2*b3*c1*c2*x3 + a2*b1*b2*b3*c1*c2*x3 + a2*b1*c3*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + a3*b2*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a2*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*a3*b1*b2*c2*c3*x3 + a2*a3*b1*b2*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + a1*a3*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + a3*b1*b2*b3*c1*c2*c3*x3 + c1*c2*x2*x3 + a1*b1*c1*c2*x2*x3 + a2*b1*c1*c2*x2*x3 + a3*b1*c1*c2*x2*x3 + b2*c1*c2*x2*x3 + a1*b2*c1*c2*x2*x3 + a2*b2*c1*c2*x2*x3 + a3*b2*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + a1*b3*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + a3*b3*c1*c2*x2*x3 + b2*b3*c1*c2*x2*x3 + a1*b1*c2*c3*x2*x3 + a2*b1*c2*c3*x2*x3 + a3*b1*c2*c3*x2*x3 + a1*b2*c2*c3*x2*x3 + a1*b3*c2*c3*x2*x3 + b1*b3*c2*c3*x2*x3 + b2*c1*c2*c3*x2*x3 + b1*b2*c1*c2*c3*x2*x3 + b3*c1*c2*c3*x2*x3 + b1*b3*c1*c2*c3*x2*x3 + a1*a3*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a1*a3*b2*c1*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*a3*b3*c1*y1 + b2*b3*c1*y1 + a1*a3*b2*c2*y1 + a1*a3*b1*b2*c2*y1 + a2*b3*c2*y1 + a1*a2*b3*c2*y1 + a2*a3*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a1*a3*b1*c1*c2*y1 + a1*a3*b1*b2*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + a1*a2*b1*b3*c1*c2*y1 + a1*a3*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a1*b2*c3*y1 + a1*a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + b2*c1*c3*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a1*a3*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + a1*a3*b1*b2*c1*c3*y1 + a2*a3*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + a2*b2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a1*a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*b1*b2*b3*c1*c3*y1 + a2*b1*b2*b3*c1*c3*y1 + a1*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a1*a3*b2*c2*c3*y1 + a2*a3*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a1*a2*b1*b2*c2*c3*y1 + a2*a3*b1*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b1*b3*c2*c3*y1 + a1*a3*b1*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a1*a3*b2*b3*c2*c3*y1 + a2*a3*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + a2*b1*b2*b3*c2*c3*y1 + b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + a3*b1*b2*c1*c2*c3*y1 + a3*b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + a3*b1*c1*c2*x1*y1 + a3*b2*c1*c2*x1*y1 + a1*b3*c1*c2*x1*y1 + a2*b3*c1*c2*x1*y1 + a3*b3*c1*c2*x1*y1 + b2*b3*c1*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + a1*b1*c2*c3*x1*y1 + a2*b1*c2*c3*x1*y1 + a3*b1*c2*c3*x1*y1 + a1*b2*c2*c3*x1*y1 + a2*b2*c2*c3*x1*y1 + a3*b2*c2*c3*x1*y1 + a1*b3*c2*c3*x1*y1 + a2*b3*c2*c3*x1*y1 + a3*b3*c2*c3*x1*y1 + b1*b3*c2*c3*x1*y1 + b2*c1*c2*c3*x1*y1 + b1*b2*c1*c2*c3*x1*y1 + b3*c1*c2*c3*x1*y1 + b1*b3*c1*c2*c3*x1*y1 + b3*c3*x2*y1 + a3*b3*c3*x2*y1 + b3*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + a1*b1*c2*c3*x2*y1 + a2*b1*c2*c3*x2*y1 + a3*b1*c2*c3*x2*y1 + a1*b2*c2*c3*x2*y1 + a2*b2*c2*c3*x2*y1 + a3*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + a2*b3*c2*c3*x2*y1 + a3*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a1*b1*c1*c2*c3*x2*y1 + a2*b1*c1*c2*c3*x2*y1 + a3*b1*c1*c2*c3*x2*y1 + a1*b2*c1*c2*c3*x2*y1 + a2*b2*c1*c2*c3*x2*y1 + a3*b2*c1*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + a1*b3*c1*c2*c3*x2*y1 + a2*b3*c1*c2*c3*x2*y1 + a3*b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + b2*b3*c1*c2*c3*x2*y1 + a1*a3*b1*y2 + a1*a3*b2*y2 + a1*a3*b1*b2*y2 + a1*a2*b3*y2 + a1*b1*b3*y2 + a1*a2*b1*b3*y2 + a1*a3*b1*b3*y2 + a3*b1*c1*y2 + b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a1*a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a1*a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*b1*c3*y2 + a1*a2*b1*c3*y2 + a1*a3*b1*c3*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + a1*a3*b2*c3*y2 + a1*b1*b2*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*b1*c2*c3*y2 + a1*a2*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*a3*b2*c2*c3*y2 + a2*b1*b2*c2*c3*y2 + a1*a2*b1*b2*c2*c3*y2 + a2*a3*b1*b2*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*a2*b1*b3*c2*c3*y2 + a1*a3*b1*b3*c2*c3*y2 + a1*a3*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + a2*b1*b2*b3*c2*c3*y2 + b1*c1*c2*c3*y2 + a3*b1*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + a3*b1*b2*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a3*b1*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*b1*b2*b3*c1*c2*c3*y2 + a3*b1*x1*y2 + a3*b2*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a3*b3*x1*y2 + a3*b1*c1*x1*y2 + a3*b2*c1*x1*y2 + a1*b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a1*b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + a1*b1*c3*x1*y2 + a2*b1*c3*x1*y2 + a3*b1*c3*x1*y2 + a1*b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a1*b3*c3*x1*y2 + a2*b3*c3*x1*y2 + a1*b1*c1*c3*x1*y2 + a2*b1*c1*c3*x1*y2 + a3*b1*c1*c3*x1*y2 + a1*b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + b3*c1*c3*x1*y2 + a1*b3*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + a1*b1*c2*c3*x1*y2 + a2*b1*c2*c3*x1*y2 + a3*b1*c2*c3*x1*y2 + a1*b2*c2*c3*x1*y2 + a2*b2*c2*c3*x1*y2 + a3*b2*c2*c3*x1*y2 + a1*b3*c2*c3*x1*y2 + a2*b3*c2*c3*x1*y2 + a3*b3*c2*c3*x1*y2 + a1*b1*c1*c2*c3*x1*y2 + a2*b1*c1*c2*c3*x1*y2 + a3*b1*c1*c2*c3*x1*y2 + a1*b2*c1*c2*c3*x1*y2 + a2*b2*c1*c2*c3*x1*y2 + a3*b2*c1*c2*c3*x1*y2 + a1*b3*c1*c2*c3*x1*y2 + a2*b3*c1*c2*c3*x1*y2 + a3*b3*c1*c2*c3*x1*y2 + a3*b1*c1*c2*x2*y2 + a3*b2*c1*c2*x2*y2 + a1*b3*c1*c2*x2*y2 + a2*b3*c1*c2*x2*y2 + a3*b3*c1*c2*x2*y2 + b2*b3*c1*c2*x2*y2 + a1*b1*c2*c3*x2*y2 + a2*b1*c2*c3*x2*y2 + a3*b1*c2*c3*x2*y2 + a1*b2*c2*c3*x2*y2 + a1*b3*c2*c3*x2*y2 + b1*b3*c2*c3*x2*y2 + b2*c1*c2*c3*x2*y2 + b1*b2*c1*c2*c3*x2*y2 + b3*c1*c2*c3*x2*y2 + b1*b3*c1*c2*c3*x2*y2 + a1*b1*c1*c3*y1*y2 + a2*b1*c1*c3*y1*y2 + a3*b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a1*b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + a1*b3*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b1*b3*c1*c3*y1*y2 + a1*b1*c1*c2*c3*y1*y2 + a2*b1*c1*c2*c3*y1*y2 + a3*b1*c1*c2*c3*y1*y2 + b2*c1*c2*c3*y1*y2 + a1*b2*c1*c2*c3*y1*y2 + a2*b2*c1*c2*c3*y1*y2 + a3*b2*c1*c2*c3*y1*y2 + b1*b2*c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + a1*b3*c1*c2*c3*y1*y2 + a2*b3*c1*c2*c3*y1*y2 + a3*b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + a1*a2*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b3*y3 + a1*b2*b3*y3 + a1*a3*b2*b3*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a1*a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a2*b1*c2*y3 + a1*a2*b1*c2*y3 + a2*a3*b1*c2*y3 + a1*b2*c2*y3 + a2*b1*b2*c2*y3 + a1*a2*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a2*b1*b3*c2*y3 + a1*a2*b1*b3*c2*y3 + a2*a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a3*b2*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + a1*a3*b1*b2*c1*c2*y3 + a2*a3*b1*b2*c1*c2*y3 + a1*a3*b2*b3*c1*c2*y3 + a2*a3*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a1*b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*b2*c3*y3 + a1*b1*b2*c3*y3 + a2*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a2*a3*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + a2*b1*c1*c3*y3 + b1*b2*c1*c3*y3 + a3*b1*b2*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a2*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + a1*a3*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*a3*b1*b2*c2*c3*y3 + a2*a3*b1*b2*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + a1*a3*b2*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a3*b2*b3*c1*c2*c3*y3 + a3*b1*b2*b3*c1*c2*c3*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*b2*x2*y3 + a1*b3*x2*y3 + c1*x2*y3 + a1*b1*c1*x2*y3 + a2*b1*c1*x2*y3 + a3*b1*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + a3*b2*c1*x2*y3 + a1*b3*c1*x2*y3 + a2*b3*c1*x2*y3 + a3*b3*c1*x2*y3 + a1*b1*c2*x2*y3 + a2*b1*c2*x2*y3 + a3*b1*c2*x2*y3 + a1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*b1*c1*c2*x2*y3 + a2*b1*c1*c2*x2*y3 + a3*b1*c1*c2*x2*y3 + a1*b2*c1*c2*x2*y3 + a2*b2*c1*c2*x2*y3 + a3*b2*c1*c2*x2*y3 + a1*b3*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + a3*b3*c1*c2*x2*y3 + a1*b1*c3*x2*y3 + a2*b1*c3*x2*y3 + a3*b1*c3*x2*y3 + a1*b2*c3*x2*y3 + a1*b3*c3*x2*y3 + b2*c1*c3*x2*y3 + b1*b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + b1*b3*c1*c3*x2*y3 + a1*b1*c2*c3*x2*y3 + a2*b1*c2*c3*x2*y3 + a3*b1*c2*c3*x2*y3 + a1*b2*c2*c3*x2*y3 + a1*b3*c2*c3*x2*y3 + b2*c1*c2*c3*x2*y3 + b1*b2*c1*c2*c3*x2*y3 + b3*c1*c2*c3*x2*y3 + b1*b3*c1*c2*c3*x2*y3 + c1*c2*x3*y3 + a1*b1*c1*c2*x3*y3 + a2*b1*c1*c2*x3*y3 + a3*b1*c1*c2*x3*y3 + b2*c1*c2*x3*y3 + a1*b2*c1*c2*x3*y3 + a2*b2*c1*c2*x3*y3 + a3*b2*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + a1*b3*c1*c2*x3*y3 + a2*b3*c1*c2*x3*y3 + a3*b3*c1*c2*x3*y3 + b2*b3*c1*c2*x3*y3 + a1*b1*c2*c3*x3*y3 + a2*b1*c2*c3*x3*y3 + a3*b1*c2*c3*x3*y3 + a1*b2*c2*c3*x3*y3 + a1*b3*c2*c3*x3*y3 + b1*b3*c2*c3*x3*y3 + b2*c1*c2*c3*x3*y3 + b1*b2*c1*c2*c3*x3*y3 + b3*c1*c2*c3*x3*y3 + b1*b3*c1*c2*c3*x3*y3 + a2*a3*b1*z1 + a2*a3*b2*z1 + a3*b1*b2*z1 + a1*a2*b3*z1 + a2*a3*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + a2*b1*b3*c1*z1 + b1*b2*b3*c1*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a1*b1*b3*c2*z1 + a3*b1*b3*c2*z1 + b2*b3*c2*z1 + a1*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + b1*b2*b3*c2*z1 + b1*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a1*b2*c3*z1 + a2*b3*c3*z1 + b1*b2*c1*c3*z1 + b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + a1*a2*b3*z2 + a1*b2*b3*z2 + a2*b1*b3*c1*z2 + b1*b2*b3*c1*z2 + a1*b1*b3*c2*z2 + a2*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + b1*b3*c1*c2*z2 + b1*b2*b3*c1*c2*z2 + a1*b2*c3*z2 + b1*b2*c1*c3*z2 + b1*b3*c2*c3*z2 + a1*a2*b1*z3 + a1*a2*b2*z3 + a1*b1*b2*z3 + a2*b1*b2*z3 + a1*a2*b3*z3 + a1*b2*b3*z3 + a2*b1*c1*z3 + b1*b2*c1*z3 + a2*b1*b2*c1*z3 + a2*b1*b3*c1*z3 + b1*b2*b3*c1*z3 + a1*b2*c2*z3 + a1*b1*b3*c2*z3 + a2*b1*b3*c2*z3 + a1*b2*b3*c2*z3 + b1*b2*c1*c2*z3 + b1*b3*c1*c2*z3 + b1*b2*b3*c1*c2*z3 + a1*b2*c3*z3 + b1*b2*c1*c3*z3 + b1*b3*c2*c3*z3 + b1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 93 ( P4_222)
#####################################################################
Acpin93:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin93:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin93:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin93:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1 + z1;
end;
#####################################################################
Bxyin93:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 94 ( P4_22_12)
#####################################################################
Acpin94:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin94:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Azin94:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1 + z1;
end;
#####################################################################
Bphiin94:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + b2*c1*x1 + b1*x2 + b1*c1*x2 + b2*c1*x2 + a2*y1 + b2*c1*y1 + b1*c1*y2 + b2*c1*y2;
end;
#####################################################################
CGAPin94:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a1*a3*b1*b2 + a2*a3*b1*b2 + a1*a2*b1*b3 + a1*b2*b3 + a1*a3*b2*b3 + a2*b1*b2*b3 + a3*b1*b2*b3 + a2*a3*c1 + a3*b1*b2*c1 + b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a1*a3*b2*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a3*b1*b2*c1*c2 + a1*b3*c1*c2 + b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a2*b2*c3 + a1*a3*b2*c3 + a1*a2*b3*c3 + a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a2*b1*b3*c1*c3 + a1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + 2*c1*c2*c3 + b1*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a2*a3*x1 + a3*b2*x1 + a2*b3*x1 + b2*b3*x1 + a3*b2*c1*x1 + a2*b3*c1*x1 + b2*b3*c1*x1 + a2*b3*c2*x1 + b2*b3*c2*x1 + b2*b3*c1*c2*x1 + a3*b2*c1*x2 + b2*b3*c1*x2 + b2*b3*c1*c2*x2 + a2*b1*x3 + b1*b2*x3 + a2*b1*c1*x3 + a3*b2*c1*x3 + b1*b2*c1*x3 + b2*b3*c1*x3 + a2*b1*c2*x3 + b1*b2*c2*x3 + a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + b2*b3*c1*c2*x3 + c1*c2*x2*x3 + a2*a3*y1 + a3*b2*c1*y1 + a2*b3*c1*y1 + b2*b3*c1*y1 + a2*b3*c2*y1 + b2*b3*c1*c2*y1 + a2*b1*c1*y3 + a2*b1*c2*y3 + b1*b2*c2*y3 + a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + c1*x2*y3 + c1*c2*x2*y3 + c1*c2*x3*y3 + (a2*x1 + b2*c1*x1 + b1*x2 + b1*c1*x2 + b2*c1*x2 + a2*y1 + b2*c1*y1 + b1*c1*y2 + b2*c1*y2)*(a3 + z3) + c1*(a2 + z2)*(a3 + z3) + (a1 + z1)*(a2 + z2)*(a3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 95 ( P4_322)
#####################################################################
Acpin95:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin95:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin95:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bxyin95:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 96 ( P4_32_12)
#####################################################################
Acpin96:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin96:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bphiin96:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + b2*c1*x1 + b1*x2 + b1*c1*x2 + b2*c1*x2 + a2*y1 + b2*c1*y1 + b1*c1*y2 + b2*c1*y2;
end;
#####################################################################
CGAPin96:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b1*b2 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + a1*a2*a3*b2*b3 + a2*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*b1*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a1*a2*b1*b3*c1 + a1*b2*b3*c1 + a1*a2*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a1*a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a3*b1*c2 + a1*a2*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*a3*b3*c2 + a2*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*b2*c3 + a1*a3*b2*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*a3*b3*c3 + a1*b2*b3*c3 + a1*a3*b2*b3*c3 + a2*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*a2*a3*b1*b2*b3*c3 + a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a1*b2*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a2*b1*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a1*a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*a2*b1*b2*c2*c3 + a1*a2*b3*c2*c3 + a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + 2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a2*a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + b2*b3*x1 + a1*b1*b2*b3*x1 + a2*b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a2*a3*b1*c1*x1 + a1*a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a2*a3*b3*c1*x1 + a1*a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a2*b1*b2*b3*c1*x1 + a3*b1*b2*b3*c1*x1 + a3*b1*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a1*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a2*b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*b1*c1*c2*x1 + a1*a3*b1*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a1*a3*b1*b2*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + a2*b1*b3*c1*c2*x1 + a1*a2*b1*b3*c1*c2*x1 + a3*b1*b3*c1*c2*x1 + a1*a3*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*b2*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a2*b1*c3*x1 + b2*c3*x1 + a1*b2*c3*x1 + a2*b2*c3*x1 + a1*a2*b2*c3*x1 + a3*b2*c3*x1 + a2*a3*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a2*a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a2*b1*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a1*b1*b2*b3*c3*x1 + a2*b1*b2*b3*c3*x1 + a2*b1*c1*c3*x1 + b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a1*a3*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a3*b1*b2*c1*c3*x1 + a1*a3*b1*b2*c1*c3*x1 + a2*a3*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a2*b2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a1*a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + a1*b1*b2*b3*c1*c3*x1 + a2*b1*b2*b3*c1*c3*x1 + a3*b1*b2*b3*c1*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a1*a2*b1*b2*c2*c3*x1 + a2*a3*b1*b2*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b1*b3*c2*c3*x1 + a3*b1*b3*c2*c3*x1 + a1*a3*b1*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + a1*a3*b2*b3*c2*c3*x1 + a2*a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + a2*b1*b2*b3*c2*c3*x1 + a3*b1*b2*b3*c2*c3*x1 + b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + a3*b1*b2*c1*c2*c3*x1 + a3*b2*b3*c1*c2*c3*x1 + a2*a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*a3*b2*b3*x2 + a2*a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*a3*b1*b2*c1*x2 + a2*b1*b3*c1*x2 + a1*a2*b1*b3*c1*x2 + a2*a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + a2*a3*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*a2*b3*c2*x2 + b1*b3*c2*x2 + a1*b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a2*a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a2*a3*b1*b2*c1*c2*x2 + b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a1*a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + a2*a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a3*b2*b3*c1*c2*x2 + a2*b1*c3*x2 + a1*b2*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + b1*b2*c3*x2 + a1*b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a3*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + b1*b3*c3*x2 + a1*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*a3*b1*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + a2*b1*c1*c3*x2 + a3*b2*c1*c3*x2 + b1*b3*c1*c3*x2 + a3*b1*b3*c1*c3*x2 + a3*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*a2*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + a1*a3*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a1*a3*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a1*a2*b1*b2*c2*c3*x2 + a2*a3*b1*b2*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a1*a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*a3*b1*b3*c2*c3*x2 + a1*a3*b2*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + a3*b1*b2*b3*c2*c3*x2 + b1*c1*c2*c3*x2 + a3*b1*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a3*b1*b2*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + a3*b1*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a3*b1*b2*b3*c1*c2*c3*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a1*b3*c1*c2*x1*x2 + a2*b3*c1*c2*x1*x2 + a3*b3*c1*c2*x1*x2 + b2*b3*c1*c2*x1*x2 + b3*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + a1*b1*c1*c2*c3*x1*x2 + a2*b1*c1*c2*c3*x1*x2 + a3*b1*c1*c2*c3*x1*x2 + b2*c1*c2*c3*x1*x2 + a1*b2*c1*c2*c3*x1*x2 + a2*b2*c1*c2*c3*x1*x2 + a3*b2*c1*c2*c3*x1*x2 + b1*b2*c1*c2*c3*x1*x2 + a1*b3*c1*c2*c3*x1*x2 + a2*b3*c1*c2*c3*x1*x2 + a3*b3*c1*c2*c3*x1*x2 + b2*b3*c1*c2*c3*x1*x2 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*a3*b2*x3 + b1*b2*x3 + a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*b1*b3*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*a3*b2*b3*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*a3*b2*c1*x3 + a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a1*a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a1*a2*b1*b3*c1*x3 + a2*a3*b1*b3*c1*x3 + b2*b3*c1*x3 + a3*b2*b3*c1*x3 + a1*a3*b2*b3*c1*x3 + a2*a3*b2*b3*c1*x3 + a1*a2*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*a3*b1*b2*c2*x3 + a2*b1*b3*c2*x3 + a1*a2*b1*b3*c2*x3 + a2*a3*b1*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*a3*b2*c1*c2*x3 + a2*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*a3*b1*b2*c1*c2*x3 + a2*a3*b1*b2*c1*c2*x3 + b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + a1*a3*b2*b3*c1*c2*x3 + a2*a3*b2*b3*c1*c2*x3 + a2*b1*b2*b3*c1*c2*x3 + a2*b1*c3*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + a3*b2*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a2*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*a3*b1*b2*c2*c3*x3 + a2*a3*b1*b2*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + a1*a3*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + a3*b1*b2*b3*c1*c2*c3*x3 + c1*c2*x2*x3 + a1*b1*c1*c2*x2*x3 + a2*b1*c1*c2*x2*x3 + a3*b1*c1*c2*x2*x3 + b2*c1*c2*x2*x3 + a1*b2*c1*c2*x2*x3 + a2*b2*c1*c2*x2*x3 + a3*b2*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + a1*b3*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + a3*b3*c1*c2*x2*x3 + b2*b3*c1*c2*x2*x3 + a1*b1*c2*c3*x2*x3 + a2*b1*c2*c3*x2*x3 + a3*b1*c2*c3*x2*x3 + a1*b2*c2*c3*x2*x3 + a1*b3*c2*c3*x2*x3 + b1*b3*c2*c3*x2*x3 + b2*c1*c2*c3*x2*x3 + b1*b2*c1*c2*c3*x2*x3 + b3*c1*c2*c3*x2*x3 + b1*b3*c1*c2*c3*x2*x3 + a1*a3*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a1*a3*b2*c1*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*a3*b3*c1*y1 + b2*b3*c1*y1 + a1*a3*b2*c2*y1 + a1*a3*b1*b2*c2*y1 + a2*b3*c2*y1 + a1*a2*b3*c2*y1 + a2*a3*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a1*a3*b1*c1*c2*y1 + a1*a3*b1*b2*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + a1*a2*b1*b3*c1*c2*y1 + a1*a3*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a1*b2*c3*y1 + a1*a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + b2*c1*c3*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a1*a3*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + a1*a3*b1*b2*c1*c3*y1 + a2*a3*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + a2*b2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a1*a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*b1*b2*b3*c1*c3*y1 + a2*b1*b2*b3*c1*c3*y1 + a1*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a1*a3*b2*c2*c3*y1 + a2*a3*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a1*a2*b1*b2*c2*c3*y1 + a2*a3*b1*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b1*b3*c2*c3*y1 + a1*a3*b1*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a1*a3*b2*b3*c2*c3*y1 + a2*a3*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + a2*b1*b2*b3*c2*c3*y1 + b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + a3*b1*b2*c1*c2*c3*y1 + a3*b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + a3*b1*c1*c2*x1*y1 + a3*b2*c1*c2*x1*y1 + a1*b3*c1*c2*x1*y1 + a2*b3*c1*c2*x1*y1 + a3*b3*c1*c2*x1*y1 + b2*b3*c1*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + a1*b1*c2*c3*x1*y1 + a2*b1*c2*c3*x1*y1 + a3*b1*c2*c3*x1*y1 + a1*b2*c2*c3*x1*y1 + a2*b2*c2*c3*x1*y1 + a3*b2*c2*c3*x1*y1 + a1*b3*c2*c3*x1*y1 + a2*b3*c2*c3*x1*y1 + a3*b3*c2*c3*x1*y1 + b1*b3*c2*c3*x1*y1 + b2*c1*c2*c3*x1*y1 + b1*b2*c1*c2*c3*x1*y1 + b3*c1*c2*c3*x1*y1 + b1*b3*c1*c2*c3*x1*y1 + b3*c3*x2*y1 + a3*b3*c3*x2*y1 + b3*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + a1*b1*c2*c3*x2*y1 + a2*b1*c2*c3*x2*y1 + a3*b1*c2*c3*x2*y1 + a1*b2*c2*c3*x2*y1 + a2*b2*c2*c3*x2*y1 + a3*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + a2*b3*c2*c3*x2*y1 + a3*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a1*b1*c1*c2*c3*x2*y1 + a2*b1*c1*c2*c3*x2*y1 + a3*b1*c1*c2*c3*x2*y1 + a1*b2*c1*c2*c3*x2*y1 + a2*b2*c1*c2*c3*x2*y1 + a3*b2*c1*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + a1*b3*c1*c2*c3*x2*y1 + a2*b3*c1*c2*c3*x2*y1 + a3*b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + b2*b3*c1*c2*c3*x2*y1 + a1*a3*b1*y2 + a1*a3*b2*y2 + a1*a3*b1*b2*y2 + a1*a2*b3*y2 + a1*b1*b3*y2 + a1*a2*b1*b3*y2 + a1*a3*b1*b3*y2 + a3*b1*c1*y2 + b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a1*a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a1*a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*b1*c3*y2 + a1*a2*b1*c3*y2 + a1*a3*b1*c3*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + a1*a3*b2*c3*y2 + a1*b1*b2*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*b1*c2*c3*y2 + a1*a2*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*a3*b2*c2*c3*y2 + a2*b1*b2*c2*c3*y2 + a1*a2*b1*b2*c2*c3*y2 + a2*a3*b1*b2*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*a2*b1*b3*c2*c3*y2 + a1*a3*b1*b3*c2*c3*y2 + a1*a3*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + a2*b1*b2*b3*c2*c3*y2 + b1*c1*c2*c3*y2 + a3*b1*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + a3*b1*b2*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a3*b1*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*b1*b2*b3*c1*c2*c3*y2 + a3*b1*x1*y2 + a3*b2*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a3*b3*x1*y2 + a3*b1*c1*x1*y2 + a3*b2*c1*x1*y2 + a1*b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a1*b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + a1*b1*c3*x1*y2 + a2*b1*c3*x1*y2 + a3*b1*c3*x1*y2 + a1*b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a1*b3*c3*x1*y2 + a2*b3*c3*x1*y2 + a1*b1*c1*c3*x1*y2 + a2*b1*c1*c3*x1*y2 + a3*b1*c1*c3*x1*y2 + a1*b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + b3*c1*c3*x1*y2 + a1*b3*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + a1*b1*c2*c3*x1*y2 + a2*b1*c2*c3*x1*y2 + a3*b1*c2*c3*x1*y2 + a1*b2*c2*c3*x1*y2 + a2*b2*c2*c3*x1*y2 + a3*b2*c2*c3*x1*y2 + a1*b3*c2*c3*x1*y2 + a2*b3*c2*c3*x1*y2 + a3*b3*c2*c3*x1*y2 + a1*b1*c1*c2*c3*x1*y2 + a2*b1*c1*c2*c3*x1*y2 + a3*b1*c1*c2*c3*x1*y2 + a1*b2*c1*c2*c3*x1*y2 + a2*b2*c1*c2*c3*x1*y2 + a3*b2*c1*c2*c3*x1*y2 + a1*b3*c1*c2*c3*x1*y2 + a2*b3*c1*c2*c3*x1*y2 + a3*b3*c1*c2*c3*x1*y2 + a3*b1*c1*c2*x2*y2 + a3*b2*c1*c2*x2*y2 + a1*b3*c1*c2*x2*y2 + a2*b3*c1*c2*x2*y2 + a3*b3*c1*c2*x2*y2 + b2*b3*c1*c2*x2*y2 + a1*b1*c2*c3*x2*y2 + a2*b1*c2*c3*x2*y2 + a3*b1*c2*c3*x2*y2 + a1*b2*c2*c3*x2*y2 + a1*b3*c2*c3*x2*y2 + b1*b3*c2*c3*x2*y2 + b2*c1*c2*c3*x2*y2 + b1*b2*c1*c2*c3*x2*y2 + b3*c1*c2*c3*x2*y2 + b1*b3*c1*c2*c3*x2*y2 + a1*b1*c1*c3*y1*y2 + a2*b1*c1*c3*y1*y2 + a3*b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a1*b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + a1*b3*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b1*b3*c1*c3*y1*y2 + a1*b1*c1*c2*c3*y1*y2 + a2*b1*c1*c2*c3*y1*y2 + a3*b1*c1*c2*c3*y1*y2 + b2*c1*c2*c3*y1*y2 + a1*b2*c1*c2*c3*y1*y2 + a2*b2*c1*c2*c3*y1*y2 + a3*b2*c1*c2*c3*y1*y2 + b1*b2*c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + a1*b3*c1*c2*c3*y1*y2 + a2*b3*c1*c2*c3*y1*y2 + a3*b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + a1*a2*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b3*y3 + a1*b2*b3*y3 + a1*a3*b2*b3*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a1*a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a2*b1*c2*y3 + a1*a2*b1*c2*y3 + a2*a3*b1*c2*y3 + a1*b2*c2*y3 + a2*b1*b2*c2*y3 + a1*a2*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a2*b1*b3*c2*y3 + a1*a2*b1*b3*c2*y3 + a2*a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a3*b2*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + a1*a3*b1*b2*c1*c2*y3 + a2*a3*b1*b2*c1*c2*y3 + a1*a3*b2*b3*c1*c2*y3 + a2*a3*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a1*b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*b2*c3*y3 + a1*b1*b2*c3*y3 + a2*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a2*a3*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + a2*b1*c1*c3*y3 + b1*b2*c1*c3*y3 + a3*b1*b2*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a2*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + a1*a3*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*a3*b1*b2*c2*c3*y3 + a2*a3*b1*b2*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + a1*a3*b2*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a3*b2*b3*c1*c2*c3*y3 + a3*b1*b2*b3*c1*c2*c3*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*b2*x2*y3 + a1*b3*x2*y3 + c1*x2*y3 + a1*b1*c1*x2*y3 + a2*b1*c1*x2*y3 + a3*b1*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + a3*b2*c1*x2*y3 + a1*b3*c1*x2*y3 + a2*b3*c1*x2*y3 + a3*b3*c1*x2*y3 + a1*b1*c2*x2*y3 + a2*b1*c2*x2*y3 + a3*b1*c2*x2*y3 + a1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*b1*c1*c2*x2*y3 + a2*b1*c1*c2*x2*y3 + a3*b1*c1*c2*x2*y3 + a1*b2*c1*c2*x2*y3 + a2*b2*c1*c2*x2*y3 + a3*b2*c1*c2*x2*y3 + a1*b3*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + a3*b3*c1*c2*x2*y3 + a1*b1*c3*x2*y3 + a2*b1*c3*x2*y3 + a3*b1*c3*x2*y3 + a1*b2*c3*x2*y3 + a1*b3*c3*x2*y3 + b2*c1*c3*x2*y3 + b1*b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + b1*b3*c1*c3*x2*y3 + a1*b1*c2*c3*x2*y3 + a2*b1*c2*c3*x2*y3 + a3*b1*c2*c3*x2*y3 + a1*b2*c2*c3*x2*y3 + a1*b3*c2*c3*x2*y3 + b2*c1*c2*c3*x2*y3 + b1*b2*c1*c2*c3*x2*y3 + b3*c1*c2*c3*x2*y3 + b1*b3*c1*c2*c3*x2*y3 + c1*c2*x3*y3 + a1*b1*c1*c2*x3*y3 + a2*b1*c1*c2*x3*y3 + a3*b1*c1*c2*x3*y3 + b2*c1*c2*x3*y3 + a1*b2*c1*c2*x3*y3 + a2*b2*c1*c2*x3*y3 + a3*b2*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + a1*b3*c1*c2*x3*y3 + a2*b3*c1*c2*x3*y3 + a3*b3*c1*c2*x3*y3 + b2*b3*c1*c2*x3*y3 + a1*b1*c2*c3*x3*y3 + a2*b1*c2*c3*x3*y3 + a3*b1*c2*c3*x3*y3 + a1*b2*c2*c3*x3*y3 + a1*b3*c2*c3*x3*y3 + b1*b3*c2*c3*x3*y3 + b2*c1*c2*c3*x3*y3 + b1*b2*c1*c2*c3*x3*y3 + b3*c1*c2*c3*x3*y3 + b1*b3*c1*c2*c3*x3*y3 + a2*a3*b1*(a1 + z1) + a2*a3*b2*(a1 + z1) + a3*b1*b2*(a1 + z1) + a1*a2*b3*(a1 + z1) + a2*a3*b3*(a1 + z1) + a1*b2*b3*(a1 + z1) + a2*b2*b3*(a1 + z1) + a3*b2*b3*(a1 + z1) + a2*b1*b3*c1*(a1 + z1) + b1*b2*b3*c1*(a1 + z1) + a3*b1*c2*(a1 + z1) + a3*b2*c2*(a1 + z1) + a1*b1*b3*c2*(a1 + z1) + a3*b1*b3*c2*(a1 + z1) + b2*b3*c2*(a1 + z1) + a1*b2*b3*c2*(a1 + z1) + a3*b2*b3*c2*(a1 + z1) + b1*b2*b3*c2*(a1 + z1) + b1*b3*c1*c2*(a1 + z1) + b1*b2*b3*c1*c2*(a1 + z1) + a1*b2*c3*(a1 + z1) + a2*b3*c3*(a1 + z1) + b1*b2*c1*c3*(a1 + z1) + b1*b3*c2*c3*(a1 + z1) + b2*b3*c2*c3*(a1 + z1) + a1*a2*b3*(a2 + z2) + a1*b2*b3*(a2 + z2) + a2*b1*b3*c1*(a2 + z2) + b1*b2*b3*c1*(a2 + z2) + a1*b1*b3*c2*(a2 + z2) + a2*b1*b3*c2*(a2 + z2) + a1*b2*b3*c2*(a2 + z2) + b1*b3*c1*c2*(a2 + z2) + b1*b2*b3*c1*c2*(a2 + z2) + a1*b2*c3*(a2 + z2) + b1*b2*c1*c3*(a2 + z2) + b1*b3*c2*c3*(a2 + z2) + a1*a2*b1*(a3 + z3) + a1*a2*b2*(a3 + z3) + a1*b1*b2*(a3 + z3) + a2*b1*b2*(a3 + z3) + a1*a2*b3*(a3 + z3) + a1*b2*b3*(a3 + z3) + a2*b1*c1*(a3 + z3) + b1*b2*c1*(a3 + z3) + a2*b1*b2*c1*(a3 + z3) + a2*b1*b3*c1*(a3 + z3) + b1*b2*b3*c1*(a3 + z3) + a1*b2*c2*(a3 + z3) + a1*b1*b3*c2*(a3 + z3) + a2*b1*b3*c2*(a3 + z3) + a1*b2*b3*c2*(a3 + z3) + b1*b2*c1*c2*(a3 + z3) + b1*b3*c1*c2*(a3 + z3) + b1*b2*b3*c1*c2*(a3 + z3) + a1*b2*c3*(a3 + z3) + b1*b2*c1*c3*(a3 + z3) + b1*b3*c2*c3*(a3 + z3) + b1*(a2 + z2)*(a3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 97 ( I422)
#####################################################################
Acpin97:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin97:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin97:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain97:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
B2in97:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*x2 + b1*x2 + a1*b2*x2 + c1*x2 + b2*c1*x2 + b2*y1 + a1*y2 + b1*y2 + a1*b2*y2 + c1*y2 + b2*c1*y2 + b1*z2 + a1*b2*z2;
end;
#####################################################################
B3in97:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2;
end;
#####################################################################
C1in97:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a3*c1*c2*x1 + a3*b1*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + c2*c3*x1 + a1*c2*c3*x1 + a2*c2*c3*x1 + a3*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + b3*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a2*b3*x1*(1 + x1) + (a3*c2*x1*(1 + x1))/2 + (a3*b1*c2*x1*(1 + x1))/2 + (b3*c2*x1*(1 + x1))/2 + (a1*b3*c2*x1*(1 + x1))/2 + (b1*b3*c2*x1*(1 + x1))/2 + b2*b3*c2*x1*(1 + x1) + (b3*c1*c2*x1*(1 + x1))/2 + (b1*b3*c1*c2*x1*(1 + x1))/2 + (a2*b2*c3*x1*(1 + x1))/2 + (a3*b2*c3*x1*(1 + x1))/2 + (a2*b3*c3*x1*(1 + x1))/2 + (c2*c3*x1*(1 + x1))/2 + (b1*c2*c3*x1*(1 + x1))/2 + (b2*c2*c3*x1*(1 + x1))/2 + (b2*b3*c2*c3*x1*(1 + x1))/2 + a3*x1*x2 + a1*a2*a3*x1*x2 + a3*b2*x1*x2 + a1*b3*x1*x2 + a2*b3*x1*x2 + a3*b3*x1*x2 + b1*b3*x1*x2 + a1*b2*b3*x1*x2 + b1*b2*b3*x1*x2 + a2*a3*c1*x1*x2 + a2*a3*b1*c1*x1*x2 + b3*c1*x1*x2 + b1*b3*c1*x1*x2 + b2*b3*c1*x1*x2 + b1*b2*b3*c1*x1*x2 + a1*a3*c2*x1*x2 + a3*b1*c2*x1*x2 + a2*a3*b1*c2*x1*x2 + a1*a3*b2*c2*x1*x2 + a3*b1*b2*c2*x1*x2 + b2*b3*c2*x1*x2 + b1*b2*b3*c2*x1*x2 + a3*c1*c2*x1*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a3*b1*b2*c1*c2*x1*x2 + a1*c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + a1*b2*c3*x1*x2 + a2*b2*c3*x1*x2 + a3*b2*c3*x1*x2 + a2*b3*c3*x1*x2 + c1*c3*x1*x2 + b1*c1*c3*x1*x2 + b2*c1*c3*x1*x2 + b1*b2*c1*c3*x1*x2 + c2*c3*x1*x2 + b1*c2*c3*x1*x2 + b2*c2*c3*x1*x2 + b1*b2*c2*c3*x1*x2 + b3*c2*c3*x1*x2 + b2*b3*c2*c3*x1*x2 + a2*x1*x3 + a2*b1*x1*x3 + a2*b2*x1*x3 + a3*b2*x1*x3 + a2*b1*b2*x1*x3 + a3*b2*b3*x1*x3 + b2*c2*x1*x3 + b1*b2*c2*x1*x3 + b3*c2*x1*x3 + b1*b3*c2*x1*x3 + a3*c1*c2*y1 + a3*b1*c1*c2*y1 + b3*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a1*c2*c3*y1 + a2*c2*c3*y1 + a3*c2*c3*y1 + a1*b1*c2*c3*y1 + a2*b1*c2*c3*y1 + a3*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + a1*b3*c2*c3*y1 + a2*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a2*a3*x1*y1 + b2*b3*x1*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + b1*b3*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b1*c2*c3*x1*y1 + b2*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a3*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a3*b3*x2*y1 + b1*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + b1*b2*b3*x2*y1 + a2*a3*c1*x2*y1 + a2*a3*b1*c1*x2*y1 + b3*c1*x2*y1 + b1*b3*c1*x2*y1 + b2*b3*c1*x2*y1 + b1*b2*b3*c1*x2*y1 + a3*c2*x2*y1 + a1*a3*c2*x2*y1 + a3*b1*c2*x2*y1 + a2*a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + a3*b1*b2*c2*x2*y1 + b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + a3*c1*c2*x2*y1 + a3*b1*c1*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + a3*b1*b2*c1*c2*x2*y1 + c3*x2*y1 + a1*c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a1*b2*c3*x2*y1 + a2*b2*c3*x2*y1 + a3*b2*c3*x2*y1 + a2*b3*c3*x2*y1 + c1*c3*x2*y1 + b1*c1*c3*x2*y1 + b2*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + c2*c3*x2*y1 + b1*c2*c3*x2*y1 + b2*c2*c3*x2*y1 + b1*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a2*x3*y1 + a2*b1*x3*y1 + a2*b2*x3*y1 + a3*b2*x3*y1 + a2*b1*b2*x3*y1 + a3*b2*b3*x3*y1 + b2*c2*x3*y1 + b1*b2*c2*x3*y1 + b3*c2*x3*y1 + b1*b3*c2*x3*y1 + a2*b3*y1*(1 + y1) + (a3*c2*y1*(1 + y1))/2 + (a3*b1*c2*y1*(1 + y1))/2 + b3*c2*y1*(1 + y1) + (a1*b3*c2*y1*(1 + y1))/2 + (b1*b3*c2*y1*(1 + y1))/2 + b2*b3*c2*y1*(1 + y1) + (b3*c1*c2*y1*(1 + y1))/2 + (b1*b3*c1*c2*y1*(1 + y1))/2 + (a2*b2*c3*y1*(1 + y1))/2 + (a3*b2*c3*y1*(1 + y1))/2 + (a2*b3*c3*y1*(1 + y1))/2 + (c2*c3*y1*(1 + y1))/2 + (b1*c2*c3*y1*(1 + y1))/2 + (b2*c2*c3*y1*(1 + y1))/2 + (b2*b3*c2*c3*y1*(1 + y1))/2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a3*b2*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a3*b3*x1*y2 + b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + b1*b2*b3*x1*y2 + a3*c1*x1*y2 + a2*a3*c1*x1*y2 + a3*b1*c1*x1*y2 + a2*a3*b1*c1*x1*y2 + b3*c1*x1*y2 + b1*b3*c1*x1*y2 + b2*b3*c1*x1*y2 + b1*b2*b3*c1*x1*y2 + a3*c2*x1*y2 + a1*a3*c2*x1*y2 + a2*a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b2*c2*x1*y2 + a3*b1*b2*c2*x1*y2 + b2*b3*c2*x1*y2 + b1*b2*b3*c2*x1*y2 + a3*c1*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a3*b1*b2*c1*c2*x1*y2 + a1*c3*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + a1*b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a2*b3*c3*x1*y2 + c1*c3*x1*y2 + b1*c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + c2*c3*x1*y2 + b1*c2*c3*x1*y2 + b2*c2*c3*x1*y2 + b1*b2*c2*c3*x1*y2 + b3*c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + a3*y1*y2 + a1*a3*y1*y2 + a1*a2*a3*y1*y2 + a3*b2*y1*y2 + b3*y1*y2 + a1*b3*y1*y2 + a2*b3*y1*y2 + a3*b3*y1*y2 + b1*b3*y1*y2 + a1*b2*b3*y1*y2 + b1*b2*b3*y1*y2 + a3*c1*y1*y2 + a2*a3*c1*y1*y2 + a3*b1*c1*y1*y2 + a2*a3*b1*c1*y1*y2 + b3*c1*y1*y2 + b1*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + a1*a3*c2*y1*y2 + a2*a3*b1*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + a3*b1*b2*c2*y1*y2 + b2*b3*c2*y1*y2 + b1*b2*b3*c2*y1*y2 + a3*c1*c2*y1*y2 + a3*b1*c1*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + a3*b1*b2*c1*c2*y1*y2 + c3*y1*y2 + a1*c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + b2*c3*y1*y2 + a1*b2*c3*y1*y2 + a2*b2*c3*y1*y2 + a3*b2*c3*y1*y2 + b3*c3*y1*y2 + a2*b3*c3*y1*y2 + c1*c3*y1*y2 + b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + c2*c3*y1*y2 + b1*c2*c3*y1*y2 + b2*c2*c3*y1*y2 + b1*b2*c2*c3*y1*y2 + b3*c2*c3*y1*y2 + b2*b3*c2*c3*y1*y2 + a2*x1*y3 + a2*b1*x1*y3 + b2*x1*y3 + a2*b2*x1*y3 + a3*b2*x1*y3 + b1*b2*x1*y3 + a2*b1*b2*x1*y3 + b2*b3*x1*y3 + a3*b2*b3*x1*y3 + b2*c2*x1*y3 + b1*b2*c2*x1*y3 + b3*c2*x1*y3 + b1*b3*c2*x1*y3 + a2*y1*y3 + a2*b1*y1*y3 + b2*y1*y3 + a2*b2*y1*y3 + a3*b2*y1*y3 + b1*b2*y1*y3 + a2*b1*b2*y1*y3 + b2*b3*y1*y3 + a3*b2*b3*y1*y3 + b2*c2*y1*y3 + b1*b2*c2*y1*y3 + b3*c2*y1*y3 + b1*b3*c2*y1*y3 + a3*b1*c1*c2*z1 + a1*b3*c1*c2*z1 + a2*b2*c1*c3*z1 + a3*b2*c1*c3*z1 + a2*b3*c1*c3*z1 + b1*c2*c3*z1 + a1*b1*c2*c3*z1 + a2*b1*c2*c3*z1 + a3*b1*c2*c3*z1 + b2*c2*c3*z1 + a1*b2*c2*c3*z1 + a2*b2*c2*c3*z1 + a3*b2*c2*c3*z1 + a1*b3*c2*c3*z1 + a2*b3*c2*c3*z1 + b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + b2*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + b2*b3*x1*z1 + a2*a3*c1*x1*z1 + b2*b3*c1*x1*z1 + a1*a3*c2*x1*z1 + a2*a3*c2*x1*z1 + a3*b2*c2*x1*z1 + b3*c2*x1*z1 + a1*b3*c2*x1*z1 + b2*b3*c2*x1*z1 + a3*b2*c1*c2*x1*z1 + a1*b3*c1*c2*x1*z1 + a2*b2*c3*x1*z1 + a3*b2*c3*x1*z1 + a2*b3*c3*x1*z1 + b2*c1*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + a3*x2*z1 + a1*a2*a3*x2*z1 + a3*b2*x2*z1 + b3*x2*z1 + a1*b3*x2*z1 + a2*b3*x2*z1 + a3*b3*x2*z1 + b1*b3*x2*z1 + b2*b3*x2*z1 + a1*b2*b3*x2*z1 + b1*b2*b3*x2*z1 + a2*a3*b1*c1*x2*z1 + b1*b3*c1*x2*z1 + b1*b2*b3*c1*x2*z1 + a3*c2*x2*z1 + a1*a3*c2*x2*z1 + a2*a3*c2*x2*z1 + a3*b1*c2*x2*z1 + a2*a3*b1*c2*x2*z1 + a3*b2*c2*x2*z1 + a1*a3*b2*c2*x2*z1 + a3*b1*b2*c2*x2*z1 + b1*b2*b3*c2*x2*z1 + a3*b1*c1*c2*x2*z1 + a3*b1*b2*c1*c2*x2*z1 + a1*c3*x2*z1 + a2*c3*x2*z1 + a3*c3*x2*z1 + a1*b2*c3*x2*z1 + a2*b2*c3*x2*z1 + a3*b2*c3*x2*z1 + a2*b3*c3*x2*z1 + b1*c1*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b1*c2*c3*x2*z1 + b1*b2*c2*c3*x2*z1 + b3*c2*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + a2*b1*x3*z1 + a3*b2*x3*z1 + a2*b1*b2*x3*z1 + a3*b2*b3*x3*z1 + b1*b2*c2*x3*z1 + b1*b3*c2*x3*z1 + a2*a3*y1*z1 + a2*a3*c1*y1*z1 + b2*b3*c1*y1*z1 + a1*a3*c2*y1*z1 + a2*a3*c2*y1*z1 + a3*b1*c2*y1*z1 + b3*c2*y1*z1 + b2*b3*c2*y1*z1 + a3*b2*c1*c2*y1*z1 + a1*b3*c1*c2*y1*z1 + b1*b3*c1*c2*y1*z1 + b2*c3*y1*z1 + a2*b2*c3*y1*z1 + a3*b2*c3*y1*z1 + a2*b3*c3*y1*z1 + b2*c1*c3*y1*z1 + b2*b3*c2*c3*y1*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b2*y2*z1 + 3*b3*y2*z1 + a1*b3*y2*z1 + a2*b3*y2*z1 + a3*b3*y2*z1 + b1*b3*y2*z1 + a1*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + a3*b1*c1*y2*z1 + a2*a3*b1*c1*y2*z1 + b1*b3*c1*y2*z1 + b1*b2*b3*c1*y2*z1 + a3*c2*y2*z1 + a1*a3*c2*y2*z1 + a2*a3*c2*y2*z1 + a2*a3*b1*c2*y2*z1 + a1*a3*b2*c2*y2*z1 + a3*b1*b2*c2*y2*z1 + b1*b2*b3*c2*y2*z1 + a3*b1*c1*c2*y2*z1 + a3*b1*b2*c1*c2*y2*z1 + a1*c3*y2*z1 + a2*c3*y2*z1 + a3*c3*y2*z1 + a1*b2*c3*y2*z1 + a2*b2*c3*y2*z1 + a3*b2*c3*y2*z1 + b3*c3*y2*z1 + a2*b3*c3*y2*z1 + b1*c1*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + b1*c2*c3*y2*z1 + b1*b2*c2*c3*y2*z1 + b3*c2*c3*y2*z1 + b2*b3*c2*c3*y2*z1 + a2*b1*y3*z1 + a3*b2*y3*z1 + b1*b2*y3*z1 + a2*b1*b2*y3*z1 + b2*b3*y3*z1 + a3*b2*b3*y3*z1 + b1*b2*c2*y3*z1 + b1*b3*c2*y3*z1 + a2*b3*z1*(1 + z1) + (a3*b1*c2*z1*(1 + z1))/2 + (a1*b3*c2*z1*(1 + z1))/2 + (b1*b3*c2*z1*(1 + z1))/2 + b2*b3*c2*z1*(1 + z1) + (b1*b3*c1*c2*z1*(1 + z1))/2 + (a2*b2*c3*z1*(1 + z1))/2 + (a3*b2*c3*z1*(1 + z1))/2 + (a2*b3*c3*z1*(1 + z1))/2 + (b1*c2*c3*z1*(1 + z1))/2 + (b2*c2*c3*z1*(1 + z1))/2 + (b2*b3*c2*c3*z1*(1 + z1))/2 + a1*a2*a3*x1*z2 + b2*b3*x1*z2 + a1*b2*b3*x1*z2 + b1*b2*b3*x1*z2 + a2*a3*c1*x1*z2 + a2*a3*b1*c1*x1*z2 + b2*b3*c1*x1*z2 + b1*b2*b3*c1*x1*z2 + a2*a3*c2*x1*z2 + a2*a3*b1*c2*x1*z2 + a3*b2*c2*x1*z2 + a1*a3*b2*c2*x1*z2 + a3*b1*b2*c2*x1*z2 + b3*c2*x1*z2 + b1*b3*c2*x1*z2 + b2*b3*c2*x1*z2 + b1*b2*b3*c2*x1*z2 + a3*b2*c1*c2*x1*z2 + a3*b1*b2*c1*c2*x1*z2 + a1*b2*c3*x1*z2 + a2*b2*c3*x1*z2 + a3*b2*c3*x1*z2 + a2*b3*c3*x1*z2 + b2*c1*c3*x1*z2 + b1*b2*c1*c3*x1*z2 + b1*b2*c2*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a1*b2*b3*y1*z2 + b1*b2*b3*y1*z2 + a2*a3*c1*y1*z2 + a2*a3*b1*c1*y1*z2 + b2*b3*c1*y1*z2 + b1*b2*b3*c1*y1*z2 + a2*a3*c2*y1*z2 + a2*a3*b1*c2*y1*z2 + a1*a3*b2*c2*y1*z2 + a3*b1*b2*c2*y1*z2 + b3*c2*y1*z2 + b1*b3*c2*y1*z2 + b2*b3*c2*y1*z2 + b1*b2*b3*c2*y1*z2 + a3*b2*c1*c2*y1*z2 + a3*b1*b2*c1*c2*y1*z2 + b2*c3*y1*z2 + a1*b2*c3*y1*z2 + a2*b2*c3*y1*z2 + a3*b2*c3*y1*z2 + a2*b3*c3*y1*z2 + b2*c1*c3*y1*z2 + b1*b2*c1*c3*y1*z2 + b1*b2*c2*c3*y1*z2 + b2*b3*c2*c3*y1*z2 + a1*a2*a3*z1*z2 + a1*b2*b3*z1*z2 + b1*b2*b3*z1*z2 + a2*a3*b1*c1*z1*z2 + b1*b2*b3*c1*z1*z2 + a2*a3*b1*c2*z1*z2 + a1*a3*b2*c2*z1*z2 + a3*b1*b2*c2*z1*z2 + b1*b3*c2*z1*z2 + b1*b2*b3*c2*z1*z2 + a3*b1*b2*c1*c2*z1*z2 + a1*b2*c3*z1*z2 + a2*b2*c3*z1*z2 + a3*b2*c3*z1*z2 + a2*b3*c3*z1*z2 + b1*b2*c1*c3*z1*z2 + b2*c2*c3*z1*z2 + b1*b2*c2*c3*z1*z2 + b2*b3*c2*c3*z1*z2 + a2*b2*x1*z3 + a2*b1*b2*x1*z3 + a3*b2*b3*x1*z3 + b3*c2*x1*z3 + b1*b3*c2*x1*z3 + a2*b2*y1*z3 + a2*b1*b2*y1*z3 + a3*b2*b3*y1*z3 + b3*c2*y1*z3 + b1*b3*c2*y1*z3 + a2*b1*b2*z1*z3 + a3*b2*b3*z1*z3 + b1*b3*c2*z1*z3;
end;
#####################################################################
C2in97:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a3*c1*c2*x1 + a3*b1*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + c2*c3*x1 + a1*c2*c3*x1 + a2*c2*c3*x1 + a3*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + b3*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a2*b3*x1*(1 + x1) + (a3*c2*x1*(1 + x1))/2 + (a3*b1*c2*x1*(1 + x1))/2 + (b3*c2*x1*(1 + x1))/2 + (a1*b3*c2*x1*(1 + x1))/2 + (b1*b3*c2*x1*(1 + x1))/2 + b2*b3*c2*x1*(1 + x1) + (b3*c1*c2*x1*(1 + x1))/2 + (b1*b3*c1*c2*x1*(1 + x1))/2 + (a2*b2*c3*x1*(1 + x1))/2 + (a3*b2*c3*x1*(1 + x1))/2 + (a2*b3*c3*x1*(1 + x1))/2 + (c2*c3*x1*(1 + x1))/2 + (b1*c2*c3*x1*(1 + x1))/2 + (b2*c2*c3*x1*(1 + x1))/2 + (b2*b3*c2*c3*x1*(1 + x1))/2 + a3*x1*x2 + a1*a3*x1*x2 + a1*a2*a3*x1*x2 + a1*a3*b1*x1*x2 + a3*b2*x1*x2 + a1*a3*b1*b2*x1*x2 + a1*b3*x1*x2 + a2*b3*x1*x2 + a3*b3*x1*x2 + b1*b3*x1*x2 + a2*b1*b3*x1*x2 + a1*b2*b3*x1*x2 + b1*b2*b3*x1*x2 + a3*c1*x1*x2 + a2*a3*c1*x1*x2 + a1*a3*b1*c1*x1*x2 + a2*a3*b1*c1*x1*x2 + a3*b2*c1*x1*x2 + a1*a3*b2*c1*x1*x2 + b3*c1*x1*x2 + b1*b3*c1*x1*x2 + b2*b3*c1*x1*x2 + b1*b2*b3*c1*x1*x2 + a1*a3*c2*x1*x2 + 2*a3*b1*c2*x1*x2 + a2*a3*b1*c2*x1*x2 + a1*a3*b2*c2*x1*x2 + a3*b1*b2*c2*x1*x2 + a2*b1*b3*c2*x1*x2 + a3*b1*b3*c2*x1*x2 + b2*b3*c2*x1*x2 + b1*b2*b3*c2*x1*x2 + a3*c1*c2*x1*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a3*b1*b2*c1*c2*x1*x2 + a1*c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + a1*b2*c3*x1*x2 + a2*b2*c3*x1*x2 + a3*b2*c3*x1*x2 + a2*b3*c3*x1*x2 + c1*c3*x1*x2 + b1*c1*c3*x1*x2 + b2*c1*c3*x1*x2 + b1*b2*c1*c3*x1*x2 + c2*c3*x1*x2 + b1*c2*c3*x1*x2 + b2*c2*c3*x1*x2 + b1*b2*c2*c3*x1*x2 + b3*c2*c3*x1*x2 + b2*b3*c2*c3*x1*x2 + (a1*a3*b1*x1*(1 + x1)*x2)/2 + (a1*a3*b2*x1*(1 + x1)*x2)/2 + (a3*b1*c1*x1*(1 + x1)*x2)/2 + (a3*b2*c1*x1*(1 + x1)*x2)/2 + (a3*b1*x1*x2*(1 + x2))/2 + (a1*a3*b1*x1*x2*(1 + x2))/2 + (a1*a3*b2*x1*x2*(1 + x2))/2 + (a3*b1*c1*x1*x2*(1 + x2))/2 + (a3*b2*c1*x1*x2*(1 + x2))/2 + 2*a2*x1*x3 + a2*a3*x1*x3 + a2*b1*x1*x3 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + a3*b2*x1*x3 + a2*a3*b2*x1*x3 + a1*b1*b2*x1*x3 + 2*a2*b1*b2*x1*x3 + a1*a2*b1*b2*x1*x3 + a2*b3*x1*x3 + a2*b2*b3*x1*x3 + a3*b2*b3*x1*x3 + a2*c2*x1*x3 + a3*c2*x1*x3 + b1*c2*x1*x3 + a1*b1*c2*x1*x3 + a2*b1*c2*x1*x3 + b2*c2*x1*x3 + a3*b2*c2*x1*x3 + 2*b1*b2*c2*x1*x3 + a1*b1*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + b1*b3*c2*x1*x3 + a3*b1*b3*c2*x1*x3 + a2*b2*b3*c2*x1*x3 + a3*b2*b3*c2*x1*x3 + a1*b1*x1*x2*x3 + a2*b1*x1*x2*x3 + a1*a2*b1*x1*x2*x3 + a1*b1*b2*x1*x2*x3 + a2*b1*b2*x1*x2*x3 + b1*c2*x1*x2*x3 + a1*b1*c2*x1*x2*x3 + b1*b2*c2*x1*x2*x3 + (b2*c1*x1*x3*(1 + x3))/2 + (b1*b2*c1*x1*x3*(1 + x3))/2 + (b1*c2*x1*x3*(1 + x3))/2 + (b2*c2*x1*x3*(1 + x3))/2 + (a1*a3*x2*x3*(1 + x3))/2 + (a2*b1*x2*x3*(1 + x3))/2 + (a3*c1*x2*x3*(1 + x3))/2 + (b1*c1*x2*x3*(1 + x3))/2 + (b1*b2*c1*x2*x3*(1 + x3))/2 + a3*c1*c2*y1 + a3*b1*c1*c2*y1 + b3*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a1*c2*c3*y1 + a2*c2*c3*y1 + a3*c2*c3*y1 + a1*b1*c2*c3*y1 + a2*b1*c2*c3*y1 + a3*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + a1*b3*c2*c3*y1 + a2*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a2*a3*x1*y1 + b2*b3*x1*y1 + a3*b2*c2*x1*y1 + 2*b3*c2*x1*y1 + b1*b3*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b1*c2*c3*x1*y1 + b2*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + (a3*b2*x1*(1 + x1)*y1)/2 + (b1*b3*c2*x1*(1 + x1)*y1)/2 + 2*a3*x2*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a3*b1*x2*y1 + a1*a3*b1*x2*y1 + a3*b2*x2*y1 + a3*b1*b2*x2*y1 + a1*a3*b1*b2*x2*y1 + b3*x2*y1 + a1*b3*x2*y1 + a2*b3*x2*y1 + a3*b3*x2*y1 + b1*b3*x2*y1 + a2*b1*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + b1*b2*b3*x2*y1 + a3*c1*x2*y1 + a2*a3*c1*x2*y1 + a1*a3*b1*c1*x2*y1 + a2*a3*b1*c1*x2*y1 + a1*a3*b2*c1*x2*y1 + a3*b1*b2*c1*x2*y1 + b3*c1*x2*y1 + b1*b3*c1*x2*y1 + b2*b3*c1*x2*y1 + b1*b2*b3*c1*x2*y1 + a3*c2*x2*y1 + a1*a3*c2*x2*y1 + 2*a3*b1*c2*x2*y1 + a2*a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + a3*b1*b2*c2*x2*y1 + a2*b1*b3*c2*x2*y1 + a3*b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + a3*c1*c2*x2*y1 + a3*b1*c1*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + a3*b1*b2*c1*c2*x2*y1 + c3*x2*y1 + a1*c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a1*b2*c3*x2*y1 + a2*b2*c3*x2*y1 + a3*b2*c3*x2*y1 + a2*b3*c3*x2*y1 + c1*c3*x2*y1 + b1*c1*c3*x2*y1 + b2*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + c2*c3*x2*y1 + b1*c2*c3*x2*y1 + b2*c2*c3*x2*y1 + b1*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a3*b1*x1*x2*y1 + a3*b2*x1*x2*y1 + (a3*x2*(1 + x2)*y1)/2 + (a3*b1*x2*(1 + x2)*y1)/2 + (a1*a3*b1*x2*(1 + x2)*y1)/2 + (a3*b2*x2*(1 + x2)*y1)/2 + (a1*a3*b2*x2*(1 + x2)*y1)/2 + (a3*b1*b2*x2*(1 + x2)*y1)/2 + (a3*b1*c1*x2*(1 + x2)*y1)/2 + (a3*b2*c1*x2*(1 + x2)*y1)/2 + (b3*c2*x2*(1 + x2)*y1)/2 + 2*a2*x3*y1 + a2*a3*x3*y1 + a2*b1*x3*y1 + 2*a2*b2*x3*y1 + a1*a2*b2*x3*y1 + a3*b2*x3*y1 + b1*b2*x3*y1 + a1*b1*b2*x3*y1 + a2*b1*b2*x3*y1 + a1*a2*b1*b2*x3*y1 + a2*b3*x3*y1 + a2*b2*b3*x3*y1 + a3*b2*b3*x3*y1 + c2*x3*y1 + a2*c2*x3*y1 + a1*b1*c2*x3*y1 + a2*b1*c2*x3*y1 + 2*b2*c2*x3*y1 + a2*b2*c2*x3*y1 + b1*b2*c2*x3*y1 + a1*b1*b2*c2*x3*y1 + 2*b3*c2*x3*y1 + a2*b3*c2*x3*y1 + b1*b3*c2*x3*y1 + a3*b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a3*b2*b3*c2*x3*y1 + b1*b2*x1*x3*y1 + a3*x2*x3*y1 + a2*a3*x2*x3*y1 + b1*x2*x3*y1 + a1*b1*x2*x3*y1 + a1*a2*b1*x2*x3*y1 + a2*b2*x2*x3*y1 + a3*b2*x2*x3*y1 + b1*b2*x2*x3*y1 + a1*b1*b2*x2*x3*y1 + a2*b1*b2*x2*x3*y1 + a2*c2*x2*x3*y1 + a3*c2*x2*x3*y1 + a1*b1*c2*x2*x3*y1 + b1*b2*c2*x2*x3*y1 + a2*b3*c2*x2*x3*y1 + b2*b3*c2*x2*x3*y1 + (b2*c1*x3*(1 + x3)*y1)/2 + (b1*b2*c1*x3*(1 + x3)*y1)/2 + (c2*x3*(1 + x3)*y1)/2 + (b1*c2*x3*(1 + x3)*y1)/2 + (b2*c2*x3*(1 + x3)*y1)/2 + (b3*c2*x3*(1 + x3)*y1)/2 + a2*b3*y1*(1 + y1) + (a3*c2*y1*(1 + y1))/2 + (a3*b1*c2*y1*(1 + y1))/2 + b3*c2*y1*(1 + y1) + (a1*b3*c2*y1*(1 + y1))/2 + (b1*b3*c2*y1*(1 + y1))/2 + b2*b3*c2*y1*(1 + y1) + (b3*c1*c2*y1*(1 + y1))/2 + (b1*b3*c1*c2*y1*(1 + y1))/2 + (a2*b2*c3*y1*(1 + y1))/2 + (a3*b2*c3*y1*(1 + y1))/2 + (a2*b3*c3*y1*(1 + y1))/2 + (c2*c3*y1*(1 + y1))/2 + (b1*c2*c3*y1*(1 + y1))/2 + (b2*c2*c3*y1*(1 + y1))/2 + (b2*b3*c2*c3*y1*(1 + y1))/2 + (a3*b2*x1*y1*(1 + y1))/2 + (b1*b3*c2*x1*y1*(1 + y1))/2 + (a1*a3*b1*x2*y1*(1 + y1))/2 + (a3*b2*x2*y1*(1 + y1))/2 + (a1*a3*b2*x2*y1*(1 + y1))/2 + (a3*b1*b2*x2*y1*(1 + y1))/2 + (a3*b1*c1*x2*y1*(1 + y1))/2 + (a3*b2*c1*x2*y1*(1 + y1))/2 + 2*a1*a3*x1*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b1*x1*y2 + a3*b2*x1*y2 + a3*b1*b2*x1*y2 + a1*a3*b1*b2*x1*y2 + b3*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a3*b3*x1*y2 + 2*b1*b3*x1*y2 + a2*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + b1*b2*b3*x1*y2 + 2*a3*c1*x1*y2 + a2*a3*c1*x1*y2 + 2*a3*b1*c1*x1*y2 + a1*a3*b1*c1*x1*y2 + a2*a3*b1*c1*x1*y2 + a1*a3*b2*c1*x1*y2 + b3*c1*x1*y2 + b1*b3*c1*x1*y2 + b2*b3*c1*x1*y2 + b1*b2*b3*c1*x1*y2 + a3*c2*x1*y2 + a1*a3*c2*x1*y2 + a3*b1*c2*x1*y2 + a2*a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b2*c2*x1*y2 + a3*b1*b2*c2*x1*y2 + b3*c2*x1*y2 + b1*b3*c2*x1*y2 + a2*b1*b3*c2*x1*y2 + a3*b1*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + b1*b2*b3*c2*x1*y2 + a3*c1*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a3*b1*b2*c1*c2*x1*y2 + a1*c3*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + a1*b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a2*b3*c3*x1*y2 + c1*c3*x1*y2 + b1*c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + c2*c3*x1*y2 + b1*c2*c3*x1*y2 + b2*c2*c3*x1*y2 + b1*b2*c2*c3*x1*y2 + b3*c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + (a3*b1*x1*(1 + x1)*y2)/2 + (a1*a3*b1*x1*(1 + x1)*y2)/2 + (a3*b2*x1*(1 + x1)*y2)/2 + (a1*a3*b2*x1*(1 + x1)*y2)/2 + (a3*b1*c1*x1*(1 + x1)*y2)/2 + (a3*b2*c1*x1*(1 + x1)*y2)/2 + a3*b2*x1*x2*y2 + (a3*b1*b2*x2*(1 + x2)*y2)/2 + a2*b1*x1*x3*y2 + a1*a2*b1*x1*x3*y2 + a2*b1*b2*x1*x3*y2 + b1*c2*x1*x3*y2 + a1*b1*c2*x1*x3*y2 + b1*b2*c2*x1*x3*y2 + (a1*a3*x3*(1 + x3)*y2)/2 + (b1*x3*(1 + x3)*y2)/2 + (a2*b1*x3*(1 + x3)*y2)/2 + (a3*c1*x3*(1 + x3)*y2)/2 + (b1*c1*x3*(1 + x3)*y2)/2 + (b1*b2*c1*x3*(1 + x3)*y2)/2 + 2*a3*y1*y2 + 2*a1*a3*y1*y2 + a1*a2*a3*y1*y2 + a1*a3*b1*y1*y2 + a3*b2*y1*y2 + a1*a3*b1*b2*y1*y2 + 2*b3*y1*y2 + a1*b3*y1*y2 + a2*b3*y1*y2 + a3*b3*y1*y2 + 2*b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a1*b2*b3*y1*y2 + b1*b2*b3*y1*y2 + 2*a3*c1*y1*y2 + a2*a3*c1*y1*y2 + 2*a3*b1*c1*y1*y2 + a1*a3*b1*c1*y1*y2 + a2*a3*b1*c1*y1*y2 + a3*b2*c1*y1*y2 + a1*a3*b2*c1*y1*y2 + a3*b1*b2*c1*y1*y2 + b3*c1*y1*y2 + b1*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + a1*a3*c2*y1*y2 + a3*b1*c2*y1*y2 + a2*a3*b1*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + a3*b1*b2*c2*y1*y2 + b3*c2*y1*y2 + b1*b3*c2*y1*y2 + a2*b1*b3*c2*y1*y2 + a3*b1*b3*c2*y1*y2 + b2*b3*c2*y1*y2 + b1*b2*b3*c2*y1*y2 + a3*c1*c2*y1*y2 + a3*b1*c1*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + a3*b1*b2*c1*c2*y1*y2 + c3*y1*y2 + a1*c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + b2*c3*y1*y2 + a1*b2*c3*y1*y2 + a2*b2*c3*y1*y2 + a3*b2*c3*y1*y2 + b3*c3*y1*y2 + a2*b3*c3*y1*y2 + c1*c3*y1*y2 + b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + c2*c3*y1*y2 + b1*c2*c3*y1*y2 + b2*c2*c3*y1*y2 + b1*b2*c2*c3*y1*y2 + b3*c2*c3*y1*y2 + b2*b3*c2*c3*y1*y2 + a3*b1*x1*y1*y2 + a3*b2*x1*y1*y2 + a3*b2*x2*y1*y2 + a2*a3*x3*y1*y2 + a1*a2*b1*x3*y1*y2 + a2*b1*b2*x3*y1*y2 + c2*x3*y1*y2 + a2*c2*x3*y1*y2 + a3*c2*x3*y1*y2 + a1*b1*c2*x3*y1*y2 + b1*b2*c2*x3*y1*y2 + b3*c2*x3*y1*y2 + a2*b3*c2*x3*y1*y2 + (a3*b1*y1*(1 + y1)*y2)/2 + (a1*a3*b1*y1*(1 + y1)*y2)/2 + (a1*a3*b2*y1*(1 + y1)*y2)/2 + (a3*b1*b2*y1*(1 + y1)*y2)/2 + (a3*b1*c1*y1*(1 + y1)*y2)/2 + (a3*b2*c1*y1*(1 + y1)*y2)/2 + (a1*a3*b1*x1*y2*(1 + y2))/2 + (a3*b2*x1*y2*(1 + y2))/2 + (a1*a3*b2*x1*y2*(1 + y2))/2 + (a3*b1*c1*x1*y2*(1 + y2))/2 + (a3*b2*c1*x1*y2*(1 + y2))/2 + (a3*b1*b2*x2*y2*(1 + y2))/2 + (a3*y1*y2*(1 + y2))/2 + (a1*a3*b1*y1*y2*(1 + y2))/2 + (a1*a3*b2*y1*y2*(1 + y2))/2 + (a3*b1*b2*y1*y2*(1 + y2))/2 + (a3*b1*c1*y1*y2*(1 + y2))/2 + (a3*b2*c1*y1*y2*(1 + y2))/2 + (b3*c2*y1*y2*(1 + y2))/2 + a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + 2*b2*x1*y3 + a1*b2*x1*y3 + 2*a2*b2*x1*y3 + a1*a2*b2*x1*y3 + 2*a3*b2*x1*y3 + a2*a3*b2*x1*y3 + 2*b1*b2*x1*y3 + 2*a2*b1*b2*x1*y3 + a1*a2*b1*b2*x1*y3 + a2*b3*x1*y3 + 2*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a3*b2*b3*x1*y3 + a2*c2*x1*y3 + a3*c2*x1*y3 + a1*b1*c2*x1*y3 + a2*b1*c2*x1*y3 + 2*b2*c2*x1*y3 + a3*b2*c2*x1*y3 + 2*b1*b2*c2*x1*y3 + a1*b1*b2*c2*x1*y3 + 2*b3*c2*x1*y3 + a2*b3*c2*x1*y3 + 2*b1*b3*c2*x1*y3 + a3*b1*b3*c2*x1*y3 + a2*b2*b3*c2*x1*y3 + a3*b2*b3*c2*x1*y3 + b1*x1*x2*y3 + a2*b1*x1*x2*y3 + a1*a2*b1*x1*x2*y3 + b1*b2*x1*x2*y3 + a1*b1*b2*x1*x2*y3 + a2*b1*b2*x1*x2*y3 + b1*c2*x1*x2*y3 + a1*b1*c2*x1*x2*y3 + b1*b2*c2*x1*x2*y3 + a2*b1*x1*x3*y3 + a1*b2*x1*x3*y3 + a2*b2*x1*x3*y3 + a1*b1*b2*x1*x3*y3 + b1*c2*x1*x3*y3 + b2*c2*x1*x3*y3 + a2*y1*y3 + a2*a3*y1*y3 + a2*b1*y1*y3 + 2*b2*y1*y3 + a1*b2*y1*y3 + 2*a2*b2*y1*y3 + a1*a2*b2*y1*y3 + a3*b2*y1*y3 + 2*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a1*a2*b1*b2*y1*y3 + a2*b3*y1*y3 + 2*b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a3*b2*b3*y1*y3 + a2*c2*y1*y3 + b1*c2*y1*y3 + a1*b1*c2*y1*y3 + a2*b1*c2*y1*y3 + b2*c2*y1*y3 + a2*b2*c2*y1*y3 + b1*b2*c2*y1*y3 + a1*b1*b2*c2*y1*y3 + b3*c2*y1*y3 + a2*b3*c2*y1*y3 + 2*b1*b3*c2*y1*y3 + a3*b1*b3*c2*y1*y3 + a3*b2*b3*c2*y1*y3 + b1*b2*x1*y1*y3 + a2*x2*y1*y3 + a2*a3*x2*y1*y3 + b1*x2*y1*y3 + a1*a2*b1*x2*y1*y3 + a2*b2*x2*y1*y3 + a3*b2*x2*y1*y3 + a1*b1*b2*x2*y1*y3 + a2*b1*b2*x2*y1*y3 + a2*c2*x2*y1*y3 + a3*c2*x2*y1*y3 + a1*b1*c2*x2*y1*y3 + b1*b2*c2*x2*y1*y3 + b3*c2*x2*y1*y3 + a2*b3*c2*x2*y1*y3 + b2*b3*c2*x2*y1*y3 + a2*b1*x3*y1*y3 + b2*x3*y1*y3 + a1*b2*x3*y1*y3 + a3*b2*x3*y1*y3 + b1*b2*x3*y1*y3 + a1*b1*b2*x3*y1*y3 + b1*c2*x3*y1*y3 + b2*c2*x3*y1*y3 + b2*b3*c2*x3*y1*y3 + b1*x1*y2*y3 + a1*b1*x1*y2*y3 + a2*b1*x1*y2*y3 + a1*a2*b1*x1*y2*y3 + b1*b2*x1*y2*y3 + a2*b1*b2*x1*y2*y3 + b1*c2*x1*y2*y3 + a1*b1*c2*x1*y2*y3 + b1*b2*c2*x1*y2*y3 + y1*y2*y3 + a2*y1*y2*y3 + a3*y1*y2*y3 + a2*a3*y1*y2*y3 + a1*b1*y1*y2*y3 + a1*a2*b1*y1*y2*y3 + b1*b2*y1*y2*y3 + a2*b1*b2*y1*y2*y3 + c2*y1*y2*y3 + a2*c2*y1*y2*y3 + a3*c2*y1*y2*y3 + a1*b1*c2*y1*y2*y3 + b1*b2*c2*y1*y2*y3 + a2*b3*c2*y1*y2*y3 + (b2*c1*x1*y3*(1 + y3))/2 + (b1*b2*c1*x1*y3*(1 + y3))/2 + (b1*c2*x1*y3*(1 + y3))/2 + (b2*c2*x1*y3*(1 + y3))/2 + (a1*x2*y3*(1 + y3))/2 + (a1*a3*x2*y3*(1 + y3))/2 + (b1*x2*y3*(1 + y3))/2 + (a2*b1*x2*y3*(1 + y3))/2 + (c1*x2*y3*(1 + y3))/2 + (a3*c1*x2*y3*(1 + y3))/2 + (b1*c1*x2*y3*(1 + y3))/2 + (b1*b2*c1*x2*y3*(1 + y3))/2 + (b2*c1*y1*y3*(1 + y3))/2 + (b1*b2*c1*y1*y3*(1 + y3))/2 + (c2*y1*y3*(1 + y3))/2 + (b1*c2*y1*y3*(1 + y3))/2 + (b2*c2*y1*y3*(1 + y3))/2 + (b3*c2*y1*y3*(1 + y3))/2 + (a1*y2*y3*(1 + y3))/2 + (a1*a3*y2*y3*(1 + y3))/2 + (a2*b1*y2*y3*(1 + y3))/2 + (c1*y2*y3*(1 + y3))/2 + (a3*c1*y2*y3*(1 + y3))/2 + (b1*c1*y2*y3*(1 + y3))/2 + (b1*b2*c1*y2*y3*(1 + y3))/2 + a3*b1*c1*c2*z1 + a1*b3*c1*c2*z1 + a2*b2*c1*c3*z1 + a3*b2*c1*c3*z1 + a2*b3*c1*c3*z1 + b1*c2*c3*z1 + a1*b1*c2*c3*z1 + a2*b1*c2*c3*z1 + a3*b1*c2*c3*z1 + b2*c2*c3*z1 + a1*b2*c2*c3*z1 + a2*b2*c2*c3*z1 + a3*b2*c2*c3*z1 + a1*b3*c2*c3*z1 + a2*b3*c2*c3*z1 + b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + b2*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + a2*b3*x1*z1 + b2*b3*x1*z1 + a2*a3*c1*x1*z1 + a3*b2*c1*x1*z1 + b2*b3*c1*x1*z1 + a3*c2*x1*z1 + a1*a3*c2*x1*z1 + a2*a3*c2*x1*z1 + a3*b2*c2*x1*z1 + b3*c2*x1*z1 + 2*a1*b3*c2*x1*z1 + a2*b3*c2*x1*z1 + a3*b3*c2*x1*z1 + b2*b3*c2*x1*z1 + a3*b2*c1*c2*x1*z1 + a1*b3*c1*c2*x1*z1 + a2*b2*c3*x1*z1 + a3*b2*c3*x1*z1 + a2*b3*c3*x1*z1 + b2*c1*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + a3*x2*z1 + a1*a2*a3*x2*z1 + a1*a3*b1*x2*z1 + a3*b2*x2*z1 + a1*a3*b2*x2*z1 + a1*a3*b1*b2*x2*z1 + b3*x2*z1 + a1*b3*x2*z1 + 2*a2*b3*x2*z1 + a3*b3*x2*z1 + b1*b3*x2*z1 + a2*b1*b3*x2*z1 + b2*b3*x2*z1 + a1*b2*b3*x2*z1 + b1*b2*b3*x2*z1 + a3*c1*x2*z1 + a2*a3*b1*c1*x2*z1 + b1*b3*c1*x2*z1 + b1*b2*b3*c1*x2*z1 + 2*a3*c2*x2*z1 + a1*a3*c2*x2*z1 + a2*a3*c2*x2*z1 + 2*a3*b1*c2*x2*z1 + a2*a3*b1*c2*x2*z1 + a3*b2*c2*x2*z1 + a1*a3*b2*c2*x2*z1 + a3*b1*b2*c2*x2*z1 + a2*b3*c2*x2*z1 + a3*b3*c2*x2*z1 + a2*b1*b3*c2*x2*z1 + a3*b1*b3*c2*x2*z1 + b1*b2*b3*c2*x2*z1 + a3*b1*c1*c2*x2*z1 + a3*b1*b2*c1*c2*x2*z1 + a1*c3*x2*z1 + a2*c3*x2*z1 + a3*c3*x2*z1 + a1*b2*c3*x2*z1 + a2*b2*c3*x2*z1 + a3*b2*c3*x2*z1 + a2*b3*c3*x2*z1 + b1*c1*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b1*c2*c3*x2*z1 + b1*b2*c2*c3*x2*z1 + b3*c2*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + a3*b1*x1*x2*z1 + a1*a3*b1*x1*x2*z1 + a1*a3*b2*x1*x2*z1 + a3*b1*c1*x1*x2*z1 + a3*b2*c1*x1*x2*z1 + a2*x3*z1 + a2*a3*x3*z1 + a2*b1*x3*z1 + a1*b2*x3*z1 + a1*a2*b2*x3*z1 + a3*b2*x3*z1 + a2*a3*b2*x3*z1 + a1*b1*b2*x3*z1 + 2*a2*b1*b2*x3*z1 + a1*a2*b1*b2*x3*z1 + a2*b3*x3*z1 + a2*b2*b3*x3*z1 + a3*b2*b3*x3*z1 + a2*c2*x3*z1 + a3*c2*x3*z1 + b1*c2*x3*z1 + a1*b1*c2*x3*z1 + a2*b1*c2*x3*z1 + a3*b2*c2*x3*z1 + 2*b1*b2*c2*x3*z1 + a1*b1*b2*c2*x3*z1 + a2*b3*c2*x3*z1 + a3*b3*c2*x3*z1 + b1*b3*c2*x3*z1 + a3*b1*b3*c2*x3*z1 + a2*b2*b3*c2*x3*z1 + a3*b2*b3*c2*x3*z1 + a1*b2*x1*x3*z1 + a2*b2*x1*x3*z1 + b2*c1*x1*x3*z1 + b2*c2*x1*x3*z1 + a2*x2*x3*z1 + a1*b1*x2*x3*z1 + a2*b1*x2*x3*z1 + a1*a2*b1*x2*x3*z1 + a2*b2*x2*x3*z1 + a1*b1*b2*x2*x3*z1 + a2*b1*b2*x2*x3*z1 + c2*x2*x3*z1 + b1*c2*x2*x3*z1 + a1*b1*c2*x2*x3*z1 + b2*c2*x2*x3*z1 + b1*b2*c2*x2*x3*z1 + (b2*c1*x3*(1 + x3)*z1)/2 + (b1*b2*c1*x3*(1 + x3)*z1)/2 + (b1*c2*x3*(1 + x3)*z1)/2 + (b2*c2*x3*(1 + x3)*z1)/2 + a2*a3*y1*z1 + a3*b2*y1*z1 + a2*b3*y1*z1 + a2*a3*c1*y1*z1 + a3*b2*c1*y1*z1 + b2*b3*c1*y1*z1 + a3*c2*y1*z1 + a1*a3*c2*y1*z1 + a2*a3*c2*y1*z1 + a3*b1*c2*y1*z1 + 2*b3*c2*y1*z1 + a1*b3*c2*y1*z1 + a2*b3*c2*y1*z1 + a3*b3*c2*y1*z1 + b1*b3*c2*y1*z1 + b2*b3*c2*y1*z1 + a3*b2*c1*c2*y1*z1 + a1*b3*c1*c2*y1*z1 + b1*b3*c1*c2*y1*z1 + b2*c3*y1*z1 + a2*b2*c3*y1*z1 + a3*b2*c3*y1*z1 + a2*b3*c3*y1*z1 + b2*c1*c3*y1*z1 + b2*b3*c2*c3*y1*z1 + a3*b2*x1*y1*z1 + b1*b3*c2*x1*y1*z1 + a3*b1*x2*y1*z1 + a1*a3*b1*x2*y1*z1 + a3*b2*x2*y1*z1 + a1*a3*b2*x2*y1*z1 + a3*b1*b2*x2*y1*z1 + a3*b1*c1*x2*y1*z1 + a3*b2*c1*x2*y1*z1 + b2*x3*y1*z1 + a1*b2*x3*y1*z1 + a2*b2*x3*y1*z1 + b1*b2*x3*y1*z1 + b2*c1*x3*y1*z1 + b2*c2*x3*y1*z1 + a3*y2*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b1*y2*z1 + a1*a3*b1*y2*z1 + 2*a3*b2*y2*z1 + a1*a3*b2*y2*z1 + a3*b1*b2*y2*z1 + a1*a3*b1*b2*y2*z1 + 3*b3*y2*z1 + a1*b3*y2*z1 + 2*a2*b3*y2*z1 + a3*b3*y2*z1 + 2*b1*b3*y2*z1 + a2*b1*b3*y2*z1 + a1*b2*b3*y2*z1 + b1*b2*b3*y2*z1 + a3*c1*y2*z1 + a3*b1*c1*y2*z1 + a2*a3*b1*c1*y2*z1 + b1*b3*c1*y2*z1 + b1*b2*b3*c1*y2*z1 + 2*a3*c2*y2*z1 + a1*a3*c2*y2*z1 + a2*a3*c2*y2*z1 + a3*b1*c2*y2*z1 + a2*a3*b1*c2*y2*z1 + a1*a3*b2*c2*y2*z1 + a3*b1*b2*c2*y2*z1 + a2*b3*c2*y2*z1 + a3*b3*c2*y2*z1 + b1*b3*c2*y2*z1 + a2*b1*b3*c2*y2*z1 + a3*b1*b3*c2*y2*z1 + b1*b2*b3*c2*y2*z1 + a3*b1*c1*c2*y2*z1 + a3*b1*b2*c1*c2*y2*z1 + a1*c3*y2*z1 + a2*c3*y2*z1 + a3*c3*y2*z1 + a1*b2*c3*y2*z1 + a2*b2*c3*y2*z1 + a3*b2*c3*y2*z1 + b3*c3*y2*z1 + a2*b3*c3*y2*z1 + b1*c1*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + b1*c2*c3*y2*z1 + b1*b2*c2*c3*y2*z1 + b3*c2*c3*y2*z1 + b2*b3*c2*c3*y2*z1 + a1*a3*b1*x1*y2*z1 + a3*b2*x1*y2*z1 + a1*a3*b2*x1*y2*z1 + a3*b1*c1*x1*y2*z1 + a3*b2*c1*x1*y2*z1 + a3*b2*x2*y2*z1 + a3*b1*b2*x2*y2*z1 + a2*b1*x3*y2*z1 + a1*a2*b1*x3*y2*z1 + a2*b2*x3*y2*z1 + a2*b1*b2*x3*y2*z1 + b1*c2*x3*y2*z1 + a1*b1*c2*x3*y2*z1 + b2*c2*x3*y2*z1 + b1*b2*c2*x3*y2*z1 + a1*a3*b1*y1*y2*z1 + a1*a3*b2*y1*y2*z1 + a3*b1*b2*y1*y2*z1 + a3*b1*c1*y1*y2*z1 + a3*b2*c1*y1*y2*z1 + a2*a3*y3*z1 + a2*b1*y3*z1 + b2*y3*z1 + a2*b2*y3*z1 + a1*a2*b2*y3*z1 + 2*a3*b2*y3*z1 + a2*a3*b2*y3*z1 + 2*b1*b2*y3*z1 + 2*a2*b1*b2*y3*z1 + a1*a2*b1*b2*y3*z1 + a2*b3*y3*z1 + 2*b2*b3*y3*z1 + a2*b2*b3*y3*z1 + a3*b2*b3*y3*z1 + a2*c2*y3*z1 + a3*c2*y3*z1 + a1*b1*c2*y3*z1 + a2*b1*c2*y3*z1 + b2*c2*y3*z1 + a3*b2*c2*y3*z1 + 2*b1*b2*c2*y3*z1 + a1*b1*b2*c2*y3*z1 + a2*b3*c2*y3*z1 + a3*b3*c2*y3*z1 + 2*b1*b3*c2*y3*z1 + a3*b1*b3*c2*y3*z1 + a2*b2*b3*c2*y3*z1 + a3*b2*b3*c2*y3*z1 + b2*x1*y3*z1 + a1*b2*x1*y3*z1 + a2*b2*x1*y3*z1 + b2*c1*x1*y3*z1 + b2*c2*x1*y3*z1 + x2*y3*z1 + a2*x2*y3*z1 + b1*x2*y3*z1 + a2*b1*x2*y3*z1 + a1*a2*b1*x2*y3*z1 + b2*x2*y3*z1 + a2*b2*x2*y3*z1 + b1*b2*x2*y3*z1 + a1*b1*b2*x2*y3*z1 + a2*b1*b2*x2*y3*z1 + c2*x2*y3*z1 + b1*c2*x2*y3*z1 + a1*b1*c2*x2*y3*z1 + b2*c2*x2*y3*z1 + b1*b2*c2*x2*y3*z1 + a2*x3*y3*z1 + a2*b1*x3*y3*z1 + a1*b2*x3*y3*z1 + a2*b2*x3*y3*z1 + a1*b1*b2*x3*y3*z1 + c2*x3*y3*z1 + b1*c2*x3*y3*z1 + b2*c2*x3*y3*z1 + a1*b2*y1*y3*z1 + a2*b2*y1*y3*z1 + b1*b2*y1*y3*z1 + b2*c1*y1*y3*z1 + b2*c2*y1*y3*z1 + b1*y2*y3*z1 + a1*b1*y2*y3*z1 + a2*b1*y2*y3*z1 + a1*a2*b1*y2*y3*z1 + b2*y2*y3*z1 + a2*b2*y2*y3*z1 + b1*b2*y2*y3*z1 + a2*b1*b2*y2*y3*z1 + b1*c2*y2*y3*z1 + a1*b1*c2*y2*y3*z1 + b2*c2*y2*y3*z1 + b1*b2*c2*y2*y3*z1 + (b2*c1*y3*(1 + y3)*z1)/2 + (b1*b2*c1*y3*(1 + y3)*z1)/2 + (b1*c2*y3*(1 + y3)*z1)/2 + (b2*c2*y3*(1 + y3)*z1)/2 + a2*b3*z1*(1 + z1) + (a3*b1*c2*z1*(1 + z1))/2 + (a1*b3*c2*z1*(1 + z1))/2 + (b1*b3*c2*z1*(1 + z1))/2 + b2*b3*c2*z1*(1 + z1) + (b1*b3*c1*c2*z1*(1 + z1))/2 + (a2*b2*c3*z1*(1 + z1))/2 + (a3*b2*c3*z1*(1 + z1))/2 + (a2*b3*c3*z1*(1 + z1))/2 + (b1*c2*c3*z1*(1 + z1))/2 + (b2*c2*c3*z1*(1 + z1))/2 + (b2*b3*c2*c3*z1*(1 + z1))/2 + (b3*c2*x1*z1*(1 + z1))/2 + (a3*x2*z1*(1 + z1))/2 + (a3*b1*x2*z1*(1 + z1))/2 + (b3*c2*y1*z1*(1 + z1))/2 + (a3*y2*z1*(1 + z1))/2 + (a3*b1*y2*z1*(1 + z1))/2 + a1*a3*x1*z2 + a1*a2*a3*x1*z2 + a1*a3*b2*x1*z2 + a1*a3*b1*b2*x1*z2 + a2*b3*x1*z2 + a2*b1*b3*x1*z2 + b2*b3*x1*z2 + a1*b2*b3*x1*z2 + b1*b2*b3*x1*z2 + a3*c1*x1*z2 + a2*a3*c1*x1*z2 + a3*b1*c1*x1*z2 + a1*a3*b1*c1*x1*z2 + a2*a3*b1*c1*x1*z2 + a3*b2*c1*x1*z2 + a1*a3*b2*c1*x1*z2 + a3*b1*b2*c1*x1*z2 + b2*b3*c1*x1*z2 + b1*b2*b3*c1*x1*z2 + a3*c2*x1*z2 + a2*a3*c2*x1*z2 + a3*b1*c2*x1*z2 + a2*a3*b1*c2*x1*z2 + a3*b2*c2*x1*z2 + a1*a3*b2*c2*x1*z2 + a3*b1*b2*c2*x1*z2 + b3*c2*x1*z2 + a2*b3*c2*x1*z2 + a3*b3*c2*x1*z2 + b1*b3*c2*x1*z2 + a2*b1*b3*c2*x1*z2 + a3*b1*b3*c2*x1*z2 + b2*b3*c2*x1*z2 + b1*b2*b3*c2*x1*z2 + a3*b2*c1*c2*x1*z2 + a3*b1*b2*c1*c2*x1*z2 + a1*b2*c3*x1*z2 + a2*b2*c3*x1*z2 + a3*b2*c3*x1*z2 + a2*b3*c3*x1*z2 + b2*c1*c3*x1*z2 + b1*b2*c1*c3*x1*z2 + b1*b2*c2*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + (a1*a3*b1*x1*(1 + x1)*z2)/2 + (a1*a3*b2*x1*(1 + x1)*z2)/2 + a1*a3*b1*x1*x2*z2 + a1*a3*b2*x1*x2*z2 + a3*b1*c1*x1*x2*z2 + a1*a3*b1*c1*x1*x2*z2 + a3*b2*c1*x1*x2*z2 + a1*a3*b2*c1*x1*x2*z2 + (a3*b1*x2*(1 + x2)*z2)/2 + (a1*a3*b1*x2*(1 + x2)*z2)/2 + (a1*a3*b2*x2*(1 + x2)*z2)/2 + (a3*b1*c1*x2*(1 + x2)*z2)/2 + (a3*b1*b2*c1*x2*(1 + x2)*z2)/2 + a1*b2*x1*x3*z2 + a2*b2*x1*x3*z2 + a1*b1*b2*x1*x3*z2 + a2*b1*b2*x1*x3*z2 + b2*c2*x1*x3*z2 + b1*b2*c2*x1*x3*z2 + (a1*a3*x3*(1 + x3)*z2)/2 + (a2*b1*x3*(1 + x3)*z2)/2 + (b2*c1*x3*(1 + x3)*z2)/2 + (b1*b2*c1*x3*(1 + x3)*z2)/2 + a3*y1*z2 + a1*a3*y1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a3*b2*y1*z2 + a1*a3*b2*y1*z2 + a3*b1*b2*y1*z2 + a1*a3*b1*b2*y1*z2 + a2*b3*y1*z2 + a2*b1*b3*y1*z2 + a1*b2*b3*y1*z2 + b1*b2*b3*y1*z2 + a3*c1*y1*z2 + a2*a3*c1*y1*z2 + a1*a3*b1*c1*y1*z2 + a2*a3*b1*c1*y1*z2 + a3*b2*c1*y1*z2 + a1*a3*b2*c1*y1*z2 + b2*b3*c1*y1*z2 + b1*b2*b3*c1*y1*z2 + a3*c2*y1*z2 + a2*a3*c2*y1*z2 + a3*b1*c2*y1*z2 + a2*a3*b1*c2*y1*z2 + a1*a3*b2*c2*y1*z2 + a3*b1*b2*c2*y1*z2 + b3*c2*y1*z2 + a2*b3*c2*y1*z2 + a3*b3*c2*y1*z2 + b1*b3*c2*y1*z2 + a2*b1*b3*c2*y1*z2 + a3*b1*b3*c2*y1*z2 + b2*b3*c2*y1*z2 + b1*b2*b3*c2*y1*z2 + a3*b2*c1*c2*y1*z2 + a3*b1*b2*c1*c2*y1*z2 + b2*c3*y1*z2 + a1*b2*c3*y1*z2 + a2*b2*c3*y1*z2 + a3*b2*c3*y1*z2 + a2*b3*c3*y1*z2 + b2*c1*c3*y1*z2 + b1*b2*c1*c3*y1*z2 + b1*b2*c2*c3*y1*z2 + b2*b3*c2*c3*y1*z2 + a3*b1*x1*y1*z2 + a3*b2*x1*y1*z2 + a3*b1*x2*y1*z2 + a3*b2*x2*y1*z2 + a1*a3*b1*c1*x2*y1*z2 + a3*b2*c1*x2*y1*z2 + a1*a3*b2*c1*x2*y1*z2 + a3*b1*b2*c1*x2*y1*z2 + b2*x3*y1*z2 + a1*b2*x3*y1*z2 + a3*b2*x3*y1*z2 + b1*b2*x3*y1*z2 + a1*b1*b2*x3*y1*z2 + a2*b1*b2*x3*y1*z2 + b2*c2*x3*y1*z2 + b1*b2*c2*x3*y1*z2 + b2*b3*c2*x3*y1*z2 + (a3*b1*y1*(1 + y1)*z2)/2 + (a1*a3*b1*y1*(1 + y1)*z2)/2 + (a1*a3*b2*y1*(1 + y1)*z2)/2 + (a3*b1*b2*y1*(1 + y1)*z2)/2 + a3*b1*x1*y2*z2 + a3*b2*x1*y2*z2 + a3*b1*c1*x1*y2*z2 + a1*a3*b1*c1*x1*y2*z2 + a3*b2*c1*x1*y2*z2 + a1*a3*b2*c1*x1*y2*z2 + a3*b1*y1*y2*z2 + a1*a3*b1*y1*y2*z2 + a1*a3*b2*y1*y2*z2 + a3*b1*b2*y1*y2*z2 + a1*a3*b1*c1*y1*y2*z2 + a3*b2*c1*y1*y2*z2 + a1*a3*b2*c1*y1*y2*z2 + a3*b1*b2*c1*y1*y2*z2 + (a1*a3*b1*y2*(1 + y2)*z2)/2 + (a1*a3*b2*y2*(1 + y2)*z2)/2 + (a3*b1*b2*y2*(1 + y2)*z2)/2 + (a3*b1*c1*y2*(1 + y2)*z2)/2 + (a3*b1*b2*c1*y2*(1 + y2)*z2)/2 + b2*x1*y3*z2 + a1*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + b1*b2*x1*y3*z2 + a1*b1*b2*x1*y3*z2 + a2*b1*b2*x1*y3*z2 + b2*c2*x1*y3*z2 + b1*b2*c2*x1*y3*z2 + a1*b2*y1*y3*z2 + a3*b2*y1*y3*z2 + a1*b1*b2*y1*y3*z2 + a2*b1*b2*y1*y3*z2 + b2*c2*y1*y3*z2 + b1*b2*c2*y1*y3*z2 + b2*b3*c2*y1*y3*z2 + (a1*y3*(1 + y3)*z2)/2 + (a1*a3*y3*(1 + y3)*z2)/2 + (b1*y3*(1 + y3)*z2)/2 + (a2*b1*y3*(1 + y3)*z2)/2 + (b2*c1*y3*(1 + y3)*z2)/2 + (b1*b2*c1*y3*(1 + y3)*z2)/2 + a1*a3*z1*z2 + a1*a2*a3*z1*z2 + a1*a3*b1*b2*z1*z2 + a2*b1*b3*z1*z2 + a1*b2*b3*z1*z2 + b1*b2*b3*z1*z2 + a2*a3*b1*c1*z1*z2 + a3*b1*b2*c1*z1*z2 + b1*b2*b3*c1*z1*z2 + a3*b1*c2*z1*z2 + a2*a3*b1*c2*z1*z2 + a1*a3*b2*c2*z1*z2 + a3*b1*b2*c2*z1*z2 + b1*b3*c2*z1*z2 + a2*b1*b3*c2*z1*z2 + a3*b1*b3*c2*z1*z2 + b1*b2*b3*c2*z1*z2 + a3*b1*b2*c1*c2*z1*z2 + a1*b2*c3*z1*z2 + a2*b2*c3*z1*z2 + a3*b2*c3*z1*z2 + a2*b3*c3*z1*z2 + b1*b2*c1*c3*z1*z2 + b2*c2*c3*z1*z2 + b1*b2*c2*c3*z1*z2 + b2*b3*c2*c3*z1*z2 + a3*x1*z1*z2 + a3*b1*x1*z1*z2 + a1*a3*b1*x1*z1*z2 + a1*a3*b2*x1*z1*z2 + a3*x2*z1*z2 + a1*a3*b1*x2*z1*z2 + a1*a3*b2*x2*z1*z2 + a3*b1*c1*x2*z1*z2 + a3*b1*b2*c1*x2*z1*z2 + a1*b2*x3*z1*z2 + a1*b1*b2*x3*z1*z2 + a2*b1*b2*x3*z1*z2 + b1*b2*c2*x3*z1*z2 + a3*y1*z1*z2 + a1*a3*b1*y1*z1*z2 + a1*a3*b2*y1*z1*z2 + a3*b1*b2*y1*z1*z2 + a3*y2*z1*z2 + a3*b1*y2*z1*z2 + a1*a3*b1*y2*z1*z2 + a1*a3*b2*y2*z1*z2 + a3*b1*b2*y2*z1*z2 + a3*b1*c1*y2*z1*z2 + a3*b1*b2*c1*y2*z1*z2 + a1*b2*y3*z1*z2 + b1*b2*y3*z1*z2 + a1*b1*b2*y3*z1*z2 + a2*b1*b2*y3*z1*z2 + b1*b2*c2*y3*z1*z2 + (a3*b1*z1*(1 + z1)*z2)/2 + (a3*x1*z2*(1 + z2))/2 + (a3*b1*x1*z2*(1 + z2))/2 + (a1*a3*b1*x1*z2*(1 + z2))/2 + (a1*a3*b2*x1*z2*(1 + z2))/2 + (a3*b1*x2*z2*(1 + z2))/2 + (a1*a3*b1*x2*z2*(1 + z2))/2 + (a1*a3*b2*x2*z2*(1 + z2))/2 + (a3*b1*c1*x2*z2*(1 + z2))/2 + (a3*b1*b2*c1*x2*z2*(1 + z2))/2 + a3*y1*z2*(1 + z2) + (a1*a3*b1*y1*z2*(1 + z2))/2 + (a1*a3*b2*y1*z2*(1 + z2))/2 + (a3*b1*b2*y1*z2*(1 + z2))/2 + (b3*c2*y1*z2*(1 + z2))/2 + (a1*a3*b1*y2*z2*(1 + z2))/2 + (a1*a3*b2*y2*z2*(1 + z2))/2 + (a3*b1*b2*y2*z2*(1 + z2))/2 + (a3*b1*c1*y2*z2*(1 + z2))/2 + (a3*b1*b2*c1*y2*z2*(1 + z2))/2 + b3*(a1*x2 + b1*x2 + a1*b2*x2 + c1*x2 + b2*c1*x2 + b2*y1 + a1*y2 + b1*y2 + a1*b2*y2 + c1*y2 + b2*c1*y2 + x2*z1 + b1*x2*z1 + y2*z1 + b1*y2*z1 + b1*z2 + a1*b2*z2 + b1*x2*z2 + b1*y2*z2 + b1*z1*z2) + a2*x1*z3 + a1*a2*x1*z3 + a1*a2*b1*x1*z3 + a1*b2*x1*z3 + a2*b2*x1*z3 + a1*a2*b2*x1*z3 + a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + 2*a2*b1*b2*x1*z3 + a1*a2*b1*b2*x1*z3 + a2*b2*b3*x1*z3 + a3*b2*b3*x1*z3 + b2*c1*x1*z3 + b1*b2*c1*x1*z3 + a1*c2*x1*z3 + a2*c2*x1*z3 + a3*c2*x1*z3 + a1*b1*c2*x1*z3 + a2*b1*c2*x1*z3 + a3*b1*c2*x1*z3 + a1*b2*c2*x1*z3 + a2*b2*c2*x1*z3 + a3*b2*c2*x1*z3 + b3*c2*x1*z3 + a3*b3*c2*x1*z3 + b1*b3*c2*x1*z3 + a3*b1*b3*c2*x1*z3 + a2*b2*b3*c2*x1*z3 + a3*b2*b3*c2*x1*z3 + a2*b1*x1*x2*z3 + a1*a2*b1*x1*x2*z3 + a1*b2*x1*x2*z3 + a1*b1*b2*x1*x2*z3 + a2*b1*b2*x1*x2*z3 + b2*c1*x1*x2*z3 + b1*b2*c1*x1*x2*z3 + b1*c2*x1*x2*z3 + a1*a2*b1*x1*x3*z3 + a1*b1*b2*c2*x1*x3*z3 + a1*a2*y1*z3 + a2*a3*y1*z3 + a2*b1*y1*z3 + a1*a2*b1*y1*z3 + b2*y1*z3 + a1*b2*y1*z3 + 2*a2*b2*y1*z3 + a1*a2*b2*y1*z3 + b1*b2*y1*z3 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + a1*a2*b1*b2*y1*z3 + a2*b2*b3*y1*z3 + a3*b2*b3*y1*z3 + b2*c1*y1*z3 + b1*b2*c1*y1*z3 + c2*y1*z3 + a1*c2*y1*z3 + a2*c2*y1*z3 + b1*c2*y1*z3 + a1*b1*c2*y1*z3 + a2*b1*c2*y1*z3 + a3*b1*c2*y1*z3 + b2*c2*y1*z3 + a1*b2*c2*y1*z3 + a2*b2*c2*y1*z3 + a3*b2*c2*y1*z3 + 2*b3*c2*y1*z3 + a2*b3*c2*y1*z3 + a3*b3*c2*y1*z3 + b1*b3*c2*y1*z3 + a3*b1*b3*c2*y1*z3 + a3*b2*b3*c2*y1*z3 + b2*x1*y1*z3 + b1*b2*x1*y1*z3 + a2*x2*y1*z3 + a2*a3*x2*y1*z3 + a1*a2*b1*x2*y1*z3 + b2*x2*y1*z3 + a1*b2*x2*y1*z3 + a2*b2*x2*y1*z3 + a3*b2*x2*y1*z3 + b1*b2*x2*y1*z3 + a1*b1*b2*x2*y1*z3 + a2*b1*b2*x2*y1*z3 + b2*c1*x2*y1*z3 + b1*b2*c1*x2*y1*z3 + b1*c2*x2*y1*z3 + a2*b3*c2*x2*y1*z3 + b2*b3*c2*x2*y1*z3 + a2*a3*x3*y1*z3 + a2*b1*x3*y1*z3 + a1*a2*b1*x3*y1*z3 + a2*c2*x3*y1*z3 + a2*b2*c2*x3*y1*z3 + a3*b2*c2*x3*y1*z3 + b1*b2*c2*x3*y1*z3 + a1*b1*b2*c2*x3*y1*z3 + a2*b3*c2*x3*y1*z3 + b2*b3*c2*x3*y1*z3 + b1*x1*y2*z3 + a2*b1*x1*y2*z3 + a1*a2*b1*x1*y2*z3 + b2*x1*y2*z3 + a1*b2*x1*y2*z3 + a2*b1*b2*x1*y2*z3 + b2*c1*x1*y2*z3 + b1*b2*c1*x1*y2*z3 + b1*c2*x1*y2*z3 + a2*a3*y1*y2*z3 + b1*y1*y2*z3 + a1*a2*b1*y1*y2*z3 + a1*b2*y1*y2*z3 + a2*b1*b2*y1*y2*z3 + b2*c1*y1*y2*z3 + b1*b2*c1*y1*y2*z3 + b1*c2*y1*y2*z3 + a2*b3*c2*y1*y2*z3 + a1*a2*b1*x1*y3*z3 + a1*b1*b2*x1*y3*z3 + a1*b1*b2*c2*x1*y3*z3 + a2*y1*y3*z3 + a2*a3*y1*y3*z3 + a2*b1*y1*y3*z3 + a1*a2*b1*y1*y3*z3 + a2*b2*y1*y3*z3 + a3*b2*y1*y3*z3 + b1*b2*y1*y3*z3 + a1*b1*b2*y1*y3*z3 + a2*c2*y1*y3*z3 + a2*b2*c2*y1*y3*z3 + a3*b2*c2*y1*y3*z3 + b1*b2*c2*y1*y3*z3 + a1*b1*b2*c2*y1*y3*z3 + a2*b3*c2*y1*y3*z3 + a1*a2*z1*z3 + a1*a2*b1*z1*z3 + a1*a2*b2*z1*z3 + a2*a3*b2*z1*z3 + a1*b1*b2*z1*z3 + 2*a2*b1*b2*z1*z3 + a1*a2*b1*b2*z1*z3 + a2*b2*b3*z1*z3 + a3*b2*b3*z1*z3 + b1*b2*c1*z1*z3 + a1*c2*z1*z3 + a2*c2*z1*z3 + a1*b1*c2*z1*z3 + a2*b1*c2*z1*z3 + a3*b1*c2*z1*z3 + a1*b2*c2*z1*z3 + a2*b2*c2*z1*z3 + a3*b2*c2*z1*z3 + b1*b3*c2*z1*z3 + a3*b1*b3*c2*z1*z3 + a2*b2*b3*c2*z1*z3 + a3*b2*b3*c2*z1*z3 + a1*b2*x1*z1*z3 + a2*b2*x1*z1*z3 + c2*x1*z1*z3 + a2*x2*z1*z3 + a2*b1*x2*z1*z3 + a1*a2*b1*x2*z1*z3 + a1*b2*x2*z1*z3 + a2*b2*x2*z1*z3 + a1*b1*b2*x2*z1*z3 + a2*b1*b2*x2*z1*z3 + b1*b2*c1*x2*z1*z3 + c2*x2*z1*z3 + b1*c2*x2*z1*z3 + a2*x3*z1*z3 + a1*a2*b1*x3*z1*z3 + a2*c2*x3*z1*z3 + a1*b1*b2*c2*x3*z1*z3 + a1*b2*y1*z1*z3 + a2*b2*y1*z1*z3 + b1*b2*y1*z1*z3 + c2*y1*z1*z3 + y2*z1*z3 + b1*y2*z1*z3 + a2*b1*y2*z1*z3 + a1*a2*b1*y2*z1*z3 + b2*y2*z1*z3 + a1*b2*y2*z1*z3 + a2*b2*y2*z1*z3 + a2*b1*b2*y2*z1*z3 + b1*b2*c1*y2*z1*z3 + c2*y2*z1*z3 + b1*c2*y2*z1*z3 + a1*a2*b1*y3*z1*z3 + a1*b1*b2*y3*z1*z3 + a2*c2*y3*z1*z3 + a1*b1*b2*c2*y3*z1*z3 + a1*b1*x1*z2*z3 + a2*b2*x1*z2*z3 + a1*b1*b2*x1*z2*z3 + a2*b1*b2*x1*z2*z3 + c1*x1*z2*z3 + b1*c1*x1*z2*z3 + b2*c1*x1*z2*z3 + b1*b2*c1*x1*z2*z3 + c2*x1*z2*z3 + b1*c2*x1*z2*z3 + a2*y1*z2*z3 + a3*y1*z2*z3 + b1*y1*z2*z3 + a1*b1*y1*z2*z3 + a3*b2*y1*z2*z3 + b1*b2*y1*z2*z3 + a1*b1*b2*y1*z2*z3 + a2*b1*b2*y1*z2*z3 + c1*y1*z2*z3 + b1*c1*y1*z2*z3 + b2*c1*y1*z2*z3 + b1*b2*c1*y1*z2*z3 + c2*y1*z2*z3 + b1*c2*y1*z2*z3 + b3*c2*y1*z2*z3 + b2*b3*c2*y1*z2*z3 + a1*b1*z1*z2*z3 + a1*b1*b2*z1*z2*z3 + a2*b1*b2*z1*z2*z3 + b1*c1*z1*z2*z3 + b1*b2*c1*z1*z2*z3 + b1*c2*z1*z2*z3 + (b1*b2*c1*x1*z3*(1 + z3))/2 + (a1*a3*x2*z3*(1 + z3))/2 + (a2*b1*x2*z3*(1 + z3))/2 + (c1*x2*z3*(1 + z3))/2 + (a3*c1*x2*z3*(1 + z3))/2 + (b1*c1*x2*z3*(1 + z3))/2 + (b2*c1*x2*z3*(1 + z3))/2 + (b1*b2*c1*x2*z3*(1 + z3))/2 + (b1*b2*c1*y1*z3*(1 + z3))/2 + (b3*c2*y1*z3*(1 + z3))/2 + (a1*a3*y2*z3*(1 + z3))/2 + (b1*y2*z3*(1 + z3))/2 + (a2*b1*y2*z3*(1 + z3))/2 + (c1*y2*z3*(1 + z3))/2 + (a3*c1*y2*z3*(1 + z3))/2 + (b1*c1*y2*z3*(1 + z3))/2 + (b2*c1*y2*z3*(1 + z3))/2 + (b1*b2*c1*y2*z3*(1 + z3))/2 + (b1*b2*c1*z1*z3*(1 + z3))/2 + (a1*a3*z2*z3*(1 + z3))/2 + (a2*b1*z2*z3*(1 + z3))/2 + (b1*b2*c1*z2*z3*(1 + z3))/2 + (a1*a2 + a1*b2 + a2*c1 + b2*c1 + a1*b2*c1 + a2*b2*c1)*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 98 ( I4_122)
#####################################################################
Acpin98:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Acppin98:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin98:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return a1 + x1 + y1 + z1;
end;
#####################################################################
Bxyzin98:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + a1*(a2 + x2) + a1*b1*(a2 + x2) + a2*b1*(a2 + x2) + c1*(a2 + x2) + (a1 + x1)*(a2 + x2) + (a2 + x2)*(a1 + y1) + a1*(a2 + y2) + a1*b1*(a2 + y2) + a2*b1*(a2 + y2) + c1*(a2 + y2) + (a1 + x1)*(a2 + y2) + (a1 + y1)*(a2 + y2) + a2*(a1 + z1) + b1*(a2 + x2)*(a1 + z1) + b1*(a2 + y2)*(a1 + z1) + a1*b1*(a2 + z2) + a2*b1*(a2 + z2) + c1*(a2 + z2) + (a1 + x1)*(a2 + z2) + b1*(a2 + x2)*(a2 + z2) + (a1 + y1)*(a2 + z2) + b1*(a2 + y2)*(a2 + z2) + (a1 + z1)*(a2 + z2) + b1*(a1 + z1)*(a2 + z2);
end;
#####################################################################
CGAPin98:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b1*b2 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + a1*a3*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a1*a2*a3*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a2*b1*b3*c1 + a2*a3*b1*b3*c1 + b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a2*a3*c2 + a1*a2*a3*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*a3*b2*b3*c2 + b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a2*a3*c1*c2 + a1*a2*a3*c1*c2 + a1*a3*b1*c1*c2 + a2*a3*b1*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a1*a2*b3*c1*c2 + b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + a2*b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b2*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*b2*b3*c3 + a1*a2*b2*b3*c3 + a1*a3*b2*b3*c3 + a1*a2*a3*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*b1*c1*c3 + a1*a2*b1*c1*c3 + a1*a3*b2*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a2*a3*b1*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a2*b1*b2*b3*c1*c3 + a1*a3*b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + a1*a2*a3*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a2*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a2*a3*b1*b2*b3*c2*c3 + 2*c1*c2*c3 + a2*c1*c2*c3 + a3*c1*c2*c3 + a3*b1*c1*c2*c3 + a1*b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + a1*b1*b2*c1*c2*c3 + a2*b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a2*a3*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a2*a3*(-a1 + x1) + a2*a3*b1*(-a1 + x1) + a2*a3*b2*(-a1 + x1) + a1*a3*b1*b2*(-a1 + x1) + a2*a3*b1*b2*(-a1 + x1) + a1*a2*a3*b1*b2*(-a1 + x1) + a1*a2*a3*b3*(-a1 + x1) + a1*a2*a3*b1*b3*(-a1 + x1) + a1*a3*b1*b2*b3*(-a1 + x1) + a1*a2*a3*b1*b2*b3*(-a1 + x1) + a2*a3*c1*(-a1 + x1) + a2*a3*b1*c1*(-a1 + x1) + a3*b2*c1*(-a1 + x1) + a1*a3*b2*c1*(-a1 + x1) + a2*a3*b2*c1*(-a1 + x1) + a3*b1*b2*c1*(-a1 + x1) + a2*a3*b1*b2*c1*(-a1 + x1) + a2*b3*c1*(-a1 + x1) + a1*a2*b3*c1*(-a1 + x1) + a2*a3*b3*c1*(-a1 + x1) + a1*a2*b1*b3*c1*(-a1 + x1) + b2*b3*c1*(-a1 + x1) + a1*b2*b3*c1*(-a1 + x1) + a2*b2*b3*c1*(-a1 + x1) + a2*a3*b2*b3*c1*(-a1 + x1) + b1*b2*b3*c1*(-a1 + x1) + a1*a3*b1*b2*b3*c1*(-a1 + x1) + a1*a3*b2*c2*(-a1 + x1) + a1*a3*b1*b2*c2*(-a1 + x1) + b3*c2*(-a1 + x1) + a1*b3*c2*(-a1 + x1) + a1*a2*b3*c2*(-a1 + x1) + a3*b3*c2*(-a1 + x1) + a1*a2*a3*b3*c2*(-a1 + x1) + b1*b3*c2*(-a1 + x1) + a2*b1*b3*c2*(-a1 + x1) + a3*b1*b3*c2*(-a1 + x1) + a1*a3*b1*b3*c2*(-a1 + x1) + a2*a3*b1*b3*c2*(-a1 + x1) + a1*a2*a3*b1*b3*c2*(-a1 + x1) + b2*b3*c2*(-a1 + x1) + a1*b2*b3*c2*(-a1 + x1) + a3*b2*b3*c2*(-a1 + x1) + a1*a3*b2*b3*c2*(-a1 + x1) + a2*a3*b2*b3*c2*(-a1 + x1) + a1*a2*a3*b2*b3*c2*(-a1 + x1) + a1*b1*b2*b3*c2*(-a1 + x1) + a3*b1*b2*b3*c2*(-a1 + x1) + a2*a3*b1*b2*b3*c2*(-a1 + x1) + a1*a2*a3*b1*b2*b3*c2*(-a1 + x1) + a3*c1*c2*(-a1 + x1) + a1*a3*c1*c2*(-a1 + x1) + a2*a3*c1*c2*(-a1 + x1) + a3*b1*c1*c2*(-a1 + x1) + a3*b1*b2*c1*c2*(-a1 + x1) + b3*c1*c2*(-a1 + x1) + a2*a3*b3*c1*c2*(-a1 + x1) + a2*a3*b1*b3*c1*c2*(-a1 + x1) + a1*b2*b3*c1*c2*(-a1 + x1) + a2*b2*b3*c1*c2*(-a1 + x1) + a3*b2*b3*c1*c2*(-a1 + x1) + a2*a3*b2*b3*c1*c2*(-a1 + x1) + b1*b2*b3*c1*c2*(-a1 + x1) + a1*b1*b2*b3*c1*c2*(-a1 + x1) + a2*a3*b1*b2*b3*c1*c2*(-a1 + x1) + a1*a2*b2*c3*(-a1 + x1) + a1*a3*b2*c3*(-a1 + x1) + a1*b1*b2*c3*(-a1 + x1) + a1*a2*b1*b2*c3*(-a1 + x1) + a1*a3*b1*b2*c3*(-a1 + x1) + a2*a3*b3*c3*(-a1 + x1) + a1*a2*b1*b3*c3*(-a1 + x1) + a2*a3*b1*b3*c3*(-a1 + x1) + a1*b2*b3*c3*(-a1 + x1) + a2*b2*b3*c3*(-a1 + x1) + a1*a3*b2*b3*c3*(-a1 + x1) + a2*a3*b2*b3*c3*(-a1 + x1) + a1*a2*c1*c3*(-a1 + x1) + b2*c1*c3*(-a1 + x1) + a1*b2*c1*c3*(-a1 + x1) + b1*b2*c1*c3*(-a1 + x1) + a1*b1*b2*c1*c3*(-a1 + x1) + a2*b1*b2*c1*c3*(-a1 + x1) + a3*b1*b2*c1*c3*(-a1 + x1) + a2*b3*c1*c3*(-a1 + x1) + b2*b3*c1*c3*(-a1 + x1) + a3*b2*b3*c1*c3*(-a1 + x1) + b1*b2*b3*c1*c3*(-a1 + x1) + a3*b1*b2*b3*c1*c3*(-a1 + x1) + c2*c3*(-a1 + x1) + a1*c2*c3*(-a1 + x1) + a2*c2*c3*(-a1 + x1) + a3*c2*c3*(-a1 + x1) + a1*a3*c2*c3*(-a1 + x1) + a2*a3*c2*c3*(-a1 + x1) + b1*c2*c3*(-a1 + x1) + a1*b1*c2*c3*(-a1 + x1) + a2*b1*c2*c3*(-a1 + x1) + a3*b1*c2*c3*(-a1 + x1) + b2*c2*c3*(-a1 + x1) + a1*b2*c2*c3*(-a1 + x1) + a2*b2*c2*c3*(-a1 + x1) + a3*b2*c2*c3*(-a1 + x1) + b3*c2*c3*(-a1 + x1) + a2*b3*c2*c3*(-a1 + x1) + a2*b1*b3*c2*c3*(-a1 + x1) + a3*b1*b3*c2*c3*(-a1 + x1) + a2*b2*b3*c2*c3*(-a1 + x1) + a3*b2*b3*c2*c3*(-a1 + x1) + a1*b1*b2*b3*c2*c3*(-a1 + x1) + a3*b2*c1*c2*c3*(-a1 + x1) + b1*b2*c1*c2*c3*(-a1 + x1) + a1*b3*c1*c2*c3*(-a1 + x1) + a2*b3*c1*c2*c3*(-a1 + x1) + a3*b3*c1*c2*c3*(-a1 + x1) + b2*b3*c1*c2*c3*(-a1 + x1) + (a2*a3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b1*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*a2*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b1*b3*c1*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*b1*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b1*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*b2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b3*c1*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b2*b3*c1*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b3*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (b3*c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (b2*b3*c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + a1*a2*b3*(-a2 + x2) + a1*a2*a3*b3*(-a2 + x2) + a1*a2*b1*b3*(-a2 + x2) + a2*a3*b1*b3*(-a2 + x2) + a1*a2*a3*b1*b2*b3*(-a2 + x2) + a1*a3*c1*(-a2 + x2) + a2*a3*c1*(-a2 + x2) + a1*a3*b2*c1*(-a2 + x2) + a2*a3*b2*c1*(-a2 + x2) + a1*a3*b1*b2*c1*(-a2 + x2) + b3*c1*(-a2 + x2) + a2*b3*c1*(-a2 + x2) + a1*a3*b3*c1*(-a2 + x2) + a2*a3*b3*c1*(-a2 + x2) + b1*b3*c1*(-a2 + x2) + a2*b1*b3*c1*(-a2 + x2) + a1*a2*b1*b3*c1*(-a2 + x2) + a1*a3*b1*b3*c1*(-a2 + x2) + b2*b3*c1*(-a2 + x2) + a1*b2*b3*c1*(-a2 + x2) + a1*a2*b2*b3*c1*(-a2 + x2) + a1*a3*b2*b3*c1*(-a2 + x2) + a2*a3*b2*b3*c1*(-a2 + x2) + a2*b1*b2*b3*c1*(-a2 + x2) + a1*a3*c2*(-a2 + x2) + a1*a3*b1*c2*(-a2 + x2) + a1*a3*b2*c2*(-a2 + x2) + a1*a3*b1*b2*c2*(-a2 + x2) + a1*b3*c2*(-a2 + x2) + a1*a2*b3*c2*(-a2 + x2) + a1*b1*b3*c2*(-a2 + x2) + a2*b1*b3*c2*(-a2 + x2) + a3*b1*b3*c2*(-a2 + x2) + a1*a3*b1*b3*c2*(-a2 + x2) + a2*a3*b1*b3*c2*(-a2 + x2) + a1*a2*a3*b1*b3*c2*(-a2 + x2) + a1*a3*b2*b3*c2*(-a2 + x2) + a1*a2*b1*b2*b3*c2*(-a2 + x2) + a1*a2*a3*b1*b2*b3*c2*(-a2 + x2) + a3*c1*c2*(-a2 + x2) + a2*a3*c1*c2*(-a2 + x2) + a3*b1*c1*c2*(-a2 + x2) + a3*b2*c1*c2*(-a2 + x2) + a3*b1*b2*c1*c2*(-a2 + x2) + b3*c1*c2*(-a2 + x2) + a1*b3*c1*c2*(-a2 + x2) + a2*b3*c1*c2*(-a2 + x2) + a3*b3*c1*c2*(-a2 + x2) + b1*b3*c1*c2*(-a2 + x2) + a1*b1*b3*c1*c2*(-a2 + x2) + a1*a2*b1*b3*c1*c2*(-a2 + x2) + a3*b1*b3*c1*c2*(-a2 + x2) + a1*a3*b1*b3*c1*c2*(-a2 + x2) + a2*a3*b1*b3*c1*c2*(-a2 + x2) + b2*b3*c1*c2*(-a2 + x2) + a2*b2*b3*c1*c2*(-a2 + x2) + b1*b2*b3*c1*c2*(-a2 + x2) + a2*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a2*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a3*b1*b2*b3*c1*c2*(-a2 + x2) + a2*a3*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a2*c3*(-a2 + x2) + a1*a3*c3*(-a2 + x2) + a1*a2*b1*c3*(-a2 + x2) + a1*a3*b1*c3*(-a2 + x2) + a1*a2*b2*c3*(-a2 + x2) + a1*a3*b2*c3*(-a2 + x2) + a1*a2*b1*b2*c3*(-a2 + x2) + a1*a3*b1*b2*c3*(-a2 + x2) + a1*a2*b3*c3*(-a2 + x2) + a1*a2*b1*b3*c3*(-a2 + x2) + a1*c1*c3*(-a2 + x2) + a3*c1*c3*(-a2 + x2) + a1*b1*c1*c3*(-a2 + x2) + a2*b1*c1*c3*(-a2 + x2) + a3*b1*c1*c3*(-a2 + x2) + a2*b2*c1*c3*(-a2 + x2) + a3*b2*c1*c3*(-a2 + x2) + b1*b2*c1*c3*(-a2 + x2) + a1*b1*b2*c1*c3*(-a2 + x2) + a2*b1*b2*c1*c3*(-a2 + x2) + a3*b1*b2*c1*c3*(-a2 + x2) + a2*b3*c1*c3*(-a2 + x2) + b1*b3*c1*c3*(-a2 + x2) + a2*b1*b3*c1*c3*(-a2 + x2) + a1*c2*c3*(-a2 + x2) + a1*b1*c2*c3*(-a2 + x2) + a1*b3*c2*c3*(-a2 + x2) + a1*b1*b3*c2*c3*(-a2 + x2) + a1*b2*b3*c2*c3*(-a2 + x2) + a1*b1*b2*b3*c2*c3*(-a2 + x2) + c1*c2*c3*(-a2 + x2) + a3*c1*c2*c3*(-a2 + x2) + b1*c1*c2*c3*(-a2 + x2) + b2*c1*c2*c3*(-a2 + x2) + a3*b2*c1*c2*c3*(-a2 + x2) + a2*b3*c1*c2*c3*(-a2 + x2) + a3*b3*c1*c2*c3*(-a2 + x2) + a3*(-a1 + x1)*(-a2 + x2) + a2*a3*(-a1 + x1)*(-a2 + x2) + a3*b1*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*(-a1 + x1)*(-a2 + x2) + a2*a3*b1*(-a1 + x1)*(-a2 + x2) + a3*b2*(-a1 + x1)*(-a2 + x2) + a2*a3*b2*(-a1 + x1)*(-a2 + x2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + x2) + b3*(-a1 + x1)*(-a2 + x2) + a1*b3*(-a1 + x1)*(-a2 + x2) + a2*b3*(-a1 + x1)*(-a2 + x2) + a1*a2*b3*(-a1 + x1)*(-a2 + x2) + a3*b3*(-a1 + x1)*(-a2 + x2) + a2*a3*b3*(-a1 + x1)*(-a2 + x2) + a1*a2*b1*b3*(-a1 + x1)*(-a2 + x2) + a1*a3*b2*b3*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*c1*(-a1 + x1)*(-a2 + x2) + b3*c1*(-a1 + x1)*(-a2 + x2) + a2*b1*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*b1*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*b2*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*c2*(-a1 + x1)*(-a2 + x2) + a3*b2*c2*(-a1 + x1)*(-a2 + x2) + a1*b3*c2*(-a1 + x1)*(-a2 + x2) + a2*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b1*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + a1*c3*(-a1 + x1)*(-a2 + x2) + a2*c3*(-a1 + x1)*(-a2 + x2) + a3*c3*(-a1 + x1)*(-a2 + x2) + a1*b2*c3*(-a1 + x1)*(-a2 + x2) + a2*b2*c3*(-a1 + x1)*(-a2 + x2) + a3*b2*c3*(-a1 + x1)*(-a2 + x2) + a2*b3*c3*(-a1 + x1)*(-a2 + x2) + c1*c3*(-a1 + x1)*(-a2 + x2) + a1*c1*c3*(-a1 + x1)*(-a2 + x2) + b3*c1*c3*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + c2*c3*(-a1 + x1)*(-a2 + x2) + b1*b3*c2*c3*(-a1 + x1)*(-a2 + x2) + b2*b3*c2*c3*(-a1 + x1)*(-a2 + x2) + (a3*b1*b2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b2*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b2*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b2*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b2*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b2*b3*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b2*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + a1*a2*a3*(-a3 + x3) + a2*a3*b1*(-a3 + x3) + a1*a2*a3*b2*(-a3 + x3) + a2*a3*b1*b2*(-a3 + x3) + a2*a3*b1*b3*(-a3 + x3) + a2*a3*b1*b2*b3*(-a3 + x3) + a1*a2*b1*c1*(-a3 + x3) + a1*a2*b1*b2*c1*(-a3 + x3) + a3*b1*b2*c1*(-a3 + x3) + a1*a3*b1*b2*c1*(-a3 + x3) + a2*a3*b1*b2*c1*(-a3 + x3) + a1*a2*b1*b3*c1*(-a3 + x3) + a1*a2*a3*b1*b3*c1*(-a3 + x3) + a1*a2*b1*b2*b3*c1*(-a3 + x3) + a3*b1*b2*b3*c1*(-a3 + x3) + a1*a3*b1*b2*b3*c1*(-a3 + x3) + a2*a3*b1*b2*b3*c1*(-a3 + x3) + a1*a2*a3*b1*b2*b3*c1*(-a3 + x3) + a1*c2*(-a3 + x3) + a1*a2*c2*(-a3 + x3) + b1*c2*(-a3 + x3) + a1*b1*c2*(-a3 + x3) + a2*b1*c2*(-a3 + x3) + a1*a2*b1*c2*(-a3 + x3) + a1*a3*b1*c2*(-a3 + x3) + a1*b2*c2*(-a3 + x3) + a1*a2*b2*c2*(-a3 + x3) + b1*b2*c2*(-a3 + x3) + a1*b1*b2*c2*(-a3 + x3) + a2*b1*b2*c2*(-a3 + x3) + a1*a2*b1*b2*c2*(-a3 + x3) + a1*a2*a3*b1*b2*c2*(-a3 + x3) + a1*a3*b3*c2*(-a3 + x3) + a3*b1*b3*c2*(-a3 + x3) + a1*a3*b1*b3*c2*(-a3 + x3) + a1*a2*a3*b1*b3*c2*(-a3 + x3) + a1*a2*b2*b3*c2*(-a3 + x3) + a2*b1*b2*b3*c2*(-a3 + x3) + a1*a2*b1*b2*b3*c2*(-a3 + x3) + a3*b1*b2*b3*c2*(-a3 + x3) + a1*a3*b1*b2*b3*c2*(-a3 + x3) + a2*a3*b1*b2*b3*c2*(-a3 + x3) + a1*a2*c1*c2*(-a3 + x3) + b1*c1*c2*(-a3 + x3) + a1*b1*c1*c2*(-a3 + x3) + a3*b1*c1*c2*(-a3 + x3) + a1*b2*c1*c2*(-a3 + x3) + a2*b2*c1*c2*(-a3 + x3) + a3*b2*c1*c2*(-a3 + x3) + a1*b1*b2*c1*c2*(-a3 + x3) + a1*a2*b1*b2*c1*c2*(-a3 + x3) + a1*a3*b1*b2*c1*c2*(-a3 + x3) + a2*a3*b1*b2*c1*c2*(-a3 + x3) + a1*b3*c1*c2*(-a3 + x3) + a2*b3*c1*c2*(-a3 + x3) + a3*b3*c1*c2*(-a3 + x3) + b1*b3*c1*c2*(-a3 + x3) + a3*b2*b3*c1*c2*(-a3 + x3) + a2*b1*b2*b3*c1*c2*(-a3 + x3) + a1*a2*b1*b2*b3*c1*c2*(-a3 + x3) + a3*b1*b2*b3*c1*c2*(-a3 + x3) + a1*a3*b1*b2*b3*c1*c2*(-a3 + x3) + a2*a3*b1*b2*b3*c1*c2*(-a3 + x3) + a2*b1*c3*(-a3 + x3) + a1*a2*b1*c3*(-a3 + x3) + a2*a3*b1*c3*(-a3 + x3) + a2*b1*b2*c3*(-a3 + x3) + a1*a2*b1*b2*c3*(-a3 + x3) + a2*a3*b1*b2*c3*(-a3 + x3) + a1*a2*b3*c3*(-a3 + x3) + a1*a2*b2*b3*c3*(-a3 + x3) + a2*b1*c1*c3*(-a3 + x3) + a2*b1*b2*c1*c3*(-a3 + x3) + a2*b1*b3*c1*c3*(-a3 + x3) + a2*b1*b2*b3*c1*c3*(-a3 + x3) + a1*a2*c2*c3*(-a3 + x3) + b1*c2*c3*(-a3 + x3) + a2*b1*c2*c3*(-a3 + x3) + a3*b1*c2*c3*(-a3 + x3) + a1*b2*c2*c3*(-a3 + x3) + a1*b1*b2*c2*c3*(-a3 + x3) + a2*b1*b2*c2*c3*(-a3 + x3) + a3*b1*b2*c2*c3*(-a3 + x3) + a1*b3*c2*c3*(-a3 + x3) + a2*b1*b3*c2*c3*(-a3 + x3) + a1*b2*b3*c2*c3*(-a3 + x3) + b1*b2*b3*c2*c3*(-a3 + x3) + a2*b1*b2*b3*c2*c3*(-a3 + x3) + a1*c1*c2*c3*(-a3 + x3) + a2*c1*c2*c3*(-a3 + x3) + a3*c1*c2*c3*(-a3 + x3) + b1*c1*c2*c3*(-a3 + x3) + a1*b2*c1*c2*c3*(-a3 + x3) + a2*b2*c1*c2*c3*(-a3 + x3) + b1*b2*c1*c2*c3*(-a3 + x3) + a3*b3*c1*c2*c3*(-a3 + x3) + b1*b3*c1*c2*c3*(-a3 + x3) + b1*b2*b3*c1*c2*c3*(-a3 + x3) + a1*a2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*b3*(-a1 + x1)*(-a3 + x3) + a2*a3*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*b3*(-a1 + x1)*(-a3 + x3) + a2*a3*b2*b3*(-a1 + x1)*(-a3 + x3) + a2*c1*(-a1 + x1)*(-a3 + x3) + a2*b1*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + x3) + a2*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*b1*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*b2*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a3 + x3) + a1*c2*(-a1 + x1)*(-a3 + x3) + b1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*c2*(-a1 + x1)*(-a3 + x3) + a1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a3*b2*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a3*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*b3*c2*(-a1 + x1)*(-a3 + x3) + a3*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a3*b3*c2*(-a1 + x1)*(-a3 + x3) + b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a3*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a3*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*c1*c2*(-a1 + x1)*(-a3 + x3) + b1*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a3*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a3*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + b1*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b2*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a1*c2*c3*(-a1 + x1)*(-a3 + x3) + a2*c2*c3*(-a1 + x1)*(-a3 + x3) + c1*c2*c3*(-a1 + x1)*(-a3 + x3) + b2*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*(-a2 + x2)*(-a3 + x3) + a1*a3*(-a2 + x2)*(-a3 + x3) + b1*(-a2 + x2)*(-a3 + x3) + a1*b1*(-a2 + x2)*(-a3 + x3) + a2*b1*(-a2 + x2)*(-a3 + x3) + a3*b1*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*(-a2 + x2)*(-a3 + x3) + a1*b2*(-a2 + x2)*(-a3 + x3) + a1*a3*b2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + x3) + a1*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*b3*(-a2 + x2)*(-a3 + x3) + a1*a3*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + x3) + c1*(-a2 + x2)*(-a3 + x3) + a1*c1*(-a2 + x2)*(-a3 + x3) + a2*c1*(-a2 + x2)*(-a3 + x3) + a3*c1*(-a2 + x2)*(-a3 + x3) + b1*c1*(-a2 + x2)*(-a3 + x3) + a1*b1*c1*(-a2 + x2)*(-a3 + x3) + a2*b1*c1*(-a2 + x2)*(-a3 + x3) + a3*b1*c1*(-a2 + x2)*(-a3 + x3) + b2*c1*(-a2 + x2)*(-a3 + x3) + a1*b2*c1*(-a2 + x2)*(-a3 + x3) + a2*b2*c1*(-a2 + x2)*(-a3 + x3) + a3*b2*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + b3*c1*(-a2 + x2)*(-a3 + x3) + a3*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*c2*(-a2 + x2)*(-a3 + x3) + b1*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*c2*(-a2 + x2)*(-a3 + x3) + a1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*b3*c2*(-a2 + x2)*(-a3 + x3) + a2*c1*c2*(-a2 + x2)*(-a3 + x3) + b2*c1*c2*(-a2 + x2)*(-a3 + x3) + b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b2*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + (b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b3*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + a1*a3*b2*(-a1 + y1) + a2*a3*b2*(-a1 + y1) + a3*b1*b2*(-a1 + y1) + a1*a2*a3*b1*b2*(-a1 + y1) + a1*a2*b3*(-a1 + y1) + a2*a3*b3*(-a1 + y1) + a1*a2*a3*b3*(-a1 + y1) + a2*b1*b3*(-a1 + y1) + a1*a2*b1*b3*(-a1 + y1) + a2*a3*b1*b3*(-a1 + y1) + a1*a2*a3*b1*b3*(-a1 + y1) + a3*b2*b3*(-a1 + y1) + a1*a3*b2*b3*(-a1 + y1) + a2*a3*b2*b3*(-a1 + y1) + a3*b1*b2*b3*(-a1 + y1) + a1*a3*b1*b2*b3*(-a1 + y1) + a2*a3*b1*b2*b3*(-a1 + y1) + a1*a2*a3*b1*b2*b3*(-a1 + y1) + a2*a3*c1*(-a1 + y1) + a2*a3*b1*c1*(-a1 + y1) + a3*b2*c1*(-a1 + y1) + a1*a3*b2*c1*(-a1 + y1) + a2*a3*b2*c1*(-a1 + y1) + a2*a3*b1*b2*c1*(-a1 + y1) + a2*b3*c1*(-a1 + y1) + a1*a2*b3*c1*(-a1 + y1) + a2*a3*b3*c1*(-a1 + y1) + a1*a2*b1*b3*c1*(-a1 + y1) + b2*b3*c1*(-a1 + y1) + a2*a3*b2*b3*c1*(-a1 + y1) + a3*b1*b2*b3*c1*(-a1 + y1) + a1*a3*b1*b2*b3*c1*(-a1 + y1) + a1*a3*b2*c2*(-a1 + y1) + a3*b1*b2*c2*(-a1 + y1) + a1*a3*b1*b2*c2*(-a1 + y1) + b3*c2*(-a1 + y1) + a1*a2*b3*c2*(-a1 + y1) + a3*b3*c2*(-a1 + y1) + a1*a2*a3*b3*c2*(-a1 + y1) + b1*b3*c2*(-a1 + y1) + a1*b1*b3*c2*(-a1 + y1) + a1*a3*b1*b3*c2*(-a1 + y1) + a1*a2*a3*b1*b3*c2*(-a1 + y1) + a2*b2*b3*c2*(-a1 + y1) + a1*a3*b2*b3*c2*(-a1 + y1) + a2*a3*b2*b3*c2*(-a1 + y1) + a1*a2*a3*b2*b3*c2*(-a1 + y1) + b1*b2*b3*c2*(-a1 + y1) + a3*b1*b2*b3*c2*(-a1 + y1) + a1*a2*a3*b1*b2*b3*c2*(-a1 + y1) + a1*a3*c1*c2*(-a1 + y1) + a2*a3*c1*c2*(-a1 + y1) + a3*b1*c1*c2*(-a1 + y1) + a3*b1*b2*c1*c2*(-a1 + y1) + a2*a3*b3*c1*c2*(-a1 + y1) + a2*a3*b1*b3*c1*c2*(-a1 + y1) + b2*b3*c1*c2*(-a1 + y1) + a1*b2*b3*c1*c2*(-a1 + y1) + a2*b2*b3*c1*c2*(-a1 + y1) + a3*b2*b3*c1*c2*(-a1 + y1) + a2*a3*b2*b3*c1*c2*(-a1 + y1) + a1*b1*b2*b3*c1*c2*(-a1 + y1) + a2*a3*b1*b2*b3*c1*c2*(-a1 + y1) + b2*c3*(-a1 + y1) + a1*b2*c3*(-a1 + y1) + a1*a2*b2*c3*(-a1 + y1) + a1*a3*b2*c3*(-a1 + y1) + b1*b2*c3*(-a1 + y1) + a1*b1*b2*c3*(-a1 + y1) + a2*b1*b2*c3*(-a1 + y1) + a1*a2*b1*b2*c3*(-a1 + y1) + a3*b1*b2*c3*(-a1 + y1) + a1*a3*b1*b2*c3*(-a1 + y1) + a2*b3*c3*(-a1 + y1) + a2*a3*b3*c3*(-a1 + y1) + a2*b1*b3*c3*(-a1 + y1) + a1*a2*b1*b3*c3*(-a1 + y1) + a2*a3*b1*b3*c3*(-a1 + y1) + b2*b3*c3*(-a1 + y1) + a1*b2*b3*c3*(-a1 + y1) + a2*b2*b3*c3*(-a1 + y1) + a3*b2*b3*c3*(-a1 + y1) + a1*a3*b2*b3*c3*(-a1 + y1) + a2*a3*b2*b3*c3*(-a1 + y1) + a2*c1*c3*(-a1 + y1) + a1*a2*c1*c3*(-a1 + y1) + b2*c1*c3*(-a1 + y1) + a1*b2*c1*c3*(-a1 + y1) + a1*b1*b2*c1*c3*(-a1 + y1) + a2*b1*b2*c1*c3*(-a1 + y1) + a3*b1*b2*c1*c3*(-a1 + y1) + a2*b3*c1*c3*(-a1 + y1) + b2*b3*c1*c3*(-a1 + y1) + a3*b2*b3*c1*c3*(-a1 + y1) + b1*b2*b3*c1*c3*(-a1 + y1) + a3*b1*b2*b3*c1*c3*(-a1 + y1) + c2*c3*(-a1 + y1) + a1*c2*c3*(-a1 + y1) + a2*c2*c3*(-a1 + y1) + a1*a3*c2*c3*(-a1 + y1) + a2*a3*c2*c3*(-a1 + y1) + a1*b1*c2*c3*(-a1 + y1) + a2*b1*c2*c3*(-a1 + y1) + a3*b1*c2*c3*(-a1 + y1) + a1*b2*c2*c3*(-a1 + y1) + a2*b2*c2*c3*(-a1 + y1) + a3*b2*c2*c3*(-a1 + y1) + b3*c2*c3*(-a1 + y1) + a2*b3*c2*c3*(-a1 + y1) + a2*b1*b3*c2*c3*(-a1 + y1) + a3*b1*b3*c2*c3*(-a1 + y1) + b2*b3*c2*c3*(-a1 + y1) + a2*b2*b3*c2*c3*(-a1 + y1) + a3*b2*b3*c2*c3*(-a1 + y1) + b1*b2*b3*c2*c3*(-a1 + y1) + a1*b1*b2*b3*c2*c3*(-a1 + y1) + a3*b2*c1*c2*c3*(-a1 + y1) + b1*b2*c1*c2*c3*(-a1 + y1) + b3*c1*c2*c3*(-a1 + y1) + a1*b3*c1*c2*c3*(-a1 + y1) + a2*b3*c1*c2*c3*(-a1 + y1) + a3*b3*c1*c2*c3*(-a1 + y1) + b2*b3*c1*c2*c3*(-a1 + y1) + a2*a3*(-a1 + x1)*(-a1 + y1) + a2*a3*b1*(-a1 + x1)*(-a1 + y1) + a2*a3*b2*(-a1 + x1)*(-a1 + y1) + a3*b1*b2*(-a1 + x1)*(-a1 + y1) + a1*a2*b3*(-a1 + x1)*(-a1 + y1) + a2*a3*b3*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*(-a1 + x1)*(-a1 + y1) + a3*b2*b3*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*c1*(-a1 + x1)*(-a1 + y1) + a3*b2*c2*(-a1 + x1)*(-a1 + y1) + a2*b3*c2*(-a1 + x1)*(-a1 + y1) + a3*b3*c2*(-a1 + x1)*(-a1 + y1) + b1*b3*c2*(-a1 + x1)*(-a1 + y1) + a1*b1*b3*c2*(-a1 + x1)*(-a1 + y1) + a3*b1*b3*c2*(-a1 + x1)*(-a1 + y1) + b2*b3*c2*(-a1 + x1)*(-a1 + y1) + a1*b2*b3*c2*(-a1 + x1)*(-a1 + y1) + a3*b2*b3*c2*(-a1 + x1)*(-a1 + y1) + b1*b2*b3*c2*(-a1 + x1)*(-a1 + y1) + b1*b3*c1*c2*(-a1 + x1)*(-a1 + y1) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a1 + y1) + b2*c3*(-a1 + x1)*(-a1 + y1) + a2*b2*c3*(-a1 + x1)*(-a1 + y1) + a3*b2*c3*(-a1 + x1)*(-a1 + y1) + a2*b3*c3*(-a1 + x1)*(-a1 + y1) + c2*c3*(-a1 + x1)*(-a1 + y1) + b3*c2*c3*(-a1 + x1)*(-a1 + y1) + b2*b3*c2*c3*(-a1 + x1)*(-a1 + y1) + a2*a3*(-a2 + x2)*(-a1 + y1) + a3*b1*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*(-a2 + x2)*(-a1 + y1) + a2*a3*b1*(-a2 + x2)*(-a1 + y1) + a2*a3*b2*(-a2 + x2)*(-a1 + y1) + a2*a3*b1*b2*(-a2 + x2)*(-a1 + y1) + b3*(-a2 + x2)*(-a1 + y1) + a1*b3*(-a2 + x2)*(-a1 + y1) + a1*a2*b3*(-a2 + x2)*(-a1 + y1) + a2*a3*b3*(-a2 + x2)*(-a1 + y1) + b1*b3*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*(-a2 + x2)*(-a1 + y1) + a1*a2*b1*b3*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*(-a2 + x2)*(-a1 + y1) + a1*a3*b2*b3*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*c1*(-a2 + x2)*(-a1 + y1) + b3*c1*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*(-a2 + x2)*(-a1 + y1) + a2*b1*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*b1*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*c2*(-a2 + x2)*(-a1 + y1) + a3*b2*c2*(-a2 + x2)*(-a1 + y1) + b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b3*c2*(-a2 + x2)*(-a1 + y1) + a2*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*b3*c2*(-a2 + x2)*(-a1 + y1) + b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + c3*(-a2 + x2)*(-a1 + y1) + a1*c3*(-a2 + x2)*(-a1 + y1) + a2*c3*(-a2 + x2)*(-a1 + y1) + a3*c3*(-a2 + x2)*(-a1 + y1) + b2*c3*(-a2 + x2)*(-a1 + y1) + a1*b2*c3*(-a2 + x2)*(-a1 + y1) + a2*b2*c3*(-a2 + x2)*(-a1 + y1) + a3*b2*c3*(-a2 + x2)*(-a1 + y1) + a2*b3*c3*(-a2 + x2)*(-a1 + y1) + a1*c1*c3*(-a2 + x2)*(-a1 + y1) + b3*c1*c3*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + c2*c3*(-a2 + x2)*(-a1 + y1) + b1*b3*c2*c3*(-a2 + x2)*(-a1 + y1) + b2*b3*c2*c3*(-a2 + x2)*(-a1 + y1) + a2*(-a3 + x3)*(-a1 + y1) + a1*a2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*(-a3 + x3)*(-a1 + y1) + a2*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a1 + y1) + a2*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*b3*(-a3 + x3)*(-a1 + y1) + a2*a3*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b3*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a1 + y1) + a2*b2*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*b3*(-a3 + x3)*(-a1 + y1) + a2*a3*b2*b3*(-a3 + x3)*(-a1 + y1) + a2*c1*(-a3 + x3)*(-a1 + y1) + a2*b1*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b2*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a1 + y1) + a2*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*b2*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*c1*(-a3 + x3)*(-a1 + y1) + c2*(-a3 + x3)*(-a1 + y1) + a1*c2*(-a3 + x3)*(-a1 + y1) + b1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*c2*(-a3 + x3)*(-a1 + y1) + b2*c2*(-a3 + x3)*(-a1 + y1) + a1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a3*b2*c2*(-a3 + x3)*(-a1 + y1) + b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + b3*c2*(-a3 + x3)*(-a1 + y1) + a1*b3*c2*(-a3 + x3)*(-a1 + y1) + a3*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a3*b3*c2*(-a3 + x3)*(-a1 + y1) + b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a3*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a3*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + c1*c2*(-a3 + x3)*(-a1 + y1) + a1*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*c1*c2*(-a3 + x3)*(-a1 + y1) + b1*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a3*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a3*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + b1*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b2*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + c2*c3*(-a3 + x3)*(-a1 + y1) + a1*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*c2*c3*(-a3 + x3)*(-a1 + y1) + c1*c2*c3*(-a3 + x3)*(-a1 + y1) + b2*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + (a2*a3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b1*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*a2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b1*b3*c1*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*b1*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b1*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*b2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b3*c1*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b2*b3*c1*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b3*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (b3*c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (b2*b3*c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + a1*a3*b2*(-a2 + y2) + a1*a3*b1*b2*(-a2 + y2) + a1*a2*a3*b1*b2*(-a2 + y2) + a1*a2*a3*b3*(-a2 + y2) + b1*b3*(-a2 + y2) + a1*b1*b3*(-a2 + y2) + a2*b1*b3*(-a2 + y2) + a1*a2*b1*b3*(-a2 + y2) + a3*b1*b3*(-a2 + y2) + a1*a3*b1*b3*(-a2 + y2) + a2*a3*b1*b3*(-a2 + y2) + a1*a2*a3*b1*b3*(-a2 + y2) + a1*a3*b2*b3*(-a2 + y2) + a1*a3*b1*b2*b3*(-a2 + y2) + a2*a3*b1*b2*b3*(-a2 + y2) + a1*a2*a3*b1*b2*b3*(-a2 + y2) + a1*a3*c1*(-a2 + y2) + a2*a3*c1*(-a2 + y2) + a1*a3*b2*c1*(-a2 + y2) + a2*a3*b2*c1*(-a2 + y2) + a2*a3*b1*b2*c1*(-a2 + y2) + a2*b3*c1*(-a2 + y2) + a1*a3*b3*c1*(-a2 + y2) + a2*a3*b3*c1*(-a2 + y2) + a2*a3*b1*b3*c1*(-a2 + y2) + b2*b3*c1*(-a2 + y2) + a2*b2*b3*c1*(-a2 + y2) + a1*a2*b2*b3*c1*(-a2 + y2) + a1*a3*b2*b3*c1*(-a2 + y2) + a2*a3*b2*b3*c1*(-a2 + y2) + b1*b2*b3*c1*(-a2 + y2) + a2*b1*b2*b3*c1*(-a2 + y2) + a1*a3*c2*(-a2 + y2) + a1*a3*b1*c2*(-a2 + y2) + a1*a3*b2*c2*(-a2 + y2) + a3*b1*b2*c2*(-a2 + y2) + a1*a3*b1*b2*c2*(-a2 + y2) + a1*a2*b3*c2*(-a2 + y2) + a2*b1*b3*c2*(-a2 + y2) + a1*a2*b1*b3*c2*(-a2 + y2) + a1*a2*a3*b1*b3*c2*(-a2 + y2) + a1*a3*b2*b3*c2*(-a2 + y2) + b1*b2*b3*c2*(-a2 + y2) + a2*b1*b2*b3*c2*(-a2 + y2) + a3*b1*b2*b3*c2*(-a2 + y2) + a1*a3*b1*b2*b3*c2*(-a2 + y2) + a2*a3*b1*b2*b3*c2*(-a2 + y2) + a1*a2*a3*b1*b2*b3*c2*(-a2 + y2) + a2*a3*c1*c2*(-a2 + y2) + a3*b1*c1*c2*(-a2 + y2) + a3*b2*c1*c2*(-a2 + y2) + a3*b1*b2*c1*c2*(-a2 + y2) + b3*c1*c2*(-a2 + y2) + a1*b3*c1*c2*(-a2 + y2) + a2*b3*c1*c2*(-a2 + y2) + a3*b3*c1*c2*(-a2 + y2) + a1*b1*b3*c1*c2*(-a2 + y2) + a1*a2*b1*b3*c1*c2*(-a2 + y2) + a3*b1*b3*c1*c2*(-a2 + y2) + a1*a3*b1*b3*c1*c2*(-a2 + y2) + a2*a3*b1*b3*c1*c2*(-a2 + y2) + a2*b2*b3*c1*c2*(-a2 + y2) + b1*b2*b3*c1*c2*(-a2 + y2) + a2*b1*b2*b3*c1*c2*(-a2 + y2) + a1*a2*b1*b2*b3*c1*c2*(-a2 + y2) + a1*a3*b1*b2*b3*c1*c2*(-a2 + y2) + a2*a3*b1*b2*b3*c1*c2*(-a2 + y2) + a1*a2*c3*(-a2 + y2) + a1*a3*c3*(-a2 + y2) + a1*a2*b1*c3*(-a2 + y2) + a1*a3*b1*c3*(-a2 + y2) + a1*b2*c3*(-a2 + y2) + a1*a2*b2*c3*(-a2 + y2) + a1*a3*b2*c3*(-a2 + y2) + a1*b1*b2*c3*(-a2 + y2) + a2*b1*b2*c3*(-a2 + y2) + a1*a2*b1*b2*c3*(-a2 + y2) + a3*b1*b2*c3*(-a2 + y2) + a1*a3*b1*b2*c3*(-a2 + y2) + a1*a2*b3*c3*(-a2 + y2) + b1*b3*c3*(-a2 + y2) + a1*b1*b3*c3*(-a2 + y2) + a2*b1*b3*c3*(-a2 + y2) + a1*a2*b1*b3*c3*(-a2 + y2) + a2*c1*c3*(-a2 + y2) + a3*c1*c3*(-a2 + y2) + a1*b1*c1*c3*(-a2 + y2) + a2*b1*c1*c3*(-a2 + y2) + a3*b1*c1*c3*(-a2 + y2) + b2*c1*c3*(-a2 + y2) + a2*b2*c1*c3*(-a2 + y2) + a3*b2*c1*c3*(-a2 + y2) + a1*b1*b2*c1*c3*(-a2 + y2) + a2*b1*b2*c1*c3*(-a2 + y2) + a3*b1*b2*c1*c3*(-a2 + y2) + b3*c1*c3*(-a2 + y2) + a2*b3*c1*c3*(-a2 + y2) + b1*b3*c1*c3*(-a2 + y2) + a2*b1*b3*c1*c3*(-a2 + y2) + a1*c2*c3*(-a2 + y2) + b1*c2*c3*(-a2 + y2) + a1*b1*c2*c3*(-a2 + y2) + a1*b3*c2*c3*(-a2 + y2) + a1*b1*b3*c2*c3*(-a2 + y2) + a1*b2*b3*c2*c3*(-a2 + y2) + b1*b2*b3*c2*c3*(-a2 + y2) + a1*b1*b2*b3*c2*c3*(-a2 + y2) + c1*c2*c3*(-a2 + y2) + a3*c1*c2*c3*(-a2 + y2) + b1*c1*c2*c3*(-a2 + y2) + b2*c1*c2*c3*(-a2 + y2) + a3*b2*c1*c2*c3*(-a2 + y2) + b3*c1*c2*c3*(-a2 + y2) + a2*b3*c1*c2*c3*(-a2 + y2) + a3*b3*c1*c2*c3*(-a2 + y2) + a2*a3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*(-a1 + x1)*(-a2 + y2) + a2*a3*b1*(-a1 + x1)*(-a2 + y2) + a3*b2*(-a1 + x1)*(-a2 + y2) + a1*a3*b2*(-a1 + x1)*(-a2 + y2) + a2*a3*b2*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b2*(-a1 + x1)*(-a2 + y2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + y2) + b3*(-a1 + x1)*(-a2 + y2) + a2*b3*(-a1 + x1)*(-a2 + y2) + a3*b3*(-a1 + x1)*(-a2 + y2) + a1*a3*b3*(-a1 + x1)*(-a2 + y2) + a2*a3*b3*(-a1 + x1)*(-a2 + y2) + b1*b3*(-a1 + x1)*(-a2 + y2) + a2*b1*b3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b3*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*(-a1 + x1)*(-a2 + y2) + a1*a3*b2*b3*(-a1 + x1)*(-a2 + y2) + a3*b2*c1*(-a1 + x1)*(-a2 + y2) + b3*c1*(-a1 + x1)*(-a2 + y2) + a2*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*b3*c1*(-a1 + x1)*(-a2 + y2) + b1*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*c2*(-a1 + x1)*(-a2 + y2) + a3*b2*c2*(-a1 + x1)*(-a2 + y2) + b3*c2*(-a1 + x1)*(-a2 + y2) + a2*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + b1*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + b3*c1*c2*(-a1 + x1)*(-a2 + y2) + b2*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + a1*c3*(-a1 + x1)*(-a2 + y2) + a2*c3*(-a1 + x1)*(-a2 + y2) + a3*c3*(-a1 + x1)*(-a2 + y2) + a1*b2*c3*(-a1 + x1)*(-a2 + y2) + a2*b2*c3*(-a1 + x1)*(-a2 + y2) + a3*b2*c3*(-a1 + x1)*(-a2 + y2) + b3*c3*(-a1 + x1)*(-a2 + y2) + a2*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*c1*c3*(-a1 + x1)*(-a2 + y2) + b3*c1*c3*(-a1 + x1)*(-a2 + y2) + b1*b3*c1*c3*(-a1 + x1)*(-a2 + y2) + c2*c3*(-a1 + x1)*(-a2 + y2) + b1*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + b2*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*b3*(-a2 + x2)*(-a2 + y2) + a1*b1*b3*c1*(-a2 + x2)*(-a2 + y2) + a1*b2*b3*c2*(-a2 + x2)*(-a2 + y2) + b1*b3*c1*c2*(-a2 + x2)*(-a2 + y2) + b1*b2*c1*c3*(-a2 + x2)*(-a2 + y2) + b1*b3*c1*c3*(-a2 + x2)*(-a2 + y2) + a1*(-a3 + x3)*(-a2 + y2) + a1*a3*(-a3 + x3)*(-a2 + y2) + b1*(-a3 + x3)*(-a2 + y2) + a1*b1*(-a3 + x3)*(-a2 + y2) + a2*b1*(-a3 + x3)*(-a2 + y2) + a3*b1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*(-a3 + x3)*(-a2 + y2) + a1*b2*(-a3 + x3)*(-a2 + y2) + a1*a3*b2*(-a3 + x3)*(-a2 + y2) + b1*b2*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*(-a3 + x3)*(-a2 + y2) + a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*b3*(-a3 + x3)*(-a2 + y2) + a1*a3*b3*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*(-a3 + x3)*(-a2 + y2) + c1*(-a3 + x3)*(-a2 + y2) + a1*c1*(-a3 + x3)*(-a2 + y2) + a2*c1*(-a3 + x3)*(-a2 + y2) + a3*c1*(-a3 + x3)*(-a2 + y2) + b1*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*c1*(-a3 + x3)*(-a2 + y2) + a3*b1*c1*(-a3 + x3)*(-a2 + y2) + b2*c1*(-a3 + x3)*(-a2 + y2) + a1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*b2*c1*(-a3 + x3)*(-a2 + y2) + a3*b2*c1*(-a3 + x3)*(-a2 + y2) + b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + b3*c1*(-a3 + x3)*(-a2 + y2) + a3*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a3*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*c2*(-a3 + x3)*(-a2 + y2) + b1*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*c2*(-a3 + x3)*(-a2 + y2) + a1*b2*c2*(-a3 + x3)*(-a2 + y2) + b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*b3*c2*(-a3 + x3)*(-a2 + y2) + c1*c2*(-a3 + x3)*(-a2 + y2) + a2*c1*c2*(-a3 + x3)*(-a2 + y2) + b2*c1*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b2*c1*c2*(-a3 + x3)*(-a2 + y2) + b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + b3*c1*c3*(-a3 + x3)*(-a2 + y2) + b1*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + b2*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + a3*(-a1 + y1)*(-a2 + y2) + a2*a3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*(-a1 + y1)*(-a2 + y2) + a2*a3*b1*(-a1 + y1)*(-a2 + y2) + a1*a3*b2*(-a1 + y1)*(-a2 + y2) + a2*a3*b2*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b2*(-a1 + y1)*(-a2 + y2) + a2*a3*b1*b2*(-a1 + y1)*(-a2 + y2) + b3*(-a1 + y1)*(-a2 + y2) + a1*a3*b3*(-a1 + y1)*(-a2 + y2) + a2*a3*b3*(-a1 + y1)*(-a2 + y2) + a1*b1*b3*(-a1 + y1)*(-a2 + y2) + a3*b1*b3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b3*(-a1 + y1)*(-a2 + y2) + a1*a3*b2*b3*(-a1 + y1)*(-a2 + y2) + a3*b2*c1*(-a1 + y1)*(-a2 + y2) + b3*c1*(-a1 + y1)*(-a2 + y2) + a2*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*b2*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*b1*b2*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*c2*(-a1 + y1)*(-a2 + y2) + a3*b2*c2*(-a1 + y1)*(-a2 + y2) + a2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b3*c2*(-a1 + y1)*(-a2 + y2) + b1*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b1*b3*c2*(-a1 + y1)*(-a2 + y2) + b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b1*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + b3*c1*c2*(-a1 + y1)*(-a2 + y2) + b2*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + c3*(-a1 + y1)*(-a2 + y2) + a1*c3*(-a1 + y1)*(-a2 + y2) + a2*c3*(-a1 + y1)*(-a2 + y2) + a3*c3*(-a1 + y1)*(-a2 + y2) + b2*c3*(-a1 + y1)*(-a2 + y2) + a1*b2*c3*(-a1 + y1)*(-a2 + y2) + a2*b2*c3*(-a1 + y1)*(-a2 + y2) + a3*b2*c3*(-a1 + y1)*(-a2 + y2) + b3*c3*(-a1 + y1)*(-a2 + y2) + a2*b3*c3*(-a1 + y1)*(-a2 + y2) + c1*c3*(-a1 + y1)*(-a2 + y2) + a1*c1*c3*(-a1 + y1)*(-a2 + y2) + b3*c1*c3*(-a1 + y1)*(-a2 + y2) + b1*b3*c1*c3*(-a1 + y1)*(-a2 + y2) + c2*c3*(-a1 + y1)*(-a2 + y2) + b1*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + b2*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + (a1*a3*b1*b2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b2*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b2*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + a1*a2*a3*(-a3 + y3) + a2*a3*b1*(-a3 + y3) + a1*b2*(-a3 + y3) + a1*a2*b2*(-a3 + y3) + a1*a3*b2*(-a3 + y3) + a1*a2*a3*b2*(-a3 + y3) + b1*b2*(-a3 + y3) + a2*b1*b2*(-a3 + y3) + a3*b1*b2*(-a3 + y3) + a1*a3*b1*b2*(-a3 + y3) + a2*a3*b1*b2*(-a3 + y3) + a1*a2*a3*b1*b2*(-a3 + y3) + a1*a2*b3*(-a3 + y3) + a2*a3*b1*b3*(-a3 + y3) + a1*b2*b3*(-a3 + y3) + a1*a2*a3*b2*b3*(-a3 + y3) + b1*b2*b3*(-a3 + y3) + a1*b1*b2*b3*(-a3 + y3) + a2*b1*b2*b3*(-a3 + y3) + a3*b1*b2*b3*(-a3 + y3) + a1*a3*b1*b2*b3*(-a3 + y3) + a2*a3*b1*b2*b3*(-a3 + y3) + a2*b1*c1*(-a3 + y3) + a1*a2*b1*c1*(-a3 + y3) + a2*b1*b3*c1*(-a3 + y3) + a1*a2*a3*b1*b3*c1*(-a3 + y3) + b2*b3*c1*(-a3 + y3) + a1*b2*b3*c1*(-a3 + y3) + a2*b2*b3*c1*(-a3 + y3) + a3*b2*b3*c1*(-a3 + y3) + a1*a3*b2*b3*c1*(-a3 + y3) + a2*a3*b2*b3*c1*(-a3 + y3) + b1*b2*b3*c1*(-a3 + y3) + a1*a2*b1*b2*b3*c1*(-a3 + y3) + a3*b1*b2*b3*c1*(-a3 + y3) + a1*a2*a3*b1*b2*b3*c1*(-a3 + y3) + a1*a2*c2*(-a3 + y3) + a1*a2*b1*c2*(-a3 + y3) + a1*a3*b1*c2*(-a3 + y3) + a1*b2*c2*(-a3 + y3) + a1*a2*b2*c2*(-a3 + y3) + a1*b1*b2*c2*(-a3 + y3) + a2*b1*b2*c2*(-a3 + y3) + a1*a2*b1*b2*c2*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a3 + y3) + a1*b3*c2*(-a3 + y3) + a1*a3*b3*c2*(-a3 + y3) + b1*b3*c2*(-a3 + y3) + a2*b1*b3*c2*(-a3 + y3) + a1*a2*b1*b3*c2*(-a3 + y3) + a3*b1*b3*c2*(-a3 + y3) + a1*a3*b1*b3*c2*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a3 + y3) + a1*b2*b3*c2*(-a3 + y3) + a1*a2*b2*b3*c2*(-a3 + y3) + a1*a3*b2*b3*c2*(-a3 + y3) + c1*c2*(-a3 + y3) + a1*c1*c2*(-a3 + y3) + a2*c1*c2*(-a3 + y3) + a1*a2*c1*c2*(-a3 + y3) + a3*c1*c2*(-a3 + y3) + a1*b1*c1*c2*(-a3 + y3) + a3*b1*c1*c2*(-a3 + y3) + b2*c1*c2*(-a3 + y3) + a1*b2*c1*c2*(-a3 + y3) + a2*b2*c1*c2*(-a3 + y3) + a3*b2*c1*c2*(-a3 + y3) + a1*b1*b2*c1*c2*(-a3 + y3) + a1*a2*b1*b2*c1*c2*(-a3 + y3) + a1*a3*b1*b2*c1*c2*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a3 + y3) + a1*b3*c1*c2*(-a3 + y3) + a2*b3*c1*c2*(-a3 + y3) + a3*b3*c1*c2*(-a3 + y3) + b1*b3*c1*c2*(-a3 + y3) + b2*b3*c1*c2*(-a3 + y3) + a3*b2*b3*c1*c2*(-a3 + y3) + b1*b2*b3*c1*c2*(-a3 + y3) + a2*b1*b2*b3*c1*c2*(-a3 + y3) + a1*a2*b1*b2*b3*c1*c2*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c2*(-a3 + y3) + a2*a3*b1*b2*b3*c1*c2*(-a3 + y3) + a2*b1*c3*(-a3 + y3) + a1*a2*b1*c3*(-a3 + y3) + a2*a3*b1*c3*(-a3 + y3) + a1*b2*c3*(-a3 + y3) + a1*b1*b2*c3*(-a3 + y3) + a1*a2*b1*b2*c3*(-a3 + y3) + a3*b1*b2*c3*(-a3 + y3) + a2*a3*b1*b2*c3*(-a3 + y3) + a1*a2*b3*c3*(-a3 + y3) + a1*b2*b3*c3*(-a3 + y3) + a1*a2*b2*b3*c3*(-a3 + y3) + a2*b1*c1*c3*(-a3 + y3) + a2*b1*b2*c1*c3*(-a3 + y3) + a2*b1*b3*c1*c3*(-a3 + y3) + b1*b2*b3*c1*c3*(-a3 + y3) + a2*b1*b2*b3*c1*c3*(-a3 + y3) + a1*c2*c3*(-a3 + y3) + a1*a2*c2*c3*(-a3 + y3) + a2*b1*c2*c3*(-a3 + y3) + a3*b1*c2*c3*(-a3 + y3) + a1*b2*c2*c3*(-a3 + y3) + a1*b1*b2*c2*c3*(-a3 + y3) + a2*b1*b2*c2*c3*(-a3 + y3) + a3*b1*b2*c2*c3*(-a3 + y3) + a1*b3*c2*c3*(-a3 + y3) + a2*b1*b3*c2*c3*(-a3 + y3) + a1*b2*b3*c2*c3*(-a3 + y3) + a2*b1*b2*b3*c2*c3*(-a3 + y3) + a1*c1*c2*c3*(-a3 + y3) + a2*c1*c2*c3*(-a3 + y3) + a3*c1*c2*c3*(-a3 + y3) + b1*c1*c2*c3*(-a3 + y3) + b2*c1*c2*c3*(-a3 + y3) + a1*b2*c1*c2*c3*(-a3 + y3) + a2*b2*c1*c2*c3*(-a3 + y3) + b1*b2*c1*c2*c3*(-a3 + y3) + b3*c1*c2*c3*(-a3 + y3) + a3*b3*c1*c2*c3*(-a3 + y3) + b1*b3*c1*c2*c3*(-a3 + y3) + b1*b2*b3*c1*c2*c3*(-a3 + y3) + a2*(-a1 + x1)*(-a3 + y3) + a1*a2*(-a1 + x1)*(-a3 + y3) + a2*b1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*(-a1 + x1)*(-a3 + y3) + b2*(-a1 + x1)*(-a3 + y3) + a1*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*(-a1 + x1)*(-a3 + y3) + a3*b2*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + y3) + b1*b2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a2*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + y3) + a2*b1*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b3*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + y3) + b2*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*b3*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*b3*(-a1 + x1)*(-a3 + y3) + a2*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*c1*(-a1 + x1)*(-a3 + y3) + b2*c1*(-a1 + x1)*(-a3 + y3) + a2*b2*c1*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + y3) + b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + c2*(-a1 + x1)*(-a3 + y3) + a1*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*c2*(-a1 + x1)*(-a3 + y3) + b2*c2*(-a1 + x1)*(-a3 + y3) + a1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*c2*(-a1 + x1)*(-a3 + y3) + b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + c1*c2*(-a1 + x1)*(-a3 + y3) + a1*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*c1*c2*(-a1 + x1)*(-a3 + y3) + b1*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + b2*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*b2*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + c2*c3*(-a1 + x1)*(-a3 + y3) + a1*c2*c3*(-a1 + x1)*(-a3 + y3) + a2*c2*c3*(-a1 + x1)*(-a3 + y3) + c1*c2*c3*(-a1 + x1)*(-a3 + y3) + b2*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*(-a2 + x2)*(-a3 + y3) + a1*a3*b2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + y3) + a1*a2*b3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b3*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + y3) + c1*(-a2 + x2)*(-a3 + y3) + a1*c1*(-a2 + x2)*(-a3 + y3) + a2*c1*(-a2 + x2)*(-a3 + y3) + a3*c1*(-a2 + x2)*(-a3 + y3) + b1*c1*(-a2 + x2)*(-a3 + y3) + a1*b1*c1*(-a2 + x2)*(-a3 + y3) + a2*b1*c1*(-a2 + x2)*(-a3 + y3) + a3*b1*c1*(-a2 + x2)*(-a3 + y3) + b2*c1*(-a2 + x2)*(-a3 + y3) + a1*b2*c1*(-a2 + x2)*(-a3 + y3) + a2*b2*c1*(-a2 + x2)*(-a3 + y3) + a3*b2*c1*(-a2 + x2)*(-a3 + y3) + b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + b3*c1*(-a2 + x2)*(-a3 + y3) + b1*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*c2*(-a2 + x2)*(-a3 + y3) + b1*c2*(-a2 + x2)*(-a3 + y3) + a1*b1*c2*(-a2 + x2)*(-a3 + y3) + a2*b1*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*c2*(-a2 + x2)*(-a3 + y3) + a1*b2*c2*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a2*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*(-a2 + x2)*(-a3 + y3) + c1*c2*(-a2 + x2)*(-a3 + y3) + a2*c1*c2*(-a2 + x2)*(-a3 + y3) + b2*c1*c2*(-a2 + x2)*(-a3 + y3) + b1*b2*c1*c2*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c1*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + b3*c1*c3*(-a2 + x2)*(-a3 + y3) + b1*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + b2*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b3*(-a3 + x3)*(-a3 + y3) + a2*b1*b3*c1*(-a3 + x3)*(-a3 + y3) + a1*b1*b3*c2*(-a3 + x3)*(-a3 + y3) + a2*b1*b3*c2*(-a3 + x3)*(-a3 + y3) + a1*b2*b3*c2*(-a3 + x3)*(-a3 + y3) + b1*b3*c1*c2*(-a3 + x3)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a3 + x3)*(-a3 + y3) + b1*b3*c2*c3*(-a3 + x3)*(-a3 + y3) + a1*a2*(-a1 + y1)*(-a3 + y3) + a2*b1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*(-a1 + y1)*(-a3 + y3) + a1*b2*(-a1 + y1)*(-a3 + y3) + a2*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*(-a1 + y1)*(-a3 + y3) + a3*b2*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b2*(-a1 + y1)*(-a3 + y3) + b1*b2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a1 + y1)*(-a3 + y3) + b2*b3*(-a1 + y1)*(-a3 + y3) + a2*b2*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*b3*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*b3*(-a1 + y1)*(-a3 + y3) + a2*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*c1*(-a1 + y1)*(-a3 + y3) + b2*c1*(-a1 + y1)*(-a3 + y3) + a2*b2*c1*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*c1*(-a1 + y1)*(-a3 + y3) + b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a1*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*c2*(-a1 + y1)*(-a3 + y3) + a1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b3*c2*(-a1 + y1)*(-a3 + y3) + b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*c1*c2*(-a1 + y1)*(-a3 + y3) + b1*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + b2*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*b2*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a1*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*c2*c3*(-a1 + y1)*(-a3 + y3) + c1*c2*c3*(-a1 + y1)*(-a3 + y3) + b2*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*(-a2 + y2)*(-a3 + y3) + a1*a3*b2*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b2*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a2 + y2)*(-a3 + y3) + a1*a2*b3*(-a2 + y2)*(-a3 + y3) + b1*b3*(-a2 + y2)*(-a3 + y3) + a1*b1*b3*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b3*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*(-a2 + y2)*(-a3 + y3) + c1*(-a2 + y2)*(-a3 + y3) + a1*c1*(-a2 + y2)*(-a3 + y3) + a2*c1*(-a2 + y2)*(-a3 + y3) + a3*c1*(-a2 + y2)*(-a3 + y3) + b1*c1*(-a2 + y2)*(-a3 + y3) + a1*b1*c1*(-a2 + y2)*(-a3 + y3) + a2*b1*c1*(-a2 + y2)*(-a3 + y3) + a3*b1*c1*(-a2 + y2)*(-a3 + y3) + b2*c1*(-a2 + y2)*(-a3 + y3) + a1*b2*c1*(-a2 + y2)*(-a3 + y3) + a2*b2*c1*(-a2 + y2)*(-a3 + y3) + a3*b2*c1*(-a2 + y2)*(-a3 + y3) + b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + b3*c1*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a3*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*c2*(-a2 + y2)*(-a3 + y3) + b1*c2*(-a2 + y2)*(-a3 + y3) + a1*b1*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*c2*(-a2 + y2)*(-a3 + y3) + a1*b2*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + a2*c1*c2*(-a2 + y2)*(-a3 + y3) + b2*c1*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*c1*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + b3*c1*c3*(-a2 + y2)*(-a3 + y3) + b1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + b2*c1*c2*c3*(-a2 + y2)*(-a3 + y3) + (a1*a3*b1*b2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*b2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b3*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b3*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + a1*a2*a3*b1*(-a1 + z1) + a1*a2*a3*b1*b2*(-a1 + z1) + a1*a2*a3*b3*(-a1 + z1) + a2*a3*b1*b3*(-a1 + z1) + a1*a2*a3*b1*b3*(-a1 + z1) + a1*a2*a3*b2*b3*(-a1 + z1) + a1*a3*b1*b2*b3*(-a1 + z1) + a1*a2*a3*b1*b2*b3*(-a1 + z1) + a2*a3*b1*c1*(-a1 + z1) + a2*a3*b2*c1*(-a1 + z1) + a3*b1*b2*c1*(-a1 + z1) + a1*a3*b1*b2*c1*(-a1 + z1) + a2*b3*c1*(-a1 + z1) + a1*a2*b3*c1*(-a1 + z1) + a2*a3*b3*c1*(-a1 + z1) + a3*b1*b2*b3*c1*(-a1 + z1) + a1*a3*b1*b2*b3*c1*(-a1 + z1) + a1*a3*b1*b2*c2*(-a1 + z1) + a1*b3*c2*(-a1 + z1) + a2*b3*c2*(-a1 + z1) + a1*a3*b3*c2*(-a1 + z1) + a2*a3*b3*c2*(-a1 + z1) + b1*b3*c2*(-a1 + z1) + a1*b1*b3*c2*(-a1 + z1) + a2*b1*b3*c2*(-a1 + z1) + a1*a2*b1*b3*c2*(-a1 + z1) + a3*b1*b3*c2*(-a1 + z1) + a1*a3*b1*b3*c2*(-a1 + z1) + a2*a3*b1*b3*c2*(-a1 + z1) + a1*a2*a3*b1*b3*c2*(-a1 + z1) + b2*b3*c2*(-a1 + z1) + a1*b2*b3*c2*(-a1 + z1) + a1*a2*b2*b3*c2*(-a1 + z1) + a1*a3*b2*b3*c2*(-a1 + z1) + a2*b1*b2*b3*c2*(-a1 + z1) + a3*b1*b2*b3*c2*(-a1 + z1) + a2*a3*b1*b2*b3*c2*(-a1 + z1) + a1*a2*a3*b1*b2*b3*c2*(-a1 + z1) + a1*a3*c1*c2*(-a1 + z1) + a2*a3*c1*c2*(-a1 + z1) + a3*b1*c1*c2*(-a1 + z1) + a3*b2*c1*c2*(-a1 + z1) + a3*b1*b2*c1*c2*(-a1 + z1) + b3*c1*c2*(-a1 + z1) + a2*a3*b1*b3*c1*c2*(-a1 + z1) + b2*b3*c1*c2*(-a1 + z1) + a2*b2*b3*c1*c2*(-a1 + z1) + a3*b2*b3*c1*c2*(-a1 + z1) + a2*b1*b2*b3*c1*c2*(-a1 + z1) + a2*a3*b1*b2*b3*c1*c2*(-a1 + z1) + a1*b1*b2*c3*(-a1 + z1) + a1*a2*b1*b2*c3*(-a1 + z1) + a1*a3*b1*b2*c3*(-a1 + z1) + a1*a2*b3*c3*(-a1 + z1) + a1*a2*b1*b3*c3*(-a1 + z1) + a2*a3*b1*b3*c3*(-a1 + z1) + a1*b2*b3*c3*(-a1 + z1) + a2*b2*b3*c3*(-a1 + z1) + a1*a3*b2*b3*c3*(-a1 + z1) + a2*a3*b2*b3*c3*(-a1 + z1) + a1*a2*c1*c3*(-a1 + z1) + a2*b2*c1*c3*(-a1 + z1) + a3*b2*c1*c3*(-a1 + z1) + b1*b2*c1*c3*(-a1 + z1) + a1*b1*b2*c1*c3*(-a1 + z1) + a2*b1*b2*c1*c3*(-a1 + z1) + a3*b1*b2*c1*c3*(-a1 + z1) + a2*b3*c1*c3*(-a1 + z1) + b1*b2*b3*c1*c3*(-a1 + z1) + a3*b1*b2*b3*c1*c3*(-a1 + z1) + a1*a3*c2*c3*(-a1 + z1) + a2*a3*c2*c3*(-a1 + z1) + b1*c2*c3*(-a1 + z1) + a1*b1*c2*c3*(-a1 + z1) + a2*b1*c2*c3*(-a1 + z1) + a3*b1*c2*c3*(-a1 + z1) + b2*c2*c3*(-a1 + z1) + a1*b2*c2*c3*(-a1 + z1) + a2*b2*c2*c3*(-a1 + z1) + a3*b2*c2*c3*(-a1 + z1) + b3*c2*c3*(-a1 + z1) + a3*b3*c2*c3*(-a1 + z1) + a2*b1*b3*c2*c3*(-a1 + z1) + a3*b1*b3*c2*c3*(-a1 + z1) + a1*b2*b3*c2*c3*(-a1 + z1) + a2*b2*b3*c2*c3*(-a1 + z1) + a3*b2*b3*c2*c3*(-a1 + z1) + a1*b1*b2*b3*c2*c3*(-a1 + z1) + b2*c1*c2*c3*(-a1 + z1) + a3*b2*c1*c2*c3*(-a1 + z1) + b1*b2*c1*c2*c3*(-a1 + z1) + a1*b3*c1*c2*c3*(-a1 + z1) + a2*b3*c1*c2*c3*(-a1 + z1) + a3*b3*c1*c2*c3*(-a1 + z1) + b2*b3*c1*c2*c3*(-a1 + z1) + a1*a3*b2*(-a1 + x1)*(-a1 + z1) + a1*a2*b3*(-a1 + x1)*(-a1 + z1) + a2*a3*b3*(-a1 + x1)*(-a1 + z1) + a3*b2*c1*(-a1 + x1)*(-a1 + z1) + a2*b3*c1*(-a1 + x1)*(-a1 + z1) + a3*b2*b3*c1*(-a1 + x1)*(-a1 + z1) + a3*b2*c2*(-a1 + x1)*(-a1 + z1) + a1*b3*c2*(-a1 + x1)*(-a1 + z1) + a2*b3*c2*(-a1 + x1)*(-a1 + z1) + b2*b3*c2*(-a1 + x1)*(-a1 + z1) + a1*b2*b3*c2*(-a1 + x1)*(-a1 + z1) + b2*b3*c1*c2*(-a1 + x1)*(-a1 + z1) + a2*b2*c3*(-a1 + x1)*(-a1 + z1) + a3*b2*c3*(-a1 + x1)*(-a1 + z1) + a2*b3*c3*(-a1 + x1)*(-a1 + z1) + b2*c1*c3*(-a1 + x1)*(-a1 + z1) + c2*c3*(-a1 + x1)*(-a1 + z1) + b2*b3*c2*c3*(-a1 + x1)*(-a1 + z1) + a1*a3*(-a2 + x2)*(-a1 + z1) + a2*a3*b1*(-a2 + x2)*(-a1 + z1) + a1*a3*b2*(-a2 + x2)*(-a1 + z1) + a2*a3*b1*b2*(-a2 + x2)*(-a1 + z1) + a1*a2*b3*(-a2 + x2)*(-a1 + z1) + a1*a3*b3*(-a2 + x2)*(-a1 + z1) + a2*a3*b3*(-a2 + x2)*(-a1 + z1) + a1*a2*b1*b3*(-a2 + x2)*(-a1 + z1) + a1*a3*b2*b3*(-a2 + x2)*(-a1 + z1) + a3*b1*c1*(-a2 + x2)*(-a1 + z1) + a3*b1*b2*c1*(-a2 + x2)*(-a1 + z1) + a1*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a2*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a3*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a3*b1*b2*b3*c1*(-a2 + x2)*(-a1 + z1) + a3*c2*(-a2 + x2)*(-a1 + z1) + a3*b2*c2*(-a2 + x2)*(-a1 + z1) + b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b3*c2*(-a2 + x2)*(-a1 + z1) + a2*b3*c2*(-a2 + x2)*(-a1 + z1) + b1*b3*c2*(-a2 + x2)*(-a1 + z1) + a3*b1*b3*c2*(-a2 + x2)*(-a1 + z1) + b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a3*b1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a1 + z1) + a1*c3*(-a2 + x2)*(-a1 + z1) + a2*c3*(-a2 + x2)*(-a1 + z1) + a3*c3*(-a2 + x2)*(-a1 + z1) + a1*b2*c3*(-a2 + x2)*(-a1 + z1) + a2*b2*c3*(-a2 + x2)*(-a1 + z1) + a3*b2*c3*(-a2 + x2)*(-a1 + z1) + a2*b3*c3*(-a2 + x2)*(-a1 + z1) + c1*c3*(-a2 + x2)*(-a1 + z1) + a1*c1*c3*(-a2 + x2)*(-a1 + z1) + b1*b3*c1*c3*(-a2 + x2)*(-a1 + z1) + c2*c3*(-a2 + x2)*(-a1 + z1) + b3*c2*c3*(-a2 + x2)*(-a1 + z1) + b1*b3*c2*c3*(-a2 + x2)*(-a1 + z1) + b2*b3*c2*c3*(-a2 + x2)*(-a1 + z1) + a1*a2*(-a3 + x3)*(-a1 + z1) + a2*a3*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*(-a3 + x3)*(-a1 + z1) + a1*a2*b2*(-a3 + x3)*(-a1 + z1) + a2*a3*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*b3*(-a3 + x3)*(-a1 + z1) + a2*a3*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*b2*b3*(-a3 + x3)*(-a1 + z1) + a2*a3*b2*b3*(-a3 + x3)*(-a1 + z1) + a2*b1*c1*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a1 + z1) + a2*b1*b3*c1*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*b3*c1*(-a3 + x3)*(-a1 + z1) + c2*(-a3 + x3)*(-a1 + z1) + a1*c2*(-a3 + x3)*(-a1 + z1) + a2*c2*(-a3 + x3)*(-a1 + z1) + a3*c2*(-a3 + x3)*(-a1 + z1) + b1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*c2*(-a3 + x3)*(-a1 + z1) + b2*c2*(-a3 + x3)*(-a1 + z1) + a1*b2*c2*(-a3 + x3)*(-a1 + z1) + a2*b2*c2*(-a3 + x3)*(-a1 + z1) + a3*b2*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b3*c2*(-a3 + x3)*(-a1 + z1) + a3*b3*c2*(-a3 + x3)*(-a1 + z1) + b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*a3*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a3*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + c1*c2*(-a3 + x3)*(-a1 + z1) + a1*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*c1*c2*(-a3 + x3)*(-a1 + z1) + b1*c1*c2*(-a3 + x3)*(-a1 + z1) + b2*c1*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + b1*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a1*c2*c3*(-a3 + x3)*(-a1 + z1) + a2*c2*c3*(-a3 + x3)*(-a1 + z1) + c1*c2*c3*(-a3 + x3)*(-a1 + z1) + b2*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + a3*b2*(-a1 + y1)*(-a1 + z1) + a1*a3*b2*(-a1 + y1)*(-a1 + z1) + a3*b1*b2*(-a1 + y1)*(-a1 + z1) + a2*b3*(-a1 + y1)*(-a1 + z1) + a1*a2*b3*(-a1 + y1)*(-a1 + z1) + a2*a3*b3*(-a1 + y1)*(-a1 + z1) + a2*b1*b3*(-a1 + y1)*(-a1 + z1) + a3*b2*b3*(-a1 + y1)*(-a1 + z1) + a3*b2*c1*(-a1 + y1)*(-a1 + z1) + a2*b3*c1*(-a1 + y1)*(-a1 + z1) + a3*b2*b3*c1*(-a1 + y1)*(-a1 + z1) + a3*b2*c2*(-a1 + y1)*(-a1 + z1) + a1*b3*c2*(-a1 + y1)*(-a1 + z1) + a2*b3*c2*(-a1 + y1)*(-a1 + z1) + b1*b3*c2*(-a1 + y1)*(-a1 + z1) + a1*b2*b3*c2*(-a1 + y1)*(-a1 + z1) + b1*b2*b3*c2*(-a1 + y1)*(-a1 + z1) + b2*b3*c1*c2*(-a1 + y1)*(-a1 + z1) + b2*c3*(-a1 + y1)*(-a1 + z1) + a2*b2*c3*(-a1 + y1)*(-a1 + z1) + a3*b2*c3*(-a1 + y1)*(-a1 + z1) + a2*b3*c3*(-a1 + y1)*(-a1 + z1) + b2*c1*c3*(-a1 + y1)*(-a1 + z1) + c2*c3*(-a1 + y1)*(-a1 + z1) + b2*b3*c2*c3*(-a1 + y1)*(-a1 + z1) + a1*a3*(-a2 + y2)*(-a1 + z1) + a2*a3*b1*(-a2 + y2)*(-a1 + z1) + a1*a3*b2*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b2*(-a2 + y2)*(-a1 + z1) + a2*a3*b1*b2*(-a2 + y2)*(-a1 + z1) + a1*a2*b3*(-a2 + y2)*(-a1 + z1) + a3*b3*(-a2 + y2)*(-a1 + z1) + a1*a3*b3*(-a2 + y2)*(-a1 + z1) + a2*a3*b3*(-a2 + y2)*(-a1 + z1) + b1*b3*(-a2 + y2)*(-a1 + z1) + a2*b1*b3*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b3*(-a2 + y2)*(-a1 + z1) + a3*b2*b3*(-a2 + y2)*(-a1 + z1) + a1*a3*b2*b3*(-a2 + y2)*(-a1 + z1) + a3*b1*c1*(-a2 + y2)*(-a1 + z1) + a1*b1*b3*c1*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*b3*c1*(-a2 + y2)*(-a1 + z1) + a3*c2*(-a2 + y2)*(-a1 + z1) + a3*b2*c2*(-a2 + y2)*(-a1 + z1) + b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b3*c2*(-a2 + y2)*(-a1 + z1) + a2*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b1*b3*c2*(-a2 + y2)*(-a1 + z1) + a3*b1*b3*c2*(-a2 + y2)*(-a1 + z1) + b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + b1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + b1*b3*c1*c2*(-a2 + y2)*(-a1 + z1) + a1*c3*(-a2 + y2)*(-a1 + z1) + a2*c3*(-a2 + y2)*(-a1 + z1) + a3*c3*(-a2 + y2)*(-a1 + z1) + a1*b2*c3*(-a2 + y2)*(-a1 + z1) + a2*b2*c3*(-a2 + y2)*(-a1 + z1) + a3*b2*c3*(-a2 + y2)*(-a1 + z1) + b3*c3*(-a2 + y2)*(-a1 + z1) + a2*b3*c3*(-a2 + y2)*(-a1 + z1) + a1*c1*c3*(-a2 + y2)*(-a1 + z1) + b1*b3*c1*c3*(-a2 + y2)*(-a1 + z1) + c2*c3*(-a2 + y2)*(-a1 + z1) + b3*c2*c3*(-a2 + y2)*(-a1 + z1) + b1*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + b2*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + a1*a2*(-a3 + y3)*(-a1 + z1) + a2*a3*(-a3 + y3)*(-a1 + z1) + a2*b1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*(-a3 + y3)*(-a1 + z1) + a1*b2*(-a3 + y3)*(-a1 + z1) + a2*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*b2*(-a3 + y3)*(-a1 + z1) + a2*a3*b2*(-a3 + y3)*(-a1 + z1) + b1*b2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*b3*(-a3 + y3)*(-a1 + z1) + a2*a3*b3*(-a3 + y3)*(-a1 + z1) + a2*b1*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b3*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b3*(-a3 + y3)*(-a1 + z1) + b2*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*b2*b3*(-a3 + y3)*(-a1 + z1) + a3*b2*b3*(-a3 + y3)*(-a1 + z1) + a1*a3*b2*b3*(-a3 + y3)*(-a1 + z1) + a2*b1*c1*(-a3 + y3)*(-a1 + z1) + b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*c1*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*b3*c1*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*b3*c1*(-a3 + y3)*(-a1 + z1) + c2*(-a3 + y3)*(-a1 + z1) + a1*c2*(-a3 + y3)*(-a1 + z1) + a2*c2*(-a3 + y3)*(-a1 + z1) + a3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*c2*(-a3 + y3)*(-a1 + z1) + a1*b2*c2*(-a3 + y3)*(-a1 + z1) + a2*b2*c2*(-a3 + y3)*(-a1 + z1) + a3*b2*c2*(-a3 + y3)*(-a1 + z1) + b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b3*c2*(-a3 + y3)*(-a1 + z1) + a3*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*c1*c2*(-a3 + y3)*(-a1 + z1) + a2*c1*c2*(-a3 + y3)*(-a1 + z1) + b1*c1*c2*(-a3 + y3)*(-a1 + z1) + b2*c1*c2*(-a3 + y3)*(-a1 + z1) + b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + b1*b2*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + c2*c3*(-a3 + y3)*(-a1 + z1) + a1*c2*c3*(-a3 + y3)*(-a1 + z1) + a2*c2*c3*(-a3 + y3)*(-a1 + z1) + c1*c2*c3*(-a3 + y3)*(-a1 + z1) + b2*c1*c2*c3*(-a3 + y3)*(-a1 + z1) + (a2*a3*b1*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*a3*b2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*a2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*a3*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c1*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b1*b3*c1*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b2*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b2*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b2*b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + a1*a2*b1*b3*(-a2 + z2) + a1*a2*a3*b1*b2*b3*(-a2 + z2) + a3*b1*b2*c1*(-a2 + z2) + a2*a3*b1*b2*c1*(-a2 + z2) + a1*a2*a3*b1*b2*c1*(-a2 + z2) + a1*b3*c1*(-a2 + z2) + a1*a2*b3*c1*(-a2 + z2) + a1*b1*b3*c1*(-a2 + z2) + a2*b1*b3*c1*(-a2 + z2) + a1*a2*b1*b3*c1*(-a2 + z2) + a3*b1*b3*c1*(-a2 + z2) + a1*a3*b1*b3*c1*(-a2 + z2) + a1*a2*a3*b1*b3*c1*(-a2 + z2) + a1*b2*b3*c1*(-a2 + z2) + a1*a2*b2*b3*c1*(-a2 + z2) + a2*b1*b2*b3*c1*(-a2 + z2) + a1*a3*b1*b2*b3*c1*(-a2 + z2) + a2*a3*b1*b2*b3*c1*(-a2 + z2) + a1*a3*b1*b2*c2*(-a2 + z2) + a1*b1*b3*c2*(-a2 + z2) + a1*a2*a3*b1*b3*c2*(-a2 + z2) + a1*a2*b1*b2*b3*c2*(-a2 + z2) + a1*a2*a3*b1*b2*b3*c2*(-a2 + z2) + a2*a3*c1*c2*(-a2 + z2) + b3*c1*c2*(-a2 + z2) + a1*b3*c1*c2*(-a2 + z2) + a2*b3*c1*c2*(-a2 + z2) + a1*b1*b3*c1*c2*(-a2 + z2) + b2*b3*c1*c2*(-a2 + z2) + a1*b2*b3*c1*c2*(-a2 + z2) + a2*b2*b3*c1*c2*(-a2 + z2) + b1*b2*b3*c1*c2*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a2 + z2) + a1*a2*b1*b2*c3*(-a2 + z2) + a1*a3*b1*b2*c3*(-a2 + z2) + a1*a2*b1*b3*c3*(-a2 + z2) + b1*b2*c1*c3*(-a2 + z2) + a1*b1*b2*c1*c3*(-a2 + z2) + b1*b3*c1*c3*(-a2 + z2) + a1*b1*c2*c3*(-a2 + z2) + a1*b1*b2*b3*c2*c3*(-a2 + z2) + c1*c2*c3*(-a2 + z2) + b2*c1*c2*c3*(-a2 + z2) + a3*b2*c1*c2*c3*(-a2 + z2) + b3*c1*c2*c3*(-a2 + z2) + a2*b3*c1*c2*c3*(-a2 + z2) + a3*b3*c1*c2*c3*(-a2 + z2) + b1*b2*b3*c1*c2*c3*(-a2 + z2) + a3*(-a1 + x1)*(-a2 + z2) + a1*a3*(-a1 + x1)*(-a2 + z2) + a3*b1*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*(-a1 + x1)*(-a2 + z2) + a3*b2*(-a1 + x1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + z2) + b3*(-a1 + x1)*(-a2 + z2) + a1*b3*(-a1 + x1)*(-a2 + z2) + a2*b3*(-a1 + x1)*(-a2 + z2) + a3*b3*(-a1 + x1)*(-a2 + z2) + a1*a3*b3*(-a1 + x1)*(-a2 + z2) + a2*a3*b3*(-a1 + x1)*(-a2 + z2) + a1*a2*b1*b3*(-a1 + x1)*(-a2 + z2) + a1*a3*b2*b3*(-a1 + x1)*(-a2 + z2) + a3*b2*c1*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*c1*(-a1 + x1)*(-a2 + z2) + a2*b3*c1*(-a1 + x1)*(-a2 + z2) + a3*b2*b3*c1*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a2 + z2) + a3*b2*c2*(-a1 + x1)*(-a2 + z2) + a2*b3*c2*(-a1 + x1)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + b2*b3*c1*c2*(-a1 + x1)*(-a2 + z2) + a1*b2*c3*(-a1 + x1)*(-a2 + z2) + a2*b2*c3*(-a1 + x1)*(-a2 + z2) + a3*b2*c3*(-a1 + x1)*(-a2 + z2) + a2*b3*c3*(-a1 + x1)*(-a2 + z2) + a1*c1*c3*(-a1 + x1)*(-a2 + z2) + b2*c1*c3*(-a1 + x1)*(-a2 + z2) + b1*b3*c1*c3*(-a1 + x1)*(-a2 + z2) + c2*c3*(-a1 + x1)*(-a2 + z2) + b1*b3*c2*c3*(-a1 + x1)*(-a2 + z2) + b2*b3*c2*c3*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*(-a2 + x2)*(-a2 + z2) + b1*b3*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*(-a2 + x2)*(-a2 + z2) + a3*b1*b2*c1*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c1*(-a2 + x2)*(-a2 + z2) + b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + b1*b2*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a2 + z2) + b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + c1*c3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b2*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c1*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b3*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*b3*c2*(-a3 + x3)*(-a2 + z2) + c1*c2*(-a3 + x3)*(-a2 + z2) + a2*c1*c2*(-a3 + x3)*(-a2 + z2) + b2*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*c1*c2*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + c1*c2*c3*(-a3 + x3)*(-a2 + z2) + b2*c1*c2*c3*(-a3 + x3)*(-a2 + z2) + a3*(-a1 + y1)*(-a2 + z2) + a1*a3*(-a1 + y1)*(-a2 + z2) + a3*b1*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*(-a1 + y1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + y1)*(-a2 + z2) + a3*b3*(-a1 + y1)*(-a2 + z2) + a1*a3*b3*(-a1 + y1)*(-a2 + z2) + a2*a3*b3*(-a1 + y1)*(-a2 + z2) + b1*b3*(-a1 + y1)*(-a2 + z2) + a1*b1*b3*(-a1 + y1)*(-a2 + z2) + a1*a2*b1*b3*(-a1 + y1)*(-a2 + z2) + a3*b2*b3*(-a1 + y1)*(-a2 + z2) + a1*a3*b2*b3*(-a1 + y1)*(-a2 + z2) + a3*b2*c1*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*c1*(-a1 + y1)*(-a2 + z2) + a2*b3*c1*(-a1 + y1)*(-a2 + z2) + a3*b2*b3*c1*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*b3*c1*(-a1 + y1)*(-a2 + z2) + a3*b2*c2*(-a1 + y1)*(-a2 + z2) + a2*b3*c2*(-a1 + y1)*(-a2 + z2) + b2*b3*c2*(-a1 + y1)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*b3*c2*(-a1 + y1)*(-a2 + z2) + b2*b3*c1*c2*(-a1 + y1)*(-a2 + z2) + b2*c3*(-a1 + y1)*(-a2 + z2) + a1*b2*c3*(-a1 + y1)*(-a2 + z2) + a2*b2*c3*(-a1 + y1)*(-a2 + z2) + a3*b2*c3*(-a1 + y1)*(-a2 + z2) + a2*b3*c3*(-a1 + y1)*(-a2 + z2) + c1*c3*(-a1 + y1)*(-a2 + z2) + a1*c1*c3*(-a1 + y1)*(-a2 + z2) + b2*c1*c3*(-a1 + y1)*(-a2 + z2) + b1*b3*c1*c3*(-a1 + y1)*(-a2 + z2) + c2*c3*(-a1 + y1)*(-a2 + z2) + b1*b3*c2*c3*(-a1 + y1)*(-a2 + z2) + b2*b3*c2*c3*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*c1*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b2*c1*(-a2 + y2)*(-a2 + z2) + a2*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + a1*a2*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + a3*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b2*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b2*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b3*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b3*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*c1*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*c1*(-a3 + y3)*(-a2 + z2) + a1*b1*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c2*(-a3 + y3)*(-a2 + z2) + a1*b1*b3*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c2*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*b3*c2*(-a3 + y3)*(-a2 + z2) + a2*c1*c2*(-a3 + y3)*(-a2 + z2) + b2*c1*c2*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*c1*c2*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + c1*c2*c3*(-a3 + y3)*(-a2 + z2) + b2*c1*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b3*(-a1 + z1)*(-a2 + z2) + a1*a2*b1*b3*(-a1 + z1)*(-a2 + z2) + a1*a3*b2*b3*(-a1 + z1)*(-a2 + z2) + a3*b1*b2*c1*(-a1 + z1)*(-a2 + z2) + b3*c1*(-a1 + z1)*(-a2 + z2) + a1*b3*c1*(-a1 + z1)*(-a2 + z2) + a2*b3*c1*(-a1 + z1)*(-a2 + z2) + b1*b3*c1*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*c1*(-a1 + z1)*(-a2 + z2) + a3*b1*b2*b3*c1*(-a1 + z1)*(-a2 + z2) + a3*b2*c2*(-a1 + z1)*(-a2 + z2) + b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b3*c2*(-a1 + z1)*(-a2 + z2) + a2*b3*c2*(-a1 + z1)*(-a2 + z2) + b1*b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*c2*(-a1 + z1)*(-a2 + z2) + b2*b3*c2*(-a1 + z1)*(-a2 + z2) + a3*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + a3*b1*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + b2*b3*c1*c2*(-a1 + z1)*(-a2 + z2) + a1*b2*c3*(-a1 + z1)*(-a2 + z2) + a2*b2*c3*(-a1 + z1)*(-a2 + z2) + a3*b2*c3*(-a1 + z1)*(-a2 + z2) + a2*b3*c3*(-a1 + z1)*(-a2 + z2) + a1*c1*c3*(-a1 + z1)*(-a2 + z2) + b2*c1*c3*(-a1 + z1)*(-a2 + z2) + b3*c1*c3*(-a1 + z1)*(-a2 + z2) + b1*b3*c1*c3*(-a1 + z1)*(-a2 + z2) + c2*c3*(-a1 + z1)*(-a2 + z2) + b3*c2*c3*(-a1 + z1)*(-a2 + z2) + b1*b3*c2*c3*(-a1 + z1)*(-a2 + z2) + b2*b3*c2*c3*(-a1 + z1)*(-a2 + z2) + (a3*b1*b2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b2*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b2*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b2*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b2*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b3*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + c3*(a1 + x1 + y1 + z1)*(a2 + x2 + y2 + z2) + a1*a2*a3*b2*(-a3 + z3) + a2*a3*b1*b2*b3*(-a3 + z3) + a1*a2*a3*b1*b2*c1*(-a3 + z3) + a1*a2*b1*b2*b3*c1*(-a3 + z3) + a1*a2*a3*b1*b2*b3*c1*(-a3 + z3) + a1*a2*c2*(-a3 + z3) + a1*a2*b2*c2*(-a3 + z3) + b1*b2*c2*(-a3 + z3) + a1*b1*b2*c2*(-a3 + z3) + a1*a2*b1*b2*c2*(-a3 + z3) + a3*b1*b2*c2*(-a3 + z3) + a1*a3*b1*b2*c2*(-a3 + z3) + a1*a2*b3*c2*(-a3 + z3) + b1*b2*b3*c2*(-a3 + z3) + a1*b1*b2*b3*c2*(-a3 + z3) + a2*b1*b2*b3*c2*(-a3 + z3) + a3*b1*b2*b3*c2*(-a3 + z3) + a1*a3*b1*b2*b3*c2*(-a3 + z3) + a2*a3*b1*b2*b3*c2*(-a3 + z3) + a1*a2*c1*c2*(-a3 + z3) + a1*b2*c1*c2*(-a3 + z3) + a2*b2*c1*c2*(-a3 + z3) + a3*b1*b2*c1*c2*(-a3 + z3) + b1*b3*c1*c2*(-a3 + z3) + a1*b1*b3*c1*c2*(-a3 + z3) + a1*b2*b3*c1*c2*(-a3 + z3) + a2*b2*b3*c1*c2*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a3 + z3) + a3*b1*b2*b3*c1*c2*(-a3 + z3) + a1*a2*b2*c3*(-a3 + z3) + a2*b1*b2*c3*(-a3 + z3) + a1*a2*b1*b2*c3*(-a3 + z3) + a2*a3*b1*b2*c3*(-a3 + z3) + a1*a2*b2*b3*c3*(-a3 + z3) + a2*b1*b2*b3*c1*c3*(-a3 + z3) + a1*a2*c2*c3*(-a3 + z3) + a1*b1*c2*c3*(-a3 + z3) + a1*b2*c2*c3*(-a3 + z3) + b1*b3*c2*c3*(-a3 + z3) + a2*b1*b2*b3*c2*c3*(-a3 + z3) + c1*c2*c3*(-a3 + z3) + b1*c1*c2*c3*(-a3 + z3) + a1*b2*c1*c2*c3*(-a3 + z3) + a2*b2*c1*c2*c3*(-a3 + z3) + a3*b3*c1*c2*c3*(-a3 + z3) + b1*b3*c1*c2*c3*(-a3 + z3) + b2*b3*c1*c2*c3*(-a3 + z3) + a1*a2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*b3*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + x1)*(-a3 + z3) + a2*c1*(-a1 + x1)*(-a3 + z3) + a2*b1*c1*(-a1 + x1)*(-a3 + z3) + a2*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + z3) + a2*b2*b3*c1*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a3 + z3) + a1*a2*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*b3*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + z3) + c1*c2*(-a1 + x1)*(-a3 + z3) + a1*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*c1*c2*(-a1 + x1)*(-a3 + z3) + b2*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b2*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + c2*c3*(-a1 + x1)*(-a3 + z3) + a1*c2*c3*(-a1 + x1)*(-a3 + z3) + a2*c2*c3*(-a1 + x1)*(-a3 + z3) + b2*c1*c2*c3*(-a1 + x1)*(-a3 + z3) + a1*(-a2 + x2)*(-a3 + z3) + a1*a2*(-a2 + x2)*(-a3 + z3) + a1*a3*(-a2 + x2)*(-a3 + z3) + b1*(-a2 + x2)*(-a3 + z3) + a1*b1*(-a2 + x2)*(-a3 + z3) + a2*b1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*(-a2 + x2)*(-a3 + z3) + a3*b1*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*(-a2 + x2)*(-a3 + z3) + a1*b2*(-a2 + x2)*(-a3 + z3) + a1*a3*b2*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + z3) + a1*b3*(-a2 + x2)*(-a3 + z3) + a1*a2*b3*(-a2 + x2)*(-a3 + z3) + a1*a3*b3*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + z3) + c1*(-a2 + x2)*(-a3 + z3) + a1*c1*(-a2 + x2)*(-a3 + z3) + a2*c1*(-a2 + x2)*(-a3 + z3) + b1*c1*(-a2 + x2)*(-a3 + z3) + a1*b1*c1*(-a2 + x2)*(-a3 + z3) + a2*b1*c1*(-a2 + x2)*(-a3 + z3) + b2*c1*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + b3*c1*(-a2 + x2)*(-a3 + z3) + a1*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a3*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a2 + x2)*(-a3 + z3) + a2*c1*c2*(-a2 + x2)*(-a3 + z3) + b1*b2*c1*c2*(-a2 + x2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + b2*c1*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*c1*c3*(-a2 + x2)*(-a3 + z3) + b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + c1*c2*c3*(-a2 + x2)*(-a3 + z3) + b2*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*(-a3 + x3)*(-a3 + z3) + a2*b1*b2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*(-a3 + x3)*(-a3 + z3) + b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a2*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a2*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a2*a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a2*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c2*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c2*(-a3 + x3)*(-a3 + z3) + c1*c2*(-a3 + x3)*(-a3 + z3) + b1*b2*c1*c2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c1*c2*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*c2*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*c2*(-a3 + x3)*(-a3 + z3) + c1*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*a2*(-a1 + y1)*(-a3 + z3) + a2*b1*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b2*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + y1)*(-a3 + z3) + a2*b2*b3*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*b3*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + y1)*(-a3 + z3) + a2*c1*(-a1 + y1)*(-a3 + z3) + a2*b1*c1*(-a1 + y1)*(-a3 + z3) + a2*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b3*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + y1)*(-a3 + z3) + a2*b2*b3*c1*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*c1*(-a1 + y1)*(-a3 + z3) + a1*a2*b3*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*c1*c2*(-a1 + y1)*(-a3 + z3) + b2*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b2*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a1*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*c2*c3*(-a1 + y1)*(-a3 + z3) + b2*c1*c2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*(-a2 + y2)*(-a3 + z3) + a1*a3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*(-a2 + y2)*(-a3 + z3) + a3*b1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*(-a2 + y2)*(-a3 + z3) + a1*a3*b2*(-a2 + y2)*(-a3 + z3) + b1*b2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*(-a2 + y2)*(-a3 + z3) + a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a2*b3*(-a2 + y2)*(-a3 + z3) + a1*a3*b3*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*(-a2 + y2)*(-a3 + z3) + c1*(-a2 + y2)*(-a3 + z3) + a1*c1*(-a2 + y2)*(-a3 + z3) + a2*c1*(-a2 + y2)*(-a3 + z3) + b1*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*c1*(-a2 + y2)*(-a3 + z3) + b2*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b3*c1*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a3*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + c1*c2*(-a2 + y2)*(-a3 + z3) + a2*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + b2*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b2*c1*c3*(-a2 + y2)*(-a3 + z3) + b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + c1*c2*c3*(-a2 + y2)*(-a3 + z3) + b2*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*c1*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*c1*(-a3 + y3)*(-a3 + z3) + a1*a3*b1*b2*c1*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a3 + y3)*(-a3 + z3) + a1*a3*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + a2*a3*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a1*a3*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a1*a3*b2*b3*c2*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c2*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*b3*c2*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a3 + y3)*(-a3 + z3) + b1*b2*c1*c2*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*c1*c2*(-a3 + y3)*(-a3 + z3) + a3*b2*b3*c1*c2*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a3 + y3)*(-a3 + z3) + c1*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*a2*b1*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b2*b3*(-a1 + z1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + z1)*(-a3 + z3) + a2*b1*c1*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*c1*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*b3*c1*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + z1)*(-a3 + z3) + a2*b2*b3*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a1 + z1)*(-a3 + z3) + c1*c2*(-a1 + z1)*(-a3 + z3) + a1*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*c1*c2*(-a1 + z1)*(-a3 + z3) + b2*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a1 + z1)*(-a3 + z3) + c2*c3*(-a1 + z1)*(-a3 + z3) + a1*c2*c3*(-a1 + z1)*(-a3 + z3) + a2*c2*c3*(-a1 + z1)*(-a3 + z3) + b2*c1*c2*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + z2)*(-a3 + z3) + b1*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*c1*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*c1*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*c1*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a2 + z2)*(-a3 + z3) + c1*c2*(-a2 + z2)*(-a3 + z3) + a2*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*c1*c2*(-a2 + z2)*(-a3 + z3) + b2*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + b2*c1*c2*c3*(-a2 + z2)*(-a3 + z3) + (a1*a2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1 + x1 + y1 + z1)*(a2 + x2 + y2 + z2)*(a3 + x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 99 ( P4mm)
#####################################################################
Ampin99:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin99:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin99:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin99:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain99:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bxyin99:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 100 ( P4bm)
#####################################################################
Ampin100:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin100:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Azin100:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain100:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bphiin100:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + b1*b2 + a2*b1*b2 + a2*c1 + b2*c1 + a1*b2*c1 + b1*b2*c1 + a2*x1 + b2*c1*x1 + a2*y1 + b2*y1 + b2*c1*y1;
end;
#####################################################################
CGAPin100:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b1 + a1*a3*b1*b2 + a1*a2*a3*b1*b2 + a1*a2*b1*b3 + a1*a2*b2*b3 + a1*a2*a3*b2*b3 + b1*b2*b3 + a1*b1*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*c1 + a2*a3*b1*c1 + a3*b2*c1 + a1*a3*b2*c1 + a1*a2*a3*b2*c1 + a1*a3*b1*b2*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + a2*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a3*c2 + a1*a2*a3*c2 + a2*a3*b1*c2 + a1*a2*a3*b2*c2 + a3*b1*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + b1*b3*c2 + a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*a3*b2*b3*c2 + a1*a2*a3*b2*b3*c2 + b1*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a2*a3*c1*c2 + a1*a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a2*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + b3*c1*c2 + a1*a2*a3*b3*c1*c2 + b1*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*b2*c3 + a1*a2*b2*c3 + a1*a3*b2*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a1*a2*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*b1*b3*c3 + a1*a2*a3*b1*b3*c3 + a1*b2*b3*c3 + a1*a2*a3*b2*b3*c3 + a1*b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a2*c1*c3 + a1*a2*c1*c3 + a2*b1*c1*c3 + a1*a2*b1*c1*c3 + a2*a3*b1*c1*c3 + b2*c1*c3 + a1*b2*c1*c3 + a2*b2*c1*c3 + a1*a2*b2*c1*c3 + a1*a3*b2*c1*c3 + b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a2*a3*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a2*a3*b3*c1*c3 + a1*a2*a3*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + a2*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a1*a2*a3*b2*c2*c3 + b1*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a1*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*b3*c2*c3 + a1*a2*a3*b3*c2*c3 + b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a3*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + c1*c2*c3 + a1*c1*c2*c3 + a1*a2*c1*c2*c3 + a3*c1*c2*c3 + b1*c1*c2*c3 + a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a1*b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a2*a3*b1*b2*c1*c2*c3 + b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + a2*a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*a2*b2*b3*c1*c2*c3 + a1*a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*b1*b2*b3*c1*c2*c3 + a3*b1*b2*b3*c1*c2*c3 + a3*b2*x1 + a3*b1*b2*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a2*b1*b3*x1 + b2*b3*x1 + a2*a3*c1*x1 + a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b3*c1*x1 + b2*b3*c1*x1 + a1*b2*b3*c1*x1 + a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a3*c2*x1 + a2*a3*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*a3*b1*b2*c2*x1 + b3*c2*x1 + a1*a2*b3*c2*x1 + a1*a3*b3*c2*x1 + a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b2*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a2*a3*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a2*b2*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a2*a3*b2*b3*c1*c2*x1 + a2*c3*x1 + b2*c3*x1 + a2*b2*c3*x1 + a1*a2*b2*c3*x1 + a1*a3*b2*c3*x1 + a2*a3*b2*c3*x1 + a1*b1*b2*c3*x1 + a2*b1*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a1*a3*b1*b2*c3*x1 + a2*b3*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a2*b1*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + b2*b3*c3*x1 + a1*b2*b3*c3*x1 + a1*a3*b2*b3*c3*x1 + a2*c1*c3*x1 + b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + b1*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*a3*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a2*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + a2*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a2*a3*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + a2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a2*a3*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a2*b3*c1*c2*c3*x1 + a2*a3*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a2*b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a1*a3*b1*b3*x2 + a3*b2*c1*x2 + a1*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*a2*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + a1*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + a1*a3*b3*c2*x2 + a1*b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a1*a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a1*a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a2*b3*c1*c2*x2 + a1*a2*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + a1*a3*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + b1*c3*x2 + a1*b1*c3*x2 + a2*b1*c3*x2 + a3*b1*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + a1*b1*b2*c3*x2 + a1*a2*b1*b2*c3*x2 + a1*a3*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + a1*a2*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + a1*b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + a2*b2*c1*c3*x2 + a1*a2*b2*c1*c3*x2 + a3*b2*c1*c3*x2 + a1*a3*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + a2*b1*b2*c1*c3*x2 + a3*b1*b2*c1*c3*x2 + a1*a2*b3*c1*c3*x2 + a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a1*b2*b3*c1*c3*x2 + a2*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + c1*c2*c3*x2 + a1*c1*c2*c3*x2 + b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + b3*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + a3*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + a1*b2*b3*c1*c2*c3*x2 + b3*x1*x2 + a3*c2*x1*x2 + b3*c2*x1*x2 + c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + b2*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + b3*c2*c3*x1*x2 + c1*c2*c3*x1*x2 + a1*a2*x3 + a1*a2*b1*x3 + a1*b2*x3 + a1*a3*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*b2*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a2*c1*x3 + a1*a2*c1*x3 + b2*c1*x3 + a1*a2*b2*c1*x3 + a3*b2*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a1*a2*b3*c1*x3 + a2*a3*b3*c1*x3 + a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a1*b2*b3*c1*x3 + a2*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + b1*c2*x3 + a2*b1*c2*x3 + a3*b1*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + a1*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a2*b3*c2*x3 + b1*b3*c2*x3 + a2*b1*b3*c2*x3 + b1*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + b2*c1*c2*x3 + a2*b2*c1*c2*x3 + a3*b2*c1*c2*x3 + a1*b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a2*b3*c1*c2*x3 + a3*b3*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*b1*b2*c3*x3 + a1*a2*b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a1*a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a1*a2*b1*b3*c3*x3 + a2*a3*b1*b3*c3*x3 + a1*b2*b3*c3*x3 + a1*a3*b2*b3*c3*x3 + b2*c1*c3*x3 + a1*b2*c1*c3*x3 + a1*a2*b2*c1*c3*x3 + a3*b2*c1*c3*x3 + a1*a3*b2*c1*c3*x3 + a1*b1*b2*c1*c3*x3 + a2*b1*b2*c1*c3*x3 + a3*b1*b2*c1*c3*x3 + a1*a2*b3*c1*c3*x3 + a2*a3*b3*c1*c3*x3 + a1*b2*b3*c1*c3*x3 + a2*b2*b3*c1*c3*x3 + a3*b1*b2*b3*c1*c3*x3 + a1*c2*c3*x3 + b1*c2*c3*x3 + a1*a2*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + a1*a2*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + b1*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a2*b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a1*b3*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + a3*b3*c1*c2*c3*x3 + b1*b3*c1*c2*c3*x3 + a2*b1*b3*c1*c2*c3*x3 + a3*b1*b3*c1*c2*c3*x3 + a1*b2*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + b2*x1*x3 + a2*c1*x1*x3 + a3*c2*x1*x3 + a2*b2*c2*x1*x3 + a3*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a3*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + c1*c2*x1*x3 + b2*c1*c2*x1*x3 + a2*b2*c1*c2*x1*x3 + a3*b2*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + a2*b3*c1*c2*x1*x3 + a3*b3*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + b2*c1*c3*x1*x3 + b2*c2*c3*x1*x3 + a2*b2*c2*c3*x1*x3 + a3*b2*c2*c3*x1*x3 + a2*b3*c2*c3*x1*x3 + a3*b3*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a2*b2*c1*c2*c3*x1*x3 + a3*b2*c1*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + a2*b3*c1*c2*c3*x1*x3 + a3*b3*c1*c2*c3*x1*x3 + b2*b3*c1*c2*c3*x1*x3 + a2*a3*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + b2*b3*y1 + a1*b2*b3*y1 + a3*b2*b3*y1 + a2*a3*c1*y1 + a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a1*b2*b3*c1*y1 + a3*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a3*b1*b2*c2*y1 + b3*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + a3*b3*c2*y1 + b1*b3*c2*y1 + a2*b1*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b2*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b3*c1*c2*y1 + a3*b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a2*a3*b2*b3*c1*c2*y1 + a2*b2*c3*y1 + b1*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + a1*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + b1*b2*b3*c3*y1 + a3*b1*b2*b3*c3*y1 + a2*c1*c3*y1 + b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a2*a3*b3*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + a2*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*c2*c3*y1 + a1*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + b1*b2*c2*c3*y1 + a1*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + a2*b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + c1*c2*c3*y1 + a2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + a2*a3*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + a2*b3*c1*c2*c3*y1 + a2*a3*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a2*b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + b3*x2*y1 + a3*c2*x2*y1 + b3*c2*x2*y1 + c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a3*b3*c3*x2*y1 + b2*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + c2*c3*x2*y1 + b3*c2*c3*x2*y1 + c1*c2*c3*x2*y1 + a2*x3*y1 + b2*x3*y1 + a2*c1*x3*y1 + c2*x3*y1 + a3*c2*x3*y1 + b2*c2*x3*y1 + c1*c2*x3*y1 + b2*c1*c2*x3*y1 + a2*b2*c1*c2*x3*y1 + a3*b2*c1*c2*x3*y1 + b3*c1*c2*x3*y1 + a2*b3*c1*c2*x3*y1 + a3*b3*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + b2*c3*x3*y1 + b2*c1*c3*x3*y1 + b2*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + a2*b2*c1*c2*c3*x3*y1 + a3*b2*c1*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + a2*b3*c1*c2*c3*x3*y1 + a3*b3*c1*c2*c3*x3*y1 + b2*b3*c1*c2*c3*x3*y1 + a1*a2*b3*y2 + a1*b2*b3*y2 + a2*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a2*b1*b3*c1*y2 + b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*a3*b1*b2*c2*y2 + a1*b3*c2*y2 + b1*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a3*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + b1*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*b1*c1*c2*y2 + a1*a3*b2*c1*c2*y2 + a1*a2*b3*c1*c2*y2 + a1*a3*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*b1*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + a1*b1*c3*y2 + b1*b2*c3*y2 + a1*b1*b2*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + b1*b2*b3*c3*y2 + a3*b1*b2*b3*c3*y2 + c1*c3*y2 + a1*c1*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + a1*a2*b2*c1*c3*y2 + a1*a3*b2*c1*c3*y2 + b1*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a2*b3*c1*c3*y2 + a1*a2*b3*c1*c3*y2 + b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a3*b1*b3*c1*c3*y2 + b2*b3*c1*c3*y2 + a1*b2*b3*c1*c3*y2 + a2*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*c2*c3*y2 + a1*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + b1*b2*c2*c3*y2 + a1*b3*c2*c3*y2 + b1*b3*c2*c3*y2 + a2*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + a1*c1*c2*c3*y2 + b1*c1*c2*c3*y2 + b2*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + a1*b3*c1*c2*c3*y2 + a3*b3*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a1*b2*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*c2*x1*y2 + a3*b2*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + a2*b3*c3*x1*y2 + c1*c3*x1*y2 + b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b2*b3*c1*c2*c3*x1*y2 + a3*c2*y1*y2 + b3*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + a2*b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b3*c2*c3*y1*y2 + c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + b2*b3*c1*c2*c3*y1*y2 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*a2*b3*y3 + a1*b2*b3*y3 + a2*c1*y3 + a1*a2*c1*y3 + a2*b1*c1*y3 + b2*c1*y3 + a1*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a2*b3*c1*y3 + b2*b3*c1*y3 + a1*b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a1*c2*y3 + a1*a2*c2*y3 + b1*c2*y3 + a2*b1*c2*y3 + b1*b2*c2*y3 + a1*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a1*b3*c2*y3 + b1*b3*c2*y3 + a1*b1*b3*c2*y3 + a2*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + b1*b2*b3*c2*y3 + c1*c2*y3 + a2*c1*c2*y3 + b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + b1*b2*c1*c2*y3 + a1*b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + a1*b1*b3*c1*c2*y3 + a1*b2*c3*y3 + b1*b2*c3*y3 + a1*b1*b2*c3*y3 + a1*a2*b1*b2*c3*y3 + a3*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a1*a2*b1*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + b1*b2*b3*c3*y3 + a3*b1*b2*b3*c3*y3 + b2*c1*c3*y3 + a1*b2*c1*c3*y3 + a2*b2*c1*c3*y3 + a1*a2*b2*c1*c3*y3 + a1*a3*b2*c1*c3*y3 + b1*b2*c1*c3*y3 + a1*b1*b2*c1*c3*y3 + a2*b3*c1*c3*y3 + a1*a2*b3*c1*c3*y3 + a2*b1*b3*c1*c3*y3 + a1*b2*b3*c1*c3*y3 + a2*b2*b3*c1*c3*y3 + a3*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*a2*b2*c2*c3*y3 + a1*a3*b2*c2*c3*y3 + a1*a2*b3*c2*c3*y3 + b1*b3*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + c1*c2*c3*y3 + b1*c1*c2*c3*y3 + a2*b2*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a2*b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + b3*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + a2*b3*c1*c2*c3*y3 + a2*b1*b3*c1*c2*c3*y3 + a3*b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*b2*b3*c1*c2*c3*y3 + a2*x1*y3 + a2*c1*x1*y3 + c2*x1*y3 + a3*c2*x1*y3 + b2*c2*x1*y3 + c1*c2*x1*y3 + b2*c1*c2*x1*y3 + a2*c3*x1*y3 + b2*c3*x1*y3 + a2*b2*c3*x1*y3 + a3*b2*c3*x1*y3 + a2*b3*c3*x1*y3 + b2*c1*c3*x1*y3 + a2*b2*c1*c3*x1*y3 + a3*b2*c1*c3*x1*y3 + a2*b3*c1*c3*x1*y3 + b2*c2*c3*x1*y3 + a2*b2*c2*c3*x1*y3 + a3*b2*c2*c3*x1*y3 + b3*c2*c3*x1*y3 + a2*b3*c2*c3*x1*y3 + a2*b2*c1*c2*c3*x1*y3 + a3*b2*c1*c2*c3*x1*y3 + a2*b3*c1*c2*c3*x1*y3 + a3*b3*c1*c2*c3*x1*y3 + a2*c1*y1*y3 + a3*c2*y1*y3 + c1*c2*y1*y3 + b2*c1*c2*y1*y3 + a2*c3*y1*y3 + b2*c1*c3*y1*y3 + a2*b2*c1*c3*y1*y3 + a3*b2*c1*c3*y1*y3 + a2*b3*c1*c3*y1*y3 + b2*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + a3*b3*c2*c3*y1*y3 + a2*b2*c1*c2*c3*y1*y3 + a3*b2*c1*c2*c3*y1*y3 + a2*b3*c1*c2*c3*y1*y3 + a3*b3*c1*c2*c3*y1*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 101 ( P4_2cm)
#####################################################################
Ampin101:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin101:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin101:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain101:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bmzin101:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + b1*b2*c2 + c2*z1;
end;
#####################################################################
Bxyin101:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 102 ( P4_2nm)
#####################################################################
Ampin102:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin102:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin102:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain102:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
CGAPin102:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a1*a2*a3*b1 + a1*a2*a3*b2 + a2*a3*b1*b2 + a1*a2*a3*b1*b2 + a1*a2*b1*b3 + a1*a2*a3*b2*b3 + a1*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a2*a3*c1 + a1*a2*a3*b1*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*a3*b1*b2*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + a1*a2*a3*b1*b3*c1 + b1*b2*b3*c1 + a1*b1*b2*b3*c1 + a1*a2*a3*b1*c2 + a1*a3*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*a3*b2*b3*c2 + b1*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a3*b1*c1*c2 + a1*a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a1*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a1*a2*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a2*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*b2*b3*c3 + a1*a3*b2*b3*c3 + b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*a2*a3*b1*b2*b3*c3 + a2*b1*c1*c3 + a2*a3*b1*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a2*a3*b1*b2*c1*c3 + a2*b1*b3*c1*c3 + a2*a3*b1*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*a3*b1*b2*b3*c1*c3 + a1*b1*c2*c3 + a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*b2*c2*c3 + a2*b1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + c1*c2*c3 + a3*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + b1*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*b1*b2*b3*c1*c2*c3 + a3*b1*b2*b3*c1*c2*c3 + a2*a3*x1 + a2*a3*b1*x1 + a3*b1*b2*x1 + a2*a3*b1*b2*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a2*a3*b1*c1*x1 + a1*a3*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a1*a2*b3*c1*x1 + a2*a3*b3*c1*x1 + a1*a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a3*b2*b3*c1*x1 + a3*b1*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + a1*a2*b3*c2*x1 + a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + a2*b2*b3*c2*x1 + a1*a3*b1*c1*c2*x1 + a3*b2*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a1*a3*b1*b2*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*a2*b1*b3*c1*c2*x1 + a1*a3*b1*b3*c1*c2*x1 + a2*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a2*b1*c3*x1 + b2*c3*x1 + a1*a2*b2*c3*x1 + a2*a3*b2*c3*x1 + b1*b2*c3*x1 + a1*b1*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a2*a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + b2*b3*c3*x1 + a1*b2*b3*c3*x1 + a2*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + a2*b1*c1*c3*x1 + b2*c1*c3*x1 + a1*b2*c1*c3*x1 + a1*a3*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + a2*b1*b2*c1*c3*x1 + a1*a3*b1*b2*c1*c3*x1 + a2*a3*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + b2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a1*a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + b1*c2*c3*x1 + a2*b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a1*a2*b1*b2*c2*c3*x1 + a2*a3*b1*b2*c2*c3*x1 + a2*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a1*a2*b1*b3*c2*c3*x1 + a1*a3*b1*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a1*a3*b2*b3*c2*c3*x1 + a2*a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + b2*c1*c2*c3*x1 + a1*b2*c1*c2*c3*x1 + a2*b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + a1*b1*b2*c1*c2*c3*x1 + a2*b1*b2*c1*c2*c3*x1 + a1*b2*b3*c1*c2*c3*x1 + a2*b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a2*a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a1*b3*x2 + a1*b1*b3*x2 + a1*a2*b1*b3*x2 + a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*b2*b3*x2 + a1*a3*b2*b3*x2 + a2*a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*a3*b1*b2*c1*x2 + b3*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + a3*b3*c1*x2 + a1*b1*b3*c1*x2 + a1*a2*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + a2*a3*b1*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + a2*a3*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a2*a3*b1*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a2*a3*b1*b2*c1*c2*x2 + b3*c1*c2*x2 + a1*b3*c1*c2*x2 + a2*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b1*b3*c1*c2*x2 + a1*a2*b1*b3*c1*c2*x2 + a2*a3*b1*b3*c1*c2*x2 + a3*b2*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a1*b1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a3*b1*b2*b3*c1*c2*x2 + a2*b1*c3*x2 + a1*b2*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + b1*b2*c3*x2 + a1*b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a3*b1*b2*c3*x2 + a1*b3*c3*x2 + a1*a2*b3*c3*x2 + a2*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*a3*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + a2*b1*c1*c3*x2 + a3*b2*c1*c3*x2 + b3*c1*c3*x2 + b1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a3*b2*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a2*b1*c2*c3*x2 + a1*a2*b1*c2*c3*x2 + a1*a3*b1*c2*c3*x2 + a1*a3*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a1*a2*b1*b2*c2*c3*x2 + a2*a3*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a1*a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*a3*b1*b3*c2*c3*x2 + a1*a3*b2*b3*c2*c3*x2 + b1*b2*b3*c2*c3*x2 + a2*b1*b2*b3*c2*c3*x2 + b1*c1*c2*c3*x2 + a1*b1*c1*c2*c3*x2 + a2*b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a1*b1*b2*c1*c2*c3*x2 + a2*b1*b2*c1*c2*c3*x2 + b3*c1*c2*c3*x2 + a1*b1*b3*c1*c2*c3*x2 + a2*b1*b3*c1*c2*c3*x2 + a3*b1*b2*b3*c1*c2*c3*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a1*b3*c1*c2*x1*x2 + a2*b3*c1*c2*x1*x2 + a3*b3*c1*c2*x1*x2 + b2*b3*c1*c2*x1*x2 + b3*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + a1*b1*c1*c2*c3*x1*x2 + a2*b1*c1*c2*c3*x1*x2 + a3*b1*c1*c2*c3*x1*x2 + b2*c1*c2*c3*x1*x2 + a1*b2*c1*c2*c3*x1*x2 + a2*b2*c1*c2*c3*x1*x2 + a3*b2*c1*c2*c3*x1*x2 + b1*b2*c1*c2*c3*x1*x2 + a1*b3*c1*c2*c3*x1*x2 + a2*b3*c1*c2*c3*x1*x2 + a3*b3*c1*c2*c3*x1*x2 + b2*b3*c1*c2*c3*x1*x2 + a1*a2*b1*x3 + a2*a3*b1*x3 + a1*a3*b2*x3 + a2*b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*b1*b3*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*a3*b2*b3*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*a3*b2*c1*x3 + a2*a3*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a1*a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a1*a2*b1*b3*c1*x3 + a2*a3*b1*b3*c1*x3 + a3*b2*b3*c1*x3 + a1*a3*b2*b3*c1*x3 + a2*a3*b2*b3*c1*x3 + a1*a2*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a3*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*a3*b1*b2*c2*x3 + a2*b1*b3*c2*x3 + a1*a2*b1*b3*c2*x3 + a2*a3*b1*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*a3*b2*c1*c2*x3 + a2*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*a3*b1*b2*c1*c2*x3 + a2*a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a1*b3*c1*c2*x3 + a2*b3*c1*c2*x3 + a3*b3*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + a2*b2*b3*c1*c2*x3 + a1*a3*b2*b3*c1*c2*x3 + a2*a3*b2*b3*c1*c2*x3 + a1*b1*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a2*b1*c3*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + a3*b2*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a2*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*a3*b1*b2*c2*c3*x3 + a2*a3*b1*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + b1*b3*c2*c3*x3 + a1*b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*a3*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a3*b1*b2*b3*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + b1*b3*c1*c2*c3*x3 + b2*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + a3*b1*b2*b3*c1*c2*c3*x3 + c1*c2*x2*x3 + a1*b1*c1*c2*x2*x3 + a2*b1*c1*c2*x2*x3 + a3*b1*c1*c2*x2*x3 + b2*c1*c2*x2*x3 + a1*b2*c1*c2*x2*x3 + a2*b2*c1*c2*x2*x3 + a3*b2*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + a1*b3*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + a3*b3*c1*c2*x2*x3 + b2*b3*c1*c2*x2*x3 + a1*b1*c2*c3*x2*x3 + a2*b1*c2*c3*x2*x3 + a3*b1*c2*c3*x2*x3 + a1*b2*c2*c3*x2*x3 + a1*b3*c2*c3*x2*x3 + b1*b3*c2*c3*x2*x3 + b2*c1*c2*c3*x2*x3 + b1*b2*c1*c2*c3*x2*x3 + b3*c1*c2*c3*x2*x3 + b1*b3*c1*c2*c3*x2*x3 + a2*a3*y1 + a1*a3*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a3*b2*c1*y1 + a1*a3*b2*c1*y1 + a1*a2*b3*c1*y1 + a2*a3*b3*c1*y1 + a1*a3*b2*c2*y1 + a1*a3*b1*b2*c2*y1 + a1*a2*b3*c2*y1 + a2*a3*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a1*a3*b1*c1*c2*y1 + a1*a3*b1*b2*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + a1*a2*b1*b3*c1*c2*y1 + a1*a3*b1*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a1*b2*c3*y1 + a1*a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + b1*b2*b3*c3*y1 + a3*b1*b2*b3*c3*y1 + a1*b2*c1*c3*y1 + a1*a3*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + a1*a3*b1*b2*c1*c3*y1 + a2*a3*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a1*a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + a3*b1*b2*b3*c1*c3*y1 + a1*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a1*a3*b2*c2*c3*y1 + a2*a3*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a1*a2*b1*b2*c2*c3*y1 + a2*a3*b1*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b1*b3*c2*c3*y1 + a1*a3*b1*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a1*a3*b2*b3*c2*c3*y1 + a2*a3*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + a3*b1*b2*b3*c2*c3*y1 + a1*b2*c1*c2*c3*y1 + a2*b2*c1*c2*c3*y1 + a1*b1*b2*c1*c2*c3*y1 + a2*b1*b2*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a1*b2*b3*c1*c2*c3*y1 + a2*b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + a3*b1*c1*c2*x1*y1 + a3*b2*c1*c2*x1*y1 + a1*b3*c1*c2*x1*y1 + a2*b3*c1*c2*x1*y1 + a3*b3*c1*c2*x1*y1 + b2*b3*c1*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + a1*b1*c2*c3*x1*y1 + a2*b1*c2*c3*x1*y1 + a3*b1*c2*c3*x1*y1 + a1*b2*c2*c3*x1*y1 + a2*b2*c2*c3*x1*y1 + a3*b2*c2*c3*x1*y1 + a1*b3*c2*c3*x1*y1 + a2*b3*c2*c3*x1*y1 + a3*b3*c2*c3*x1*y1 + b1*b3*c2*c3*x1*y1 + b2*c1*c2*c3*x1*y1 + b1*b2*c1*c2*c3*x1*y1 + b3*c1*c2*c3*x1*y1 + b1*b3*c1*c2*c3*x1*y1 + b3*c3*x2*y1 + a3*b3*c3*x2*y1 + b3*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + a1*b1*c2*c3*x2*y1 + a2*b1*c2*c3*x2*y1 + a3*b1*c2*c3*x2*y1 + a1*b2*c2*c3*x2*y1 + a2*b2*c2*c3*x2*y1 + a3*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + a2*b3*c2*c3*x2*y1 + a3*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a1*b1*c1*c2*c3*x2*y1 + a2*b1*c1*c2*c3*x2*y1 + a3*b1*c1*c2*c3*x2*y1 + a1*b2*c1*c2*c3*x2*y1 + a2*b2*c1*c2*c3*x2*y1 + a3*b2*c1*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + a1*b3*c1*c2*c3*x2*y1 + a2*b3*c1*c2*c3*x2*y1 + a3*b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + b2*b3*c1*c2*c3*x2*y1 + a1*a3*b1*y2 + a1*a3*b2*y2 + a1*a3*b1*b2*y2 + a1*a2*b3*y2 + a1*b1*b3*y2 + a1*a2*b1*b3*y2 + a1*a3*b1*b3*y2 + a3*b1*c1*y2 + b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a1*a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a1*a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a1*b1*b2*b3*c1*c2*y2 + a3*b1*b2*b3*c1*c2*y2 + a1*b1*c3*y2 + a1*a2*b1*c3*y2 + a1*a3*b1*c3*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + a1*a3*b2*c3*y2 + a1*b1*b2*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + b1*b2*b3*c3*y2 + a3*b1*b2*b3*c3*y2 + b1*c1*c3*y2 + a1*b1*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a2*b1*b2*c1*c3*y2 + a3*b1*b2*c1*c3*y2 + b1*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*b1*c2*c3*y2 + a1*a2*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*a3*b2*c2*c3*y2 + a2*b1*b2*c2*c3*y2 + a1*a2*b1*b2*c2*c3*y2 + a2*a3*b1*b2*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*a2*b1*b3*c2*c3*y2 + a1*a3*b1*b3*c2*c3*y2 + a1*a3*b2*b3*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + a3*b1*b2*b3*c2*c3*y2 + b1*c1*c2*c3*y2 + a1*b1*c1*c2*c3*y2 + a2*b1*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + a1*b1*b2*c1*c2*c3*y2 + a2*b1*b2*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a1*b1*b3*c1*c2*c3*y2 + a2*b1*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*b1*b2*b3*c1*c2*c3*y2 + a3*b1*x1*y2 + a3*b2*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a3*b3*x1*y2 + a3*b1*c1*x1*y2 + a3*b2*c1*x1*y2 + a1*b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a1*b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + a1*b1*c3*x1*y2 + a2*b1*c3*x1*y2 + a3*b1*c3*x1*y2 + a1*b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a1*b3*c3*x1*y2 + a2*b3*c3*x1*y2 + a1*b1*c1*c3*x1*y2 + a2*b1*c1*c3*x1*y2 + a3*b1*c1*c3*x1*y2 + a1*b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + b3*c1*c3*x1*y2 + a1*b3*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + a1*b1*c2*c3*x1*y2 + a2*b1*c2*c3*x1*y2 + a3*b1*c2*c3*x1*y2 + a1*b2*c2*c3*x1*y2 + a2*b2*c2*c3*x1*y2 + a3*b2*c2*c3*x1*y2 + a1*b3*c2*c3*x1*y2 + a2*b3*c2*c3*x1*y2 + a3*b3*c2*c3*x1*y2 + a1*b1*c1*c2*c3*x1*y2 + a2*b1*c1*c2*c3*x1*y2 + a3*b1*c1*c2*c3*x1*y2 + a1*b2*c1*c2*c3*x1*y2 + a2*b2*c1*c2*c3*x1*y2 + a3*b2*c1*c2*c3*x1*y2 + a1*b3*c1*c2*c3*x1*y2 + a2*b3*c1*c2*c3*x1*y2 + a3*b3*c1*c2*c3*x1*y2 + a3*b1*c1*c2*x2*y2 + a3*b2*c1*c2*x2*y2 + a1*b3*c1*c2*x2*y2 + a2*b3*c1*c2*x2*y2 + a3*b3*c1*c2*x2*y2 + b2*b3*c1*c2*x2*y2 + a1*b1*c2*c3*x2*y2 + a2*b1*c2*c3*x2*y2 + a3*b1*c2*c3*x2*y2 + a1*b2*c2*c3*x2*y2 + a1*b3*c2*c3*x2*y2 + b1*b3*c2*c3*x2*y2 + b2*c1*c2*c3*x2*y2 + b1*b2*c1*c2*c3*x2*y2 + b3*c1*c2*c3*x2*y2 + b1*b3*c1*c2*c3*x2*y2 + a1*b1*c1*c3*y1*y2 + a2*b1*c1*c3*y1*y2 + a3*b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a1*b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + a1*b3*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b1*b3*c1*c3*y1*y2 + a1*b1*c1*c2*c3*y1*y2 + a2*b1*c1*c2*c3*y1*y2 + a3*b1*c1*c2*c3*y1*y2 + b2*c1*c2*c3*y1*y2 + a1*b2*c1*c2*c3*y1*y2 + a2*b2*c1*c2*c3*y1*y2 + a3*b2*c1*c2*c3*y1*y2 + b1*b2*c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + a1*b3*c1*c2*c3*y1*y2 + a2*b3*c1*c2*c3*y1*y2 + a3*b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + a1*a2*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b3*y3 + a1*b2*b3*y3 + a1*a3*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + a2*b1*b2*c1*y3 + a1*a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + b1*b2*b3*c1*y3 + a1*b1*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + a2*b1*c2*y3 + a1*a2*b1*c2*y3 + a2*a3*b1*c2*y3 + a1*b2*c2*y3 + b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a1*a2*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a2*b1*b3*c2*y3 + a1*a2*b1*b3*c2*y3 + a2*a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a3*b1*b2*b3*c2*y3 + a3*b2*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + a1*a3*b1*b2*c1*c2*y3 + a2*a3*b1*b2*c1*c2*y3 + b2*b3*c1*c2*y3 + a1*a3*b2*b3*c1*c2*y3 + a2*a3*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a2*b1*b2*b3*c1*c2*y3 + a1*a2*b2*c3*y3 + a1*b1*b2*c3*y3 + a2*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a2*a3*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + a1*b1*b2*b3*c3*y3 + a2*b1*b2*b3*c3*y3 + a3*b1*b2*b3*c3*y3 + a2*b1*c1*c3*y3 + b1*b2*c1*c3*y3 + a3*b1*b2*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a2*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + a1*a3*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*a3*b1*b2*c2*c3*y3 + a2*a3*b1*b2*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + a1*a3*b2*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a3*b2*b3*c1*c2*c3*y3 + a3*b1*b2*b3*c1*c2*c3*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*b2*x2*y3 + a1*b3*x2*y3 + c1*x2*y3 + a1*b1*c1*x2*y3 + a2*b1*c1*x2*y3 + a3*b1*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + a3*b2*c1*x2*y3 + a1*b3*c1*x2*y3 + a2*b3*c1*x2*y3 + a3*b3*c1*x2*y3 + a1*b1*c2*x2*y3 + a2*b1*c2*x2*y3 + a3*b1*c2*x2*y3 + a1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*b1*c1*c2*x2*y3 + a2*b1*c1*c2*x2*y3 + a3*b1*c1*c2*x2*y3 + a1*b2*c1*c2*x2*y3 + a2*b2*c1*c2*x2*y3 + a3*b2*c1*c2*x2*y3 + a1*b3*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + a3*b3*c1*c2*x2*y3 + a1*b1*c3*x2*y3 + a2*b1*c3*x2*y3 + a3*b1*c3*x2*y3 + a1*b2*c3*x2*y3 + a1*b3*c3*x2*y3 + b2*c1*c3*x2*y3 + b1*b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + b1*b3*c1*c3*x2*y3 + a1*b1*c2*c3*x2*y3 + a2*b1*c2*c3*x2*y3 + a3*b1*c2*c3*x2*y3 + a1*b2*c2*c3*x2*y3 + a1*b3*c2*c3*x2*y3 + b2*c1*c2*c3*x2*y3 + b1*b2*c1*c2*c3*x2*y3 + b3*c1*c2*c3*x2*y3 + b1*b3*c1*c2*c3*x2*y3 + c1*c2*x3*y3 + a1*b1*c1*c2*x3*y3 + a2*b1*c1*c2*x3*y3 + a3*b1*c1*c2*x3*y3 + b2*c1*c2*x3*y3 + a1*b2*c1*c2*x3*y3 + a2*b2*c1*c2*x3*y3 + a3*b2*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + a1*b3*c1*c2*x3*y3 + a2*b3*c1*c2*x3*y3 + a3*b3*c1*c2*x3*y3 + b2*b3*c1*c2*x3*y3 + a1*b1*c2*c3*x3*y3 + a2*b1*c2*c3*x3*y3 + a3*b1*c2*c3*x3*y3 + a1*b2*c2*c3*x3*y3 + a1*b3*c2*c3*x3*y3 + b1*b3*c2*c3*x3*y3 + b2*c1*c2*c3*x3*y3 + b1*b2*c1*c2*c3*x3*y3 + b3*c1*c2*c3*x3*y3 + b1*b3*c1*c2*c3*x3*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 103 ( P4cc)
#####################################################################
Ampin103:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin103:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin103:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain103:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bxyin103:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 104 ( P4nc)
#####################################################################
Ampin104:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin104:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain104:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bcxyin104:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + b1*b2*c1 + a2*x1 + b2*c1*x1 + a2*y1 + b2*y1 + b2*c1*y1;
end;
#####################################################################
Bcxyzin104:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a2*b2*c1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1 + b2*z1;
end;
#####################################################################
C1GAPin104:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a3*b1*b2 + a1*a3*b1*b2 + a2*b1*b3 + a1*a3*b2*b3 + a1*b1*b2*b3 + a2*b1*b2*b3 + a1*a2*b1*b2*b3 + a3*b1*b2*b3 + a3*b2*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a1*a2*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b1*b2*b3*c1 + a1*a3*b2*c2 + a3*b1*b2*c2 + a1*b3*c2 + a1*a2*b3*c2 + a1*a3*b3*c2 + b1*b3*c2 + a1*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a3*c1*c2 + a3*b1*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a1*a3*b3*c1*c2 + a2*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a2*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + b1*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*b2*b3*c3 + a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a1*a3*b2*b3*x1 + a1*b1*b2*b3*x1 + a2*b1*b2*b3*x1 + a3*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a2*b1*b3*c1*x1 + b2*b3*c1*x1 + a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a3*c2*x1 + a1*a3*c2*x1 + a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*a3*b3*c2*x1 + b1*b3*c2*x1 + a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*b2*b3*c1*c2*x1 + b1*b2*c3*x1 + b2*b3*c3*x1 + a1*a3*x2 + a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a1*a3*b2*b3*x2 + a2*b1*b2*b3*x2 + a1*a3*b2*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + a1*a2*b3*c1*x2 + a3*b3*c1*x2 + b1*b3*c1*x2 + a2*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a2*b1*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a1*a3*c2*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a3*b1*b2*c2*x2 + a1*a3*b3*c2*x2 + a1*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a3*c1*c2*x2 + a1*a3*c1*c2*x2 + a3*b1*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + b1*b2*c3*x2 + b3*x1*x2 + b3*c1*x1*x2 + a2*b3*c1*x1*x2 + b1*b3*c1*x1*x2 + b2*b3*c1*x1*x2 + a1*a2*b1*x3 + a1*b2*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*b3*x3 + a1*a2*b1*b3*x3 + a1*a3*b2*b3*x3 + a2*b1*b2*b3*x3 + a2*c1*x3 + a1*a2*c1*x3 + a2*b1*c1*x3 + a3*b2*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*a2*b3*c1*x3 + b2*b3*c1*x3 + a1*b2*b3*c1*x3 + a3*b2*b3*c1*x3 + b1*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a1*b1*c2*x3 + a3*b1*c2*x3 + a1*a3*b1*c2*x3 + a1*a3*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a3*b3*c2*x3 + b1*b3*c2*x3 + a1*b1*b3*c2*x3 + a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a3*c1*c2*x3 + a1*a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + a1*b2*c1*c2*x3 + a2*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a2*b3*c1*c2*x3 + a3*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + b1*b2*c3*x3 + b2*x1*x3 + a2*c1*x1*x3 + a1*b2*c1*x1*x3 + b1*b2*c1*x1*x3 + a2*b3*c1*x1*x3 + a2*c2*x1*x3 + a1*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + b1*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + b2*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + b3*c1*x2*x3 + a1*b1*c2*x2*x3 + a1*b2*c2*x2*x3 + b1*b3*c2*x2*x3 + c1*c2*x2*x3 + a1*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a3*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*b1*b3*c1*y1 + b2*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a3*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a1*a3*c2*y1 + a1*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + a1*a3*b3*c2*y1 + a3*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a3*c1*c2*y1 + b1*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + b1*b2*c3*y1 + b2*b3*c3*y1 + a2*b3*x1*y1 + b2*b3*c1*x1*y1 + a2*b3*x2*y1 + a2*b3*c1*x2*y1 + a2*x3*y1 + a1*b2*x3*y1 + a2*b3*x3*y1 + a2*c1*x3*y1 + a1*b2*c1*x3*y1 + a2*b3*c1*x3*y1 + a2*c2*x3*y1 + a1*b2*c2*x3*y1 + a2*b3*c2*x3*y1 + b2*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a1*a3*y2 + a1*a3*b2*y2 + a1*a3*b1*b2*y2 + a1*a2*b3*y2 + a1*a3*b3*y2 + a1*b1*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a1*b2*b3*y2 + a1*a3*b2*b3*y2 + a1*a3*b2*c1*y2 + a1*b3*c1*y2 + a2*b3*c1*y2 + a1*a2*b3*c1*y2 + a3*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a3*b1*b2*b3*c1*y2 + a1*a3*c2*y2 + a1*a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a3*b1*b2*c2*y2 + a1*a3*b3*c2*y2 + a3*b1*b3*c2*y2 + b1*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*c1*c2*y2 + a1*a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a3*b1*b2*c1*c2*y2 + b3*c1*c2*y2 + a3*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + b1*b2*c3*y2 + b3*x1*y2 + a2*b3*x1*y2 + b3*c1*x1*y2 + a2*b3*c1*x1*y2 + b1*b3*c1*x1*y2 + b3*c1*x2*y2 + b1*b3*c1*x2*y2 + b2*b3*c1*x2*y2 + a1*b1*x3*y2 + a1*b2*x3*y2 + a1*c1*x3*y2 + b1*b2*c1*x3*y2 + b3*c1*x3*y2 + a1*b1*c2*x3*y2 + a1*b2*c2*x3*y2 + a1*c1*c2*x3*y2 + b1*b2*c1*c2*x3*y2 + a2*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + a2*b1*y3 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*a3*b2*y3 + b1*b2*y3 + a2*b1*b2*y3 + a1*a3*b1*b2*y3 + a1*a2*b3*y3 + a2*b1*b3*y3 + a1*a2*b1*b3*y3 + a1*a3*b2*b3*y3 + a1*a2*c1*y3 + a2*b1*c1*y3 + a3*b2*c1*y3 + a1*a3*b2*c1*y3 + a1*b1*b2*c1*y3 + a1*a2*b3*c1*y3 + a2*b1*b3*c1*y3 + a3*b2*b3*c1*y3 + b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a1*a3*c2*y3 + a2*b1*c2*y3 + a1*a3*b1*c2*y3 + a1*b2*c2*y3 + a1*a3*b2*c2*y3 + b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a1*b3*c2*y3 + a1*a3*b3*c2*y3 + b1*b3*c2*y3 + a1*b1*b3*c2*y3 + a2*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a1*c1*c2*y3 + a3*c1*c2*y3 + a1*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + b2*c1*c2*y3 + a1*b2*c1*c2*y3 + a2*b2*c1*c2*y3 + a1*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + a2*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a1*b1*b3*c1*c2*y3 + a2*b1*b3*c1*c2*y3 + a3*b1*b3*c1*c2*y3 + a1*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + b1*b2*c3*y3 + a2*x1*y3 + b2*x1*y3 + a1*b2*x1*y3 + a2*b3*x1*y3 + a2*c1*x1*y3 + b2*c1*x1*y3 + a1*b2*c1*x1*y3 + b1*b2*c1*x1*y3 + a2*b3*c1*x1*y3 + b2*b3*c1*x1*y3 + a2*c2*x1*y3 + a1*b2*c2*x1*y3 + b3*c2*x1*y3 + a2*b3*c2*x1*y3 + b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + b2*c1*c2*x1*y3 + b2*b3*c1*c2*x1*y3 + a1*b1*x2*y3 + a1*b2*x2*y3 + c1*x2*y3 + a1*c1*x2*y3 + b1*b2*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a1*b1*c2*x2*y3 + a1*b2*c2*x2*y3 + b1*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*c1*c2*x2*y3 + b1*b2*c1*c2*x2*y3 + a2*b1*x3*y3 + a2*c1*x3*y3 + a1*c2*x3*y3 + b1*b3*c2*x3*y3 + c1*c2*x3*y3 + b2*c1*c2*x3*y3 + a2*c1*y1*y3 + b2*c1*y1*y3 + a1*b2*c1*y1*y3 + a2*b3*c1*y1*y3 + b2*b3*c1*y1*y3 + a2*c2*y1*y3 + a1*b2*c2*y1*y3 + a2*b3*c2*y1*y3 + b2*c1*c2*y1*y3 + b2*b3*c1*c2*y1*y3 + b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + a1*b1*c2*y2*y3 + a1*b2*c2*y2*y3 + a1*c1*c2*y2*y3 + b1*b2*c1*c2*y2*y3 + a2*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + a1*b1*b2*b3*z1 + a2*b1*b2*b3*z1 + a3*b2*c1*z1 + a3*b1*b2*c1*z1 + a2*b3*c1*z1 + b2*b3*c1*z1 + a1*b2*b3*c1*z1 + a2*b2*b3*c1*z1 + a3*b2*b3*c1*z1 + b1*b2*b3*c1*z1 + a3*c2*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a3*b1*b2*c2*z1 + b3*c2*z1 + a1*b3*c2*z1 + b1*b3*c2*z1 + a1*b1*b3*c2*z1 + b2*b3*c2*z1 + a2*b2*b3*c2*z1 + a3*b2*c1*c2*z1 + b3*c1*c2*z1 + a1*b3*c1*c2*z1 + a3*b3*c1*c2*z1 + b2*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a2*b3*x1*z1 + b2*b3*c1*x1*z1 + a3*c2*x1*z1 + b3*c1*c2*x1*z1 + b3*x2*z1 + a2*b3*x2*z1 + b1*b3*c1*x2*z1 + b2*b3*c1*x2*z1 + a3*c2*x2*z1 + b2*x3*z1 + a1*b2*x3*z1 + a2*b3*x3*z1 + b1*b2*c1*x3*z1 + c2*x3*z1 + a1*c2*x3*z1 + a2*c2*x3*z1 + a3*c2*x3*z1 + b3*c2*x3*z1 + b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + c1*c2*x3*z1 + b2*c1*c2*x3*z1 + b3*c1*c2*x3*z1 + a2*b3*y1*z1 + b2*b3*c1*y1*z1 + a3*c2*y1*z1 + b3*c2*y1*z1 + b3*c1*c2*y1*z1 + b3*y2*z1 + a2*b3*y2*z1 + b3*c1*y2*z1 + b1*b3*c1*y2*z1 + b2*b3*c1*y2*z1 + a3*c2*y2*z1 + b3*c2*y2*z1 + b2*y3*z1 + a1*b2*y3*z1 + a2*b3*y3*z1 + b1*b2*c1*y3*z1 + a1*c2*y3*z1 + a2*c2*y3*z1 + a3*c2*y3*z1 + b3*c2*y3*z1 + b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + c1*c2*y3*z1 + b2*c1*c2*y3*z1 + b3*c1*c2*y3*z1 + a1*a3*b1*z2 + a1*a3*b2*z2 + a1*b3*z2 + a1*b1*b3*z2 + a1*b2*b3*z2 + a2*b1*b2*b3*z2 + a1*a3*c1*z2 + a3*b1*b2*c1*z2 + a1*b3*c1*z2 + a2*b3*c1*z2 + a1*b1*b3*c1*z2 + b2*b3*c1*z2 + a2*b2*b3*c1*z2 + b1*b2*b3*c1*z2 + a1*a3*c2*z2 + a3*b1*c2*z2 + a3*b1*b2*c2*z2 + a1*b3*c2*z2 + b1*b3*c2*z2 + a1*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + b3*c1*c2*z2 + a1*b3*c1*c2*z2 + b2*b3*c1*c2*z2 + b1*b2*b3*c1*c2*z2 + a2*b3*x1*z2 + a3*c1*x1*z2 + b2*b3*c1*x1*z2 + a3*c2*x1*z2 + b3*c1*x2*z2 + b1*b3*c1*x2*z2 + b2*b3*c1*x2*z2 + a1*x3*z2 + a1*b1*x3*z2 + a1*b2*x3*z2 + a1*c1*x3*z2 + b2*c1*x3*z2 + b1*b2*c1*x3*z2 + b3*c1*x3*z2 + b1*b3*c2*x3*z2 + c1*c2*x3*z2 + a3*y1*z2 + a2*b3*y1*z2 + a3*c1*y1*z2 + b2*b3*c1*y1*z2 + a3*c2*y1*z2 + b3*c1*y2*z2 + b1*b3*c1*y2*z2 + b2*b3*c1*y2*z2 + a1*b1*y3*z2 + a1*b2*y3*z2 + a1*c1*y3*z2 + b1*b2*c1*y3*z2 + b1*b3*c2*y3*z2 + c1*c2*y3*z2 + a3*z1*z2 + b3*c1*z1*z2 + b3*c2*z1*z2 + a1*b2*z3 + a1*b1*b2*z3 + a3*b1*b2*z3 + a2*b1*b3*z3 + a2*b1*b2*b3*z3 + b1*b2*c1*z3 + a1*b1*b2*c1*z3 + a2*b1*b3*c1*z3 + b2*b3*c1*z3 + a1*b2*b3*c1*z3 + b1*c2*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a3*b1*c2*z3 + a1*b2*c2*z3 + b1*b2*c2*z3 + b1*b3*c2*z3 + a2*b1*b3*c2*z3 + b1*b2*b3*c2*z3 + a1*c1*c2*z3 + a2*c1*c2*z3 + b1*b2*c1*c2*z3 + b3*c1*c2*z3 + a1*b3*c1*c2*z3 + b2*b3*c1*c2*z3 + a2*x1*z3 + a1*b2*x1*z3 + a2*b3*x1*z3 + b2*c1*x1*z3 + b2*b3*c1*x1*z3 + a1*b1*x2*z3 + a1*b2*x2*z3 + c1*x2*z3 + a1*c1*x2*z3 + b1*b2*c1*x2*z3 + b3*c1*x2*z3 + b1*b3*c1*x2*z3 + b2*b3*c1*x2*z3 + a2*b1*x3*z3 + a2*c1*x3*z3 + a1*c2*x3*z3 + b1*b3*c2*x3*z3 + c1*c2*x3*z3 + b2*c1*c2*x3*z3 + a2*y1*z3 + a1*b2*y1*z3 + a2*b3*y1*z3 + b2*c1*y1*z3 + b2*b3*c1*y1*z3 + a1*b1*y2*z3 + a1*b2*y2*z3 + a1*c1*y2*z3 + b1*b2*c1*y2*z3 + b3*c1*y2*z3 + b1*b3*c1*y2*z3 + b2*b3*c1*y2*z3 + a2*b1*y3*z3 + a2*c1*y3*z3 + a1*c2*y3*z3 + b1*b3*c2*y3*z3 + c1*c2*y3*z3 + b2*c1*c2*y3*z3 + c2*z1*z3 + a1*z2*z3 + b2*c1*z2*z3 + b3*c1*z2*z3;
end;
#####################################################################
C2GAPin104:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b2 + a3*b1*b2 + a1*b2*b3 + a1*a3*b2*b3 + a2*b1*b2*b3 + a1*a2*b1*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a1*a2*b3*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + a2*b2*b3*c1 + a1*a2*b2*b3*c1 + a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a3*b1*b2*c2 + a1*a3*b1*b2*c2 + a1*a3*b3*c2 + a1*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*b2*b3*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a1*a3*b1*c1*c2 + a3*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a3*b3*c1*c2 + a2*b1*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b1*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a3*c2*x1 + a3*b1*c2*x1 + a3*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b1*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*a3*x2 + a3*b1*x2 + a3*b1*b2*x2 + b1*b3*x2 + a2*b1*b3*x2 + a3*b1*b3*x2 + a1*b2*b3*x2 + b1*b2*b3*x2 + a3*b1*c1*x2 + b3*c1*x2 + a3*b3*c1*x2 + b1*b3*c1*x2 + b1*b2*b3*c1*x2 + a1*b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + b3*c1*c2*x2 + b1*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + b3*x1*x2 + a2*b1*x3 + b1*b2*x3 + a1*b1*b2*x3 + a3*b1*b2*x3 + a2*b1*b3*x3 + a1*b2*b3*x3 + b1*b2*b3*x3 + a2*b1*c1*x3 + b2*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + b1*b2*c1*x3 + b1*b2*b3*c1*x3 + b1*c2*x3 + a1*b1*c2*x3 + a3*b1*c2*x3 + a1*b2*c2*x3 + a1*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + b1*b3*c2*x3 + a1*b1*b3*c2*x3 + b1*b2*b3*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + b2*c1*x1*x3 + b3*c2*x1*x3 + b1*c1*c2*x1*x3 + b1*c1*x2*x3 + b2*c1*x2*x3 + b1*c2*x2*x3 + a3*b2*y1 + a3*b1*b2*y1 + a2*b1*b3*y1 + a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a2*b1*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a3*b1*c2*y1 + a3*b2*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + b1*b3*c2*y1 + a1*b1*b3*c2*y1 + a2*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b1*c1*c2*y1 + b3*c1*c2*y1 + b2*b3*c1*c2*y1 + b3*x2*y1 + b2*c1*x3*y1 + b3*c2*x3*y1 + b1*c1*c2*x3*y1 + a1*a3*y2 + a3*b1*b3*y2 + b1*b2*b3*y2 + a3*b1*c1*y2 + a3*b3*c1*y2 + a3*b1*c2*y2 + b1*b3*c2*y2 + a1*b1*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + b1*b2*b3*c2*y2 + b1*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + b1*x3*y2 + b1*c1*x3*y2 + b2*c1*x3*y2 + b1*b2*y3 + b1*b2*b3*y3 + b2*c1*y3 + a2*b1*c2*y3 + a1*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + b1*b3*c2*y3 + a1*b1*b3*c2*y3 + b1*c1*c2*y3 + a1*b1*c1*c2*y3 + b1*c2*x1*y3 + b2*c2*x1*y3 + b3*c2*x1*y3 + b1*c1*c2*x1*y3 + b1*x2*y3 + b1*c2*x3*y3 + b1*c2*y1*y3 + b2*c2*y1*y3 + b3*c2*y1*y3 + b1*c1*c2*y1*y3 + b1*y2*y3 + b1*c2*y2*y3 + a3*b1*b2*z1 + a2*b3*z1 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + b1*b2*b3*z1 + b1*b2*b3*c1*z1 + a3*c2*z1 + b3*c2*z1 + a1*b3*c2*z1 + a2*b3*c2*z1 + b1*b3*c2*z1 + b3*c2*x1*z1 + b3*x2*z1 + b3*c2*x2*z1 + b3*c2*y1*z1 + b3*c2*y2*z1 + a1*a3*z2 + a2*b1*b3*z2 + a1*b2*b3*z2 + b1*b2*b3*z2 + b1*b3*c1*z2 + b1*b2*b3*c1*z2 + a3*b1*c2*z2 + b1*b3*c2*z2 + b1*b2*b3*c2*z2 + a3*x1*z2 + b3*x1*z2 + b1*x3*z2 + b1*c2*x3*z2 + a3*y1*z2 + b3*y1*z2 + b1*c2*y3*z2 + a2*b1*z3 + a1*b1*b2*z3 + a3*b1*b2*z3 + a2*b1*b3*z3 + a1*b2*b3*z3 + a2*b1*c1*z3 + a1*b2*c1*z3 + a2*b2*c1*z3 + b1*b2*c1*z3 + b1*b2*b3*c1*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a3*b1*c2*z3 + a1*b2*c2*z3 + b1*b2*b3*c2*z3 + b2*c1*x1*z3 + b1*c2*x1*z3 + b2*c2*x1*z3 + b1*x2*z3 + b1*c1*x2*z3 + b2*c1*x2*z3 + b1*c2*x2*z3 + b1*c2*x3*z3 + b2*c1*y1*z3 + b1*c2*y1*z3 + b2*c2*y1*z3 + b1*c1*y2*z3 + b2*c1*y2*z3 + b1*c2*y2*z3 + b1*c2*y3*z3 + b1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 105 ( P4_2mc)
#####################################################################
Ampin105:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin105:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin105:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain105:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bczin105:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*c1 + b2*c1 + b2*z1;
end;
#####################################################################
Bxyin105:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + c1*x2*y1 + c1*x2*y2 + c1*y1*y2;
end;
#####################################################################
Bzxyin105:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*x1 + b2*c1*x1 + c2*x1 + c1*c2*x1 + a2*y1 + b2*y1 + b2*c1*y1 + c1*c2*y1 + x1*z2 + y1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 106 ( P4_2bc)
#####################################################################
Ampin106:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin106:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain106:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bphi1in106:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + b1*b2*c1 + a2*x1 + b2*c1*x1 + a2*y1 + b2*y1 + b2*c1*y1;
end;
#####################################################################
Bphi2in106:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*c1 + b2*z1;
end;
#####################################################################
C1in106:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b1 + a1*a2*a3*b2 + a1*a2*a3*b1*b2 + a1*a2*b1*b3 + a1*b2*b3 + a1*a2*a3*b2*b3 + a2*b1*b2*b3 + a1*a2*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a2*a3*b1*b3*c1 + a1*a2*a3*b1*b3*c1 + a1*a2*b2*b3*c1 + a1*a3*b2*b3*c1 + b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a2*a3*c2 + a1*a3*b1*c2 + a2*a3*b1*c2 + a1*a2*a3*b1*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*b3*c2 + a2*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*a2*a3*b2*b3*c2 + b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a1*a2*a3*c1*c2 + a3*b1*c1*c2 + a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a2*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + a1*a3*b3*c1*c2 + a1*a2*a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*a2*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*a3*b1*c3 + a1*b2*c3 + a1*a2*b2*c3 + a1*a3*b2*c3 + a2*b1*b2*c3 + a1*a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*a3*b1*b3*c3 + a2*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*a2*a3*b1*b2*b3*c3 + a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a1*b2*c1*c3 + a1*a2*b2*c1*c3 + a1*a3*b2*c1*c3 + a1*a2*a3*b2*c1*c3 + a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a2*a3*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + a2*a3*b1*b3*c1*c3 + a1*a2*b2*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a1*a2*a3*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a1*a2*b1*b2*b3*c1*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*a2*b2*c2*c3 + a1*a3*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*a3*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*a3*b2*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a2*a3*b1*b2*b3*c2*c3 + a1*a2*c1*c2*c3 + a3*c1*c2*c3 + a1*a3*c1*c2*c3 + b1*c1*c2*c3 + a1*b1*c1*c2*c3 + a2*b1*c1*c2*c3 + a2*a3*b1*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a2*b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*a3*b1*b2*c1*c2*c3 + a2*a3*b1*b2*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + a2*a3*b1*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*a3*b2*b3*c1*c2*c3 + a2*a3*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a3*b1*b2*b3*c1*c2*c3 + a1*a3*b1*b2*b3*c1*c2*c3 + a2*a3*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a1*a3*b2*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + b2*b3*x1 + a1*a2*a3*b2*b3*x1 + b1*b2*b3*x1 + a1*a3*b1*b2*b3*x1 + a2*a3*b1*c1*x1 + a2*a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a1*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a2*a3*b3*c1*x1 + a2*b1*b3*c1*x1 + a1*a2*b1*b3*c1*x1 + a2*a3*b1*b3*c1*x1 + b2*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a1*a3*b2*b3*c1*x1 + a2*a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*a2*a3*c2*x1 + a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a1*a2*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*a3*b1*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a1*a2*b3*c2*x1 + a3*b3*c2*x1 + a1*a3*b3*c2*x1 + a1*a2*a3*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + a2*b2*b3*c2*x1 + a1*a3*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a1*a3*c1*c2*x1 + a1*a3*b2*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a1*a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a1*a3*b3*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + b1*b2*b3*c1*c2*x1 + a1*b1*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a1*b2*c3*x1 + a1*a2*b2*c3*x1 + a3*b2*c3*x1 + a1*a3*b2*c3*x1 + b1*b2*c3*x1 + a2*b1*b2*c3*x1 + a1*a3*b1*b2*c3*x1 + a2*a3*b1*b2*c3*x1 + a2*b3*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a2*b1*b3*c3*x1 + b2*b3*c3*x1 + a1*a2*b2*b3*c3*x1 + a1*a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a1*b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a1*a3*b1*b2*b3*c3*x1 + a2*a3*b1*b2*b3*c3*x1 + a1*a2*c1*c3*x1 + a2*a3*c1*c3*x1 + a1*b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a1*a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + a2*b1*b2*c1*c3*x1 + a3*b1*b2*c1*c3*x1 + a1*a2*b3*c1*c3*x1 + a2*a3*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + b2*b3*c1*c3*x1 + a1*a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + a1*b1*b2*b3*c1*c3*x1 + a2*b1*b2*b3*c1*c3*x1 + a3*b1*b2*b3*c1*c3*x1 + a1*a2*c2*c3*x1 + a2*a3*c2*c3*x1 + b1*c2*c3*x1 + a2*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a1*a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + b1*b2*c2*c3*x1 + a1*b1*b2*c2*c3*x1 + b3*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + a2*a3*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a1*a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + a1*a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + b1*c1*c2*c3*x1 + a3*b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a1*b2*b3*c1*c2*c3*x1 + a3*b1*b2*b3*c1*c2*c3*x1 + (a3*b2*x1*(1 + x1))/2 + (a2*b3*x1*(1 + x1))/2 + (a1*a3*c2*x1*(1 + x1))/2 + (a3*b1*c2*x1*(1 + x1))/2 + (a3*b2*c2*x1*(1 + x1))/2 + (a1*a3*b2*c2*x1*(1 + x1))/2 + (a3*b1*b2*c2*x1*(1 + x1))/2 + (b3*c2*x1*(1 + x1))/2 + (a2*b3*c2*x1*(1 + x1))/2 + (a1*a2*b3*c2*x1*(1 + x1))/2 + (a3*b3*c2*x1*(1 + x1))/2 + (a1*a3*b3*c2*x1*(1 + x1))/2 + (a1*b1*b3*c2*x1*(1 + x1))/2 + (a2*b1*b3*c2*x1*(1 + x1))/2 + (a3*b1*b3*c2*x1*(1 + x1))/2 + (a1*b2*b3*c2*x1*(1 + x1))/2 + (b1*b2*b3*c2*x1*(1 + x1))/2 + (a3*b1*c1*c2*x1*(1 + x1))/2 + (a3*b1*b2*c1*c2*x1*(1 + x1))/2 + (b1*b3*c1*c2*x1*(1 + x1))/2 + (a2*b1*b3*c1*c2*x1*(1 + x1))/2 + (a3*b1*b3*c1*c2*x1*(1 + x1))/2 + (b1*b2*b3*c1*c2*x1*(1 + x1))/2 + (a1*a2*c3*x1*(1 + x1))/2 + (a2*a3*c3*x1*(1 + x1))/2 + (b2*c3*x1*(1 + x1))/2 + (a1*b2*c3*x1*(1 + x1))/2 + (a1*a2*b2*c3*x1*(1 + x1))/2 + (a1*a3*b2*c3*x1*(1 + x1))/2 + (a1*b1*b2*c3*x1*(1 + x1))/2 + (a2*b1*b2*c3*x1*(1 + x1))/2 + (a3*b1*b2*c3*x1*(1 + x1))/2 + (a2*b3*c3*x1*(1 + x1))/2 + (a1*a2*b3*c3*x1*(1 + x1))/2 + (a2*a3*b3*c3*x1*(1 + x1))/2 + (a1*b2*b3*c3*x1*(1 + x1))/2 + (a2*b2*b3*c3*x1*(1 + x1))/2 + (a3*b2*b3*c3*x1*(1 + x1))/2 + (a2*b1*c1*c3*x1*(1 + x1))/2 + (a2*b1*b2*c1*c3*x1*(1 + x1))/2 + (a3*b1*b2*c1*c3*x1*(1 + x1))/2 + (a2*b1*b3*c1*c3*x1*(1 + x1))/2 + (b1*b2*b3*c1*c3*x1*(1 + x1))/2 + (b1*c2*c3*x1*(1 + x1))/2 + (a3*b1*c2*c3*x1*(1 + x1))/2 + (b2*c2*c3*x1*(1 + x1))/2 + (a3*b2*c2*c3*x1*(1 + x1))/2 + (b3*c2*c3*x1*(1 + x1))/2 + (b1*b3*c2*c3*x1*(1 + x1))/2 + (a3*b1*b3*c2*c3*x1*(1 + x1))/2 + (a1*b2*b3*c2*c3*x1*(1 + x1))/2 + (a3*b2*b3*c2*c3*x1*(1 + x1))/2 + (b1*b2*b3*c2*c3*x1*(1 + x1))/2 + (b1*b2*b3*c1*c2*c3*x1*(1 + x1))/2 + a1*a3*x2 + a3*b1*x2 + a2*a3*b1*x2 + a1*a3*b2*x2 + a1*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a1*a2*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*a2*b2*b3*x2 + a1*a3*b2*b3*x2 + a1*a2*a3*b2*b3*x2 + b1*b2*b3*x2 + a1*b1*b2*b3*x2 + a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a1*a3*b1*b2*b3*x2 + a2*a3*b1*b2*b3*x2 + a3*b1*c1*x2 + b3*c1*x2 + a1*b3*c1*x2 + b1*b3*c1*x2 + a2*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*a2*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + b1*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a2*a3*b1*b2*b3*c1*x2 + a1*a3*c2*x2 + a1*a2*a3*c2*x2 + a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a1*a2*a3*b2*c2*x2 + a3*b1*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a2*a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + a1*a3*b3*c2*x2 + a1*a2*a3*b3*c2*x2 + b1*b3*c2*x2 + a1*b1*b3*c2*x2 + a1*a2*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a3*b1*b2*b3*c2*x2 + a2*a3*b1*c1*c2*x2 + a2*a3*b1*b2*c1*c2*x2 + b3*c1*c2*x2 + a1*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + a2*a3*b1*b3*c1*c2*x2 + a1*a2*b2*b3*c1*c2*x2 + a1*a3*b2*b3*c1*c2*x2 + a3*b1*b2*b3*c1*c2*x2 + a1*a2*a3*c3*x2 + a1*a2*b1*c3*x2 + a1*a3*b1*c3*x2 + b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*a3*b1*b2*c3*x2 + a2*a3*b1*b2*c3*x2 + a1*b3*c3*x2 + a1*a2*b3*c3*x2 + a1*a2*a3*b3*c3*x2 + a1*b1*b3*c3*x2 + a2*b1*b3*c3*x2 + a1*a2*b1*b3*c3*x2 + a1*a3*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + a1*b1*b2*b3*c3*x2 + a2*b1*b2*b3*c3*x2 + a1*a3*b1*b2*b3*c3*x2 + a2*a3*b1*b2*b3*c3*x2 + a2*b1*c1*c3*x2 + a1*a3*b1*c1*c3*x2 + a1*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + a2*b1*b2*c1*c3*x2 + a1*b3*c1*c3*x2 + a1*b1*b3*c1*c3*x2 + a2*b1*b3*c1*c3*x2 + a1*a3*b1*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a1*b1*b2*b3*c1*c3*x2 + a2*b1*b2*b3*c1*c3*x2 + a1*a2*c2*c3*x2 + a1*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + a1*a3*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a1*a2*b2*c2*c3*x2 + b1*b2*c2*c3*x2 + a1*b1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a3*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + a1*a2*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*a3*b1*b3*c2*c3*x2 + a1*a2*b2*b3*c2*c3*x2 + b1*b2*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + a2*b1*b2*b3*c2*c3*x2 + a3*b1*b2*b3*c2*c3*x2 + a2*b1*c1*c2*c3*x2 + a1*b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a2*b1*b2*c1*c2*c3*x2 + a3*b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + a2*b1*b3*c1*c2*c3*x2 + a2*b1*b2*b3*c1*c2*c3*x2 + a3*b1*b2*b3*c1*c2*c3*x2 + b3*x1*x2 + a3*b3*x1*x2 + a1*a3*c2*x1*x2 + a3*b2*c2*x1*x2 + a1*a3*b2*c2*x1*x2 + b3*c2*x1*x2 + a2*b3*c2*x1*x2 + a1*a2*b3*c2*x1*x2 + a3*b3*c2*x1*x2 + a1*a3*b3*c2*x1*x2 + b1*b3*c2*x1*x2 + a1*b1*b3*c2*x1*x2 + b2*b3*c2*x1*x2 + a1*b2*b3*c2*x1*x2 + a1*a2*c3*x1*x2 + a2*a3*c3*x1*x2 + a2*b1*c3*x1*x2 + a3*b1*c3*x1*x2 + a1*b2*c3*x1*x2 + a1*a2*b2*c3*x1*x2 + a1*a3*b2*c3*x1*x2 + b1*b2*c3*x1*x2 + a1*b1*b2*c3*x1*x2 + b3*c3*x1*x2 + a2*b3*c3*x1*x2 + a1*a2*b3*c3*x1*x2 + a2*a3*b3*c3*x1*x2 + b1*b3*c3*x1*x2 + a2*b1*b3*c3*x1*x2 + a3*b1*b3*c3*x1*x2 + a1*b2*b3*c3*x1*x2 + a2*b2*b3*c3*x1*x2 + a3*b2*b3*c3*x1*x2 + a3*b1*c1*c3*x1*x2 + b1*b2*c1*c3*x1*x2 + b1*b3*c1*c3*x1*x2 + a3*b1*b3*c1*c3*x1*x2 + b1*b2*b3*c1*c3*x1*x2 + b1*c2*c3*x1*x2 + a3*b1*c2*c3*x1*x2 + b2*c2*c3*x1*x2 + a3*b2*c2*c3*x1*x2 + b3*c2*c3*x1*x2 + b1*b3*c2*c3*x1*x2 + a3*b1*b3*c2*c3*x1*x2 + a1*b2*b3*c2*c3*x1*x2 + a3*b2*b3*c2*c3*x1*x2 + (a1*a3*x2*(1 + x2))/2 + (a3*b1*x2*(1 + x2))/2 + (a1*a3*b2*x2*(1 + x2))/2 + (a3*b1*b2*x2*(1 + x2))/2 + (a1*a2*b3*x2*(1 + x2))/2 + (a1*a3*b3*x2*(1 + x2))/2 + (a1*b1*b3*x2*(1 + x2))/2 + (a2*b1*b3*x2*(1 + x2))/2 + (a3*b1*b3*x2*(1 + x2))/2 + (a1*a3*c1*x2*(1 + x2))/2 + (a1*a3*b2*c1*x2*(1 + x2))/2 + (a1*a2*b3*c1*x2*(1 + x2))/2 + (a1*a3*b3*c1*x2*(1 + x2))/2 + (b1*b3*c1*x2*(1 + x2))/2 + (a1*a3*c2*x2*(1 + x2))/2 + (a3*b1*c2*x2*(1 + x2))/2 + (a1*a3*b2*c2*x2*(1 + x2))/2 + (a3*b1*b2*c2*x2*(1 + x2))/2 + (a1*a2*b3*c2*x2*(1 + x2))/2 + (a1*a3*b3*c2*x2*(1 + x2))/2 + (a1*b1*b3*c2*x2*(1 + x2))/2 + (a2*b1*b3*c2*x2*(1 + x2))/2 + (a3*b1*b3*c2*x2*(1 + x2))/2 + (a3*b1*c1*c2*x2*(1 + x2))/2 + (a3*b1*b2*c1*c2*x2*(1 + x2))/2 + (b1*b3*c1*c2*x2*(1 + x2))/2 + (a2*b1*b3*c1*c2*x2*(1 + x2))/2 + (a3*b1*b3*c1*c2*x2*(1 + x2))/2 + (a1*b2*b3*c1*c2*x2*(1 + x2))/2 + (b1*b2*b3*c1*c2*x2*(1 + x2))/2 + (a1*a2*c3*x2*(1 + x2))/2 + (b1*c3*x2*(1 + x2))/2 + (a1*b2*c3*x2*(1 + x2))/2 + (a1*a2*b2*c3*x2*(1 + x2))/2 + (a1*a3*b2*c3*x2*(1 + x2))/2 + (a1*b1*b2*c3*x2*(1 + x2))/2 + (a2*b1*b2*c3*x2*(1 + x2))/2 + (a3*b1*b2*c3*x2*(1 + x2))/2 + (a1*a2*b3*c3*x2*(1 + x2))/2 + (a1*b2*b3*c3*x2*(1 + x2))/2 + (a2*b1*c1*c3*x2*(1 + x2))/2 + (a2*b1*b2*c1*c3*x2*(1 + x2))/2 + (a3*b1*b2*c1*c3*x2*(1 + x2))/2 + (a2*b1*b3*c1*c3*x2*(1 + x2))/2 + (b1*b2*b3*c1*c3*x2*(1 + x2))/2 + (b1*c2*c3*x2*(1 + x2))/2 + (a3*b1*c2*c3*x2*(1 + x2))/2 + (b1*b3*c2*c3*x2*(1 + x2))/2 + (a3*b1*b3*c2*c3*x2*(1 + x2))/2 + (a1*b2*b3*c2*c3*x2*(1 + x2))/2 + (b1*b2*b3*c2*c3*x2*(1 + x2))/2 + (b1*b2*b3*c1*c2*c3*x2*(1 + x2))/2 + a1*a2*x3 + a1*a2*a3*x3 + a2*b1*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + a1*a2*a3*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a2*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*a2*b3*x3 + a1*a2*a3*b3*x3 + a1*b2*b3*x3 + a1*a2*b2*b3*x3 + a1*a3*b2*b3*x3 + a1*a2*a3*b2*b3*x3 + a1*b1*b2*b3*x3 + a2*b1*b2*b3*x3 + a1*a3*b1*b2*b3*x3 + a2*a3*b1*b2*b3*x3 + a1*a2*c1*x3 + a1*a2*a3*c1*x3 + a2*b1*c1*x3 + b2*c1*x3 + a1*b2*c1*x3 + a1*a2*b2*c1*x3 + a1*a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b3*c1*x3 + a1*a2*b3*c1*x3 + a1*a2*a3*b3*c1*x3 + a1*a2*b2*b3*c1*x3 + a1*a3*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a2*a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a1*b1*c2*x3 + a1*b2*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a1*b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*a2*b3*c2*x3 + a1*a3*b3*c2*x3 + b1*b3*c2*x3 + a1*b1*b3*c2*x3 + a2*b1*b3*c2*x3 + a1*a2*b2*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + a2*b1*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + c1*c2*x3 + b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + b2*c1*c2*x3 + a1*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a2*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + a1*a2*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a1*a2*a3*c3*x3 + a2*b1*c3*x3 + a1*a2*b1*c3*x3 + a1*a3*b2*c3*x3 + a1*a2*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*a2*b1*b2*c3*x3 + a1*a3*b1*b2*c3*x3 + a2*a3*b1*b2*c3*x3 + a1*a2*a3*b3*c3*x3 + a2*b1*b3*c3*x3 + a1*a2*b1*b3*c3*x3 + a1*a2*b2*b3*c3*x3 + a1*a3*b2*b3*c3*x3 + b1*b2*b3*c3*x3 + a1*b1*b2*b3*c3*x3 + a1*a3*b1*b2*b3*c3*x3 + a1*b2*c1*c3*x3 + a3*b2*c1*c3*x3 + a1*a3*b2*c1*c3*x3 + b1*b2*c1*c3*x3 + a1*b1*b2*c1*c3*x3 + a3*b1*b2*c1*c3*x3 + a2*a3*b1*b2*c1*c3*x3 + a2*b3*c1*c3*x3 + a1*b2*b3*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + a1*a3*b2*b3*c1*c3*x3 + a1*b1*b2*b3*c1*c3*x3 + a3*b1*b2*b3*c1*c3*x3 + a2*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a2*b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a1*a2*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + a2*b1*c1*c2*c3*x3 + a1*b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + a2*b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + a2*b1*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + a2*b1*b2*b3*c1*c2*c3*x3 + a1*a2*c3*x1*x3 + a2*a3*c3*x1*x3 + a2*b1*c3*x1*x3 + a1*b2*c3*x1*x3 + a1*a2*b2*c3*x1*x3 + a3*b2*c3*x1*x3 + a1*a3*b2*c3*x1*x3 + b1*b2*c3*x1*x3 + a1*b1*b2*c3*x1*x3 + a2*b3*c3*x1*x3 + a1*a2*b3*c3*x1*x3 + a2*a3*b3*c3*x1*x3 + a2*b1*b3*c3*x1*x3 + b2*b3*c3*x1*x3 + a1*b2*b3*c3*x1*x3 + a2*b2*b3*c3*x1*x3 + a3*b2*c1*c3*x1*x3 + b1*b2*c1*c3*x1*x3 + b2*b3*c1*c3*x1*x3 + a3*b2*b3*c1*c3*x1*x3 + b1*b2*b3*c1*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a1*b2*b3*c2*c3*x1*x3 + a1*a2*x2*x3 + a1*a3*x2*x3 + a1*b1*x2*x3 + a2*b1*x2*x3 + a3*b1*x2*x3 + a1*a2*b2*x2*x3 + a1*a3*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a2*b3*x2*x3 + a1*a3*b3*x2*x3 + a1*b1*b3*x2*x3 + a2*b1*b3*x2*x3 + a3*b1*b3*x2*x3 + c1*x2*x3 + a1*a2*c1*x2*x3 + a1*a3*c1*x2*x3 + b1*c1*x2*x3 + a1*a2*b2*c1*x2*x3 + a1*a3*b2*c1*x2*x3 + b1*b2*c1*x2*x3 + a1*a2*b3*c1*x2*x3 + a1*a3*b3*c1*x2*x3 + b1*b3*c1*x2*x3 + a1*b2*b3*c2*x2*x3 + b1*b2*b3*c2*x2*x3 + a1*b2*b3*c1*c2*x2*x3 + a1*a2*c3*x2*x3 + b1*c3*x2*x3 + a3*b1*c3*x2*x3 + a1*b2*c3*x2*x3 + a1*a2*b2*c3*x2*x3 + a1*a3*b2*c3*x2*x3 + a1*b1*b2*c3*x2*x3 + a2*b1*b2*c3*x2*x3 + a3*b1*b2*c3*x2*x3 + a1*a2*b3*c3*x2*x3 + b1*b3*c3*x2*x3 + a3*b1*b3*c3*x2*x3 + a1*b2*b3*c3*x2*x3 + a2*b1*c1*c3*x2*x3 + a2*b1*b2*c1*c3*x2*x3 + a3*b1*b2*c1*c3*x2*x3 + a2*b1*b3*c1*c3*x2*x3 + b1*b2*b3*c1*c3*x2*x3 + a1*b2*b3*c2*c3*x2*x3 + b1*b2*b3*c2*c3*x2*x3 + b1*b2*b3*c1*c2*c3*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a1*b2*x3*(1 + x3))/2 + (a1*a2*b2*x3*(1 + x3))/2 + (a1*a3*b2*x3*(1 + x3))/2 + (a1*b1*b2*x3*(1 + x3))/2 + (a2*b1*b2*x3*(1 + x3))/2 + (a3*b1*b2*x3*(1 + x3))/2 + (a1*a2*b3*x3*(1 + x3))/2 + (a1*b2*b3*x3*(1 + x3))/2 + (a1*a2*c1*x3*(1 + x3))/2 + (a2*a3*c1*x3*(1 + x3))/2 + (a1*a2*b2*c1*x3*(1 + x3))/2 + (a1*a3*b2*c1*x3*(1 + x3))/2 + (a1*a2*b3*c1*x3*(1 + x3))/2 + (a2*a3*b3*c1*x3*(1 + x3))/2 + (b1*b2*b3*c1*x3*(1 + x3))/2 + (a1*a2*c2*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + (a1*b1*c2*x3*(1 + x3))/2 + (a2*b1*c2*x3*(1 + x3))/2 + (a3*b1*c2*x3*(1 + x3))/2 + (a1*a2*b2*c2*x3*(1 + x3))/2 + (a1*a3*b2*c2*x3*(1 + x3))/2 + (a1*b1*b2*c2*x3*(1 + x3))/2 + (a2*b1*b2*c2*x3*(1 + x3))/2 + (a3*b1*b2*c2*x3*(1 + x3))/2 + (a1*a2*b3*c2*x3*(1 + x3))/2 + (b1*b3*c2*x3*(1 + x3))/2 + (a1*b1*b3*c2*x3*(1 + x3))/2 + (a2*b1*b3*c2*x3*(1 + x3))/2 + (a3*b1*b3*c2*x3*(1 + x3))/2 + (c1*c2*x3*(1 + x3))/2 + (b1*c1*c2*x3*(1 + x3))/2 + (a2*b1*c1*c2*x3*(1 + x3))/2 + (a3*b1*c1*c2*x3*(1 + x3))/2 + (a3*b2*c1*c2*x3*(1 + x3))/2 + (b1*b2*c1*c2*x3*(1 + x3))/2 + (a2*b1*b2*c1*c2*x3*(1 + x3))/2 + (a3*b1*b2*c1*c2*x3*(1 + x3))/2 + (b1*b3*c1*c2*x3*(1 + x3))/2 + (a2*b1*b3*c1*c2*x3*(1 + x3))/2 + (a3*b1*b3*c1*c2*x3*(1 + x3))/2 + (a1*b2*b3*c1*c2*x3*(1 + x3))/2 + (a3*b2*b3*c1*c2*x3*(1 + x3))/2 + (b1*b2*b3*c1*c2*x3*(1 + x3))/2 + (a1*a2*c3*x3*(1 + x3))/2 + (a1*b2*c3*x3*(1 + x3))/2 + (a1*a2*b2*c3*x3*(1 + x3))/2 + (a1*a3*b2*c3*x3*(1 + x3))/2 + (a1*b1*b2*c3*x3*(1 + x3))/2 + (a2*b1*b2*c3*x3*(1 + x3))/2 + (a3*b1*b2*c3*x3*(1 + x3))/2 + (a1*a2*b3*c3*x3*(1 + x3))/2 + (a1*b2*b3*c3*x3*(1 + x3))/2 + (a2*b1*c1*c3*x3*(1 + x3))/2 + (a2*b1*b2*c1*c3*x3*(1 + x3))/2 + (a3*b1*b2*c1*c3*x3*(1 + x3))/2 + (a2*b1*b3*c1*c3*x3*(1 + x3))/2 + (b1*b2*b3*c1*c3*x3*(1 + x3))/2 + (b1*c2*c3*x3*(1 + x3))/2 + (a3*b1*c2*c3*x3*(1 + x3))/2 + (b1*b3*c2*c3*x3*(1 + x3))/2 + (a3*b1*b3*c2*c3*x3*(1 + x3))/2 + (a1*b2*b3*c2*c3*x3*(1 + x3))/2 + (b1*b2*b3*c2*c3*x3*(1 + x3))/2 + (b1*b2*b3*c1*c2*c3*x3*(1 + x3))/2 + a1*a3*b2*y1 + a2*a3*b2*y1 + a3*b1*b2*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + a1*a2*a3*b2*b3*y1 + b1*b2*b3*y1 + a1*a3*b1*b2*b3*y1 + a2*a3*b1*b2*b3*y1 + a2*a3*b1*c1*y1 + a2*a3*b2*c1*y1 + a1*a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*a3*b3*c1*y1 + a2*b1*b3*c1*y1 + a1*a2*b1*b3*c1*y1 + a2*a3*b1*b3*c1*y1 + b2*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a1*a3*b2*b3*c1*y1 + a2*a3*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a1*a3*c2*y1 + a1*a2*a3*c2*y1 + a3*b1*c2*y1 + a1*a3*b1*c2*y1 + a3*b2*c2*y1 + a1*a2*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + a2*a3*b1*b2*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + a1*a2*a3*b3*c2*y1 + b1*b3*c2*y1 + a1*b1*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a2*b2*b3*c2*y1 + a1*a3*b2*b3*c2*y1 + a2*a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a1*a3*c1*c2*y1 + a1*a3*b2*c1*c2*y1 + a3*b1*b2*c1*c2*y1 + b3*c1*c2*y1 + a2*b3*c1*c2*y1 + a1*a2*b3*c1*c2*y1 + a3*b3*c1*c2*y1 + a1*a3*b3*c1*c2*y1 + b1*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a3*b1*b2*b3*c1*c2*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a2*a3*b2*c3*y1 + a2*b1*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a2*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a2*b1*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + a2*a3*b1*b3*c3*y1 + a1*a2*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + b1*b2*b3*c3*y1 + a1*b1*b2*b3*c3*y1 + a2*b1*b2*b3*c3*y1 + a1*a3*b1*b2*b3*c3*y1 + a2*a3*b1*b2*b3*c3*y1 + a1*a2*c1*c3*y1 + a2*a3*c1*c3*y1 + a1*b2*c1*c3*y1 + a2*b2*c1*c3*y1 + a1*a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a1*a2*b3*c1*c3*y1 + a2*a3*b3*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + b2*b3*c1*c3*y1 + a1*a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + a1*b1*b2*b3*c1*c3*y1 + a2*b1*b2*b3*c1*c3*y1 + a1*a2*c2*c3*y1 + a2*a3*c2*c3*y1 + b1*c2*c3*y1 + a3*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*b2*c2*c3*y1 + a1*a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + a1*a3*b2*c2*c3*y1 + a1*b1*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a3*b1*b2*c2*c3*y1 + a1*b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b3*c2*c3*y1 + a2*a3*b3*c2*c3*y1 + a3*b1*b3*c2*c3*y1 + a1*a2*b2*b3*c2*c3*y1 + a3*b2*b3*c2*c3*y1 + a1*a3*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + a2*b1*b2*b3*c2*c3*y1 + a3*b1*b2*b3*c2*c3*y1 + b1*c1*c2*c3*y1 + a3*b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + a1*b2*b3*c1*c2*c3*y1 + a3*b1*b2*b3*c1*c2*c3*y1 + a3*b2*x1*y1 + a2*b3*x1*y1 + a1*a3*c2*x1*y1 + a3*b1*c2*x1*y1 + a3*b2*c2*x1*y1 + a1*a3*b2*c2*x1*y1 + a3*b1*b2*c2*x1*y1 + b3*c2*x1*y1 + a2*b3*c2*x1*y1 + a1*a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + a1*a3*b3*c2*x1*y1 + a1*b1*b3*c2*x1*y1 + a2*b1*b3*c2*x1*y1 + a3*b1*b3*c2*x1*y1 + a1*b2*b3*c2*x1*y1 + b1*b2*b3*c2*x1*y1 + a3*b1*c1*c2*x1*y1 + a3*b1*b2*c1*c2*x1*y1 + b1*b3*c1*c2*x1*y1 + a2*b1*b3*c1*c2*x1*y1 + a3*b1*b3*c1*c2*x1*y1 + b1*b2*b3*c1*c2*x1*y1 + a1*a2*c3*x1*y1 + a2*a3*c3*x1*y1 + b2*c3*x1*y1 + a1*b2*c3*x1*y1 + a1*a2*b2*c3*x1*y1 + a1*a3*b2*c3*x1*y1 + a1*b1*b2*c3*x1*y1 + a2*b1*b2*c3*x1*y1 + a3*b1*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + a1*a2*b3*c3*x1*y1 + a2*a3*b3*c3*x1*y1 + a1*b2*b3*c3*x1*y1 + a2*b2*b3*c3*x1*y1 + a3*b2*b3*c3*x1*y1 + a2*b1*c1*c3*x1*y1 + a2*b1*b2*c1*c3*x1*y1 + a3*b1*b2*c1*c3*x1*y1 + a2*b1*b3*c1*c3*x1*y1 + b1*b2*b3*c1*c3*x1*y1 + b1*c2*c3*x1*y1 + a3*b1*c2*c3*x1*y1 + b2*c2*c3*x1*y1 + a3*b2*c2*c3*x1*y1 + b3*c2*c3*x1*y1 + b1*b3*c2*c3*x1*y1 + a3*b1*b3*c2*c3*x1*y1 + a1*b2*b3*c2*c3*x1*y1 + a3*b2*b3*c2*c3*x1*y1 + b1*b2*b3*c2*c3*x1*y1 + b1*b2*b3*c1*c2*c3*x1*y1 + b3*x2*y1 + a3*b3*x2*y1 + a1*a3*c2*x2*y1 + a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + a3*b1*b2*c2*x2*y1 + b3*c2*x2*y1 + a2*b3*c2*x2*y1 + a1*a2*b3*c2*x2*y1 + a3*b3*c2*x2*y1 + a1*a3*b3*c2*x2*y1 + a1*b1*b3*c2*x2*y1 + a2*b1*b3*c2*x2*y1 + a3*b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + a1*b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + a1*a2*c3*x2*y1 + a2*a3*c3*x2*y1 + a1*b2*c3*x2*y1 + a1*a2*b2*c3*x2*y1 + a1*a3*b2*c3*x2*y1 + a1*b1*b2*c3*x2*y1 + a2*b1*b2*c3*x2*y1 + a3*b1*b2*c3*x2*y1 + b3*c3*x2*y1 + a2*b3*c3*x2*y1 + a1*a2*b3*c3*x2*y1 + a2*a3*b3*c3*x2*y1 + a1*b2*b3*c3*x2*y1 + a2*b2*b3*c3*x2*y1 + a3*b2*b3*c3*x2*y1 + a3*b1*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + b1*b3*c1*c3*x2*y1 + a3*b1*b3*c1*c3*x2*y1 + b1*b2*b3*c1*c3*x2*y1 + b1*c2*c3*x2*y1 + a3*b1*c2*c3*x2*y1 + b2*c2*c3*x2*y1 + a3*b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + a3*b1*b3*c2*c3*x2*y1 + a1*b2*b3*c2*c3*x2*y1 + a3*b2*b3*c2*c3*x2*y1 + b1*b2*b3*c2*c3*x2*y1 + a1*a2*c3*x3*y1 + a2*a3*c3*x3*y1 + a1*b2*c3*x3*y1 + a1*a2*b2*c3*x3*y1 + a1*a3*b2*c3*x3*y1 + a1*b1*b2*c3*x3*y1 + a2*b1*b2*c3*x3*y1 + a3*b1*b2*c3*x3*y1 + a2*b3*c3*x3*y1 + a1*a2*b3*c3*x3*y1 + a2*a3*b3*c3*x3*y1 + a1*b2*b3*c3*x3*y1 + a2*b2*b3*c3*x3*y1 + a3*b2*b3*c3*x3*y1 + a3*b2*c1*c3*x3*y1 + b1*b2*c1*c3*x3*y1 + b2*b3*c1*c3*x3*y1 + a3*b2*b3*c1*c3*x3*y1 + b1*b2*b3*c1*c3*x3*y1 + b2*b3*c2*c3*x3*y1 + a1*b2*b3*c2*c3*x3*y1 + b1*b2*b3*c2*c3*x3*y1 + (a3*b2*y1*(1 + y1))/2 + (a2*b3*y1*(1 + y1))/2 + (a1*a3*c2*y1*(1 + y1))/2 + (a3*b1*c2*y1*(1 + y1))/2 + (a3*b2*c2*y1*(1 + y1))/2 + (a1*a3*b2*c2*y1*(1 + y1))/2 + (a3*b1*b2*c2*y1*(1 + y1))/2 + (b3*c2*y1*(1 + y1))/2 + (a2*b3*c2*y1*(1 + y1))/2 + (a1*a2*b3*c2*y1*(1 + y1))/2 + (a3*b3*c2*y1*(1 + y1))/2 + (a1*a3*b3*c2*y1*(1 + y1))/2 + (a1*b1*b3*c2*y1*(1 + y1))/2 + (a2*b1*b3*c2*y1*(1 + y1))/2 + (a3*b1*b3*c2*y1*(1 + y1))/2 + (a1*b2*b3*c2*y1*(1 + y1))/2 + (b1*b2*b3*c2*y1*(1 + y1))/2 + (a3*b1*c1*c2*y1*(1 + y1))/2 + (a3*b1*b2*c1*c2*y1*(1 + y1))/2 + (b1*b3*c1*c2*y1*(1 + y1))/2 + (a2*b1*b3*c1*c2*y1*(1 + y1))/2 + (a3*b1*b3*c1*c2*y1*(1 + y1))/2 + (b1*b2*b3*c1*c2*y1*(1 + y1))/2 + (a1*a2*c3*y1*(1 + y1))/2 + (a2*a3*c3*y1*(1 + y1))/2 + (b2*c3*y1*(1 + y1))/2 + (a1*b2*c3*y1*(1 + y1))/2 + (a1*a2*b2*c3*y1*(1 + y1))/2 + (a1*a3*b2*c3*y1*(1 + y1))/2 + (a1*b1*b2*c3*y1*(1 + y1))/2 + (a2*b1*b2*c3*y1*(1 + y1))/2 + (a3*b1*b2*c3*y1*(1 + y1))/2 + (a2*b3*c3*y1*(1 + y1))/2 + (a1*a2*b3*c3*y1*(1 + y1))/2 + (a2*a3*b3*c3*y1*(1 + y1))/2 + (a1*b2*b3*c3*y1*(1 + y1))/2 + (a2*b2*b3*c3*y1*(1 + y1))/2 + (a3*b2*b3*c3*y1*(1 + y1))/2 + (a2*b1*c1*c3*y1*(1 + y1))/2 + (a2*b1*b2*c1*c3*y1*(1 + y1))/2 + (a3*b1*b2*c1*c3*y1*(1 + y1))/2 + (a2*b1*b3*c1*c3*y1*(1 + y1))/2 + (b1*b2*b3*c1*c3*y1*(1 + y1))/2 + (b1*c2*c3*y1*(1 + y1))/2 + (a3*b1*c2*c3*y1*(1 + y1))/2 + (b2*c2*c3*y1*(1 + y1))/2 + (a3*b2*c2*c3*y1*(1 + y1))/2 + (b3*c2*c3*y1*(1 + y1))/2 + (b1*b3*c2*c3*y1*(1 + y1))/2 + (a3*b1*b3*c2*c3*y1*(1 + y1))/2 + (a1*b2*b3*c2*c3*y1*(1 + y1))/2 + (a3*b2*b3*c2*c3*y1*(1 + y1))/2 + (b1*b2*b3*c2*c3*y1*(1 + y1))/2 + (b1*b2*b3*c1*c2*c3*y1*(1 + y1))/2 + a1*b2*b3*y2 + a1*a3*b2*b3*y2 + a1*a2*a3*b2*b3*y2 + b1*b2*b3*y2 + a1*a3*b1*b2*b3*y2 + a2*a3*b1*b2*b3*y2 + a3*b1*b2*c1*y2 + b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*a2*b2*b3*c1*y2 + a1*a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a3*b1*b2*b3*c1*y2 + a2*a3*b1*b2*b3*c1*y2 + a1*a2*a3*c2*y2 + a1*a2*a3*b2*c2*y2 + a3*b1*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a2*a3*b1*b2*c2*y2 + a1*a2*a3*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*a3*b2*b3*c2*y2 + a2*a3*b1*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + a1*a2*b2*b3*c1*c2*y2 + a1*a3*b2*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*a2*c3*y2 + a1*a2*a3*c3*y2 + a1*b1*c3*y2 + a1*a2*b1*c3*y2 + a1*a3*b1*c3*y2 + a1*a2*b2*c3*y2 + b1*b2*c3*y2 + a3*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a2*a3*b1*b2*c3*y2 + a1*a2*a3*b3*c3*y2 + a1*b1*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*a3*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + b1*b2*b3*c3*y2 + a3*b1*b2*b3*c3*y2 + a1*a3*b1*b2*b3*c3*y2 + a2*a3*b1*b2*b3*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + a1*a3*b1*c1*c3*y2 + b1*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a2*b1*b2*c1*c3*y2 + a3*b1*b2*c1*c3*y2 + b1*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a3*b1*b3*c1*c3*y2 + a1*a3*b1*b3*c1*c3*y2 + a1*b1*b2*b3*c1*c3*y2 + a2*b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*a2*c2*c3*y2 + a1*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*a2*b2*c2*c3*y2 + b1*b2*c2*c3*y2 + a1*b1*b2*c2*c3*y2 + a2*b1*b2*c2*c3*y2 + a1*a2*b3*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*a3*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + a1*a2*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + a2*b1*b2*b3*c2*c3*y2 + a2*b1*c1*c2*c3*y2 + a2*b1*b2*c1*c2*c3*y2 + a3*b1*b2*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a2*b1*b3*c1*c2*c3*y2 + a2*b1*b2*b3*c1*c2*c3*y2 + a3*b1*b2*b3*c1*c2*c3*y2 + a1*a3*x1*y2 + a3*b2*x1*y2 + a1*a3*b2*x1*y2 + a2*b3*x1*y2 + a1*a2*b3*x1*y2 + a1*a3*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + a1*a3*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b2*c2*x1*y2 + b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a1*a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a1*a3*b3*c2*x1*y2 + b1*b3*c2*x1*y2 + a1*b1*b3*c2*x1*y2 + a1*a2*c3*x1*y2 + a2*a3*c3*x1*y2 + b1*c3*x1*y2 + a2*b1*c3*x1*y2 + a3*b1*c3*x1*y2 + b2*c3*x1*y2 + a1*b2*c3*x1*y2 + a1*a2*b2*c3*x1*y2 + a1*a3*b2*c3*x1*y2 + b1*b2*c3*x1*y2 + a1*b1*b2*c3*x1*y2 + a2*b3*c3*x1*y2 + a1*a2*b3*c3*x1*y2 + a2*a3*b3*c3*x1*y2 + b1*b3*c3*x1*y2 + a2*b1*b3*c3*x1*y2 + a3*b1*b3*c3*x1*y2 + a1*b2*b3*c3*x1*y2 + a2*b2*b3*c3*x1*y2 + a3*b2*b3*c3*x1*y2 + a3*b1*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + b1*b3*c1*c3*x1*y2 + a3*b1*b3*c1*c3*x1*y2 + b1*b2*b3*c1*c3*x1*y2 + b1*c2*c3*x1*y2 + a3*b1*c2*c3*x1*y2 + b2*c2*c3*x1*y2 + a3*b2*c2*c3*x1*y2 + b3*c2*c3*x1*y2 + b1*b3*c2*c3*x1*y2 + a3*b1*b3*c2*c3*x1*y2 + a1*b2*b3*c2*c3*x1*y2 + a3*b2*b3*c2*c3*x1*y2 + a1*a3*c1*x2*y2 + a3*b1*c1*x2*y2 + a1*a3*b2*c1*x2*y2 + a3*b1*b2*c1*x2*y2 + a1*a2*b3*c1*x2*y2 + a1*a3*b3*c1*x2*y2 + a2*b1*b3*c1*x2*y2 + a3*b1*b3*c1*x2*y2 + a1*a3*c2*x2*y2 + a3*b1*c2*x2*y2 + a1*a3*b2*c2*x2*y2 + a3*b1*b2*c2*x2*y2 + a1*a2*b3*c2*x2*y2 + a1*a3*b3*c2*x2*y2 + a1*b1*b3*c2*x2*y2 + a2*b1*b3*c2*x2*y2 + a3*b1*b3*c2*x2*y2 + a1*b2*b3*c2*x2*y2 + b1*b2*b3*c2*x2*y2 + a3*b1*c1*c2*x2*y2 + a3*b1*b2*c1*c2*x2*y2 + b1*b3*c1*c2*x2*y2 + a2*b1*b3*c1*c2*x2*y2 + a3*b1*b3*c1*c2*x2*y2 + a1*b2*b3*c1*c2*x2*y2 + a1*a2*c3*x2*y2 + a1*b2*c3*x2*y2 + a1*a2*b2*c3*x2*y2 + a1*a3*b2*c3*x2*y2 + a1*b1*b2*c3*x2*y2 + a2*b1*b2*c3*x2*y2 + a3*b1*b2*c3*x2*y2 + a1*a2*b3*c3*x2*y2 + a1*b2*b3*c3*x2*y2 + a2*b1*c1*c3*x2*y2 + a2*b1*b2*c1*c3*x2*y2 + a3*b1*b2*c1*c3*x2*y2 + a2*b1*b3*c1*c3*x2*y2 + b1*b2*b3*c1*c3*x2*y2 + b1*c2*c3*x2*y2 + a3*b1*c2*c3*x2*y2 + b1*b3*c2*c3*x2*y2 + a3*b1*b3*c2*c3*x2*y2 + a1*b2*b3*c2*c3*x2*y2 + b1*b2*b3*c2*c3*x2*y2 + b1*b2*b3*c1*c2*c3*x2*y2 + a1*a2*c1*x3*y2 + a1*a3*c1*x3*y2 + a2*b1*c1*x3*y2 + a3*b1*c1*x3*y2 + a1*a2*b2*c1*x3*y2 + a1*a3*b2*c1*x3*y2 + a2*b1*b2*c1*x3*y2 + a3*b1*b2*c1*x3*y2 + a1*a2*b3*c1*x3*y2 + a1*a3*b3*c1*x3*y2 + a2*b1*b3*c1*x3*y2 + a3*b1*b3*c1*x3*y2 + a1*b2*b3*c1*c2*x3*y2 + b1*b2*b3*c1*c2*x3*y2 + a1*a2*c3*x3*y2 + a1*b2*c3*x3*y2 + a1*a2*b2*c3*x3*y2 + a1*a3*b2*c3*x3*y2 + a1*b1*b2*c3*x3*y2 + a2*b1*b2*c3*x3*y2 + a3*b1*b2*c3*x3*y2 + a1*a2*b3*c3*x3*y2 + a1*b2*b3*c3*x3*y2 + a2*b1*c1*c3*x3*y2 + a2*b1*b2*c1*c3*x3*y2 + a3*b1*b2*c1*c3*x3*y2 + a2*b1*b3*c1*c3*x3*y2 + b1*b2*b3*c1*c3*x3*y2 + a1*b2*b3*c2*c3*x3*y2 + b1*b2*b3*c2*c3*x3*y2 + b1*b2*b3*c1*c2*c3*x3*y2 + a1*a3*y1*y2 + a3*b1*y1*y2 + a3*b2*y1*y2 + a1*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + a2*b3*y1*y2 + a1*a2*b3*y1*y2 + a1*a3*b3*y1*y2 + a1*b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a3*b1*b3*y1*y2 + a1*a3*c2*y1*y2 + a3*b1*c2*y1*y2 + a3*b2*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + a3*b1*b2*c2*y1*y2 + b3*c2*y1*y2 + a2*b3*c2*y1*y2 + a1*a2*b3*c2*y1*y2 + a3*b3*c2*y1*y2 + a1*a3*b3*c2*y1*y2 + a1*b1*b3*c2*y1*y2 + a2*b1*b3*c2*y1*y2 + a3*b1*b3*c2*y1*y2 + a1*a2*c3*y1*y2 + a2*a3*c3*y1*y2 + b1*c3*y1*y2 + b2*c3*y1*y2 + a1*b2*c3*y1*y2 + a1*a2*b2*c3*y1*y2 + a1*a3*b2*c3*y1*y2 + a1*b1*b2*c3*y1*y2 + a2*b1*b2*c3*y1*y2 + a3*b1*b2*c3*y1*y2 + a2*b3*c3*y1*y2 + a1*a2*b3*c3*y1*y2 + a2*a3*b3*c3*y1*y2 + a1*b2*b3*c3*y1*y2 + a2*b2*b3*c3*y1*y2 + a3*b2*b3*c3*y1*y2 + a3*b1*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + b1*b3*c1*c3*y1*y2 + a3*b1*b3*c1*c3*y1*y2 + b1*b2*b3*c1*c3*y1*y2 + b1*c2*c3*y1*y2 + a3*b1*c2*c3*y1*y2 + b2*c2*c3*y1*y2 + a3*b2*c2*c3*y1*y2 + b3*c2*c3*y1*y2 + b1*b3*c2*c3*y1*y2 + a3*b1*b3*c2*c3*y1*y2 + a1*b2*b3*c2*c3*y1*y2 + a3*b2*b3*c2*c3*y1*y2 + b1*b2*b3*c2*c3*y1*y2 + (a1*a3*y2*(1 + y2))/2 + (a3*b1*y2*(1 + y2))/2 + (a1*a3*b2*y2*(1 + y2))/2 + (a3*b1*b2*y2*(1 + y2))/2 + (a1*a2*b3*y2*(1 + y2))/2 + (a1*a3*b3*y2*(1 + y2))/2 + (a1*b1*b3*y2*(1 + y2))/2 + (a2*b1*b3*y2*(1 + y2))/2 + (a3*b1*b3*y2*(1 + y2))/2 + (a1*a3*c1*y2*(1 + y2))/2 + (a1*a3*b2*c1*y2*(1 + y2))/2 + (a1*a2*b3*c1*y2*(1 + y2))/2 + (a1*a3*b3*c1*y2*(1 + y2))/2 + (b1*b3*c1*y2*(1 + y2))/2 + (a1*a3*c2*y2*(1 + y2))/2 + (a3*b1*c2*y2*(1 + y2))/2 + (a1*a3*b2*c2*y2*(1 + y2))/2 + (a3*b1*b2*c2*y2*(1 + y2))/2 + (a1*a2*b3*c2*y2*(1 + y2))/2 + (a1*a3*b3*c2*y2*(1 + y2))/2 + (a1*b1*b3*c2*y2*(1 + y2))/2 + (a2*b1*b3*c2*y2*(1 + y2))/2 + (a3*b1*b3*c2*y2*(1 + y2))/2 + (a3*b1*c1*c2*y2*(1 + y2))/2 + (a3*b1*b2*c1*c2*y2*(1 + y2))/2 + (b1*b3*c1*c2*y2*(1 + y2))/2 + (a2*b1*b3*c1*c2*y2*(1 + y2))/2 + (a3*b1*b3*c1*c2*y2*(1 + y2))/2 + (a1*b2*b3*c1*c2*y2*(1 + y2))/2 + (b1*b2*b3*c1*c2*y2*(1 + y2))/2 + (a1*a2*c3*y2*(1 + y2))/2 + (b1*c3*y2*(1 + y2))/2 + (a1*b2*c3*y2*(1 + y2))/2 + (a1*a2*b2*c3*y2*(1 + y2))/2 + (a1*a3*b2*c3*y2*(1 + y2))/2 + (a1*b1*b2*c3*y2*(1 + y2))/2 + (a2*b1*b2*c3*y2*(1 + y2))/2 + (a3*b1*b2*c3*y2*(1 + y2))/2 + (a1*a2*b3*c3*y2*(1 + y2))/2 + (a1*b2*b3*c3*y2*(1 + y2))/2 + (a2*b1*c1*c3*y2*(1 + y2))/2 + (a2*b1*b2*c1*c3*y2*(1 + y2))/2 + (a3*b1*b2*c1*c3*y2*(1 + y2))/2 + (a2*b1*b3*c1*c3*y2*(1 + y2))/2 + (b1*b2*b3*c1*c3*y2*(1 + y2))/2 + (b1*c2*c3*y2*(1 + y2))/2 + (a3*b1*c2*c3*y2*(1 + y2))/2 + (b1*b3*c2*c3*y2*(1 + y2))/2 + (a3*b1*b3*c2*c3*y2*(1 + y2))/2 + (a1*b2*b3*c2*c3*y2*(1 + y2))/2 + (b1*b2*b3*c2*c3*y2*(1 + y2))/2 + (b1*b2*b3*c1*c2*c3*y2*(1 + y2))/2 + a1*a2*a3*y3 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*a2*a3*b2*y3 + a1*b1*b2*y3 + a1*a2*b1*b2*y3 + a1*a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b3*y3 + a1*a2*a3*b3*y3 + a1*a2*b1*b3*y3 + a1*b2*b3*y3 + a1*a2*b2*b3*y3 + a1*a2*a3*b2*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a2*a3*b1*b2*b3*y3 + a1*a2*c1*y3 + a1*a2*a3*c1*y3 + a2*a3*b1*c1*y3 + a1*a2*b2*c1*y3 + a1*a3*b2*c1*y3 + a1*a2*a3*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a1*a2*b3*c1*y3 + a1*a2*a3*b3*c1*y3 + a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + a1*b2*b3*c1*y3 + a1*a3*b2*b3*c1*y3 + b1*b2*b3*c1*y3 + a1*b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a2*a3*b1*b2*b3*c1*y3 + a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a2*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*a2*b2*b3*c2*y3 + a1*a3*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a3*b1*b2*b3*c2*y3 + a2*b1*c1*c2*y3 + b2*c1*c2*y3 + a3*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a2*b1*b3*c1*c2*y3 + a1*a2*b2*b3*c1*c2*y3 + a3*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*a3*c3*y3 + a1*a2*b1*c3*y3 + a1*a2*b2*c3*y3 + a1*a2*a3*b2*c3*y3 + a1*b1*b2*c3*y3 + a1*a2*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a2*a3*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*a2*a3*b3*c3*y3 + a1*a2*b1*b3*c3*y3 + a1*b2*b3*c3*y3 + b1*b2*b3*c3*y3 + a2*b1*b2*b3*c3*y3 + a3*b1*b2*b3*c3*y3 + a1*a3*b1*b2*b3*c3*y3 + a1*a3*b2*c1*c3*y3 + b1*b2*c1*c3*y3 + a1*b1*b2*c1*c3*y3 + a3*b1*b2*c1*c3*y3 + a2*a3*b1*b2*c1*c3*y3 + a1*b2*b3*c1*c3*y3 + a1*a3*b2*b3*c1*c3*y3 + a1*b1*b2*b3*c1*c3*y3 + a2*b1*b2*b3*c1*c3*y3 + a2*b1*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + a1*a2*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a2*b1*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a2*b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a2*b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a3*b2*b3*c1*c2*c3*y3 + a2*b1*b2*b3*c1*c2*c3*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a1*b2*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + b1*b2*x1*y3 + a1*b1*b2*x1*y3 + a2*b3*x1*y3 + a1*a2*b3*x1*y3 + a2*a3*b3*x1*y3 + a2*b1*b3*x1*y3 + b2*b3*x1*y3 + a1*b2*b3*x1*y3 + a2*b2*b3*x1*y3 + a3*b2*c1*x1*y3 + b1*b2*c1*x1*y3 + b2*b3*c1*x1*y3 + a3*b2*b3*c1*x1*y3 + b1*b2*b3*c1*x1*y3 + b2*b3*c2*x1*y3 + a1*b2*b3*c2*x1*y3 + a1*a2*c3*x1*y3 + a2*a3*c3*x1*y3 + a2*b1*c3*x1*y3 + a1*b2*c3*x1*y3 + a1*a2*b2*c3*x1*y3 + a3*b2*c3*x1*y3 + a1*a3*b2*c3*x1*y3 + b1*b2*c3*x1*y3 + a1*b1*b2*c3*x1*y3 + a2*b3*c3*x1*y3 + a1*a2*b3*c3*x1*y3 + a2*a3*b3*c3*x1*y3 + a2*b1*b3*c3*x1*y3 + b2*b3*c3*x1*y3 + a1*b2*b3*c3*x1*y3 + a2*b2*b3*c3*x1*y3 + a3*b2*c1*c3*x1*y3 + b1*b2*c1*c3*x1*y3 + b2*b3*c1*c3*x1*y3 + a3*b2*b3*c1*c3*x1*y3 + b1*b2*b3*c1*c3*x1*y3 + b2*b3*c2*c3*x1*y3 + a1*b2*b3*c2*c3*x1*y3 + a1*a3*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a1*b2*x2*y3 + a1*a3*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + c1*x2*y3 + a1*a2*c1*x2*y3 + a1*a3*c1*x2*y3 + b1*c1*x2*y3 + a2*b1*c1*x2*y3 + a1*a2*b2*c1*x2*y3 + a1*a3*b2*c1*x2*y3 + b1*b2*c1*x2*y3 + a2*b1*b2*c1*x2*y3 + a3*b1*b2*c1*x2*y3 + a1*a2*b3*c1*x2*y3 + a1*a3*b3*c1*x2*y3 + b1*b3*c1*x2*y3 + a2*b1*b3*c1*x2*y3 + b1*b2*b3*c1*x2*y3 + a1*b2*b3*c1*c2*x2*y3 + b1*b2*b3*c1*c2*x2*y3 + a1*a2*c3*x2*y3 + b1*c3*x2*y3 + a3*b1*c3*x2*y3 + a1*b2*c3*x2*y3 + a1*a2*b2*c3*x2*y3 + a1*a3*b2*c3*x2*y3 + a1*b1*b2*c3*x2*y3 + a2*b1*b2*c3*x2*y3 + a3*b1*b2*c3*x2*y3 + a1*a2*b3*c3*x2*y3 + b1*b3*c3*x2*y3 + a3*b1*b3*c3*x2*y3 + a1*b2*b3*c3*x2*y3 + a2*b1*c1*c3*x2*y3 + a2*b1*b2*c1*c3*x2*y3 + a3*b1*b2*c1*c3*x2*y3 + a2*b1*b3*c1*c3*x2*y3 + b1*b2*b3*c1*c3*x2*y3 + a1*b2*b3*c2*c3*x2*y3 + b1*b2*b3*c2*c3*x2*y3 + b1*b2*b3*c1*c2*c3*x2*y3 + a1*a2*c1*x3*y3 + a2*a3*c1*x3*y3 + a2*b1*c1*x3*y3 + a1*a2*b2*c1*x3*y3 + a1*a3*b2*c1*x3*y3 + a2*b1*b2*c1*x3*y3 + a3*b1*b2*c1*x3*y3 + a1*a2*b3*c1*x3*y3 + a2*a3*b3*c1*x3*y3 + a2*b1*b3*c1*x3*y3 + a1*a2*c2*x3*y3 + a1*b1*c2*x3*y3 + a2*b1*c2*x3*y3 + a1*a2*b2*c2*x3*y3 + a1*a3*b2*c2*x3*y3 + a1*b1*b2*c2*x3*y3 + a2*b1*b2*c2*x3*y3 + a3*b1*b2*c2*x3*y3 + a1*a2*b3*c2*x3*y3 + a1*b1*b3*c2*x3*y3 + a2*b1*b3*c2*x3*y3 + a1*b2*b3*c2*x3*y3 + b1*b2*b3*c2*x3*y3 + c1*c2*x3*y3 + b1*c1*c2*x3*y3 + a2*b1*c1*c2*x3*y3 + a3*b1*c1*c2*x3*y3 + a3*b2*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + a2*b1*b2*c1*c2*x3*y3 + a3*b1*b2*c1*c2*x3*y3 + b1*b3*c1*c2*x3*y3 + a2*b1*b3*c1*c2*x3*y3 + a3*b1*b3*c1*c2*x3*y3 + a1*b2*b3*c1*c2*x3*y3 + a3*b2*b3*c1*c2*x3*y3 + a1*a2*c3*x3*y3 + a1*b2*c3*x3*y3 + a1*a2*b2*c3*x3*y3 + a1*a3*b2*c3*x3*y3 + a1*b1*b2*c3*x3*y3 + a2*b1*b2*c3*x3*y3 + a3*b1*b2*c3*x3*y3 + a1*a2*b3*c3*x3*y3 + a1*b2*b3*c3*x3*y3 + a2*b1*c1*c3*x3*y3 + a2*b1*b2*c1*c3*x3*y3 + a3*b1*b2*c1*c3*x3*y3 + a2*b1*b3*c1*c3*x3*y3 + b1*b2*b3*c1*c3*x3*y3 + b1*c2*c3*x3*y3 + a3*b1*c2*c3*x3*y3 + b1*b3*c2*c3*x3*y3 + a3*b1*b3*c2*c3*x3*y3 + a1*b2*b3*c2*c3*x3*y3 + b1*b2*b3*c2*c3*x3*y3 + b1*b2*b3*c1*c2*c3*x3*y3 + a1*a2*y1*y3 + a2*a3*y1*y3 + a1*b2*y1*y3 + a1*a2*b2*y1*y3 + a1*a3*b2*y1*y3 + a1*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a3*b1*b2*y1*y3 + a2*b3*y1*y3 + a1*a2*b3*y1*y3 + a2*a3*b3*y1*y3 + a1*b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a3*b2*b3*y1*y3 + a3*b2*c1*y1*y3 + b1*b2*c1*y1*y3 + b2*b3*c1*y1*y3 + a3*b2*b3*c1*y1*y3 + b1*b2*b3*c1*y1*y3 + b2*b3*c2*y1*y3 + a1*b2*b3*c2*y1*y3 + b1*b2*b3*c2*y1*y3 + a1*a2*c3*y1*y3 + a2*a3*c3*y1*y3 + a1*b2*c3*y1*y3 + a1*a2*b2*c3*y1*y3 + a1*a3*b2*c3*y1*y3 + a1*b1*b2*c3*y1*y3 + a2*b1*b2*c3*y1*y3 + a3*b1*b2*c3*y1*y3 + a2*b3*c3*y1*y3 + a1*a2*b3*c3*y1*y3 + a2*a3*b3*c3*y1*y3 + a1*b2*b3*c3*y1*y3 + a2*b2*b3*c3*y1*y3 + a3*b2*b3*c3*y1*y3 + a3*b2*c1*c3*y1*y3 + b1*b2*c1*c3*y1*y3 + b2*b3*c1*c3*y1*y3 + a3*b2*b3*c1*c3*y1*y3 + b1*b2*b3*c1*c3*y1*y3 + b2*b3*c2*c3*y1*y3 + a1*b2*b3*c2*c3*y1*y3 + b1*b2*b3*c2*c3*y1*y3 + a1*a2*y2*y3 + a1*b2*y2*y3 + a1*a2*b2*y2*y3 + a1*a3*b2*y2*y3 + a1*b1*b2*y2*y3 + a2*b1*b2*y2*y3 + a3*b1*b2*y2*y3 + a1*a2*b3*y2*y3 + a1*b2*b3*y2*y3 + a1*a2*c1*y2*y3 + a1*a3*c1*y2*y3 + a3*b1*c1*y2*y3 + a1*a2*b2*c1*y2*y3 + a1*a3*b2*c1*y2*y3 + a1*a2*b3*c1*y2*y3 + a1*a3*b3*c1*y2*y3 + a3*b1*b3*c1*y2*y3 + b1*b2*b3*c1*y2*y3 + a1*b2*b3*c2*y2*y3 + b1*b2*b3*c2*y2*y3 + a1*b2*b3*c1*c2*y2*y3 + a1*a2*c3*y2*y3 + a1*b2*c3*y2*y3 + a1*a2*b2*c3*y2*y3 + a1*a3*b2*c3*y2*y3 + a1*b1*b2*c3*y2*y3 + a2*b1*b2*c3*y2*y3 + a3*b1*b2*c3*y2*y3 + a1*a2*b3*c3*y2*y3 + a1*b2*b3*c3*y2*y3 + a2*b1*c1*c3*y2*y3 + a2*b1*b2*c1*c3*y2*y3 + a3*b1*b2*c1*c3*y2*y3 + a2*b1*b3*c1*c3*y2*y3 + b1*b2*b3*c1*c3*y2*y3 + a1*b2*b3*c2*c3*y2*y3 + b1*b2*b3*c2*c3*y2*y3 + b1*b2*b3*c1*c2*c3*y2*y3 + (a1*a2*y3*(1 + y3))/2 + (a1*b2*y3*(1 + y3))/2 + (a1*a2*b2*y3*(1 + y3))/2 + (a1*a3*b2*y3*(1 + y3))/2 + (a1*b1*b2*y3*(1 + y3))/2 + (a2*b1*b2*y3*(1 + y3))/2 + (a3*b1*b2*y3*(1 + y3))/2 + (a1*a2*b3*y3*(1 + y3))/2 + (a1*b2*b3*y3*(1 + y3))/2 + (a1*a2*c1*y3*(1 + y3))/2 + (a2*a3*c1*y3*(1 + y3))/2 + (a1*a2*b2*c1*y3*(1 + y3))/2 + (a1*a3*b2*c1*y3*(1 + y3))/2 + (a1*a2*b3*c1*y3*(1 + y3))/2 + (a2*a3*b3*c1*y3*(1 + y3))/2 + (b1*b2*b3*c1*y3*(1 + y3))/2 + (a1*a2*c2*y3*(1 + y3))/2 + (b1*c2*y3*(1 + y3))/2 + (a1*b1*c2*y3*(1 + y3))/2 + (a2*b1*c2*y3*(1 + y3))/2 + (a3*b1*c2*y3*(1 + y3))/2 + (a1*a2*b2*c2*y3*(1 + y3))/2 + (a1*a3*b2*c2*y3*(1 + y3))/2 + (a1*b1*b2*c2*y3*(1 + y3))/2 + (a2*b1*b2*c2*y3*(1 + y3))/2 + (a3*b1*b2*c2*y3*(1 + y3))/2 + (a1*a2*b3*c2*y3*(1 + y3))/2 + (b1*b3*c2*y3*(1 + y3))/2 + (a1*b1*b3*c2*y3*(1 + y3))/2 + (a2*b1*b3*c2*y3*(1 + y3))/2 + (a3*b1*b3*c2*y3*(1 + y3))/2 + (c1*c2*y3*(1 + y3))/2 + (b1*c1*c2*y3*(1 + y3))/2 + (a2*b1*c1*c2*y3*(1 + y3))/2 + (a3*b1*c1*c2*y3*(1 + y3))/2 + (a3*b2*c1*c2*y3*(1 + y3))/2 + (b1*b2*c1*c2*y3*(1 + y3))/2 + (a2*b1*b2*c1*c2*y3*(1 + y3))/2 + (a3*b1*b2*c1*c2*y3*(1 + y3))/2 + (b1*b3*c1*c2*y3*(1 + y3))/2 + (a2*b1*b3*c1*c2*y3*(1 + y3))/2 + (a3*b1*b3*c1*c2*y3*(1 + y3))/2 + (a1*b2*b3*c1*c2*y3*(1 + y3))/2 + (a3*b2*b3*c1*c2*y3*(1 + y3))/2 + (b1*b2*b3*c1*c2*y3*(1 + y3))/2 + (a1*a2*c3*y3*(1 + y3))/2 + (a1*b2*c3*y3*(1 + y3))/2 + (a1*a2*b2*c3*y3*(1 + y3))/2 + (a1*a3*b2*c3*y3*(1 + y3))/2 + (a1*b1*b2*c3*y3*(1 + y3))/2 + (a2*b1*b2*c3*y3*(1 + y3))/2 + (a3*b1*b2*c3*y3*(1 + y3))/2 + (a1*a2*b3*c3*y3*(1 + y3))/2 + (a1*b2*b3*c3*y3*(1 + y3))/2 + (a2*b1*c1*c3*y3*(1 + y3))/2 + (a2*b1*b2*c1*c3*y3*(1 + y3))/2 + (a3*b1*b2*c1*c3*y3*(1 + y3))/2 + (a2*b1*b3*c1*c3*y3*(1 + y3))/2 + (b1*b2*b3*c1*c3*y3*(1 + y3))/2 + (b1*c2*c3*y3*(1 + y3))/2 + (a3*b1*c2*c3*y3*(1 + y3))/2 + (b1*b3*c2*c3*y3*(1 + y3))/2 + (a3*b1*b3*c2*c3*y3*(1 + y3))/2 + (a1*b2*b3*c2*c3*y3*(1 + y3))/2 + (b1*b2*b3*c2*c3*y3*(1 + y3))/2 + (b1*b2*b3*c1*c2*c3*y3*(1 + y3))/2 + a1*a2*b3*z1 + a2*a3*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*b3*z1 + a1*a3*b2*b3*z1 + a3*b1*b2*b3*z1 + a2*b1*b3*c1*z1 + b2*b3*c1*z1 + b1*b2*b3*c1*z1 + a3*b1*b2*b3*c1*z1 + a3*b2*c2*z1 + a1*a3*b2*c2*z1 + a1*b1*b3*c2*z1 + a2*b1*b3*c2*z1 + b2*b3*c2*z1 + a1*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a1*a3*b2*b3*c2*z1 + a3*b1*b2*b3*c2*z1 + a3*c1*c2*z1 + a3*b2*c1*c2*z1 + a3*b1*b2*c1*c2*z1 + b1*b3*c1*c2*z1 + b2*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a3*b1*b2*b3*c1*c2*z1 + a2*c3*z1 + a1*b2*c3*z1 + a3*b2*c3*z1 + a1*a3*b2*c3*z1 + b1*b2*c3*z1 + a1*b1*b2*c3*z1 + a2*b1*b2*c3*z1 + a2*b3*c3*z1 + a1*b2*b3*c3*z1 + a2*b2*b3*c3*z1 + a3*b2*b3*c3*z1 + a1*a3*b2*b3*c3*z1 + a3*b1*b2*b3*c3*z1 + a3*b2*c1*c3*z1 + a3*b1*b2*c1*c3*z1 + b1*b2*b3*c1*c3*z1 + a3*b1*b2*b3*c1*c3*z1 + a3*c2*c3*z1 + a1*b2*c2*c3*z1 + a1*a3*b2*c2*c3*z1 + b1*b2*c2*c3*z1 + a3*b1*b2*c2*c3*z1 + b3*c2*c3*z1 + a1*b3*c2*c3*z1 + a1*a3*b3*c2*c3*z1 + a3*b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + b1*b2*b3*c2*c3*z1 + a3*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + a3*b1*b2*c1*c2*c3*z1 + b3*c1*c2*c3*z1 + b1*b3*c1*c2*c3*z1 + a3*b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + a1*b3*x2*z1 + b1*b3*x2*z1 + b1*b3*c1*x2*z1 + a1*b3*c2*x2*z1 + b1*b3*c2*x2*z1 + b1*b3*c1*c2*x2*z1 + c3*x2*z1 + a1*b2*c3*x2*z1 + b1*b2*c3*x2*z1 + a1*b3*c3*x2*z1 + b1*b3*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b1*b3*c1*c3*x2*z1 + a1*b2*x3*z1 + b1*b2*x3*z1 + a2*b3*x3*z1 + b2*b3*x3*z1 + b1*b2*c1*x3*z1 + c2*x3*z1 + a1*b2*c2*x3*z1 + b1*b2*c2*x3*z1 + a1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + b1*b3*c1*c2*x3*z1 + a1*b2*c3*x3*z1 + b1*b2*c3*x3*z1 + a2*b3*c3*x3*z1 + b2*b3*c3*x3*z1 + b1*b2*c1*c3*x3*z1 + c2*c3*x3*z1 + a1*b2*c2*c3*x3*z1 + b1*b2*c2*c3*x3*z1 + a1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + c1*c2*c3*x3*z1 + b1*b2*c1*c2*c3*x3*z1 + b1*b3*c1*c2*c3*x3*z1 + c1*c3*y2*z1 + a1*b2*c2*c3*y3*z1 + b1*b2*c2*c3*y3*z1 + a1*b3*c2*c3*y3*z1 + b1*b3*c2*c3*y3*z1 + c1*c2*c3*y3*z1 + b1*b2*c1*c2*c3*y3*z1 + b1*b3*c1*c2*c3*y3*z1 + a1*a2*b3*z2 + a1*b2*b3*z2 + a1*a3*b2*b3*z2 + a3*b1*b2*b3*z2 + a1*a3*b2*c1*z2 + a2*b1*b3*c1*z2 + a1*a3*b2*b3*c1*z2 + b1*b2*b3*c1*z2 + a3*b1*b2*b3*c1*z2 + a1*a3*b2*c2*z2 + a1*b1*b3*c2*z2 + a2*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + a1*a3*b2*b3*c2*z2 + a3*b1*b2*b3*c2*z2 + a1*a3*b2*c1*c2*z2 + a3*b1*b2*c1*c2*z2 + a1*b3*c1*c2*z2 + a1*a3*b3*c1*c2*z2 + a3*b1*b3*c1*c2*z2 + a1*b2*b3*c1*c2*z2 + a1*b2*c3*z2 + a1*a3*b2*c3*z2 + b1*b2*c3*z2 + a1*b1*b2*c3*z2 + a2*b1*b2*c3*z2 + a1*b2*b3*c3*z2 + a1*a3*b2*b3*c3*z2 + a3*b1*b2*b3*c3*z2 + b1*b2*b3*c1*c3*z2 + a1*b2*c2*c3*z2 + a1*a3*b2*c2*c3*z2 + b1*b2*c2*c3*z2 + a3*b1*b2*c2*c3*z2 + a1*b3*c2*c3*z2 + a1*a3*b3*c2*c3*z2 + a3*b1*b3*c2*c3*z2 + b1*b2*b3*c2*c3*z2 + a1*b2*c1*c2*c3*z2 + b1*b2*c1*c2*c3*z2 + a1*b2*b3*c1*c2*c3*z2 + b1*b2*b3*c1*c2*c3*z2 + a1*b3*x2*z2 + b1*b3*x2*z2 + a1*b3*c1*x2*z2 + b1*b3*c1*x2*z2 + a1*b3*c2*x2*z2 + b1*b3*c2*x2*z2 + a1*b3*c1*c2*x2*z2 + b1*b3*c1*c2*x2*z2 + a1*b2*c3*x2*z2 + b1*b2*c3*x2*z2 + a1*b3*c3*x2*z2 + b1*b3*c3*x2*z2 + a1*b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + a1*b3*c1*c3*x2*z2 + b1*b3*c1*c3*x2*z2 + a1*b2*x3*z2 + b1*b2*x3*z2 + c1*x3*z2 + a1*b2*c1*x3*z2 + b1*b2*c1*x3*z2 + a1*b3*c1*x3*z2 + a1*b2*c2*x3*z2 + b1*b2*c2*x3*z2 + a1*b3*c2*x3*z2 + a1*b2*c3*x3*z2 + b1*b2*c3*x3*z2 + a1*b2*c1*c3*x3*z2 + b1*b2*c1*c3*x3*z2 + a1*b3*c1*c3*x3*z2 + a1*b2*c2*c3*x3*z2 + b1*b2*c2*c3*x3*z2 + a1*b3*c2*c3*x3*z2 + a1*b3*c1*c2*y2*z2 + b1*b3*c1*c2*y2*z2 + a1*b2*c1*c3*y2*z2 + b1*b2*c1*c3*y2*z2 + a1*b3*c1*c3*y2*z2 + b1*b3*c1*c3*y2*z2 + c1*y3*z2 + c1*c3*y3*z2 + a1*b2*c1*c3*y3*z2 + b1*b2*c1*c3*y3*z2 + a1*b3*c1*c3*y3*z2 + b1*b3*c1*c3*y3*z2 + a1*b2*c2*c3*y3*z2 + b1*b2*c2*c3*y3*z2 + a1*b3*c2*c3*y3*z2 + b1*b3*c2*c3*y3*z2 + a1*a2*b2*z3 + a1*b1*b2*z3 + a2*b1*b2*z3 + a1*a2*b3*z3 + a1*b2*b3*z3 + a1*a3*b2*b3*z3 + a3*b1*b2*b3*z3 + a1*a3*b2*c1*z3 + b1*b2*c1*z3 + a2*b1*b2*c1*z3 + a2*b1*b3*c1*z3 + a1*a3*b2*b3*c1*z3 + b1*b2*b3*c1*z3 + a3*b1*b2*b3*c1*z3 + a1*b2*c2*z3 + a1*a3*b2*c2*z3 + b1*b2*c2*z3 + a1*b1*b2*c2*z3 + a2*b1*b2*c2*z3 + a1*b1*b3*c2*z3 + a2*b1*b3*c2*z3 + a1*b2*b3*c2*z3 + a1*a3*b2*b3*c2*z3 + a3*b1*b2*b3*c2*z3 + a1*a3*b2*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a1*b3*c1*c2*z3 + a1*a3*b3*c1*c2*z3 + a3*b1*b3*c1*c2*z3 + a1*b2*b3*c1*c2*z3 + a1*b2*c3*z3 + a1*a3*b2*c3*z3 + b1*b2*c3*z3 + a1*b1*b2*c3*z3 + a2*b1*b2*c3*z3 + a1*b2*b3*c3*z3 + a1*a3*b2*b3*c3*z3 + a3*b1*b2*b3*c3*z3 + b1*b2*b3*c1*c3*z3 + a1*b2*c2*c3*z3 + a1*a3*b2*c2*c3*z3 + b1*b2*c2*c3*z3 + a3*b1*b2*c2*c3*z3 + a1*b3*c2*c3*z3 + a1*a3*b3*c2*c3*z3 + a3*b1*b3*c2*c3*z3 + b1*b2*b3*c2*c3*z3 + a1*b2*c1*c2*c3*z3 + b1*b2*c1*c2*c3*z3 + a1*b2*b3*c1*c2*c3*z3 + b1*b2*b3*c1*c2*c3*z3 + a1*b2*x2*z3 + b1*b2*x2*z3 + a1*b3*x2*z3 + b1*b3*x2*z3 + a1*b2*c1*x2*z3 + b1*b2*c1*x2*z3 + a1*b3*c1*x2*z3 + b1*b3*c1*x2*z3 + a1*b2*c2*x2*z3 + b1*b2*c2*x2*z3 + a1*b3*c2*x2*z3 + b1*b3*c2*x2*z3 + a1*b2*c1*c2*x2*z3 + b1*b2*c1*c2*x2*z3 + a1*b3*c1*c2*x2*z3 + b1*b3*c1*c2*x2*z3 + a1*b2*c3*x2*z3 + b1*b2*c3*x2*z3 + a1*b3*c3*x2*z3 + b1*b3*c3*x2*z3 + a1*b2*c1*c3*x2*z3 + b1*b2*c1*c3*x2*z3 + a1*b3*c1*c3*x2*z3 + b1*b3*c1*c3*x2*z3 + a1*b2*x3*z3 + b1*b2*x3*z3 + a1*b2*c1*x3*z3 + b1*b2*c1*x3*z3 + a2*b3*c1*x3*z3 + b2*b3*c1*x3*z3 + a1*b2*c2*x3*z3 + b1*b2*c2*x3*z3 + b2*b3*c1*c2*x3*z3 + a1*b2*c3*x3*z3 + b1*b2*c3*x3*z3 + a1*b2*c1*c3*x3*z3 + b1*b2*c1*c3*x3*z3 + a2*b3*c1*c3*x3*z3 + b2*b3*c1*c3*x3*z3 + a1*b2*c2*c3*x3*z3 + b1*b2*c2*c3*x3*z3 + b2*b3*c1*c2*c3*x3*z3 + a1*b2*c1*c2*y2*z3 + b1*b2*c1*c2*y2*z3 + a1*b3*c1*c2*y2*z3 + b1*b3*c1*c2*y2*z3 + a1*b2*c1*c3*y2*z3 + b1*b2*c1*c3*y2*z3 + a1*b3*c1*c3*y2*z3 + b1*b3*c1*c3*y2*z3 + a1*b2*c1*c3*y3*z3 + b1*b2*c1*c3*y3*z3 + a2*b3*c1*c3*y3*z3 + a1*b2*c2*c3*y3*z3 + b1*b2*c2*c3*y3*z3 + b2*b3*c1*c2*c3*y3*z3;
end;
#####################################################################
C2in106:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a1*a3*b2*b3 + a3*b1*b2*b3 + a2*a3*b1*c1 + a1*a3*b2*c1 + a1*a3*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b1*c2 + a2*a3*b1*c2 + a1*a3*b2*c2 + a3*b1*b2*c2 + a1*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a2*a3*c1*c2 + a3*b1*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a2*b3*c1*c2 + a1*a3*b3*c1*c2 + a2*a3*b3*c1*c2 + b1*b3*c1*c2 + b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a2*b2*c3 + a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a3*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a3*b2*c1*c3 + a2*b1*b2*c1*c3 + a2*b1*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*b3*c2*c3 + a1*a3*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a3*b1*b2*b3*c2*c3 + a1*c1*c2*c3 + a2*c1*c2*c3 + a3*c1*c2*c3 + b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + a2*b1*b2*c1*c2*c3 + a1*b3*c1*c2*c3 + a2*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a3*b1*b2*b3*c1*c2*c3 + b3*c2*x1 + b3*c1*c2*x1 + a1*b3*x2 + b1*b3*x2 + a1*b3*c1*x2 + b1*b3*c1*x2 + a1*b3*c2*x2 + b1*b3*c2*x2 + a1*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b2*c3*x2 + b1*b2*c3*x2 + a1*b3*c3*x2 + b1*b3*c3*x2 + a1*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a1*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a1*b2*c2*c3*x2 + b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + a1*b2*x3 + b1*b2*x3 + a1*b2*c1*x3 + b1*b2*c1*x3 + a2*b3*c1*x3 + b2*b3*c1*x3 + a1*c2*x3 + a1*b2*c2*x3 + b1*b2*c2*x3 + a1*c1*c2*x3 + a2*c1*c2*x3 + a1*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a2*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a1*b2*c3*x3 + b1*b2*c3*x3 + a1*b2*c1*c3*x3 + b1*b2*c1*c3*x3 + a2*b3*c1*c3*x3 + b2*b3*c1*c3*x3 + a1*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + c1*c2*c3*x3 + a1*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + b2*b3*c1*c2*c3*x3 + b3*c1*c2*y1 + a2*a3*z1 + a1*a3*b2*z1 + a2*b3*z1 + a1*a2*b3*z1 + a2*a3*b3*z1 + a1*b2*b3*z1 + a1*a3*b2*b3*z1 + b1*b2*b3*z1 + a3*b1*b2*b3*z1 + a3*b1*b2*c1*z1 + a2*b1*b3*c1*z1 + b2*b3*c1*z1 + b1*b2*b3*c1*z1 + a3*b1*b2*b3*c1*z1 + a1*a3*c2*z1 + a1*a3*b2*c2*z1 + a1*b3*c2*z1 + b1*b3*c2*z1 + a1*b1*b3*c2*z1 + a2*b1*b3*c2*z1 + b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a1*a3*b2*b3*c2*z1 + a3*b1*b2*b3*c2*z1 + a3*c1*c2*z1 + a3*b1*c1*c2*z1 + a3*b2*c1*c2*z1 + a3*b1*b2*c1*c2*z1 + b2*b3*c1*c2*z1 + a3*b1*b2*b3*c1*c2*z1 + a1*b2*c3*z1 + a3*b2*c3*z1 + a1*a3*b2*c3*z1 + b1*b2*c3*z1 + a1*b1*b2*c3*z1 + a2*b1*b2*c3*z1 + a2*b3*c3*z1 + a1*b2*b3*c3*z1 + a2*b2*b3*c3*z1 + a3*b2*b3*c3*z1 + a1*a3*b2*b3*c3*z1 + a3*b1*b2*b3*c3*z1 + a3*b2*c1*c3*z1 + a3*b1*b2*c1*c3*z1 + b1*b2*b3*c1*c3*z1 + a3*b1*b2*b3*c1*c3*z1 + a1*c2*c3*z1 + a3*c2*c3*z1 + b2*c2*c3*z1 + a1*b2*c2*c3*z1 + a1*a3*b2*c2*c3*z1 + b1*b2*c2*c3*z1 + a3*b1*b2*c2*c3*z1 + b3*c2*c3*z1 + a1*b3*c2*c3*z1 + a1*a3*b3*c2*c3*z1 + a3*b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + b1*b2*b3*c2*c3*z1 + a3*c1*c2*c3*z1 + b1*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + a3*b1*b2*c1*c2*c3*z1 + b3*c1*c2*c3*z1 + b1*b3*c1*c2*c3*z1 + a3*b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + a1*b3*x2*z1 + b1*b3*x2*z1 + b1*b3*c1*x2*z1 + a1*b3*c2*x2*z1 + b1*b3*c2*x2*z1 + b1*b3*c1*c2*x2*z1 + c3*x2*z1 + a1*b2*c3*x2*z1 + b1*b2*c3*x2*z1 + a1*b3*c3*x2*z1 + b1*b3*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b1*b3*c1*c3*x2*z1 + a2*x3*z1 + b2*x3*z1 + a1*b2*x3*z1 + b1*b2*x3*z1 + a2*b3*x3*z1 + b2*b3*x3*z1 + b1*b2*c1*x3*z1 + c2*x3*z1 + a1*c2*x3*z1 + b2*c2*x3*z1 + a1*b2*c2*x3*z1 + b1*b2*c2*x3*z1 + a1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + c1*c2*x3*z1 + b1*c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + b1*b3*c1*c2*x3*z1 + a1*b2*c3*x3*z1 + b1*b2*c3*x3*z1 + a2*b3*c3*x3*z1 + b2*b3*c3*x3*z1 + b1*b2*c1*c3*x3*z1 + c2*c3*x3*z1 + a1*b2*c2*c3*x3*z1 + b1*b2*c2*c3*x3*z1 + a1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + c1*c2*c3*x3*z1 + b1*b2*c1*c2*c3*x3*z1 + b1*b3*c1*c2*c3*x3*z1 + c1*c3*y2*z1 + a1*c2*y3*z1 + b1*c2*y3*z1 + b1*c1*c2*y3*z1 + a1*b2*c2*c3*y3*z1 + b1*b2*c2*c3*y3*z1 + a1*b3*c2*c3*y3*z1 + b1*b3*c2*c3*y3*z1 + c1*c2*c3*y3*z1 + b1*b2*c1*c2*c3*y3*z1 + b1*b3*c1*c2*c3*y3*z1 + a1*a2*b3*z2 + a1*b2*b3*z2 + a1*a3*b2*b3*z2 + b1*b2*b3*z2 + a3*b1*b2*b3*z2 + a1*a3*b2*c1*z2 + b1*b3*c1*z2 + a2*b1*b3*c1*z2 + a1*a3*b2*b3*c1*z2 + b1*b2*b3*c1*z2 + a3*b1*b2*b3*c1*z2 + a1*a3*b2*c2*z2 + b1*b3*c2*z2 + a1*b1*b3*c2*z2 + a2*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + a1*a3*b2*b3*c2*z2 + a3*b1*b2*b3*c2*z2 + a1*a3*b2*c1*c2*z2 + a3*b1*b2*c1*c2*z2 + a1*b3*c1*c2*z2 + a1*a3*b3*c1*c2*z2 + a3*b1*b3*c1*c2*z2 + a1*b2*b3*c1*c2*z2 + a1*b2*c3*z2 + a1*a3*b2*c3*z2 + b1*b2*c3*z2 + a1*b1*b2*c3*z2 + a2*b1*b2*c3*z2 + a1*b2*b3*c3*z2 + a1*a3*b2*b3*c3*z2 + a3*b1*b2*b3*c3*z2 + b1*b2*b3*c1*c3*z2 + a1*b2*c2*c3*z2 + a1*a3*b2*c2*c3*z2 + b1*b2*c2*c3*z2 + a3*b1*b2*c2*c3*z2 + a1*b3*c2*c3*z2 + a1*a3*b3*c2*c3*z2 + a3*b1*b3*c2*c3*z2 + b1*b2*b3*c2*c3*z2 + a1*b2*c1*c2*c3*z2 + b1*b2*c1*c2*c3*z2 + a1*b2*b3*c1*c2*c3*z2 + b1*b2*b3*c1*c2*c3*z2 + b3*x1*z2 + a1*b3*x2*z2 + b1*b3*x2*z2 + a1*b3*c1*x2*z2 + b1*b3*c1*x2*z2 + a1*b3*c2*x2*z2 + b1*b3*c2*x2*z2 + a1*b3*c1*c2*x2*z2 + b1*b3*c1*c2*x2*z2 + a1*b2*c3*x2*z2 + b1*b2*c3*x2*z2 + a1*b3*c3*x2*z2 + b1*b3*c3*x2*z2 + a1*b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + a1*b3*c1*c3*x2*z2 + b1*b3*c1*c3*x2*z2 + a1*b2*x3*z2 + b1*b2*x3*z2 + c1*x3*z2 + a1*b2*c1*x3*z2 + b1*b2*c1*x3*z2 + a1*b3*c1*x3*z2 + a1*b2*c2*x3*z2 + b1*b2*c2*x3*z2 + a1*b3*c2*x3*z2 + a1*b2*c3*x3*z2 + b1*b2*c3*x3*z2 + a1*b2*c1*c3*x3*z2 + b1*b2*c1*c3*x3*z2 + a1*b3*c1*c3*x3*z2 + a1*b2*c2*c3*x3*z2 + b1*b2*c2*c3*x3*z2 + a1*b3*c2*c3*x3*z2 + b3*y1*z2 + a1*b3*c1*c2*y2*z2 + b1*b3*c1*c2*y2*z2 + a1*b2*c1*c3*y2*z2 + b1*b2*c1*c3*y2*z2 + a1*b3*c1*c3*y2*z2 + b1*b3*c1*c3*y2*z2 + a1*y3*z2 + c1*y3*z2 + b1*c1*y3*z2 + b1*c2*y3*z2 + c1*c3*y3*z2 + a1*b2*c1*c3*y3*z2 + b1*b2*c1*c3*y3*z2 + a1*b3*c1*c3*y3*z2 + b1*b3*c1*c3*y3*z2 + a1*b2*c2*c3*y3*z2 + b1*b2*c2*c3*y3*z2 + a1*b3*c2*c3*y3*z2 + b1*b3*c2*c3*y3*z2 + a1*a2*b2*z3 + a1*b1*b2*z3 + a2*b1*b2*z3 + a1*a2*b3*z3 + a1*b2*b3*z3 + a1*a3*b2*b3*z3 + a3*b1*b2*b3*z3 + a1*a3*b2*c1*z3 + b1*b2*c1*z3 + a2*b1*b2*c1*z3 + a2*b1*b3*c1*z3 + a1*a3*b2*b3*c1*z3 + b1*b2*b3*c1*z3 + a3*b1*b2*b3*c1*z3 + a1*b2*c2*z3 + a1*a3*b2*c2*z3 + b1*b2*c2*z3 + a1*b1*b2*c2*z3 + a2*b1*b2*c2*z3 + a1*b1*b3*c2*z3 + a2*b1*b3*c2*z3 + a1*b2*b3*c2*z3 + a1*a3*b2*b3*c2*z3 + a3*b1*b2*b3*c2*z3 + a1*a3*b2*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a1*b3*c1*c2*z3 + a1*a3*b3*c1*c2*z3 + a3*b1*b3*c1*c2*z3 + a1*b2*b3*c1*c2*z3 + a1*b2*c3*z3 + a1*a3*b2*c3*z3 + b1*b2*c3*z3 + a1*b1*b2*c3*z3 + a2*b1*b2*c3*z3 + a1*b2*b3*c3*z3 + a1*a3*b2*b3*c3*z3 + a3*b1*b2*b3*c3*z3 + b1*b2*b3*c1*c3*z3 + a1*b2*c2*c3*z3 + a1*a3*b2*c2*c3*z3 + b1*b2*c2*c3*z3 + a3*b1*b2*c2*c3*z3 + a1*b3*c2*c3*z3 + a1*a3*b3*c2*c3*z3 + a3*b1*b3*c2*c3*z3 + b1*b2*b3*c2*c3*z3 + a1*b2*c1*c2*c3*z3 + b1*b2*c1*c2*c3*z3 + a1*b2*b3*c1*c2*c3*z3 + b1*b2*b3*c1*c2*c3*z3 + a1*b2*x2*z3 + b1*b2*x2*z3 + a1*b3*x2*z3 + b1*b3*x2*z3 + a1*b2*c1*x2*z3 + b1*b2*c1*x2*z3 + a1*b3*c1*x2*z3 + b1*b3*c1*x2*z3 + a1*b2*c2*x2*z3 + b1*b2*c2*x2*z3 + a1*b3*c2*x2*z3 + b1*b3*c2*x2*z3 + a1*b2*c1*c2*x2*z3 + b1*b2*c1*c2*x2*z3 + a1*b3*c1*c2*x2*z3 + b1*b3*c1*c2*x2*z3 + a1*b2*c3*x2*z3 + b1*b2*c3*x2*z3 + a1*b3*c3*x2*z3 + b1*b3*c3*x2*z3 + a1*b2*c1*c3*x2*z3 + b1*b2*c1*c3*x2*z3 + a1*b3*c1*c3*x2*z3 + b1*b3*c1*c3*x2*z3 + a1*b2*x3*z3 + b1*b2*x3*z3 + a1*b2*c1*x3*z3 + b1*b2*c1*x3*z3 + a2*b3*c1*x3*z3 + b2*b3*c1*x3*z3 + a1*b2*c2*x3*z3 + b1*b2*c2*x3*z3 + b2*b3*c1*c2*x3*z3 + a1*b2*c3*x3*z3 + b1*b2*c3*x3*z3 + a1*b2*c1*c3*x3*z3 + b1*b2*c1*c3*x3*z3 + a2*b3*c1*c3*x3*z3 + b2*b3*c1*c3*x3*z3 + a1*b2*c2*c3*x3*z3 + b1*b2*c2*c3*x3*z3 + b2*b3*c1*c2*c3*x3*z3 + a1*b2*c1*c2*y2*z3 + b1*b2*c1*c2*y2*z3 + a1*b3*c1*c2*y2*z3 + b1*b3*c1*c2*y2*z3 + a1*b2*c1*c3*y2*z3 + b1*b2*c1*c3*y2*z3 + a1*b3*c1*c3*y2*z3 + b1*b3*c1*c3*y2*z3 + a1*b2*c1*c3*y3*z3 + b1*b2*c1*c3*y3*z3 + a2*b3*c1*c3*y3*z3 + a1*b2*c2*c3*y3*z3 + b1*b2*c2*c3*y3*z3 + b2*b3*c1*c2*c3*y3*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 107 ( I4mm)
#####################################################################
Ampin107:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin107:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin107:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain107:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bphiin107:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + b2*c1*x1 + b1*b2*c1*x1 + a2*b1*y1 + b2*y1 + a1*b2*y1 + a2*b2*y1 + b2*c1*y1 + b1*b2*c1*y1 + a2*z1 + a2*b1*z1 + a1*b2*z1 + a2*b2*z1 + b1*b2*c1*z1;
end;
#####################################################################
Bxyzin107:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*x1*x2 + b1*x2*y1 + b1*x1*y2 + b1*y1*y2 + x1*z2 + b1*x1*z2 + b1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
CGAPin107:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return b3*c2*x1 + 2*a3*b1*x2 + a1*a3*b1*x2 + 3*a1*b3*x2 + a3*b1*c1*x2 + b3*c1*x2 + a1*b3*c1*x2 + 2*b1*b3*c1*x2 + 2*b2*b3*c1*x2 + 2*b1*b3*c2*x2 + b1*c3*x2 + 2*b3*x1*x2 + 2*b2*b3*x1*x2 + b3*c1*x1*x2 + 2*b1*c3*x1*x2 + (a3*b1*x2*(1 + x2))/2 + (b1*c3*x2*(1 + x2))/2 + (b3*x1*x2*(1 + x2))/2 + (c3*x1*x2*(1 + x2))/2 + (b1*c3*x1*x2*(1 + x2))/2 + 2*a2*b1*x3 + 2*a2*b1*b2*x3 + a1*a2*b3*x3 + a1*b2*b3*x3 + a2*b3*c1*x3 + a1*b2*b3*c1*x3 + a2*b2*b3*c1*x3 + b1*c2*x3 + 3*b1*b2*c2*x3 + b1*b2*c3*x3 + a2*x1*x3 + a1*a2*x1*x3 + a2*b1*x1*x3 + 2*b2*x1*x3 + a1*b2*x1*x3 + a2*b2*x1*x3 + 2*b1*b2*x1*x3 + a2*b3*x1*x3 + 2*b2*b3*x1*x3 + a2*c1*x1*x3 + a1*b2*c1*x1*x3 + a2*b2*c1*x1*x3 + a2*c2*x1*x3 + b2*c2*x1*x3 + b1*b2*c2*x1*x3 + b2*c3*x1*x3 + b1*b2*c3*x1*x3 + (3*a2*x1*(1 + x1)*x3)/2 + (a2*b2*x1*(1 + x1)*x3)/2 + b2*c2*x1*(1 + x1)*x3 + (3*b2*c3*x1*(1 + x1)*x3)/2 + a1*a2*x2*x3 + 3*b1*x2*x3 + 2*a1*b1*x2*x3 + a2*b1*x2*x3 + 4*a1*b2*x2*x3 + 3*b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a1*b3*x2*x3 + a1*b1*b3*x2*x3 + 2*a1*b2*b3*x2*x3 + a2*c1*x2*x3 + 3*b1*c1*x2*x3 + 3*b2*c1*x2*x3 + a1*b2*c1*x2*x3 + a2*b2*c1*x2*x3 + 2*b3*c1*x2*x3 + b1*b3*c1*x2*x3 + b2*b3*c1*x2*x3 + 2*b1*b2*c2*x2*x3 + b1*c3*x2*x3 + b1*b2*c3*x2*x3 + x1*x2*x3 + 2*a2*x1*x2*x3 + 2*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + b3*x1*x2*x3 + 3*b2*c2*x1*x2*x3 + c3*x1*x2*x3 + 2*b2*c3*x1*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a2*b1*x3*(1 + x3))/2 + (a1*b2*x3*(1 + x3))/2 + (a2*c1*x3*(1 + x3))/2 + (a1*b2*c1*x3*(1 + x3))/2 + (a2*b2*c1*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + a2*x1*x3*(1 + x3) + b2*x1*x3*(1 + x3) + (b2*c2*x1*x3*(1 + x3))/2 + (b2*c3*x1*x3*(1 + x3))/2 + a1*x2*x3*(1 + x3) + c1*x2*x3*(1 + x3) + b3*c2*y1 + a1*b3*x2*y1 + b1*b3*x2*y1 + 2*b1*c3*x2*y1 + (b3*x2*(1 + x2)*y1)/2 + (c3*x2*(1 + x2)*y1)/2 + (b1*c3*x2*(1 + x2)*y1)/2 + a2*x3*y1 + a1*a2*x3*y1 + 2*a2*b1*x3*y1 + a1*b2*x3*y1 + 5*a2*b2*x3*y1 + a2*b3*x3*y1 + a2*c1*x3*y1 + a1*b2*c1*x3*y1 + a2*b2*c1*x3*y1 + a2*c2*x3*y1 + b1*c2*x3*y1 + 5*b2*c2*x3*y1 + b1*b2*c2*x3*y1 + b2*c3*x3*y1 + b1*b2*c3*x3*y1 + 3*a2*x1*x3*y1 + b2*x1*x3*y1 + a2*b2*x1*x3*y1 + 2*b2*c2*x1*x3*y1 + 3*b2*c3*x1*x3*y1 + 3*x2*x3*y1 + 4*a2*x2*x3*y1 + 4*b2*x2*x3*y1 + a2*b2*x2*x3*y1 + b3*x2*x3*y1 + 2*c2*x2*x3*y1 + 3*b2*c2*x2*x3*y1 + c3*x2*x3*y1 + 2*b2*c3*x2*x3*y1 + (3*a2*x3*(1 + x3)*y1)/2 + (c2*x3*(1 + x3)*y1)/2 + (b2*c2*x3*(1 + x3)*y1)/2 + (b2*c3*x3*(1 + x3)*y1)/2 + (3*a2*x3*y1*(1 + y1))/2 + (a2*b2*x3*y1*(1 + y1))/2 + b2*c2*x3*y1*(1 + y1) + (3*b2*c3*x3*y1*(1 + y1))/2 + 3*a3*b1*y2 + a1*a3*b1*y2 + 2*a1*b3*y2 + a3*b1*c1*y2 + b3*c1*y2 + a1*b3*c1*y2 + 2*b1*b3*c1*y2 + 2*b2*b3*c1*y2 + 2*b1*b3*c2*y2 + b1*c3*y2 + b3*x1*y2 + 2*b2*b3*x1*y2 + b3*c1*x1*y2 + 2*b1*c3*x1*y2 + a3*b1*x2*y2 + a1*b3*x2*y2 + b3*c1*x2*y2 + b1*c3*x2*y2 + b3*x1*x2*y2 + c3*x1*x2*y2 + b1*c3*x1*x2*y2 + a1*a2*x3*y2 + 2*b1*x3*y2 + 2*a1*b1*x3*y2 + 2*a2*b1*x3*y2 + 4*a1*b2*x3*y2 + 3*b1*b2*x3*y2 + a1*b1*b2*x3*y2 + a2*b1*b2*x3*y2 + a1*b3*x3*y2 + b1*b3*x3*y2 + a1*b1*b3*x3*y2 + 2*a1*b2*b3*x3*y2 + a2*c1*x3*y2 + 3*b1*c1*x3*y2 + 3*b2*c1*x3*y2 + a1*b2*c1*x3*y2 + a2*b2*c1*x3*y2 + 2*b3*c1*x3*y2 + b1*b3*c1*x3*y2 + b2*b3*c1*x3*y2 + b1*c2*x3*y2 + 2*b1*b2*c2*x3*y2 + b1*c3*x3*y2 + b1*b2*c3*x3*y2 + x1*x3*y2 + 2*a2*x1*x3*y2 + 2*b2*x1*x3*y2 + a2*b2*x1*x3*y2 + b3*x1*x3*y2 + 3*b2*c2*x1*x3*y2 + c3*x1*x3*y2 + 2*b2*c3*x1*x3*y2 + a1*x3*(1 + x3)*y2 + c1*x3*(1 + x3)*y2 + a1*b3*y1*y2 + b1*b3*y1*y2 + 2*b1*c3*y1*y2 + b3*x2*y1*y2 + c3*x2*y1*y2 + b1*c3*x2*y1*y2 + x3*y1*y2 + 3*a2*x3*y1*y2 + 2*b2*x3*y1*y2 + a2*b2*x3*y1*y2 + b3*x3*y1*y2 + c2*x3*y1*y2 + 3*b2*c2*x3*y1*y2 + c3*x3*y1*y2 + 2*b2*c3*x3*y1*y2 + (a3*b1*y2*(1 + y2))/2 + (b1*c3*y2*(1 + y2))/2 + (b3*x1*y2*(1 + y2))/2 + (c3*x1*y2*(1 + y2))/2 + (b1*c3*x1*y2*(1 + y2))/2 + (b3*y1*y2*(1 + y2))/2 + (c3*y1*y2*(1 + y2))/2 + (b1*c3*y1*y2*(1 + y2))/2 + 2*a2*b1*y3 + 2*a2*b1*b2*y3 + a1*a2*b3*y3 + a1*b2*b3*y3 + a2*b3*c1*y3 + a1*b2*b3*c1*y3 + a2*b2*b3*c1*y3 + b1*c2*y3 + 3*b1*b2*c2*y3 + b1*b2*c3*y3 + a1*a2*x1*y3 + a2*b1*x1*y3 + 2*b2*x1*y3 + a1*b2*x1*y3 + a2*b2*x1*y3 + 2*b1*b2*x1*y3 + a2*b3*x1*y3 + 2*b2*b3*x1*y3 + a2*c1*x1*y3 + a1*b2*c1*x1*y3 + a2*b2*c1*x1*y3 + a2*c2*x1*y3 + b2*c2*x1*y3 + b1*b2*c2*x1*y3 + b2*c3*x1*y3 + b1*b2*c3*x1*y3 + (3*a2*x1*(1 + x1)*y3)/2 + (b2*x1*(1 + x1)*y3)/2 + (a2*b2*x1*(1 + x1)*y3)/2 + b2*c2*x1*(1 + x1)*y3 + (3*b2*c3*x1*(1 + x1)*y3)/2 + a1*a2*x2*y3 + 2*b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + 3*a1*b2*x2*y3 + 2*b1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a1*b3*x2*y3 + a1*b1*b3*x2*y3 + 2*a1*b2*b3*x2*y3 + a2*c1*x2*y3 + 2*b1*c1*x2*y3 + 2*b2*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + 2*b3*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + 2*b1*b2*c2*x2*y3 + b1*c3*x2*y3 + b1*b2*c3*x2*y3 + 2*a2*x1*x2*y3 + b2*x1*x2*y3 + a2*b2*x1*x2*y3 + b3*x1*x2*y3 + 3*b2*c2*x1*x2*y3 + c3*x1*x2*y3 + 2*b2*c3*x1*x2*y3 + a1*a2*x3*y3 + a1*b2*x3*y3 + 2*b1*b2*x3*y3 + a2*c1*x3*y3 + a1*b2*c1*x3*y3 + a2*b2*c1*x3*y3 + 2*a2*x1*x3*y3 + 2*b2*x1*x3*y3 + b2*c2*x1*x3*y3 + b2*c3*x1*x3*y3 + a1*a2*y1*y3 + 2*a2*b1*y1*y3 + 3*b2*y1*y3 + a1*b2*y1*y3 + 5*a2*b2*y1*y3 + a2*b3*y1*y3 + a2*c1*y1*y3 + a1*b2*c1*y1*y3 + a2*b2*c1*y1*y3 + a2*c2*y1*y3 + b1*c2*y1*y3 + 5*b2*c2*y1*y3 + b1*b2*c2*y1*y3 + b2*c3*y1*y3 + b1*b2*c3*y1*y3 + 3*a2*x1*y1*y3 + a2*b2*x1*y1*y3 + 2*b2*c2*x1*y1*y3 + 3*b2*c3*x1*y1*y3 + 4*a2*x2*y1*y3 + 3*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + b3*x2*y1*y3 + 2*c2*x2*y1*y3 + 3*b2*c2*x2*y1*y3 + c3*x2*y1*y3 + 2*b2*c3*x2*y1*y3 + 2*a2*x3*y1*y3 + 4*b2*x3*y1*y3 + b2*c2*x3*y1*y3 + b2*c3*x3*y1*y3 + (3*a2*y1*(1 + y1)*y3)/2 + (b2*y1*(1 + y1)*y3)/2 + (a2*b2*y1*(1 + y1)*y3)/2 + b2*c2*y1*(1 + y1)*y3 + (3*b2*c3*y1*(1 + y1)*y3)/2 + a1*a2*y2*y3 + b1*y2*y3 + a1*b1*y2*y3 + 2*a2*b1*y2*y3 + 3*a1*b2*y2*y3 + 4*b1*b2*y2*y3 + a1*b1*b2*y2*y3 + a2*b1*b2*y2*y3 + a1*b3*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + 2*a1*b2*b3*y2*y3 + a2*c1*y2*y3 + 2*b1*c1*y2*y3 + 2*b2*c1*y2*y3 + a1*b2*c1*y2*y3 + a2*b2*c1*y2*y3 + 2*b3*c1*y2*y3 + b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + b1*c2*y2*y3 + 2*b1*b2*c2*y2*y3 + b1*c3*y2*y3 + b1*b2*c3*y2*y3 + 2*a2*x1*y2*y3 + 3*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + b3*x1*y2*y3 + 3*b2*c2*x1*y2*y3 + c3*x1*y2*y3 + 2*b2*c3*x1*y2*y3 + y1*y2*y3 + 3*a2*y1*y2*y3 + 3*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + b3*y1*y2*y3 + c2*y1*y2*y3 + 3*b2*c2*y1*y2*y3 + c3*y1*y2*y3 + 2*b2*c3*y1*y2*y3 + (a1*a2*y3*(1 + y3))/2 + (a2*b1*y3*(1 + y3))/2 + (a1*b2*y3*(1 + y3))/2 + (a2*c1*y3*(1 + y3))/2 + (a1*b2*c1*y3*(1 + y3))/2 + (a2*b2*c1*y3*(1 + y3))/2 + (b1*c2*y3*(1 + y3))/2 + a2*x1*y3*(1 + y3) + b2*x1*y3*(1 + y3) + (b2*c2*x1*y3*(1 + y3))/2 + (b2*c3*x1*y3*(1 + y3))/2 + (a1*x2*y3*(1 + y3))/2 + (c1*x2*y3*(1 + y3))/2 + (3*a2*y1*y3*(1 + y3))/2 + (c2*y1*y3*(1 + y3))/2 + (b2*c2*y1*y3*(1 + y3))/2 + (b2*c3*y1*y3*(1 + y3))/2 + (a1*y2*y3*(1 + y3))/2 + (c1*y2*y3*(1 + y3))/2 + a3*b1*x2*z1 + 2*b3*x2*z1 + 2*b2*b3*x2*z1 + b3*c1*x2*z1 + c3*x2*z1 + 3*b1*c3*x2*z1 + c3*x1*x2*z1 + (b3*x2*(1 + x2)*z1)/2 + c3*x2*(1 + x2)*z1 + (b1*c3*x2*(1 + x2)*z1)/2 + a2*x3*z1 + a1*a2*x3*z1 + a2*b1*x3*z1 + 2*b2*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + 2*b1*b2*x3*z1 + a2*b3*x3*z1 + 2*b2*b3*x3*z1 + a2*c1*x3*z1 + a1*b2*c1*x3*z1 + a2*b2*c1*x3*z1 + a2*c2*x3*z1 + 2*b2*c2*x3*z1 + 2*b1*b2*c2*x3*z1 + b2*b3*c2*x3*z1 + 2*b2*c3*x3*z1 + 2*b1*b2*c3*x3*z1 + b2*b3*c3*x3*z1 + 3*a2*x1*x3*z1 + a2*b2*x1*x3*z1 + b2*c1*x1*x3*z1 + 3*b2*c2*x1*x3*z1 + 2*b2*c3*x1*x3*z1 + x2*x3*z1 + 2*a2*x2*x3*z1 + 2*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + b3*x2*x3*z1 + 3*b2*c2*x2*x3*z1 + c3*x2*x3*z1 + 2*b2*c3*x2*x3*z1 + a2*x3*(1 + x3)*z1 + b2*x3*(1 + x3)*z1 + (b2*c2*x3*(1 + x3)*z1)/2 + (b2*c3*x3*(1 + x3)*z1)/2 + c3*x2*y1*z1 + 3*a2*x3*y1*z1 + b2*x3*y1*z1 + a2*b2*x3*y1*z1 + b2*c1*x3*y1*z1 + 3*b2*c2*x3*y1*z1 + 2*b2*c3*x3*y1*z1 + a3*b1*y2*z1 + b3*y2*z1 + 2*b2*b3*y2*z1 + b3*c1*y2*z1 + c3*y2*z1 + 3*b1*c3*y2*z1 + c3*x1*y2*z1 + b3*x2*y2*z1 + 2*c3*x2*y2*z1 + b1*c3*x2*y2*z1 + x3*y2*z1 + 2*a2*x3*y2*z1 + 2*b2*x3*y2*z1 + a2*b2*x3*y2*z1 + b3*x3*y2*z1 + 3*b2*c2*x3*y2*z1 + c3*x3*y2*z1 + 2*b2*c3*x3*y2*z1 + c3*y1*y2*z1 + (b3*y2*(1 + y2)*z1)/2 + c3*y2*(1 + y2)*z1 + (b1*c3*y2*(1 + y2)*z1)/2 + a1*a2*y3*z1 + a2*b1*y3*z1 + 2*b2*y3*z1 + a1*b2*y3*z1 + a2*b2*y3*z1 + 2*b1*b2*y3*z1 + a2*b3*y3*z1 + 2*b2*b3*y3*z1 + a2*c1*y3*z1 + a1*b2*c1*y3*z1 + a2*b2*c1*y3*z1 + a2*c2*y3*z1 + 2*b2*c2*y3*z1 + 2*b1*b2*c2*y3*z1 + b2*b3*c2*y3*z1 + 2*b2*c3*y3*z1 + 2*b1*b2*c3*y3*z1 + b2*b3*c3*y3*z1 + 3*a2*x1*y3*z1 + b2*x1*y3*z1 + a2*b2*x1*y3*z1 + b2*c1*x1*y3*z1 + 3*b2*c2*x1*y3*z1 + 2*b2*c3*x1*y3*z1 + 2*a2*x2*y3*z1 + b2*x2*y3*z1 + a2*b2*x2*y3*z1 + b3*x2*y3*z1 + 3*b2*c2*x2*y3*z1 + c3*x2*y3*z1 + 2*b2*c3*x2*y3*z1 + 2*a2*x3*y3*z1 + 2*b2*x3*y3*z1 + b2*c2*x3*y3*z1 + b2*c3*x3*y3*z1 + 3*a2*y1*y3*z1 + a2*b2*y1*y3*z1 + b2*c1*y1*y3*z1 + 3*b2*c2*y1*y3*z1 + 2*b2*c3*y1*y3*z1 + 2*a2*y2*y3*z1 + 3*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + b3*y2*y3*z1 + 3*b2*c2*y2*y3*z1 + c3*y2*y3*z1 + 2*b2*c3*y2*y3*z1 + a2*y3*(1 + y3)*z1 + b2*y3*(1 + y3)*z1 + (b2*c2*y3*(1 + y3)*z1)/2 + (b2*c3*y3*(1 + y3)*z1)/2 + (b3*c2*z1*(1 + z1))/2 + (3*a2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + b2*c2*x3*z1*(1 + z1) + (3*b2*c3*x3*z1*(1 + z1))/2 + (3*a2*y3*z1*(1 + z1))/2 + (b2*y3*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + b2*c2*y3*z1*(1 + z1) + (3*b2*c3*y3*z1*(1 + z1))/2 + (b2 + c2)*c3*(x1 + y1 + z1) + a1*a3*z2 + a3*b1*z2 + a1*a3*b1*z2 + 2*a1*b3*z2 + b3*c1*z2 + 2*b1*b3*c1*z2 + 2*b2*b3*c1*z2 + 2*b1*b3*c2*z2 + b1*c3*z2 + b3*x1*z2 + 2*b2*b3*x1*z2 + b3*c1*x1*z2 + 2*b1*c3*x1*z2 + (3*c3*x1*(1 + x1)*z2)/2 + a1*b3*x2*z2 + b3*c1*x2*z2 + a1*b3*c1*x2*z2 + 3*b1*c3*x2*z2 + b3*x1*x2*z2 + c3*x1*x2*z2 + b1*c3*x1*x2*z2 + a1*a2*x3*z2 + 3*a1*b1*x3*z2 + 2*a2*b1*x3*z2 + 5*a1*b2*x3*z2 + 3*b1*b2*x3*z2 + a1*b1*b2*x3*z2 + a2*b1*b2*x3*z2 + 2*a1*b3*x3*z2 + a1*b1*b3*x3*z2 + 2*a1*b2*b3*x3*z2 + a2*c1*x3*z2 + b2*c1*x3*z2 + a1*b2*c1*x3*z2 + a2*b2*c1*x3*z2 + b1*b2*c1*x3*z2 + b2*b3*c1*x3*z2 + 2*b1*b2*c2*x3*z2 + b1*b2*c3*x3*z2 + 3*a2*x1*x3*z2 + b2*x1*x3*z2 + a2*b2*x1*x3*z2 + b3*x1*x3*z2 + 3*b2*c2*x1*x3*z2 + 2*b2*c3*x1*x3*z2 + a1*x3*(1 + x3)*z2 + a1*b3*y1*z2 + b1*b3*y1*z2 + b3*c1*y1*z2 + 2*b1*c3*y1*z2 + 3*c3*x1*y1*z2 + b3*x2*y1*z2 + c3*x2*y1*z2 + b1*c3*x2*y1*z2 + 3*a2*x3*y1*z2 + 3*b2*x3*y1*z2 + a2*b2*x3*y1*z2 + b3*x3*y1*z2 + 3*b2*c2*x3*y1*z2 + 2*b2*c3*x3*y1*z2 + (3*c3*y1*(1 + y1)*z2)/2 + b3*c1*y2*z2 + a1*b3*c1*y2*z2 + 3*b1*c3*y2*z2 + b3*x1*y2*z2 + c3*x1*y2*z2 + b1*c3*x1*y2*z2 + b3*y1*y2*z2 + c3*y1*y2*z2 + b1*c3*y1*y2*z2 + a1*a2*y3*z2 + 2*a1*b1*y3*z2 + 2*a2*b1*y3*z2 + 4*a1*b2*y3*z2 + 2*b1*b2*y3*z2 + a1*b1*b2*y3*z2 + a2*b1*b2*y3*z2 + 2*a1*b3*y3*z2 + a1*b1*b3*y3*z2 + 2*a1*b2*b3*y3*z2 + a2*c1*y3*z2 + b2*c1*y3*z2 + a1*b2*c1*y3*z2 + a2*b2*c1*y3*z2 + b1*b2*c1*y3*z2 + b2*b3*c1*y3*z2 + 2*b1*b2*c2*y3*z2 + b1*b2*c3*y3*z2 + 3*a2*x1*y3*z2 + 2*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + b3*x1*y3*z2 + 3*b2*c2*x1*y3*z2 + 2*b2*c3*x1*y3*z2 + 3*a2*y1*y3*z2 + 4*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + b3*y1*y3*z2 + 3*b2*c2*y1*y3*z2 + 2*b2*c3*y1*y3*z2 + (a1*y3*(1 + y3)*z2)/2 + a3*z1*z2 + a3*b1*z1*z2 + b3*z1*z2 + 2*b2*b3*z1*z2 + b3*c1*z1*z2 + b3*c2*z1*z2 + c3*z1*z2 + 4*b1*c3*z1*z2 + b2*c3*z1*z2 + b3*c3*z1*z2 + c3*x1*z1*z2 + b3*x2*z1*z2 + b1*c3*x2*z1*z2 + 3*a2*x3*z1*z2 + b2*x3*z1*z2 + a2*b2*x3*z1*z2 + b3*x3*z1*z2 + 3*b2*c2*x3*z1*z2 + 2*b2*c3*x3*z1*z2 + c3*y1*z1*z2 + b3*y2*z1*z2 + b1*c3*y2*z1*z2 + 3*a2*y3*z1*z2 + 2*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + b3*y3*z1*z2 + 3*b2*c2*y3*z1*z2 + 2*b2*c3*y3*z1*z2 + (3*c3*z1*(1 + z1)*z2)/2 + (a3*b1*z2*(1 + z2))/2 + (b1*c3*z2*(1 + z2))/2 + (b3*x1*z2*(1 + z2))/2 + (c3*x1*z2*(1 + z2))/2 + (b1*c3*x1*z2*(1 + z2))/2 + (b3*y1*z2*(1 + z2))/2 + (c3*y1*z2*(1 + z2))/2 + (b1*c3*y1*z2*(1 + z2))/2 + (b3*z1*z2*(1 + z2))/2 + c3*z1*z2*(1 + z2) + (b1*c3*z1*z2*(1 + z2))/2 + 3*a2*b1*z3 + 2*a2*b1*b2*z3 + a1*a2*b3*z3 + a1*b2*b3*z3 + a2*b3*c1*z3 + a1*b2*b3*c1*z3 + a2*b2*b3*c1*z3 + b1*b2*c2*z3 + b1*b2*c3*z3 + a1*a2*x1*z3 + a2*b1*x1*z3 + 2*b2*x1*z3 + a1*b2*x1*z3 + a2*b2*x1*z3 + 2*b1*b2*x1*z3 + a2*b3*x1*z3 + 2*b2*b3*x1*z3 + a2*c1*x1*z3 + a1*b2*c1*x1*z3 + a2*b2*c1*x1*z3 + b2*c2*x1*z3 + b1*b2*c2*x1*z3 + b3*c2*x1*z3 + b2*c3*x1*z3 + b1*b2*c3*x1*z3 + a2*x1*(1 + x1)*z3 + (a2*b2*x1*(1 + x1)*z3)/2 + (3*b2*c2*x1*(1 + x1)*z3)/2 + (3*b2*c3*x1*(1 + x1)*z3)/2 + a1*a2*x2*z3 + 4*b1*x2*z3 + 4*a1*b1*x2*z3 + 6*a1*b2*x2*z3 + 3*b1*b2*x2*z3 + a1*b1*b2*x2*z3 + a2*b1*b2*x2*z3 + a1*b3*x2*z3 + a1*b1*b3*x2*z3 + 2*a1*b2*b3*x2*z3 + a2*c1*x2*z3 + 4*b1*c1*x2*z3 + 4*b2*c1*x2*z3 + a1*b2*c1*x2*z3 + a2*b2*c1*x2*z3 + b3*c1*x2*z3 + b1*b3*c1*x2*z3 + b2*b3*c1*x2*z3 + 2*b1*c2*x2*z3 + b1*b2*c2*x2*z3 + 3*b1*c3*x2*z3 + 2*b1*b2*c3*x2*z3 + b1*b3*c3*x2*z3 + 2*x1*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + 2*b2*x1*x2*z3 + a2*b2*x1*x2*z3 + b3*x1*x2*z3 + c1*x1*x2*z3 + b1*c1*x1*x2*z3 + 2*c2*x1*x2*z3 + b1*c2*x1*x2*z3 + 2*b2*c2*x1*x2*z3 + 2*c3*x1*x2*z3 + b1*c3*x1*x2*z3 + 2*b2*c3*x1*x2*z3 + a1*a2*x3*z3 + 3*a2*b1*x3*z3 + a1*b2*x3*z3 + 4*b1*b2*x3*z3 + a2*c1*x3*z3 + a1*b2*c1*x3*z3 + a2*b2*c1*x3*z3 + a2*b1*c2*x3*z3 + 2*b1*b2*c2*x3*z3 + 3*a2*x1*x3*z3 + 3*b2*x1*x3*z3 + 3*b2*c2*x1*x3*z3 + b2*c3*x1*x3*z3 + 3*a2*y1*z3 + a1*a2*y1*z3 + 2*a2*b1*y1*z3 + a1*b2*y1*z3 + 5*a2*b2*y1*z3 + a2*b3*y1*z3 + a2*c1*y1*z3 + a1*b2*c1*y1*z3 + a2*b2*c1*y1*z3 + b2*c2*y1*z3 + b1*b2*c2*y1*z3 + b3*c2*y1*z3 + b2*c3*y1*z3 + b1*b2*c3*y1*z3 + 2*a2*x1*y1*z3 + b2*x1*y1*z3 + a2*b2*x1*y1*z3 + 3*b2*c2*x1*y1*z3 + 3*b2*c3*x1*y1*z3 + x2*y1*z3 + a1*x2*y1*z3 + 3*a2*x2*y1*z3 + 4*b2*x2*y1*z3 + a2*b2*x2*y1*z3 + b3*x2*y1*z3 + c1*x2*y1*z3 + b1*c1*x2*y1*z3 + 2*c2*x2*y1*z3 + b1*c2*x2*y1*z3 + 2*b2*c2*x2*y1*z3 + 2*c3*x2*y1*z3 + b1*c3*x2*y1*z3 + 2*b2*c3*x2*y1*z3 + 4*a2*x3*y1*z3 + 3*b2*x3*y1*z3 + a2*c2*x3*y1*z3 + 5*b2*c2*x3*y1*z3 + b2*c3*x3*y1*z3 + a2*y1*(1 + y1)*z3 + (a2*b2*y1*(1 + y1)*z3)/2 + (3*b2*c2*y1*(1 + y1)*z3)/2 + (3*b2*c3*y1*(1 + y1)*z3)/2 + a1*a2*y2*z3 + 4*a1*b1*y2*z3 + a2*b1*y2*z3 + 6*a1*b2*y2*z3 + 3*b1*b2*y2*z3 + a1*b1*b2*y2*z3 + a2*b1*b2*y2*z3 + a1*b3*y2*z3 + b1*b3*y2*z3 + a1*b1*b3*y2*z3 + 2*a1*b2*b3*y2*z3 + a2*c1*y2*z3 + 4*b1*c1*y2*z3 + 4*b2*c1*y2*z3 + a1*b2*c1*y2*z3 + a2*b2*c1*y2*z3 + b3*c1*y2*z3 + b1*b3*c1*y2*z3 + b2*b3*c1*y2*z3 + 2*b1*c2*y2*z3 + b1*b2*c2*y2*z3 + 3*b1*c3*y2*z3 + 2*b1*b2*c3*y2*z3 + b1*b3*c3*y2*z3 + x1*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + 2*b2*x1*y2*z3 + a2*b2*x1*y2*z3 + b3*x1*y2*z3 + c1*x1*y2*z3 + b1*c1*x1*y2*z3 + 2*c2*x1*y2*z3 + b1*c2*x1*y2*z3 + 2*b2*c2*x1*y2*z3 + 2*c3*x1*y2*z3 + b1*c3*x1*y2*z3 + 2*b2*c3*x1*y2*z3 + a1*y1*y2*z3 + 2*a2*y1*y2*z3 + 2*b2*y1*y2*z3 + a2*b2*y1*y2*z3 + b3*y1*y2*z3 + c1*y1*y2*z3 + b1*c1*y1*y2*z3 + 2*c2*y1*y2*z3 + b1*c2*y1*y2*z3 + 2*b2*c2*y1*y2*z3 + 2*c3*y1*y2*z3 + b1*c3*y1*y2*z3 + 2*b2*c3*y1*y2*z3 + a1*a2*y3*z3 + 2*a2*b1*y3*z3 + a1*b2*y3*z3 + 4*b1*b2*y3*z3 + a2*c1*y3*z3 + a1*b2*c1*y3*z3 + a2*b2*c1*y3*z3 + a2*b1*c2*y3*z3 + 2*b1*b2*c2*y3*z3 + 3*a2*x1*y3*z3 + b2*x1*y3*z3 + 3*b2*c2*x1*y3*z3 + b2*c3*x1*y3*z3 + 5*a2*y1*y3*z3 + 3*b2*y1*y3*z3 + a2*c2*y1*y3*z3 + 5*b2*c2*y1*y3*z3 + b2*c3*y1*y3*z3 + a1*a2*z1*z3 + a2*b1*z1*z3 + 2*b2*z1*z3 + a1*b2*z1*z3 + a2*b2*z1*z3 + 2*b1*b2*z1*z3 + a2*b3*z1*z3 + 2*b2*b3*z1*z3 + a2*c1*z1*z3 + a1*b2*c1*z1*z3 + a2*b2*c1*z1*z3 + b1*c2*z1*z3 + 3*b2*c2*z1*z3 + 2*b1*b2*c2*z1*z3 + b2*b3*c2*z1*z3 + 2*b2*c3*z1*z3 + 2*b1*b2*c3*z1*z3 + b2*b3*c3*z1*z3 + 2*a2*x1*z1*z3 + a2*b2*x1*z1*z3 + b2*c1*x1*z1*z3 + 2*b2*c2*x1*z1*z3 + 2*b2*c3*x1*z1*z3 + 2*x2*z1*z3 + a1*x2*z1*z3 + a2*x2*z1*z3 + 2*b2*x2*z1*z3 + a2*b2*x2*z1*z3 + b3*x2*z1*z3 + b1*c1*x2*z1*z3 + c2*x2*z1*z3 + b1*c2*x2*z1*z3 + 2*b2*c2*x2*z1*z3 + c3*x2*z1*z3 + b1*c3*x2*z1*z3 + 2*b2*c3*x2*z1*z3 + 3*a2*x3*z1*z3 + 3*b2*x3*z1*z3 + 3*b2*c2*x3*z1*z3 + b2*c3*x3*z1*z3 + 2*a2*y1*z1*z3 + b2*y1*z1*z3 + a2*b2*y1*z1*z3 + b2*c1*y1*z1*z3 + 2*b2*c2*y1*z1*z3 + 2*b2*c3*y1*z1*z3 + y2*z1*z3 + a1*y2*z1*z3 + a2*y2*z1*z3 + 2*b2*y2*z1*z3 + a2*b2*y2*z1*z3 + b3*y2*z1*z3 + b1*c1*y2*z1*z3 + c2*y2*z1*z3 + b1*c2*y2*z1*z3 + 2*b2*c2*y2*z1*z3 + c3*y2*z1*z3 + b1*c3*y2*z1*z3 + 2*b2*c3*y2*z1*z3 + 3*a2*y3*z1*z3 + b2*y3*z1*z3 + 3*b2*c2*y3*z1*z3 + b2*c3*y3*z1*z3 + a2*z1*(1 + z1)*z3 + (a2*b2*z1*(1 + z1)*z3)/2 + (3*b2*c2*z1*(1 + z1)*z3)/2 + (3*b2*c3*z1*(1 + z1)*z3)/2 + a1*a2*z2*z3 + b1*z2*z3 + 5*a1*b1*z2*z3 + a2*b1*z2*z3 + 7*a1*b2*z2*z3 + 3*b1*b2*z2*z3 + a1*b1*b2*z2*z3 + a2*b1*b2*z2*z3 + 2*a1*b3*z2*z3 + a1*b1*b3*z2*z3 + 2*a1*b2*b3*z2*z3 + a2*c1*z2*z3 + b1*c1*z2*z3 + 2*b2*c1*z2*z3 + a1*b2*c1*z2*z3 + a2*b2*c1*z2*z3 + b1*b2*c1*z2*z3 + b3*c1*z2*z3 + b2*b3*c1*z2*z3 + b1*c2*z2*z3 + b1*b2*c2*z2*z3 + b1*c3*z2*z3 + 2*b1*b2*c3*z2*z3 + b1*b3*c3*z2*z3 + a1*x1*z2*z3 + 2*a2*x1*z2*z3 + b2*x1*z2*z3 + a2*b2*x1*z2*z3 + b3*x1*z2*z3 + c1*x1*z2*z3 + b1*c1*x1*z2*z3 + b1*c2*x1*z2*z3 + 2*b2*c2*x1*z2*z3 + b1*c3*x1*z2*z3 + 2*b2*c3*x1*z2*z3 + 5*y1*z2*z3 + a1*y1*z2*z3 + 2*a2*y1*z2*z3 + 3*b2*y1*z2*z3 + a2*b2*y1*z2*z3 + b3*y1*z2*z3 + c1*y1*z2*z3 + b1*c1*y1*z2*z3 + b1*c2*y1*z2*z3 + 2*b2*c2*y1*z2*z3 + b1*c3*y1*z2*z3 + 2*b2*c3*y1*z2*z3 + a1*z1*z2*z3 + 2*a2*z1*z2*z3 + b2*z1*z2*z3 + a2*b2*z1*z2*z3 + b3*z1*z2*z3 + b1*c1*z1*z2*z3 + c2*z1*z2*z3 + b1*c2*z1*z2*z3 + 2*b2*c2*z1*z2*z3 + c3*z1*z2*z3 + b1*c3*z1*z2*z3 + 2*b2*c3*z1*z2*z3 + (a1*a2*z3*(1 + z3))/2 + (a2*b1*z3*(1 + z3))/2 + (a1*b2*z3*(1 + z3))/2 + (a2*c1*z3*(1 + z3))/2 + (a1*b2*c1*z3*(1 + z3))/2 + (a2*b2*c1*z3*(1 + z3))/2 + a2*x1*z3*(1 + z3) + b2*x1*z3*(1 + z3) + (c2*x1*z3*(1 + z3))/2 + (b2*c2*x1*z3*(1 + z3))/2 + (b2*c3*x1*z3*(1 + z3))/2 + 2*a1*x2*z3*(1 + z3) + 2*c1*x2*z3*(1 + z3) + (3*a2*y1*z3*(1 + z3))/2 + (c2*y1*z3*(1 + z3))/2 + (b2*c2*y1*z3*(1 + z3))/2 + (b2*c3*y1*z3*(1 + z3))/2 + 2*a1*y2*z3*(1 + z3) + 2*c1*y2*z3*(1 + z3) + a2*z1*z3*(1 + z3) + b2*z1*z3*(1 + z3) + (c2*z1*z3*(1 + z3))/2 + (b2*c2*z1*z3*(1 + z3))/2 + (b2*c3*z1*z3*(1 + z3))/2 + 2*a1*z2*z3*(1 + z3) + c1*c2*(x3 + y3 + z3) + (a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*(2*b2 + c2))*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 108 ( I4cm)
#####################################################################
Ampin108:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin108:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin108:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain108:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
Bxyzin108:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b1*x1*x2 + b1*x2*y1 + b1*x1*y2 + b1*y1*y2 + x1*z2 + b1*x1*z2 + b1*x2*z2 + y1*z2 + b1*y1*z2 + b1*y2*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 109 ( I4_1md)
#####################################################################
Ampin109:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin109:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain109:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
B2in109:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2*c1 + a1*a2*b1*c1 + a1*a2*b2*c1 + a1*b1*b2*c1 + a2*b1*x1 + a1*b2*x1 + a2*b2*x1 + a2*b1*c1*x1 + a2*b2*c1*x1 + a1*x2 + a1*b1*x2 + a1*b2*x2 + a1*b1*b2*x2 + a2*b1*b2*x2 + b1*c1*x2 + a2*b2*c1*x2 + b1*b2*c1*x2 + b1*x1*x2 + b1*b2*x1*x2 + a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a2*b1*c1*y1 + a2*b2*c1*y1 + b1*x2*y1 + b1*b2*x2*y1 + a1*y2 + b1*y2 + a1*b1*y2 + a1*b2*y2 + a1*b1*b2*y2 + a2*b1*b2*y2 + c1*y2 + b1*c1*y2 + a2*b2*c1*y2 + b1*b2*c1*y2 + b1*x1*y2 + b1*b2*x1*y2 + b1*y1*y2 + b1*b2*y1*y2 + a2*c1*z1 + a2*b1*c1*z1 + a2*b2*c1*z1 + b1*b2*c1*z1 + b2*x1*z1 + x2*z1 + b1*x2*z1 + b2*x2*z1 + b1*b2*x2*z1 + b2*y1*z1 + y2*z1 + b1*y2*z1 + b2*y2*z1 + b1*b2*y2*z1 + a2*b1*z2 + a1*b1*b2*z2 + a2*b1*b2*z2 + a2*c1*z2 + a2*b2*c1*z2 + b2*x1*z2 + b1*b2*x1*z2 + b2*y1*z2 + b1*b2*y1*z2 + b1*b2*z1*z2;
end;
#####################################################################
C1in109:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a2*a3*b1 + a2*b1*b3 + a1*b2*b3 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a3*b2*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a2*b1*b3*c1 + a1*a2*b2*b3*c1 + a3*b2*b3*c1 + a1*a3*b2*b3*c1 + b1*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*a3*b1*c2 + a1*a2*a3*b1*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a2*b1*b3*c2 + a3*b1*b3*c2 + a1*a3*b1*b3*c2 + a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*a3*c1*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + a1*a2*a3*b1*b2*c1*c2 + a2*b3*c1*c2 + a3*b3*c1*c2 + a1*a3*b3*c1*c2 + a2*a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + a1*a2*a3*b1*b3*c1*c2 + a1*b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a1*a2*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a2*b1*c3 + a2*c1*c3 + a2*a3*c1*c3 + a1*a2*a3*c1*c3 + a2*b2*c1*c3 + a1*a2*b2*c1*c3 + b1*b2*c1*c3 + a1*b1*b2*c1*c3 + a2*b3*c1*c3 + a2*b1*b3*c1*c3 + a2*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*a3*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a3*b2*c2*c3 + a1*a2*a3*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*a2*a3*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + a1*c1*c2*c3 + a2*c1*c2*c3 + a1*a2*c1*c2*c3 + a3*c1*c2*c3 + a2*b1*c1*c2*c3 + a2*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a1*b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a1*b1*b2*c1*c2*c3 + a2*b1*b2*c1*c2*c3 + a1*a2*b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a2*a3*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + a2*b1*b3*c1*c2*c3 + a1*a2*b1*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a2*a3*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b1*b3*x1 + a1*b2*b3*x1 + a2*b2*b3*x1 + a1*a3*b2*b3*x1 + a2*a3*b2*b3*x1 + a3*b2*c1*x1 + a1*a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a3*b1*b2*b3*c1*x1 + a3*b1*c2*x1 + a1*a2*a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a2*a3*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + a1*a2*a3*b1*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a3*b3*c2*x1 + b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + a1*a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a2*b1*b2*b3*c2*x1 + a1*a2*b1*b2*b3*c2*x1 + a1*a2*a3*c1*c2*x1 + a2*a3*b1*c1*c2*x1 + a1*a3*b2*c1*c2*x1 + a2*a3*b2*c1*c2*x1 + a2*b3*c1*c2*x1 + a1*a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a2*a3*b3*c1*c2*x1 + a2*b1*b3*c1*c2*x1 + a3*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a1*b2*b3*c1*c2*x1 + a2*b2*b3*c1*c2*x1 + b1*b2*b3*c1*c2*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a1*a2*b1*c3*x1 + a2*a3*b1*c3*x1 + a1*b2*c3*x1 + a2*b2*c3*x1 + a3*b2*c3*x1 + a1*a3*b2*c3*x1 + a2*a3*b2*c3*x1 + a1*b1*b2*c3*x1 + a2*b1*b3*c3*x1 + a1*b2*b3*c3*x1 + a2*b2*b3*c3*x1 + b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a3*b2*c1*c3*x1 + b1*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a3*b1*b2*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + c2*c3*x1 + a1*a2*c2*c3*x1 + b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a1*a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*b1*b2*c2*c3*x1 + a1*a2*b1*b2*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a1*a2*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + c1*c2*c3*x1 + a1*c1*c2*c3*x1 + a1*b1*c1*c2*c3*x1 + b2*c1*c2*c3*x1 + a1*b2*c1*c2*c3*x1 + a2*b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a1*a2*b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + a1*b1*b3*c1*c2*c3*x1 + a2*b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a1*a2*a3*x2 + a2*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a1*a2*b1*b3*x2 + a1*a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*a3*c1*x2 + a2*a3*c1*x2 + a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*a3*b1*b2*c1*x2 + a1*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + a1*b1*b3*c1*x2 + a1*a2*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + a1*a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + b1*b2*b3*c1*x2 + a1*b1*b2*b3*c1*x2 + a2*b1*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a1*a3*c2*x2 + a2*a3*b1*c2*x2 + a1*a2*a3*b1*c2*x2 + a1*a2*a3*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a2*a3*b1*b2*c2*x2 + a1*a2*a3*b1*b2*c2*x2 + a1*a2*a3*b3*c2*x2 + a2*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a2*a3*b1*b3*c2*x2 + a1*a2*a3*b1*b3*c2*x2 + a1*a2*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a1*a2*b1*b2*b3*c2*x2 + a1*a3*c1*c2*x2 + a2*a3*c1*c2*x2 + a3*b1*c1*c2*x2 + a1*a3*b1*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a2*a3*b1*b2*c1*c2*x2 + a2*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a2*a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a1*b1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a1*c3*x2 + a1*a2*c3*x2 + a1*b1*c3*x2 + a3*b1*c3*x2 + a1*a2*b2*c3*x2 + a3*b1*b2*c3*x2 + a3*b1*b3*c3*x2 + c1*c3*x2 + a2*c1*c3*x2 + a1*a2*c1*c3*x2 + a3*c1*c3*x2 + a1*a3*c1*c3*x2 + b1*c1*c3*x2 + a2*b1*c1*c3*x2 + b2*c1*c3*x2 + a1*b2*c1*c3*x2 + a2*b2*c1*c3*x2 + a3*b2*c1*c3*x2 + a3*b1*b2*c1*c3*x2 + b3*c1*c3*x2 + a1*b3*c1*c3*x2 + a2*b3*c1*c3*x2 + a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a1*b1*b3*c1*c3*x2 + a2*b1*b3*c1*c3*x2 + a3*b1*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a2*b1*c2*c3*x2 + a1*a2*b1*c2*c3*x2 + a1*a3*b1*c2*c3*x2 + b1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a1*a2*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a1*a2*b1*b3*c2*c3*x2 + b1*b2*b3*c2*c3*x2 + a1*b1*c1*c2*c3*x2 + a1*a2*b1*c1*c2*c3*x2 + a3*b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a2*b2*c1*c2*c3*x2 + a1*a2*b2*c1*c2*c3*x2 + a1*b1*b2*c1*c2*c3*x2 + a2*b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + a2*b3*c1*c2*c3*x2 + a1*b1*b3*c1*c2*c3*x2 + a2*b1*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a1*a2*a3*x1*x2 + a1*b3*x1*x2 + b1*b3*x1*x2 + a2*b1*b3*x1*x2 + a3*b1*b3*x1*x2 + a1*b2*b3*x1*x2 + a2*a3*c1*x1*x2 + a3*b1*c1*x1*x2 + a2*a3*b1*c1*x1*x2 + a3*b1*b2*c1*x1*x2 + a1*b3*c1*x1*x2 + b1*b3*c1*x1*x2 + a1*b1*b3*c1*x1*x2 + a2*b1*b3*c1*x1*x2 + a3*b1*b3*c1*x1*x2 + b2*b3*c1*x1*x2 + b1*b2*b3*c1*x1*x2 + a1*a3*c2*x1*x2 + a2*a3*b1*c2*x1*x2 + a1*a3*b2*c2*x1*x2 + a2*b1*b3*c2*x1*x2 + a3*b1*b3*c2*x1*x2 + b1*b2*b3*c2*x1*x2 + a3*c1*c2*x1*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a3*b1*b2*c1*c2*x1*x2 + b1*b3*c1*c2*x1*x2 + b1*b2*b3*c1*c2*x1*x2 + a1*c3*x1*x2 + a1*b1*b2*c3*x1*x2 + a1*b3*c3*x1*x2 + a1*a2*b3*c3*x1*x2 + a1*b2*b3*c3*x1*x2 + b1*b2*b3*c3*x1*x2 + c1*c3*x1*x2 + b1*c1*c3*x1*x2 + b1*b2*c1*c3*x1*x2 + b3*c1*c3*x1*x2 + a2*b3*c1*c3*x1*x2 + a2*b1*b3*c1*c3*x1*x2 + b2*b3*c1*c3*x1*x2 + b1*b2*b3*c1*c3*x1*x2 + a1*b3*c2*c3*x1*x2 + b1*b3*c2*c3*x1*x2 + a2*b1*b3*c2*c3*x1*x2 + a1*b2*b3*c2*c3*x1*x2 + b3*c1*c2*c3*x1*x2 + b1*b3*c1*c2*c3*x1*x2 + b2*b3*c1*c2*c3*x1*x2 + b1*b2*b3*c1*c2*c3*x1*x2 + a1*a2*x3 + a1*a2*b1*x3 + a1*a2*b2*x3 + a1*a2*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*a2*b3*x3 + a1*a2*a3*b3*x3 + a1*a2*b2*b3*x3 + a1*a2*a3*b2*b3*x3 + a1*a3*b1*b2*b3*x3 + a2*a3*b1*b2*b3*x3 + a2*a3*c1*x3 + a1*a2*a3*c1*x3 + a2*b1*c1*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a1*a2*b2*c1*x3 + a3*b2*c1*x3 + a2*a3*b2*c1*x3 + a1*a2*a3*b2*c1*x3 + a1*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a2*b3*c1*x3 + a1*a2*a3*b3*c1*x3 + a2*b1*b3*c1*x3 + a2*b2*b3*c1*x3 + a3*b2*b3*c1*x3 + a2*b1*b2*b3*c1*x3 + a1*a2*b1*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a3*b1*b2*b3*c1*x3 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*b1*c2*x3 + a2*b1*c2*x3 + a3*b1*c2*x3 + a1*a3*b1*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + a1*b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a2*b3*c2*x3 + a1*a2*a3*b3*c2*x3 + a2*b1*b3*c2*x3 + a1*a3*b1*b3*c2*x3 + a2*a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*a2*b2*b3*c2*x3 + a1*a2*a3*b2*b3*c2*x3 + b1*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + a1*a3*b1*b2*b3*c2*x3 + a2*a3*b1*b2*b3*c2*x3 + a2*c1*c2*x3 + a1*a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a1*a3*b1*c1*c2*x3 + a2*a3*b1*c1*c2*x3 + a1*b2*c1*c2*x3 + a1*a2*b2*c1*c2*x3 + a3*b2*c1*c2*x3 + a2*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a1*a2*b3*c1*c2*x3 + a2*a3*b3*c1*c2*x3 + a1*a3*b1*b3*c1*c2*x3 + a2*a3*b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a1*a2*b2*b3*c1*c2*x3 + a1*a3*b2*b3*c1*c2*x3 + a2*a3*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a2*a3*b1*c3*x3 + a1*a2*b2*c3*x3 + a3*b1*b2*c3*x3 + a3*b1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + a2*b1*b2*c1*c3*x3 + a1*a2*b3*c1*c3*x3 + a1*b1*b2*b3*c1*c3*x3 + a1*a3*c2*c3*x3 + a1*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a1*a3*b1*c2*c3*x3 + a1*a2*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + a1*a2*a3*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a1*a3*b3*c2*c3*x3 + a1*a2*a3*b3*c2*c3*x3 + b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + a1*a2*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a1*c1*c2*c3*x3 + a3*c1*c2*c3*x3 + a1*b1*c1*c2*c3*x3 + a2*b1*c1*c2*c3*x3 + a2*a3*b1*c1*c2*c3*x3 + a1*b2*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a1*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + a2*x1*x3 + a1*a2*x1*x3 + a2*b1*x1*x3 + a2*a3*b1*x1*x3 + a2*b2*x1*x3 + a1*a2*b2*x1*x3 + a1*b1*b2*x1*x3 + a2*a3*b1*b2*x1*x3 + a1*a2*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + a1*a2*b1*b2*b3*x1*x3 + a1*a3*b1*b2*b3*x1*x3 + a2*c1*x1*x3 + a2*b1*c1*x1*x3 + a2*b2*c1*x1*x3 + a2*b1*b2*c1*x1*x3 + a2*b3*c1*x1*x3 + a2*b1*b3*c1*x1*x3 + c2*x1*x3 + a1*c2*x1*x3 + a2*c2*x1*x3 + b1*c2*x1*x3 + a1*b1*c2*x1*x3 + a3*b1*c2*x1*x3 + b2*c2*x1*x3 + b1*b2*c2*x1*x3 + a2*b1*b2*c2*x1*x3 + a3*b1*b2*c2*x1*x3 + b1*b3*c2*x1*x3 + a1*b1*b3*c2*x1*x3 + a2*b1*b3*c2*x1*x3 + a3*b1*b3*c2*x1*x3 + a1*b2*b3*c2*x1*x3 + b1*b2*b3*c2*x1*x3 + a2*b1*b2*b3*c2*x1*x3 + c1*c2*x1*x3 + b1*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + b1*b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + a2*b2*c3*x1*x3 + a2*b3*c3*x1*x3 + a2*b1*b3*c3*x1*x3 + a2*b2*b3*c3*x1*x3 + a1*b1*b2*b3*c3*x1*x3 + c2*c3*x1*x3 + b1*c2*c3*x1*x3 + b3*c2*c3*x1*x3 + b1*b3*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a1*x2*x3 + a1*b1*x2*x3 + a1*b2*x2*x3 + a1*a3*b2*x2*x3 + a1*a2*a3*b2*x2*x3 + b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a3*b1*b2*x2*x3 + a2*a3*b1*b2*x2*x3 + a1*a3*b3*x2*x3 + a1*a2*a3*b3*x2*x3 + a1*a3*b1*b3*x2*x3 + a2*a3*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + a1*a2*b1*b2*b3*x2*x3 + a1*a3*b1*b2*b3*x2*x3 + a1*c1*x2*x3 + a2*c1*x2*x3 + a1*a2*c1*x2*x3 + a2*a3*c1*x2*x3 + a1*b1*c1*x2*x3 + a2*b1*c1*x2*x3 + b2*c1*x2*x3 + a1*a3*b2*c1*x2*x3 + b1*b2*c1*x2*x3 + a2*b3*c1*x2*x3 + a1*a2*b3*c1*x2*x3 + a3*b3*c1*x2*x3 + a2*b1*b3*c1*x2*x3 + a3*b1*b3*c1*x2*x3 + b2*b3*c1*x2*x3 + a2*b2*b3*c1*x2*x3 + a3*b2*b3*c1*x2*x3 + a1*b1*b2*b3*c1*x2*x3 + a1*c2*x2*x3 + b1*c2*x2*x3 + a1*b1*c2*x2*x3 + a2*b1*c2*x2*x3 + a1*a2*b2*c2*x2*x3 + a1*a3*b2*c2*x2*x3 + a3*b1*b2*c2*x2*x3 + a1*a3*b3*c2*x2*x3 + b1*b3*c2*x2*x3 + a2*b1*b3*c2*x2*x3 + a3*b1*b3*c2*x2*x3 + a1*a2*b2*b3*c2*x2*x3 + a1*b1*b2*b3*c2*x2*x3 + a2*b1*b2*b3*c2*x2*x3 + c1*c2*x2*x3 + a1*c1*c2*x2*x3 + a2*c1*c2*x2*x3 + a3*c1*c2*x2*x3 + a1*b2*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + a1*b3*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + b1*b3*c1*c2*x2*x3 + a1*b2*b3*c1*c2*x2*x3 + a2*b1*c3*x2*x3 + a1*b1*b2*c3*x2*x3 + a2*b1*b2*c3*x2*x3 + a1*b3*c3*x2*x3 + a1*b1*b3*c3*x2*x3 + a2*b1*b3*c3*x2*x3 + a1*b1*b2*b3*c3*x2*x3 + b1*b2*c1*c3*x2*x3 + b3*c1*c3*x2*x3 + b1*b3*c1*c3*x2*x3 + b2*b3*c1*c3*x2*x3 + b1*c2*c3*x2*x3 + b1*b2*c2*c3*x2*x3 + b1*b3*c2*c3*x2*x3 + a3*b2*y1 + a3*b1*b2*y1 + a1*a3*b1*b2*y1 + a1*a2*b1*b3*y1 + a2*a3*b1*b3*y1 + b2*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a3*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + a3*b2*c1*y1 + a1*a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a3*c2*y1 + a2*a3*c2*y1 + a3*b1*c2*y1 + a2*a3*b1*c2*y1 + a1*a2*a3*b1*c2*y1 + a1*a3*b2*c2*y1 + a1*a2*a3*b1*b2*c2*y1 + b3*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + a3*b3*c2*y1 + a2*a3*b3*c2*y1 + b1*b3*c2*y1 + a2*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a1*a2*a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a1*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a1*a2*b1*b2*b3*c2*y1 + a1*a3*c1*c2*y1 + a1*a2*a3*c1*c2*y1 + a2*a3*b1*c1*c2*y1 + a1*a3*b2*c1*c2*y1 + a2*a3*b2*c1*c2*y1 + b3*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b3*c1*c2*y1 + a1*a2*b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + a2*b1*b3*c1*c2*y1 + a3*b1*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a1*a2*c3*y1 + a2*a3*c3*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a1*a3*b2*c3*y1 + a2*a3*b2*c3*y1 + b1*b2*c3*y1 + a1*b1*b2*c3*y1 + a2*b1*b3*c3*y1 + b2*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + b2*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + c2*c3*y1 + a1*a2*c2*c3*y1 + a3*c2*c3*y1 + b1*c2*c3*y1 + a2*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a3*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*b2*c2*c3*y1 + a1*a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + b1*b2*c2*c3*y1 + a1*b1*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a1*a2*b1*b2*c2*c3*y1 + b3*c2*c3*y1 + a1*a2*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + a1*a2*b1*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + c1*c2*c3*y1 + a1*c1*c2*c3*y1 + a2*b1*c1*c2*c3*y1 + a2*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + a2*b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + a2*b3*c1*c2*c3*y1 + a1*a2*b3*c1*c2*c3*y1 + a1*b1*b3*c1*c2*c3*y1 + a2*b1*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a2*a3*x1*y1 + b2*b3*x1*y1 + a3*c2*x1*y1 + a3*b1*c2*x1*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + b1*b3*c2*x1*y1 + a1*b2*c3*x1*y1 + b1*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + b2*b3*c3*x1*y1 + b2*c1*c3*x1*y1 + b1*b2*c1*c3*x1*y1 + b3*c2*c3*x1*y1 + b1*b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + a3*x2*y1 + a1*a3*x2*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a3*b2*x2*y1 + a2*b3*x2*y1 + a3*b3*x2*y1 + b1*b3*x2*y1 + a2*b1*b3*x2*y1 + a3*b1*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + a3*c1*x2*y1 + a2*a3*c1*x2*y1 + a3*b1*c1*x2*y1 + a2*a3*b1*c1*x2*y1 + a3*b1*b2*c1*x2*y1 + a1*b1*b3*c1*x2*y1 + a2*b1*b3*c1*x2*y1 + a3*b1*b3*c1*x2*y1 + b2*b3*c1*x2*y1 + b1*b2*b3*c1*x2*y1 + a3*c2*x2*y1 + a1*a3*c2*x2*y1 + a2*a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + b3*c2*x2*y1 + a1*b3*c2*x2*y1 + a2*b1*b3*c2*x2*y1 + a3*b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + a3*c1*c2*x2*y1 + a3*b1*c1*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + a3*b1*b2*c1*c2*x2*y1 + b3*c1*c2*x2*y1 + b1*b3*c1*c2*x2*y1 + b1*b2*b3*c1*c2*x2*y1 + c3*x2*y1 + a1*c3*x2*y1 + a1*b1*c3*x2*y1 + a1*b2*c3*x2*y1 + a1*b1*b2*c3*x2*y1 + a1*b3*c3*x2*y1 + a2*b3*c3*x2*y1 + a1*a2*b3*c3*x2*y1 + b2*b3*c3*x2*y1 + a1*b2*b3*c3*x2*y1 + b1*b2*b3*c3*x2*y1 + c1*c3*x2*y1 + b2*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + b3*c1*c3*x2*y1 + a2*b3*c1*c3*x2*y1 + a2*b1*b3*c1*c3*x2*y1 + b2*b3*c1*c3*x2*y1 + b1*b2*b3*c1*c3*x2*y1 + b3*c2*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + a2*b1*b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + a1*b2*b3*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + b2*b3*c1*c2*c3*x2*y1 + b1*b2*b3*c1*c2*c3*x2*y1 + a1*a2*x3*y1 + a2*b1*x3*y1 + a2*a3*b1*x3*y1 + b2*x3*y1 + a1*a2*b2*x3*y1 + b1*b2*x3*y1 + a1*b1*b2*x3*y1 + a2*a3*b1*b2*x3*y1 + a2*b3*x3*y1 + a1*a2*b3*x3*y1 + a2*a3*b1*b3*x3*y1 + a2*b2*b3*x3*y1 + a3*b2*b3*x3*y1 + a2*b1*b2*b3*x3*y1 + a1*a2*b1*b2*b3*x3*y1 + a3*b1*b2*b3*x3*y1 + a1*a3*b1*b2*b3*x3*y1 + a2*c1*x3*y1 + a2*b1*c1*x3*y1 + a2*b2*c1*x3*y1 + a2*b1*b2*c1*x3*y1 + a2*b3*c1*x3*y1 + a2*b1*b3*c1*x3*y1 + c2*x3*y1 + a1*c2*x3*y1 + a2*c2*x3*y1 + a1*b1*c2*x3*y1 + a3*b1*c2*x3*y1 + b2*c2*x3*y1 + b1*b2*c2*x3*y1 + a2*b1*b2*c2*x3*y1 + a3*b1*b2*c2*x3*y1 + b3*c2*x3*y1 + a1*b1*b3*c2*x3*y1 + a2*b1*b3*c2*x3*y1 + a3*b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a1*b2*b3*c2*x3*y1 + b1*b2*b3*c2*x3*y1 + a2*b1*b2*b3*c2*x3*y1 + c1*c2*x3*y1 + b1*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + b1*b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + a2*b2*c3*x3*y1 + a2*b3*c3*x3*y1 + a2*b1*b3*c3*x3*y1 + b2*b3*c3*x3*y1 + a2*b2*b3*c3*x3*y1 + b1*b2*b3*c3*x3*y1 + a1*b1*b2*b3*c3*x3*y1 + c2*c3*x3*y1 + b1*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + b1*b3*c2*c3*x3*y1 + b2*b3*c2*c3*x3*y1 + a1*a3*y2 + a1*a2*a3*y2 + a1*a3*b2*y2 + a3*b1*b2*y2 + a2*a3*b1*b2*y2 + a1*b3*y2 + a1*a2*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a1*a3*b1*b3*y2 + a2*a3*b1*b3*y2 + a2*a3*c1*y2 + a1*a3*b1*c1*y2 + a3*b1*b2*c1*y2 + a1*a3*b1*b2*c1*y2 + a1*b3*c1*y2 + a1*a3*b3*c1*y2 + a1*a2*b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a1*a3*b1*b3*c1*y2 + b2*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a3*b1*b2*b3*c1*y2 + a1*a3*c2*y2 + a3*b1*c2*y2 + a1*a3*b1*c2*y2 + a1*a2*a3*b1*c2*y2 + a3*b1*b2*c2*y2 + a1*a2*a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a2*b1*b3*c2*y2 + a3*b1*b3*c2*y2 + a1*a2*a3*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a2*b1*b2*b3*c2*y2 + a1*a2*b1*b2*b3*c2*y2 + a3*c1*c2*y2 + a1*a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a1*a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a3*b1*b2*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + a1*b3*c1*c2*y2 + a3*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + a1*b1*b2*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*c3*y2 + a1*a2*c3*y2 + a1*b1*c3*y2 + a2*b1*c3*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + a3*b1*b2*c3*y2 + a3*b1*b3*c3*y2 + c1*c3*y2 + a1*c1*c3*y2 + a1*a2*c1*c3*y2 + a1*a3*c1*c3*y2 + b1*c1*c3*y2 + a2*b1*c1*c3*y2 + b2*c1*c3*y2 + a1*b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a3*b2*c1*c3*y2 + a3*b1*b2*c1*c3*y2 + a1*b3*c1*c3*y2 + a2*b3*c1*c3*y2 + a3*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a3*b1*b3*c1*c3*y2 + b2*b3*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + b1*c2*c3*y2 + a1*b1*c2*c3*y2 + a2*b1*c2*c3*y2 + a1*a2*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*a2*b2*c2*c3*y2 + a1*a3*b2*c2*c3*y2 + a1*b1*b2*c2*c3*y2 + a1*a2*b1*b2*c2*c3*y2 + a1*b3*c2*c3*y2 + a1*a2*b3*c2*c3*y2 + a1*a3*b3*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*a2*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + a1*a2*b1*c1*c2*c3*y2 + b2*c1*c2*c3*y2 + a1*b2*c1*c2*c3*y2 + a1*a2*b2*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + a1*b1*b2*c1*c2*c3*y2 + a2*b1*b2*c1*c2*c3*y2 + a1*b3*c1*c2*c3*y2 + a1*b1*b3*c1*c2*c3*y2 + a2*b1*b3*c1*c2*c3*y2 + b2*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*x1*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a3*b1*x1*y2 + a3*b1*b2*x1*y2 + b3*x1*y2 + b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + a3*c1*x1*y2 + a2*a3*c1*x1*y2 + a2*a3*b1*c1*x1*y2 + a3*b1*b2*c1*x1*y2 + a1*b3*c1*x1*y2 + a1*b1*b3*c1*x1*y2 + a2*b1*b3*c1*x1*y2 + a3*b1*b3*c1*x1*y2 + b2*b3*c1*x1*y2 + b1*b2*b3*c1*x1*y2 + a3*c2*x1*y2 + a1*a3*c2*x1*y2 + a3*b1*c2*x1*y2 + a2*a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b2*c2*x1*y2 + b3*c2*x1*y2 + a2*b1*b3*c2*x1*y2 + a3*b1*b3*c2*x1*y2 + a3*c1*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a3*b1*b2*c1*c2*x1*y2 + b1*b3*c1*c2*x1*y2 + b1*b2*b3*c1*c2*x1*y2 + a1*c3*x1*y2 + b2*c3*x1*y2 + a1*b1*b2*c3*x1*y2 + b3*c3*x1*y2 + a2*b3*c3*x1*y2 + a1*a2*b3*c3*x1*y2 + b1*b3*c3*x1*y2 + b2*b3*c3*x1*y2 + a1*b2*b3*c3*x1*y2 + b1*b2*b3*c3*x1*y2 + c1*c3*x1*y2 + b1*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + b1*b3*c1*c3*x1*y2 + a2*b1*b3*c1*c3*x1*y2 + b2*b3*c1*c3*x1*y2 + b1*b2*b3*c1*c3*x1*y2 + b3*c2*c3*x1*y2 + a1*b3*c2*c3*x1*y2 + a2*b1*b3*c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + a1*b2*b3*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b1*b3*c1*c2*c3*x1*y2 + b2*b3*c1*c2*c3*x1*y2 + b1*b2*b3*c1*c2*c3*x1*y2 + a1*a3*x2*y2 + a1*a3*b2*x2*y2 + a1*a2*b3*x2*y2 + a1*a3*b3*x2*y2 + a1*b2*b3*c2*x2*y2 + a1*b1*c3*x2*y2 + a1*b2*c3*x2*y2 + b1*c1*c3*x2*y2 + b2*c1*c3*x2*y2 + a1*x3*y2 + a1*b1*x3*y2 + a2*b1*x3*y2 + a1*b2*x3*y2 + a1*a3*b2*x3*y2 + a1*a2*a3*b2*x3*y2 + b1*b2*x3*y2 + a2*b1*b2*x3*y2 + a3*b1*b2*x3*y2 + a1*a3*b1*b2*x3*y2 + a2*a3*b1*b2*x3*y2 + a1*b3*x3*y2 + a1*a2*b3*x3*y2 + a1*a2*a3*b3*x3*y2 + a1*a3*b1*b3*x3*y2 + a2*a3*b1*b3*x3*y2 + a1*a2*b2*b3*x3*y2 + a1*a3*b2*b3*x3*y2 + b1*b2*b3*x3*y2 + a1*b1*b2*b3*x3*y2 + a2*b1*b2*b3*x3*y2 + a1*a2*b1*b2*b3*x3*y2 + a3*b1*b2*b3*x3*y2 + a1*a3*b1*b2*b3*x3*y2 + c1*x3*y2 + a1*a2*c1*x3*y2 + a3*c1*x3*y2 + a2*a3*c1*x3*y2 + b1*c1*x3*y2 + a1*b1*c1*x3*y2 + b2*c1*x3*y2 + a3*b2*c1*x3*y2 + a1*a3*b2*c1*x3*y2 + a1*b3*c1*x3*y2 + a1*a2*b3*c1*x3*y2 + a3*b3*c1*x3*y2 + b1*b3*c1*x3*y2 + a2*b1*b3*c1*x3*y2 + a3*b1*b3*c1*x3*y2 + a2*b2*b3*c1*x3*y2 + a3*b2*b3*c1*x3*y2 + b1*b2*b3*c1*x3*y2 + a1*b1*b2*b3*c1*x3*y2 + a1*c2*x3*y2 + a1*b1*c2*x3*y2 + a1*a2*b2*c2*x3*y2 + a1*a3*b2*c2*x3*y2 + b1*b2*c2*x3*y2 + a3*b1*b2*c2*x3*y2 + a1*b3*c2*x3*y2 + a1*a3*b3*c2*x3*y2 + a2*b1*b3*c2*x3*y2 + a3*b1*b3*c2*x3*y2 + a1*b2*b3*c2*x3*y2 + a1*a2*b2*b3*c2*x3*y2 + a1*b1*b2*b3*c2*x3*y2 + a2*b1*b2*b3*c2*x3*y2 + c1*c2*x3*y2 + a1*c1*c2*x3*y2 + a2*c1*c2*x3*y2 + a3*c1*c2*x3*y2 + b1*c1*c2*x3*y2 + b2*c1*c2*x3*y2 + a1*b2*c1*c2*x3*y2 + b1*b2*c1*c2*x3*y2 + a1*b3*c1*c2*x3*y2 + a2*b3*c1*c2*x3*y2 + b1*b3*c1*c2*x3*y2 + b2*b3*c1*c2*x3*y2 + a1*b2*b3*c1*c2*x3*y2 + b1*b2*c3*x3*y2 + a1*b1*b2*c3*x3*y2 + a2*b1*b2*c3*x3*y2 + a1*b3*c3*x3*y2 + a1*b1*b3*c3*x3*y2 + a2*b1*b3*c3*x3*y2 + b1*b2*b3*c3*x3*y2 + a1*b1*b2*b3*c3*x3*y2 + b1*b2*c1*c3*x3*y2 + b3*c1*c3*x3*y2 + b1*b3*c1*c3*x3*y2 + b2*b3*c1*c3*x3*y2 + b1*b2*c2*c3*x3*y2 + b1*b3*c2*c3*x3*y2 + a1*a2*a3*y1*y2 + a3*b1*y1*y2 + a3*b2*y1*y2 + a3*b1*b2*y1*y2 + a1*b3*y1*y2 + a2*b3*y1*y2 + a3*b3*y1*y2 + b1*b3*y1*y2 + a1*b2*b3*y1*y2 + a2*a3*c1*y1*y2 + a2*a3*b1*c1*y1*y2 + a3*b1*b2*c1*y1*y2 + b3*c1*y1*y2 + b1*b3*c1*y1*y2 + a1*b1*b3*c1*y1*y2 + a2*b1*b3*c1*y1*y2 + a3*b1*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + a1*a3*c2*y1*y2 + a3*b1*c2*y1*y2 + a2*a3*b1*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + b3*c2*y1*y2 + a1*b3*c2*y1*y2 + a2*b1*b3*c2*y1*y2 + a3*b1*b3*c2*y1*y2 + b2*b3*c2*y1*y2 + a3*c1*c2*y1*y2 + a3*b1*c1*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + a3*b1*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + b1*b3*c1*c2*y1*y2 + b1*b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a1*c3*y1*y2 + b1*c3*y1*y2 + a1*b1*c3*y1*y2 + a1*b2*c3*y1*y2 + a1*b1*b2*c3*y1*y2 + a1*a2*b3*c3*y1*y2 + b1*b3*c3*y1*y2 + a1*b2*b3*c3*y1*y2 + b1*b2*b3*c3*y1*y2 + c1*c3*y1*y2 + b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b1*b3*c1*c3*y1*y2 + a2*b1*b3*c1*c3*y1*y2 + b2*b3*c1*c3*y1*y2 + b1*b2*b3*c1*c3*y1*y2 + a1*b3*c2*c3*y1*y2 + a2*b1*b3*c2*c3*y1*y2 + a1*b2*b3*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + b2*b3*c1*c2*c3*y1*y2 + b1*b2*b3*c1*c2*c3*y1*y2 + a1*a2*y3 + a2*b1*y3 + a1*a2*b1*y3 + a1*a2*b2*y3 + b1*b2*y3 + a1*b1*b2*y3 + a2*b1*b2*y3 + a1*a2*b1*b2*y3 + a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*a3*b3*y3 + a1*a3*b2*b3*y3 + a1*a2*a3*b2*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a1*a3*b1*b2*b3*y3 + a2*a3*b1*b2*b3*y3 + a1*a2*c1*y3 + a2*a3*c1*y3 + a1*a2*a3*c1*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a2*a3*b1*c1*y3 + a1*b2*c1*y3 + a3*b2*c1*y3 + a1*a3*b2*c1*y3 + a2*a3*b2*c1*y3 + a1*a2*a3*b2*c1*y3 + b1*b2*c1*y3 + a1*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b3*c1*y3 + a1*a2*b3*c1*y3 + a1*a2*a3*b3*c1*y3 + a2*b1*b3*c1*y3 + b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + a1*a2*b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a1*a3*b1*b2*b3*c1*y3 + a1*a2*c2*y3 + b1*c2*y3 + a2*b1*c2*y3 + a1*a3*b1*c2*y3 + a1*a2*b2*c2*y3 + a1*a2*a3*b2*c2*y3 + b1*b2*c2*y3 + a1*b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a1*a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a1*b3*c2*y3 + a1*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*a2*a3*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a3*b1*b2*b3*c2*y3 + a1*a3*b1*b2*b3*c2*y3 + a2*a3*b1*b2*b3*c2*y3 + a1*c1*c2*y3 + a2*a3*c1*c2*y3 + b1*c1*c2*y3 + a3*b1*c1*c2*y3 + a1*a3*b1*c1*c2*y3 + a2*a3*b1*c1*c2*y3 + a2*b2*c1*c2*y3 + a1*a2*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a2*b3*c1*c2*y3 + a1*a2*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + a2*a3*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a1*a3*b1*b3*c1*c2*y3 + a2*a3*b1*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + a1*b2*b3*c1*c2*y3 + a1*a2*b2*b3*c1*c2*y3 + a3*b2*b3*c1*c2*y3 + a1*a3*b2*b3*c1*c2*y3 + a2*a3*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*c3*y3 + a2*b1*c3*y3 + a2*a3*b1*c3*y3 + a1*b2*c3*y3 + a1*a2*b2*c3*y3 + b1*b2*c3*y3 + a3*b1*b2*c3*y3 + b1*b2*b3*c3*y3 + a3*b1*b2*b3*c3*y3 + a2*b1*c1*c3*y3 + b1*b2*c1*c3*y3 + a2*b1*b2*c1*c3*y3 + a1*a2*b3*c1*c3*y3 + a1*b1*b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*a3*c2*c3*y3 + a3*b1*c2*c3*y3 + a1*a3*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + a1*a2*a3*b2*c2*c3*y3 + a1*b1*b2*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a1*a2*b3*c2*c3*y3 + a1*a2*a3*b3*c2*c3*y3 + b1*b3*c2*c3*y3 + a1*b1*b3*c2*c3*y3 + a3*b1*b3*c2*c3*y3 + a1*a2*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a1*c1*c2*c3*y3 + a3*c1*c2*c3*y3 + a1*b1*c1*c2*c3*y3 + a3*b1*c1*c2*c3*y3 + a2*a3*b1*c1*c2*c3*y3 + a1*b2*c1*c2*c3*y3 + a2*b2*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + b3*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + b1*b2*b3*c1*c2*c3*y3 + a1*a2*x1*y3 + a2*a3*b1*x1*y3 + b2*x1*y3 + a1*b2*x1*y3 + a2*b2*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + b1*b2*x1*y3 + a1*b1*b2*x1*y3 + a2*b1*b2*x1*y3 + a3*b1*b2*x1*y3 + a2*a3*b1*b2*x1*y3 + a2*b3*x1*y3 + a1*a2*b3*x1*y3 + a2*b1*b3*x1*y3 + a2*a3*b1*b3*x1*y3 + b2*b3*x1*y3 + a3*b2*b3*x1*y3 + a1*a2*b1*b2*b3*x1*y3 + a1*a3*b1*b2*b3*x1*y3 + a2*c1*x1*y3 + a2*b1*c1*x1*y3 + b2*c1*x1*y3 + a2*b2*c1*x1*y3 + b1*b2*c1*x1*y3 + a2*b1*b2*c1*x1*y3 + a2*b3*c1*x1*y3 + a2*b1*b3*c1*x1*y3 + c2*x1*y3 + a1*c2*x1*y3 + a2*c2*x1*y3 + b1*c2*x1*y3 + a1*b1*c2*x1*y3 + a3*b1*c2*x1*y3 + b1*b2*c2*x1*y3 + a2*b1*b2*c2*x1*y3 + a3*b1*b2*c2*x1*y3 + b3*c2*x1*y3 + a1*b1*b3*c2*x1*y3 + a2*b1*b3*c2*x1*y3 + a3*b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + a1*b2*b3*c2*x1*y3 + a2*b1*b2*b3*c2*x1*y3 + c1*c2*x1*y3 + b1*c1*c2*x1*y3 + b2*b3*c1*c2*x1*y3 + b1*b2*b3*c1*c2*x1*y3 + a2*c3*x1*y3 + b2*c3*x1*y3 + a2*b2*c3*x1*y3 + a2*b3*c3*x1*y3 + a2*b1*b3*c3*x1*y3 + a2*b2*b3*c3*x1*y3 + a1*b1*b2*b3*c3*x1*y3 + c2*c3*x1*y3 + b1*c2*c3*x1*y3 + b3*c2*c3*x1*y3 + b1*b3*c2*c3*x1*y3 + b2*b3*c2*c3*x1*y3 + a1*x2*y3 + a1*b1*x2*y3 + a1*b2*x2*y3 + a1*a2*b2*x2*y3 + a1*a2*a3*b2*x2*y3 + a1*b1*b2*x2*y3 + a1*a3*b1*b2*x2*y3 + a2*a3*b1*b2*x2*y3 + a1*a2*b3*x2*y3 + a1*a2*a3*b3*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*b1*b3*x2*y3 + a3*b1*b3*x2*y3 + a1*a3*b1*b3*x2*y3 + a2*a3*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a1*a2*b1*b2*b3*x2*y3 + a1*a3*b1*b2*b3*x2*y3 + a1*a2*c1*x2*y3 + a3*c1*x2*y3 + a2*a3*c1*x2*y3 + b1*c1*x2*y3 + a1*b1*c1*x2*y3 + a2*b1*c1*x2*y3 + b2*c1*x2*y3 + a1*b2*c1*x2*y3 + a1*a3*b2*c1*x2*y3 + b1*b2*c1*x2*y3 + a1*b3*c1*x2*y3 + a2*b3*c1*x2*y3 + a1*a2*b3*c1*x2*y3 + a3*b3*c1*x2*y3 + a2*b1*b3*c1*x2*y3 + a3*b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a2*b2*b3*c1*x2*y3 + a3*b2*b3*c1*x2*y3 + a1*b1*b2*b3*c1*x2*y3 + a1*c2*x2*y3 + a1*b1*c2*x2*y3 + a2*b1*c2*x2*y3 + a1*a2*b2*c2*x2*y3 + a1*a3*b2*c2*x2*y3 + b1*b2*c2*x2*y3 + a3*b1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + a1*a3*b3*c2*x2*y3 + b1*b3*c2*x2*y3 + a2*b1*b3*c2*x2*y3 + a3*b1*b3*c2*x2*y3 + a1*b2*b3*c2*x2*y3 + a1*a2*b2*b3*c2*x2*y3 + b1*b2*b3*c2*x2*y3 + a1*b1*b2*b3*c2*x2*y3 + a2*b1*b2*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*c1*c2*x2*y3 + a2*c1*c2*x2*y3 + a3*c1*c2*x2*y3 + a1*b2*c1*c2*x2*y3 + b1*b2*c1*c2*x2*y3 + b3*c1*c2*x2*y3 + a1*b3*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + b1*b3*c1*c2*x2*y3 + a1*b2*b3*c1*c2*x2*y3 + b1*c3*x2*y3 + a2*b1*c3*x2*y3 + b1*b2*c3*x2*y3 + a1*b1*b2*c3*x2*y3 + a2*b1*b2*c3*x2*y3 + a1*b3*c3*x2*y3 + b1*b3*c3*x2*y3 + a1*b1*b3*c3*x2*y3 + a2*b1*b3*c3*x2*y3 + a1*b1*b2*b3*c3*x2*y3 + b1*b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + b1*b3*c1*c3*x2*y3 + b2*b3*c1*c3*x2*y3 + b1*c2*c3*x2*y3 + b1*b2*c2*c3*x2*y3 + b1*b3*c2*c3*x2*y3 + a2*b1*x3*y3 + a1*a2*b3*x3*y3 + a1*b2*b3*x3*y3 + a1*a2*b2*b3*x3*y3 + a1*a3*b2*b3*x3*y3 + b1*b2*b3*x3*y3 + a1*b1*b2*b3*x3*y3 + a2*b1*b2*b3*x3*y3 + a3*b1*b2*b3*x3*y3 + a2*b1*c1*x3*y3 + a3*b2*c1*x3*y3 + b1*b2*c1*x3*y3 + a3*b2*b3*c1*x3*y3 + b1*b2*b3*c1*x3*y3 + a1*c2*x3*y3 + a2*b1*c2*x3*y3 + b1*b2*c2*x3*y3 + a1*b2*b3*c2*x3*y3 + b1*c1*c2*x3*y3 + a2*b1*c3*x3*y3 + b1*b2*c3*x3*y3 + b1*b2*b3*c3*x3*y3 + b1*c2*c3*x3*y3 + a2*y1*y3 + a1*a2*y1*y3 + a2*a3*b1*y1*y3 + b2*y1*y3 + a1*b2*y1*y3 + a1*a2*b2*y1*y3 + a3*b2*y1*y3 + a1*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a3*b1*b2*y1*y3 + a2*a3*b1*b2*y1*y3 + a1*a2*b3*y1*y3 + a2*b1*b3*y1*y3 + a2*a3*b1*b3*y1*y3 + b2*b3*y1*y3 + a2*b2*b3*y1*y3 + a2*b1*b2*b3*y1*y3 + a1*a2*b1*b2*b3*y1*y3 + a3*b1*b2*b3*y1*y3 + a1*a3*b1*b2*b3*y1*y3 + a2*c1*y1*y3 + a2*b1*c1*y1*y3 + b2*c1*y1*y3 + a2*b2*c1*y1*y3 + b1*b2*c1*y1*y3 + a2*b1*b2*c1*y1*y3 + a2*b3*c1*y1*y3 + a2*b1*b3*c1*y1*y3 + c2*y1*y3 + a1*c2*y1*y3 + a2*c2*y1*y3 + a1*b1*c2*y1*y3 + a3*b1*c2*y1*y3 + b1*b2*c2*y1*y3 + a2*b1*b2*c2*y1*y3 + a3*b1*b2*c2*y1*y3 + b1*b3*c2*y1*y3 + a1*b1*b3*c2*y1*y3 + a2*b1*b3*c2*y1*y3 + a3*b1*b3*c2*y1*y3 + a1*b2*b3*c2*y1*y3 + a2*b1*b2*b3*c2*y1*y3 + c1*c2*y1*y3 + b1*c1*c2*y1*y3 + b2*b3*c1*c2*y1*y3 + b1*b2*b3*c1*c2*y1*y3 + a2*c3*y1*y3 + b2*c3*y1*y3 + a2*b2*c3*y1*y3 + a2*b3*c3*y1*y3 + a2*b1*b3*c3*y1*y3 + b2*b3*c3*y1*y3 + a2*b2*b3*c3*y1*y3 + b1*b2*b3*c3*y1*y3 + a1*b1*b2*b3*c3*y1*y3 + c2*c3*y1*y3 + b1*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + b1*b3*c2*c3*y1*y3 + b2*b3*c2*c3*y1*y3 + a1*y2*y3 + b1*y2*y3 + a1*b1*y2*y3 + a2*b1*y2*y3 + a1*b2*y2*y3 + a1*a2*b2*y2*y3 + a1*a2*a3*b2*y2*y3 + a1*b1*b2*y2*y3 + a1*a3*b1*b2*y2*y3 + a2*a3*b1*b2*y2*y3 + a1*b3*y2*y3 + a1*a3*b3*y2*y3 + a1*a2*a3*b3*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + a3*b1*b3*y2*y3 + a1*a3*b1*b3*y2*y3 + a2*a3*b1*b3*y2*y3 + a1*a2*b2*b3*y2*y3 + a1*a3*b2*b3*y2*y3 + b1*b2*b3*y2*y3 + a1*b1*b2*b3*y2*y3 + a2*b1*b2*b3*y2*y3 + a1*a2*b1*b2*b3*y2*y3 + a3*b1*b2*b3*y2*y3 + a1*a3*b1*b2*b3*y2*y3 + c1*y2*y3 + a1*c1*y2*y3 + a2*c1*y2*y3 + a1*a2*c1*y2*y3 + a2*a3*c1*y2*y3 + b1*c1*y2*y3 + a1*b1*c1*y2*y3 + a1*b2*c1*y2*y3 + a3*b2*c1*y2*y3 + a1*a3*b2*c1*y2*y3 + b3*c1*y2*y3 + a1*a2*b3*c1*y2*y3 + a3*b3*c1*y2*y3 + b1*b3*c1*y2*y3 + a2*b1*b3*c1*y2*y3 + a3*b1*b3*c1*y2*y3 + a2*b2*b3*c1*y2*y3 + a3*b2*b3*c1*y2*y3 + b1*b2*b3*c1*y2*y3 + a1*b1*b2*b3*c1*y2*y3 + a1*c2*y2*y3 + a1*b1*c2*y2*y3 + a1*a2*b2*c2*y2*y3 + a1*a3*b2*c2*y2*y3 + a3*b1*b2*c2*y2*y3 + a1*a3*b3*c2*y2*y3 + a2*b1*b3*c2*y2*y3 + a3*b1*b3*c2*y2*y3 + a1*a2*b2*b3*c2*y2*y3 + b1*b2*b3*c2*y2*y3 + a1*b1*b2*b3*c2*y2*y3 + a2*b1*b2*b3*c2*y2*y3 + c1*c2*y2*y3 + a1*c1*c2*y2*y3 + a2*c1*c2*y2*y3 + a3*c1*c2*y2*y3 + b1*c1*c2*y2*y3 + b2*c1*c2*y2*y3 + a1*b2*c1*c2*y2*y3 + b1*b2*c1*c2*y2*y3 + b3*c1*c2*y2*y3 + a1*b3*c1*c2*y2*y3 + a2*b3*c1*c2*y2*y3 + b1*b3*c1*c2*y2*y3 + b2*b3*c1*c2*y2*y3 + a1*b2*b3*c1*c2*y2*y3 + a1*b1*b2*c3*y2*y3 + a2*b1*b2*c3*y2*y3 + a1*b3*c3*y2*y3 + b1*b3*c3*y2*y3 + a1*b1*b3*c3*y2*y3 + a2*b1*b3*c3*y2*y3 + b1*b2*b3*c3*y2*y3 + a1*b1*b2*b3*c3*y2*y3 + b1*b2*c1*c3*y2*y3 + b3*c1*c3*y2*y3 + b1*b3*c1*c3*y2*y3 + b2*b3*c1*c3*y2*y3 + b1*b2*c2*c3*y2*y3 + b1*b3*c2*c3*y2*y3 + a2*a3*b1*z1 + a1*a3*b2*z1 + a2*a3*b2*z1 + a1*a3*b1*b2*z1 + a2*b1*b3*z1 + a1*a2*b1*b3*z1 + a2*a3*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a1*a3*b2*b3*z1 + a2*a3*b2*b3*z1 + a1*a3*b2*c1*z1 + a2*b1*b3*c1*z1 + b1*b2*b3*c1*z1 + a3*b1*b2*b3*c1*z1 + a3*c2*z1 + a1*a2*a3*c2*z1 + a3*b1*c2*z1 + a1*a2*a3*b1*c2*z1 + a3*b2*c2*z1 + a1*a3*b2*c2*z1 + a1*a2*a3*b2*c2*z1 + a2*a3*b1*b2*c2*z1 + a1*a2*a3*b1*b2*c2*z1 + a1*b3*c2*z1 + a2*a3*b3*c2*z1 + a1*a2*a3*b3*c2*z1 + b1*b3*c2*z1 + a3*b1*b3*c2*z1 + a2*a3*b1*b3*c2*z1 + a1*a2*a3*b1*b3*c2*z1 + b2*b3*c2*z1 + a2*b2*b3*c2*z1 + a1*a2*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a1*b1*b2*b3*c2*z1 + a2*b1*b2*b3*c2*z1 + a1*a2*b1*b2*b3*c2*z1 + a1*a3*c1*c2*z1 + a1*a2*a3*c1*c2*z1 + a1*a3*b1*c1*c2*z1 + a3*b1*b2*c1*c2*z1 + a1*a2*b3*c1*c2*z1 + a1*a3*b3*c1*c2*z1 + b1*b3*c1*c2*z1 + a1*b1*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a2*b1*c3*z1 + a1*a2*b1*c3*z1 + a2*a3*b1*c3*z1 + a3*b2*c3*z1 + a1*a3*b2*c3*z1 + a2*a3*b2*c3*z1 + a1*b1*b2*c3*z1 + a2*b1*b3*c3*z1 + a1*b2*b3*c3*z1 + a2*b2*b3*c3*z1 + a2*b1*c1*c3*z1 + a1*b2*c1*c3*z1 + b1*b2*c1*c3*z1 + a1*b1*b2*c1*c3*z1 + a3*b1*b2*c1*c3*z1 + a1*b2*b3*c1*c3*z1 + b1*b2*b3*c1*c3*z1 + a1*a3*c2*c3*z1 + b1*c2*c3*z1 + a1*a2*b1*c2*c3*z1 + a1*a3*b1*c2*c3*z1 + b2*c2*c3*z1 + a3*b2*c2*c3*z1 + a1*b1*b2*c2*c3*z1 + a1*a2*b1*b2*c2*c3*z1 + b3*c2*c3*z1 + a2*b3*c2*c3*z1 + b1*b3*c2*c3*z1 + a2*b1*b3*c2*c3*z1 + a1*a2*b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + a1*b2*b3*c2*c3*z1 + a2*b2*b3*c2*c3*z1 + c1*c2*c3*z1 + a2*b1*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + a2*b1*b2*c1*c2*c3*z1 + a1*a2*b3*c1*c2*c3*z1 + a1*b1*b3*c1*c2*c3*z1 + a2*b1*b3*c1*c2*c3*z1 + b1*b2*b3*c1*c2*c3*z1 + a3*b2*x1*z1 + a2*a3*c1*x1*z1 + b2*b3*c1*x1*z1 + a1*a3*c2*x1*z1 + a2*a3*c2*x1*z1 + b3*c2*x1*z1 + a1*b3*c2*x1*z1 + a2*b3*c2*x1*z1 + a3*b3*c2*x1*z1 + a3*b2*c1*c2*x1*z1 + b2*c3*x1*z1 + b1*b2*c3*x1*z1 + b2*b3*c3*x1*z1 + b2*c1*c3*x1*z1 + a1*b2*c1*c3*x1*z1 + a2*b3*c1*c3*x1*z1 + b2*b3*c1*c3*x1*z1 + b3*c2*c3*x1*z1 + a1*b3*c2*c3*x1*z1 + a2*b3*c2*c3*x1*z1 + b2*b3*c1*c2*c3*x1*z1 + a3*x2*z1 + a1*a3*x2*z1 + a1*a2*a3*x2*z1 + a3*b1*x2*z1 + a1*a3*b1*x2*z1 + a3*b2*x2*z1 + a1*a3*b2*x2*z1 + a3*b1*b2*x2*z1 + a1*a2*b3*x2*z1 + a1*a3*b3*x2*z1 + a1*b1*b3*x2*z1 + a1*b2*b3*x2*z1 + a2*a3*b1*c1*x2*z1 + a3*b1*b2*c1*x2*z1 + b1*b3*c1*x2*z1 + a2*b1*b3*c1*x2*z1 + a3*b1*b3*c1*x2*z1 + b1*b2*b3*c1*x2*z1 + a1*a3*c2*x2*z1 + a2*a3*c2*x2*z1 + a2*a3*b1*c2*x2*z1 + a1*a3*b2*c2*x2*z1 + b3*c2*x2*z1 + a1*b3*c2*x2*z1 + a2*b3*c2*x2*z1 + a3*b3*c2*x2*z1 + b1*b3*c2*x2*z1 + a1*b1*b3*c2*x2*z1 + a2*b1*b3*c2*x2*z1 + a3*b1*b3*c2*x2*z1 + a1*b2*b3*c2*x2*z1 + a3*b1*c1*c2*x2*z1 + a3*b1*b2*c1*c2*x2*z1 + b1*b2*b3*c1*c2*x2*z1 + a1*c3*x2*z1 + a1*b1*c3*x2*z1 + a1*b1*b2*c3*x2*z1 + b3*c3*x2*z1 + a1*a2*b3*c3*x2*z1 + b1*b3*c3*x2*z1 + b2*b3*c3*x2*z1 + a1*b2*b3*c3*x2*z1 + b1*b2*b3*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + a2*b1*b3*c1*c3*x2*z1 + b1*b2*b3*c1*c3*x2*z1 + b3*c2*c3*x2*z1 + a1*b3*c2*c3*x2*z1 + a2*b3*c2*c3*x2*z1 + b1*b3*c2*c3*x2*z1 + a2*b1*b3*c2*c3*x2*z1 + a1*b2*b3*c2*c3*x2*z1 + b1*b3*c1*c2*c3*x2*z1 + b1*b2*b3*c1*c2*c3*x2*z1 + a1*a2*x3*z1 + a2*a3*x3*z1 + a2*b1*x3*z1 + a2*a3*b1*x3*z1 + a1*b2*x3*z1 + a2*b2*x3*z1 + a1*a2*b2*x3*z1 + a2*a3*b2*x3*z1 + a1*b1*b2*x3*z1 + a2*a3*b1*b2*x3*z1 + a1*a2*b3*x3*z1 + a2*a3*b3*x3*z1 + a2*a3*b1*b3*x3*z1 + a1*a2*b2*b3*x3*z1 + a1*a3*b2*b3*x3*z1 + a1*a2*b1*b2*b3*x3*z1 + a1*a3*b1*b2*b3*x3*z1 + a2*b1*c1*x3*z1 + a2*b1*b2*c1*x3*z1 + a2*b1*b3*c1*x3*z1 + a2*c2*x3*z1 + a3*c2*x3*z1 + b1*c2*x3*z1 + a1*b1*c2*x3*z1 + a3*b1*c2*x3*z1 + a2*b2*c2*x3*z1 + a3*b2*c2*x3*z1 + b1*b2*c2*x3*z1 + a2*b1*b2*c2*x3*z1 + a3*b1*b2*c2*x3*z1 + b3*c2*x3*z1 + a1*b3*c2*x3*z1 + a2*b3*c2*x3*z1 + a3*b3*c2*x3*z1 + b1*b3*c2*x3*z1 + a1*b1*b3*c2*x3*z1 + a2*b1*b3*c2*x3*z1 + a3*b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + a1*b2*b3*c2*x3*z1 + a2*b2*b3*c2*x3*z1 + b1*b2*b3*c2*x3*z1 + a2*b1*b2*b3*c2*x3*z1 + b1*c1*c2*x3*z1 + b1*b2*b3*c1*c2*x3*z1 + a2*c3*x3*z1 + a2*b2*c3*x3*z1 + a2*b1*b3*c3*x3*z1 + a1*b2*b3*c3*x3*z1 + a2*b2*b3*c3*x3*z1 + a1*b1*b2*b3*c3*x3*z1 + b1*c2*c3*x3*z1 + b1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + a2*a3*y1*z1 + a3*b2*y1*z1 + b2*b3*y1*z1 + a2*a3*c1*y1*z1 + b2*b3*c1*y1*z1 + a1*a3*c2*y1*z1 + a2*a3*c2*y1*z1 + a3*b1*c2*y1*z1 + a3*b2*c2*y1*z1 + b3*c2*y1*z1 + a1*b3*c2*y1*z1 + a2*b3*c2*y1*z1 + a3*b3*c2*y1*z1 + b1*b3*c2*y1*z1 + a3*b2*c1*c2*y1*z1 + a1*b2*c3*y1*z1 + a2*b3*c3*y1*z1 + b2*c1*c3*y1*z1 + a1*b2*c1*c3*y1*z1 + b1*b2*c1*c3*y1*z1 + a2*b3*c1*c3*y1*z1 + b2*b3*c1*c3*y1*z1 + b3*c2*c3*y1*z1 + a1*b3*c2*c3*y1*z1 + a2*b3*c2*c3*y1*z1 + b1*b3*c2*c3*y1*z1 + b2*b3*c2*c3*y1*z1 + b2*b3*c1*c2*c3*y1*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b1*y2*z1 + a1*a3*b1*y2*z1 + a3*b2*y2*z1 + a1*a3*b2*y2*z1 + a1*a2*b3*y2*z1 + a1*a3*b3*y2*z1 + a1*b1*b3*y2*z1 + a2*b1*b3*y2*z1 + a3*b1*b3*y2*z1 + b2*b3*y2*z1 + a1*b2*b3*y2*z1 + a3*b1*c1*y2*z1 + a2*a3*b1*c1*y2*z1 + a3*b1*b2*c1*y2*z1 + b1*b3*c1*y2*z1 + a2*b1*b3*c1*y2*z1 + a3*b1*b3*c1*y2*z1 + b1*b2*b3*c1*y2*z1 + a1*a3*c2*y2*z1 + a2*a3*c2*y2*z1 + a3*b1*c2*y2*z1 + a2*a3*b1*c2*y2*z1 + a3*b2*c2*y2*z1 + a1*a3*b2*c2*y2*z1 + b3*c2*y2*z1 + a1*b3*c2*y2*z1 + a2*b3*c2*y2*z1 + a3*b3*c2*y2*z1 + a1*b1*b3*c2*y2*z1 + a2*b1*b3*c2*y2*z1 + a3*b1*b3*c2*y2*z1 + a1*b2*b3*c2*y2*z1 + b1*b2*b3*c2*y2*z1 + a3*b1*c1*c2*y2*z1 + a3*b1*b2*c1*c2*y2*z1 + b1*b2*b3*c1*c2*y2*z1 + a1*c3*y2*z1 + b1*c3*y2*z1 + a1*b1*c3*y2*z1 + a1*b1*b2*c3*y2*z1 + a1*b3*c3*y2*z1 + a2*b3*c3*y2*z1 + a1*a2*b3*c3*y2*z1 + a1*b2*b3*c3*y2*z1 + b1*b2*b3*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + b1*b3*c1*c3*y2*z1 + a2*b1*b3*c1*c3*y2*z1 + b1*b2*b3*c1*c3*y2*z1 + b3*c2*c3*y2*z1 + a1*b3*c2*c3*y2*z1 + a2*b3*c2*c3*y2*z1 + a2*b1*b3*c2*c3*y2*z1 + b2*b3*c2*c3*y2*z1 + a1*b2*b3*c2*c3*y2*z1 + b1*b3*c1*c2*c3*y2*z1 + b1*b2*b3*c1*c2*c3*y2*z1 + a1*a2*y3*z1 + a2*a3*y3*z1 + a2*a3*b1*y3*z1 + a1*a2*b2*y3*z1 + a2*a3*b2*y3*z1 + b1*b2*y3*z1 + a1*b1*b2*y3*z1 + a2*b1*b2*y3*z1 + a3*b1*b2*y3*z1 + a2*a3*b1*b2*y3*z1 + a1*a2*b3*y3*z1 + a2*a3*b3*y3*z1 + a2*b1*b3*y3*z1 + a2*a3*b1*b3*y3*z1 + b2*b3*y3*z1 + a1*a2*b2*b3*y3*z1 + a3*b2*b3*y3*z1 + a1*a3*b2*b3*y3*z1 + a1*a2*b1*b2*b3*y3*z1 + a1*a3*b1*b2*b3*y3*z1 + a2*b1*c1*y3*z1 + b1*b2*c1*y3*z1 + a2*b1*b2*c1*y3*z1 + a2*b1*b3*c1*y3*z1 + a2*c2*y3*z1 + a3*c2*y3*z1 + b1*c2*y3*z1 + a1*b1*c2*y3*z1 + a3*b1*c2*y3*z1 + b2*c2*y3*z1 + a2*b2*c2*y3*z1 + a3*b2*c2*y3*z1 + b1*b2*c2*y3*z1 + a2*b1*b2*c2*y3*z1 + a3*b1*b2*c2*y3*z1 + b3*c2*y3*z1 + a1*b3*c2*y3*z1 + a2*b3*c2*y3*z1 + a3*b3*c2*y3*z1 + a1*b1*b3*c2*y3*z1 + a2*b1*b3*c2*y3*z1 + a3*b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + a1*b2*b3*c2*y3*z1 + a2*b2*b3*c2*y3*z1 + a2*b1*b2*b3*c2*y3*z1 + b1*c1*c2*y3*z1 + b1*b2*b3*c1*c2*y3*z1 + a2*c3*y3*z1 + b2*c3*y3*z1 + a2*b2*c3*y3*z1 + a2*b1*b3*c3*y3*z1 + a1*b2*b3*c3*y3*z1 + a2*b2*b3*c3*y3*z1 + a1*b1*b2*b3*c3*y3*z1 + b1*c2*c3*y3*z1 + b1*b3*c2*c3*y3*z1 + b2*b3*c2*c3*y3*z1 + a1*a2*a3*z2 + a1*a3*b1*z2 + a2*a3*b1*z2 + a1*a3*b1*b2*z2 + a2*a3*b1*b2*z2 + a1*a2*b3*z2 + a1*b1*b3*z2 + a2*a3*b1*b3*z2 + a1*a3*b1*c1*z2 + a1*a3*b3*c1*z2 + a2*b1*b3*c1*z2 + a1*b1*b2*b3*c1*z2 + a2*b1*b2*b3*c1*z2 + a3*b1*b2*b3*c1*z2 + a1*a3*b1*c2*z2 + a1*a2*a3*b1*c2*z2 + a1*a2*a3*b1*b2*c2*z2 + a1*a2*b3*c2*z2 + a2*b1*b3*c2*z2 + a1*a2*a3*b1*b3*c2*z2 + a1*b1*b2*b3*c2*z2 + a2*b1*b2*b3*c2*z2 + a1*a2*b1*b2*b3*c2*z2 + a3*b1*c1*c2*z2 + a1*a3*b1*c1*c2*z2 + a2*a3*b1*c1*c2*z2 + a3*b1*b2*c1*c2*z2 + a2*a3*b1*b2*c1*c2*z2 + a2*b1*b3*c1*c2*z2 + a3*b1*b3*c1*c2*z2 + a2*a3*b1*b3*c1*c2*z2 + b1*b2*b3*c1*c2*z2 + a2*b1*b2*b3*c1*c2*z2 + a1*b1*c3*z2 + a1*a2*b2*c3*z2 + a2*b1*b2*c3*z2 + a2*b1*b3*c3*z2 + a1*a2*c1*c3*z2 + a1*a3*c1*c3*z2 + a1*b1*c1*c3*z2 + a2*b1*c1*c3*z2 + a3*b1*c1*c3*z2 + a1*b1*b2*c1*c3*z2 + a3*b1*b2*c1*c3*z2 + a1*b3*c1*c3*z2 + a2*b1*b3*c1*c3*z2 + a3*b1*b3*c1*c3*z2 + b1*b2*b3*c1*c3*z2 + a1*a2*b1*c2*c3*z2 + a1*a3*b1*c2*c3*z2 + a1*b1*b2*c2*c3*z2 + a1*a2*b1*b2*c2*c3*z2 + a1*b1*b3*c2*c3*z2 + a1*a2*b1*b3*c2*c3*z2 + c1*c2*c3*z2 + a1*a2*b1*c1*c2*c3*z2 + a1*b2*c1*c2*c3*z2 + a1*a2*b2*c1*c2*c3*z2 + b1*b2*c1*c2*c3*z2 + a1*b1*b2*c1*c2*c3*z2 + a2*b1*b2*c1*c2*c3*z2 + a1*b1*b3*c1*c2*c3*z2 + a2*b1*b3*c1*c2*c3*z2 + b1*b2*b3*c1*c2*c3*z2 + a1*a2*a3*x1*z2 + a1*a3*b1*x1*z2 + a1*a3*b1*b2*x1*z2 + b3*x1*z2 + a2*b3*x1*z2 + a3*b3*x1*z2 + b1*b3*x1*z2 + a2*b1*b3*x1*z2 + a1*a2*b1*b3*x1*z2 + a3*b1*b3*x1*z2 + a1*a3*b1*b3*x1*z2 + a1*b2*b3*x1*z2 + a2*a3*c1*x1*z2 + a2*a3*b1*c1*x1*z2 + a3*b2*c1*x1*z2 + a3*b1*b2*c1*x1*z2 + b3*c1*x1*z2 + a2*b3*c1*x1*z2 + a3*b3*c1*x1*z2 + b1*b3*c1*x1*z2 + a1*b1*b3*c1*x1*z2 + a2*b1*b3*c1*x1*z2 + a3*b1*b3*c1*x1*z2 + b2*b3*c1*x1*z2 + b1*b2*b3*c1*x1*z2 + a2*a3*c2*x1*z2 + a2*a3*b1*c2*x1*z2 + a1*a3*b2*c2*x1*z2 + b3*c2*x1*z2 + a2*b3*c2*x1*z2 + a3*b3*c2*x1*z2 + b1*b3*c2*x1*z2 + a1*b1*b3*c2*x1*z2 + a2*b1*b3*c2*x1*z2 + a3*b1*b3*c2*x1*z2 + b2*b3*c2*x1*z2 + b1*b2*b3*c2*x1*z2 + a1*b1*b2*b3*c2*x1*z2 + a3*b2*c1*c2*x1*z2 + a3*b1*b2*c1*c2*x1*z2 + b2*b3*c1*c2*x1*z2 + b1*b2*b3*c1*c2*x1*z2 + a1*b2*c3*x1*z2 + b3*c3*x1*z2 + a1*a2*b3*c3*x1*z2 + b1*b3*c3*x1*z2 + a1*b1*b3*c3*x1*z2 + b2*b3*c3*x1*z2 + a1*b2*b3*c3*x1*z2 + b1*b2*b3*c3*x1*z2 + c1*c3*x1*z2 + b1*c1*c3*x1*z2 + b3*c1*c3*x1*z2 + a2*b3*c1*c3*x1*z2 + b1*b3*c1*c3*x1*z2 + a2*b1*b3*c1*c3*x1*z2 + b2*b3*c1*c3*x1*z2 + b1*b2*b3*c1*c3*x1*z2 + b3*c2*c3*x1*z2 + a2*b3*c2*c3*x1*z2 + b1*b3*c2*c3*x1*z2 + a2*b1*b3*c2*c3*x1*z2 + a1*b2*b3*c2*c3*x1*z2 + b2*b3*c1*c2*c3*x1*z2 + b1*b2*b3*c1*c2*c3*x1*z2 + a1*a3*x2*z2 + a3*b1*x2*z2 + a1*a3*b1*x2*z2 + a3*b1*b2*x2*z2 + a1*a3*b1*b2*x2*z2 + a1*b3*x2*z2 + b1*b3*x2*z2 + a1*b1*b3*x2*z2 + a2*b1*b3*x2*z2 + a1*a2*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a1*a3*b1*b3*x2*z2 + a3*b1*c1*x2*z2 + a3*b1*b2*c1*x2*z2 + b1*b3*c1*x2*z2 + a2*b1*b3*c1*x2*z2 + a3*b1*b3*c1*x2*z2 + a1*b3*c2*x2*z2 + b1*b3*c2*x2*z2 + a1*b1*b3*c2*x2*z2 + b1*b2*b3*c2*x2*z2 + a1*b1*b2*b3*c2*x2*z2 + b1*b3*c1*c2*x2*z2 + b1*b2*b3*c1*c2*x2*z2 + a1*b1*c3*x2*z2 + a1*b2*c3*x2*z2 + a1*b1*b2*c3*x2*z2 + b1*b3*c3*x2*z2 + a1*b1*b3*c3*x2*z2 + a1*b1*c1*c3*x2*z2 + a1*b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + b1*b3*c1*c3*x2*z2 + a1*b1*b2*x3*z2 + a1*a2*b1*b2*b3*x3*z2 + a1*a3*b1*b2*b3*x3*z2 + a1*a2*c1*x3*z2 + a1*a3*c1*x3*z2 + a1*b1*c1*x3*z2 + a1*a3*b2*c1*x3*z2 + a1*b3*c1*x3*z2 + a1*a2*b3*c1*x3*z2 + a1*b1*b3*c1*x3*z2 + a1*b2*b3*c1*x3*z2 + a1*b1*b2*b3*c1*x3*z2 + a1*b1*c2*x3*z2 + a1*b1*b3*c2*x3*z2 + a1*b2*c1*c2*x3*z2 + a1*b2*b3*c1*c2*x3*z2 + a1*b1*b2*b3*c3*x3*z2 + a3*y1*z2 + a1*a3*y1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a3*b1*y1*z2 + a1*a3*b1*y1*z2 + a3*b1*b2*y1*z2 + a1*a3*b1*b2*y1*z2 + a1*b3*y1*z2 + a2*b3*y1*z2 + a3*b3*y1*z2 + b1*b3*y1*z2 + a1*a2*b1*b3*y1*z2 + a1*a3*b1*b3*y1*z2 + b2*b3*y1*z2 + a1*b2*b3*y1*z2 + a2*a3*c1*y1*z2 + a2*a3*b1*c1*y1*z2 + a3*b2*c1*y1*z2 + a3*b1*b2*c1*y1*z2 + a1*b3*c1*y1*z2 + a2*b3*c1*y1*z2 + a3*b3*c1*y1*z2 + a1*b1*b3*c1*y1*z2 + a2*b1*b3*c1*y1*z2 + a3*b1*b3*c1*y1*z2 + b2*b3*c1*y1*z2 + b1*b2*b3*c1*y1*z2 + a2*a3*c2*y1*z2 + a2*a3*b1*c2*y1*z2 + a3*b2*c2*y1*z2 + a1*a3*b2*c2*y1*z2 + a1*b3*c2*y1*z2 + a2*b3*c2*y1*z2 + a3*b3*c2*y1*z2 + a1*b1*b3*c2*y1*z2 + a2*b1*b3*c2*y1*z2 + a3*b1*b3*c2*y1*z2 + b2*b3*c2*y1*z2 + a1*b1*b2*b3*c2*y1*z2 + a3*b2*c1*c2*y1*z2 + a3*b1*b2*c1*c2*y1*z2 + b2*b3*c1*c2*y1*z2 + b1*b2*b3*c1*c2*y1*z2 + b1*c3*y1*z2 + a1*b1*c3*y1*z2 + b2*c3*y1*z2 + b1*b2*c3*y1*z2 + b3*c3*y1*z2 + a2*b3*c3*y1*z2 + a1*a2*b3*c3*y1*z2 + a1*b1*b3*c3*y1*z2 + a1*b2*b3*c3*y1*z2 + b1*b2*b3*c3*y1*z2 + c1*c3*y1*z2 + b1*c1*c3*y1*z2 + b3*c1*c3*y1*z2 + a2*b3*c1*c3*y1*z2 + b1*b3*c1*c3*y1*z2 + a2*b1*b3*c1*c3*y1*z2 + b2*b3*c1*c3*y1*z2 + b1*b2*b3*c1*c3*y1*z2 + b3*c2*c3*y1*z2 + a2*b3*c2*c3*y1*z2 + b1*b3*c2*c3*y1*z2 + a2*b1*b3*c2*c3*y1*z2 + b2*b3*c2*c3*y1*z2 + a1*b2*b3*c2*c3*y1*z2 + b2*b3*c1*c2*c3*y1*z2 + b1*b2*b3*c1*c2*c3*y1*z2 + a1*a3*b1*y2*z2 + a1*a3*b1*b2*y2*z2 + a1*a2*b1*b3*y2*z2 + a1*a3*b1*b3*y2*z2 + a3*b1*c1*y2*z2 + a3*b1*b2*c1*y2*z2 + a2*b1*b3*c1*y2*z2 + a3*b1*b3*c1*y2*z2 + a1*b1*b3*c2*y2*z2 + a1*b1*b2*b3*c2*y2*z2 + b1*b3*c1*c2*y2*z2 + b1*b2*b3*c1*c2*y2*z2 + b1*b2*c3*y2*z2 + a1*b1*b2*c3*y2*z2 + a1*b1*b3*c3*y2*z2 + a1*b1*c1*c3*y2*z2 + a1*b2*c1*c3*y2*z2 + b1*b2*c1*c3*y2*z2 + b1*b3*c1*c3*y2*z2 + a1*b1*b2*y3*z2 + a1*a2*b1*b2*b3*y3*z2 + a1*a3*b1*b2*b3*y3*z2 + a1*a2*c1*y3*z2 + a1*a3*c1*y3*z2 + a1*b1*c1*y3*z2 + a1*b2*c1*y3*z2 + a1*a3*b2*c1*y3*z2 + a1*a2*b3*c1*y3*z2 + a1*b1*b3*c1*y3*z2 + a1*b2*b3*c1*y3*z2 + a1*b1*b2*b3*c1*y3*z2 + a1*b1*c2*y3*z2 + a1*b1*b3*c2*y3*z2 + a1*b2*c1*c2*y3*z2 + a1*b2*b3*c1*c2*y3*z2 + a1*b1*b2*b3*c3*y3*z2 + a1*a2*a3*z1*z2 + a3*b1*b2*z1*z2 + a1*a3*b1*b2*z1*z2 + a1*b1*b3*z1*z2 + a1*a2*b1*b3*z1*z2 + a1*a3*b1*b3*z1*z2 + a1*b2*b3*z1*z2 + a2*a3*b1*c1*z1*z2 + a3*b1*b2*c1*z1*z2 + b1*b3*c1*z1*z2 + a2*b1*b3*c1*z1*z2 + a3*b1*b3*c1*z1*z2 + b1*b2*b3*c1*z1*z2 + a2*a3*b1*c2*z1*z2 + a1*a3*b2*c2*z1*z2 + b1*b3*c2*z1*z2 + a2*b1*b3*c2*z1*z2 + a3*b1*b3*c2*z1*z2 + a1*b1*b2*b3*c2*z1*z2 + a3*b1*b2*c1*c2*z1*z2 + b1*b2*b3*c1*c2*z1*z2 + a1*b1*c3*z1*z2 + a1*a2*b3*c3*z1*z2 + a1*b1*b3*c3*z1*z2 + a1*b2*b3*c3*z1*z2 + b1*b2*b3*c3*z1*z2 + b1*c1*c3*z1*z2 + b1*b3*c1*c3*z1*z2 + a2*b1*b3*c1*c3*z1*z2 + b1*b2*b3*c1*c3*z1*z2 + b1*b3*c2*c3*z1*z2 + a2*b1*b3*c2*c3*z1*z2 + a1*b2*b3*c2*c3*z1*z2 + b1*b2*b3*c1*c2*c3*z1*z2 + a2*a3*b1*z3 + a1*a3*b2*z3 + a1*a2*a3*b2*z3 + a1*a2*b1*b2*z3 + a1*a3*b1*b2*z3 + a1*a2*b2*b3*z3 + a1*a3*b2*b3*z3 + a1*a2*a3*b2*b3*z3 + a1*a3*b1*b2*b3*z3 + a2*a3*b1*b2*b3*z3 + a2*b1*c1*z3 + a2*a3*b1*c1*z3 + a2*b2*c1*z3 + a1*a2*b2*c1*z3 + a3*b2*c1*z3 + a2*a3*b2*c1*z3 + a1*a2*a3*b2*c1*z3 + a1*b1*b2*c1*z3 + a2*b1*b2*c1*z3 + a1*a2*b1*b2*c1*z3 + a3*b1*b2*c1*z3 + a1*a3*b1*b2*c1*z3 + a1*a2*b1*b3*c1*z3 + a2*b2*b3*c1*z3 + a3*b2*b3*c1*z3 + a2*b1*b2*b3*c1*z3 + a1*a2*b1*b2*b3*c1*z3 + a1*a3*b1*b2*b3*c1*z3 + a1*c2*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a2*a3*b1*c2*z3 + a1*b2*c2*z3 + a1*a2*b2*c2*z3 + a1*a2*b3*c2*z3 + a1*a3*b3*c2*z3 + a1*a2*a3*b3*c2*z3 + a1*a2*b2*b3*c2*z3 + a1*a2*a3*b2*b3*c2*z3 + a1*b1*b2*b3*c2*z3 + a1*a3*b1*b2*b3*c2*z3 + a2*a3*b1*b2*b3*c2*z3 + a1*a2*c1*c2*z3 + a1*b1*c1*c2*z3 + a3*b1*c1*c2*z3 + a1*a3*b1*c1*c2*z3 + a2*a3*b1*c1*c2*z3 + a1*a3*b2*c1*c2*z3 + a2*a3*b2*c1*c2*z3 + b1*b2*c1*c2*z3 + a1*b1*b2*c1*c2*z3 + a2*b1*b2*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a2*b1*b3*c1*c2*z3 + a3*b1*b3*c1*c2*z3 + a2*b2*b3*c1*c2*z3 + a1*a2*b2*b3*c1*c2*z3 + a1*b1*b2*b3*c1*c2*z3 + a3*b1*b2*b3*c1*c2*z3 + a2*a3*b1*c3*z3 + a1*a2*b2*c3*z3 + a3*b1*b2*b3*c3*z3 + a1*b1*b2*c1*c3*z3 + a2*b1*b2*c1*c3*z3 + a1*b1*b2*b3*c1*c3*z3 + a1*a3*c2*c3*z3 + a1*b1*c2*c3*z3 + a2*b1*c2*c3*z3 + a3*b1*c2*c3*z3 + a1*a3*b1*c2*c3*z3 + a1*b2*c2*c3*z3 + a1*a2*a3*b2*c2*c3*z3 + a1*b3*c2*c3*z3 + a1*a2*b3*c2*c3*z3 + a1*a2*a3*b3*c2*c3*z3 + a1*b1*b3*c2*c3*z3 + a3*b1*b3*c2*c3*z3 + a1*b2*b3*c2*c3*z3 + a1*a2*b2*b3*c2*c3*z3 + a1*b1*b2*b3*c2*c3*z3 + a2*b1*b2*b3*c2*c3*z3 + c1*c2*c3*z3 + a2*c1*c2*c3*z3 + a2*a3*b1*c1*c2*c3*z3 + a3*b2*c1*c2*c3*z3 + b1*b2*c1*c2*c3*z3 + a3*b1*b2*c1*c2*c3*z3 + a1*b1*b3*c1*c2*c3*z3 + a2*b1*b3*c1*c2*c3*z3 + b2*b3*c1*c2*c3*z3 + a1*b2*b3*c1*c2*c3*z3 + a2*b2*b3*c1*c2*c3*z3 + b1*b2*b3*c1*c2*c3*z3 + a1*a2*x1*z3 + a1*a2*b1*x1*z3 + a1*b2*x1*z3 + a1*a2*b2*x1*z3 + a1*a3*b2*x1*z3 + a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + a1*a2*b1*b2*x1*z3 + a1*a3*b1*b2*x1*z3 + a2*a3*b1*b2*x1*z3 + a1*a2*b3*x1*z3 + a1*a2*b1*b3*x1*z3 + a1*a3*b2*b3*x1*z3 + a2*a3*b2*b3*x1*z3 + a1*a2*b1*b2*b3*x1*z3 + a1*a3*b1*b2*b3*x1*z3 + a2*c1*x1*z3 + a2*b1*c1*x1*z3 + b2*c1*x1*z3 + a2*b2*c1*x1*z3 + a3*b2*c1*x1*z3 + b1*b2*c1*x1*z3 + a2*b1*b2*c1*x1*z3 + a3*b1*b2*c1*x1*z3 + a2*b3*c1*x1*z3 + a2*b1*b3*c1*x1*z3 + a3*b2*b3*c1*x1*z3 + a3*b1*b2*b3*c1*x1*z3 + c2*x1*z3 + a1*c2*x1*z3 + a2*c2*x1*z3 + a1*b1*c2*x1*z3 + a2*b1*c2*x1*z3 + a1*b1*b2*c2*x1*z3 + a1*b2*b3*c2*x1*z3 + a1*b1*b2*b3*c2*x1*z3 + a2*b1*b2*b3*c2*x1*z3 + c1*c2*x1*z3 + b1*c1*c2*x1*z3 + b2*b3*c1*c2*x1*z3 + b1*b2*b3*c1*c2*x1*z3 + a1*b2*c3*x1*z3 + a2*b2*c3*x1*z3 + a1*b1*b2*c3*x1*z3 + a1*b2*b3*c3*x1*z3 + a1*b1*b2*b3*c3*x1*z3 + b2*c1*c3*x1*z3 + b1*b2*c1*c3*x1*z3 + b2*b3*c1*c3*x1*z3 + b1*b2*b3*c1*c3*x1*z3 + c2*c3*x1*z3 + b1*c2*c3*x1*z3 + b2*c2*c3*x1*z3 + a1*a3*x2*z3 + b1*x2*z3 + a2*b1*x2*z3 + a1*a2*b1*x2*z3 + a3*b1*x2*z3 + a1*a3*b2*x2*z3 + a1*a2*a3*b2*x2*z3 + b1*b2*x2*z3 + a2*b1*b2*x2*z3 + a1*a2*b1*b2*x2*z3 + a3*b1*b2*x2*z3 + a2*a3*b1*b2*x2*z3 + a1*b3*x2*z3 + a1*a2*a3*b3*x2*z3 + a1*a2*b1*b3*x2*z3 + a1*a3*b1*b3*x2*z3 + a2*a3*b1*b3*x2*z3 + a1*b2*b3*x2*z3 + a1*a2*b1*b2*b3*x2*z3 + a1*a3*b1*b2*b3*x2*z3 + c1*x2*z3 + a1*c1*x2*z3 + a2*c1*x2*z3 + a3*c1*x2*z3 + a1*a3*c1*x2*z3 + a2*a3*c1*x2*z3 + a2*b2*c1*x2*z3 + a3*b2*c1*x2*z3 + a1*a3*b2*c1*x2*z3 + b1*b2*c1*x2*z3 + a1*b1*b2*c1*x2*z3 + b3*c1*x2*z3 + a1*a2*b3*c1*x2*z3 + a3*b3*c1*x2*z3 + a1*b1*b3*c1*x2*z3 + a2*b1*b3*c1*x2*z3 + b2*b3*c1*x2*z3 + a2*b2*b3*c1*x2*z3 + a3*b2*b3*c1*x2*z3 + a1*b1*b2*b3*c1*x2*z3 + a1*c2*x2*z3 + a1*b1*c2*x2*z3 + a2*b1*c2*x2*z3 + a2*b1*b2*c2*x2*z3 + a1*b3*c2*x2*z3 + a1*a2*b3*c2*x2*z3 + b1*b3*c2*x2*z3 + a1*b2*b3*c2*x2*z3 + a1*a2*b2*b3*c2*x2*z3 + b1*b2*b3*c2*x2*z3 + a2*b1*b2*b3*c2*x2*z3 + b2*c1*c2*x2*z3 + b1*b2*c1*c2*x2*z3 + b3*c1*c2*x2*z3 + a1*b3*c1*c2*x2*z3 + a2*b3*c1*c2*x2*z3 + b2*b3*c1*c2*x2*z3 + a1*b2*b3*c1*c2*x2*z3 + a2*b1*c3*x2*z3 + a2*b1*b2*c3*x2*z3 + a1*b1*b3*c3*x2*z3 + a2*b1*b3*c3*x2*z3 + a1*b1*b2*b3*c3*x2*z3 + c1*c3*x2*z3 + b1*c1*c3*x2*z3 + b2*c1*c3*x2*z3 + b1*b2*c1*c3*x2*z3 + b3*c1*c3*x2*z3 + b2*b3*c1*c3*x2*z3 + a2*b1*x3*z3 + a1*a3*b2*x3*z3 + a1*a2*a3*b2*x3*z3 + b1*b2*x3*z3 + a1*b1*b2*x3*z3 + a2*b1*b2*x3*z3 + a3*b1*b2*x3*z3 + a1*a3*b1*b2*x3*z3 + a2*a3*b1*b2*x3*z3 + a1*a2*a3*b3*x3*z3 + a1*b2*b3*x3*z3 + a1*a3*b2*b3*x3*z3 + a2*b1*c1*x3*z3 + a3*b2*c1*x3*z3 + b2*b3*c1*x3*z3 + b1*b2*b3*c1*x3*z3 + a3*b1*b2*b3*c1*x3*z3 + a1*a3*c2*x3*z3 + a2*b1*c2*x3*z3 + a1*a2*b2*c2*x3*z3 + a1*a3*b2*c2*x3*z3 + b1*b2*c2*x3*z3 + a3*b1*b2*c2*x3*z3 + a1*b3*c2*x3*z3 + a1*a2*b3*c2*x3*z3 + a1*b2*b3*c2*x3*z3 + a1*a3*b2*b3*c2*x3*z3 + b1*b2*b3*c2*x3*z3 + a3*b1*b2*b3*c2*x3*z3 + a2*b1*c1*c2*x3*z3 + a2*b1*c3*x3*z3 + a1*b1*b2*c3*x3*z3 + a2*b1*b2*c3*x3*z3 + a1*b2*b3*c3*x3*z3 + b1*b2*c1*c3*x3*z3 + b1*b2*b3*c1*c3*x3*z3 + a2*b1*c2*c3*x3*z3 + b1*b2*b3*c2*c3*x3*z3 + a1*a2*y1*z3 + a2*b1*y1*z3 + a1*a2*b1*y1*z3 + a1*b2*y1*z3 + a1*a2*b2*y1*z3 + a1*a3*b2*y1*z3 + a2*a3*b2*y1*z3 + b1*b2*y1*z3 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + a1*a2*b1*b2*y1*z3 + a3*b1*b2*y1*z3 + a1*a3*b1*b2*y1*z3 + a2*a3*b1*b2*y1*z3 + a1*a2*b3*y1*z3 + a2*b1*b3*y1*z3 + a1*a2*b1*b3*y1*z3 + a2*b2*b3*y1*z3 + a1*a3*b2*b3*y1*z3 + a2*a3*b2*b3*y1*z3 + a2*b1*b2*b3*y1*z3 + a1*a2*b1*b2*b3*y1*z3 + a3*b1*b2*b3*y1*z3 + a1*a3*b1*b2*b3*y1*z3 + a2*c1*y1*z3 + a2*b1*c1*y1*z3 + b2*c1*y1*z3 + a2*b2*c1*y1*z3 + a3*b2*c1*y1*z3 + b1*b2*c1*y1*z3 + a2*b1*b2*c1*y1*z3 + a3*b1*b2*c1*y1*z3 + a2*b3*c1*y1*z3 + a2*b1*b3*c1*y1*z3 + a3*b2*b3*c1*y1*z3 + a3*b1*b2*b3*c1*y1*z3 + c2*y1*z3 + a1*c2*y1*z3 + a2*c2*y1*z3 + b1*c2*y1*z3 + a1*b1*c2*y1*z3 + a2*b1*c2*y1*z3 + b2*c2*y1*z3 + b1*b2*c2*y1*z3 + a1*b1*b2*c2*y1*z3 + a1*b2*b3*c2*y1*z3 + b1*b2*b3*c2*y1*z3 + a1*b1*b2*b3*c2*y1*z3 + a2*b1*b2*b3*c2*y1*z3 + c1*c2*y1*z3 + b1*c1*c2*y1*z3 + b2*b3*c1*c2*y1*z3 + b1*b2*b3*c1*c2*y1*z3 + a1*b2*c3*y1*z3 + a2*b2*c3*y1*z3 + b1*b2*c3*y1*z3 + a1*b1*b2*c3*y1*z3 + a1*b2*b3*c3*y1*z3 + b1*b2*b3*c3*y1*z3 + a1*b1*b2*b3*c3*y1*z3 + b2*c1*c3*y1*z3 + b1*b2*c1*c3*y1*z3 + b2*b3*c1*c3*y1*z3 + b1*b2*b3*c1*c3*y1*z3 + c2*c3*y1*z3 + b1*c2*c3*y1*z3 + b2*c2*c3*y1*z3 + a1*a3*y2*z3 + b1*y2*z3 + a1*b1*y2*z3 + a2*b1*y2*z3 + a1*a2*b1*y2*z3 + a3*b1*y2*z3 + a1*b2*y2*z3 + a1*a2*b2*y2*z3 + a1*a2*a3*b2*y2*z3 + a1*b1*b2*y2*z3 + a1*a2*b1*b2*y2*z3 + a2*a3*b1*b2*y2*z3 + a1*b3*y2*z3 + a1*a2*a3*b3*y2*z3 + b1*b3*y2*z3 + a1*b1*b3*y2*z3 + a2*b1*b3*y2*z3 + a1*a2*b1*b3*y2*z3 + a1*a3*b1*b3*y2*z3 + a2*a3*b1*b3*y2*z3 + a1*a2*b2*b3*y2*z3 + a1*a3*b2*b3*y2*z3 + b1*b2*b3*y2*z3 + a1*b1*b2*b3*y2*z3 + a2*b1*b2*b3*y2*z3 + a1*a2*b1*b2*b3*y2*z3 + a3*b1*b2*b3*y2*z3 + a1*a3*b1*b2*b3*y2*z3 + c1*y2*z3 + a1*c1*y2*z3 + a2*c1*y2*z3 + a3*c1*y2*z3 + a1*a3*c1*y2*z3 + a2*a3*c1*y2*z3 + a2*b1*c1*y2*z3 + b2*c1*y2*z3 + a2*b2*c1*y2*z3 + a1*a3*b2*c1*y2*z3 + b1*b2*c1*y2*z3 + a1*b1*b2*c1*y2*z3 + a1*b3*c1*y2*z3 + a2*b3*c1*y2*z3 + a1*a2*b3*c1*y2*z3 + a3*b3*c1*y2*z3 + a1*b1*b3*c1*y2*z3 + a2*b1*b3*c1*y2*z3 + a2*b2*b3*c1*y2*z3 + a3*b2*b3*c1*y2*z3 + b1*b2*b3*c1*y2*z3 + a1*b1*b2*b3*c1*y2*z3 + a1*c2*y2*z3 + a1*b1*c2*y2*z3 + a2*b1*b2*c2*y2*z3 + a1*b3*c2*y2*z3 + a1*a2*b3*c2*y2*z3 + b1*b3*c2*y2*z3 + a1*b2*b3*c2*y2*z3 + a1*a2*b2*b3*c2*y2*z3 + a2*b1*b2*b3*c2*y2*z3 + b2*c1*c2*y2*z3 + b1*b2*c1*c2*y2*z3 + b3*c1*c2*y2*z3 + a1*b3*c1*c2*y2*z3 + a2*b3*c1*c2*y2*z3 + a1*b2*b3*c1*c2*y2*z3 + b1*c3*y2*z3 + a2*b1*b2*c3*y2*z3 + a1*b1*b3*c3*y2*z3 + a2*b1*b3*c3*y2*z3 + b1*b2*b3*c3*y2*z3 + a1*b1*b2*b3*c3*y2*z3 + c1*c3*y2*z3 + b1*c1*c3*y2*z3 + b2*c1*c3*y2*z3 + b1*b2*c1*c3*y2*z3 + b3*c1*c3*y2*z3 + b2*b3*c1*c3*y2*z3 + a1*a2*b2*y3*z3 + a1*a2*a3*b2*y3*z3 + a1*a3*b1*b2*y3*z3 + a2*a3*b1*b2*y3*z3 + a1*a2*a3*b3*y3*z3 + a1*b2*b3*y3*z3 + a1*a2*b2*b3*y3*z3 + b1*b2*b3*y3*z3 + a1*b1*b2*b3*y3*z3 + a2*b1*b2*b3*y3*z3 + a3*b1*b2*b3*y3*z3 + b1*b2*c1*y3*z3 + b1*b2*b3*c1*y3*z3 + a3*b1*b2*b3*c1*y3*z3 + a1*a3*c2*y3*z3 + a1*a2*b2*c2*y3*z3 + a1*a3*b2*c2*y3*z3 + b1*b2*c2*y3*z3 + a3*b1*b2*c2*y3*z3 + a1*a2*b3*c2*y3*z3 + a1*b2*b3*c2*y3*z3 + a1*a3*b2*b3*c2*y3*z3 + a3*b1*b2*b3*c2*y3*z3 + a2*b1*c1*c2*y3*z3 + a1*b1*b2*c3*y3*z3 + a2*b1*b2*c3*y3*z3 + a1*b2*b3*c3*y3*z3 + b1*b2*b3*c3*y3*z3 + b1*b2*c1*c3*y3*z3 + b1*b2*b3*c1*c3*y3*z3 + a2*b1*c2*c3*y3*z3 + b1*b2*b3*c2*c3*y3*z3 + a1*a2*b1*z1*z3 + a1*b1*b2*z1*z3 + a1*a2*b1*b2*z1*z3 + a1*a3*b1*b2*z1*z3 + a2*a3*b1*b2*z1*z3 + a1*a2*b1*b3*z1*z3 + a1*a2*b2*b3*z1*z3 + a2*a3*b2*b3*z1*z3 + a1*a2*b1*b2*b3*z1*z3 + a1*a3*b1*b2*b3*z1*z3 + a2*b1*c1*z1*z3 + b1*b2*c1*z1*z3 + a2*b1*b2*c1*z1*z3 + a3*b1*b2*c1*z1*z3 + a2*b1*b3*c1*z1*z3 + a3*b1*b2*b3*c1*z1*z3 + c2*z1*z3 + a1*b1*c2*z1*z3 + a2*b1*c2*z1*z3 + a1*b2*c2*z1*z3 + a1*b1*b2*c2*z1*z3 + a2*b2*b3*c2*z1*z3 + a1*b1*b2*b3*c2*z1*z3 + a2*b1*b2*b3*c2*z1*z3 + b1*c1*c2*z1*z3 + b1*b2*b3*c1*c2*z1*z3 + a2*b2*c3*z1*z3 + a1*b1*b2*c3*z1*z3 + a1*b1*b2*b3*c3*z1*z3 + b1*b2*c1*c3*z1*z3 + b1*b2*b3*c1*c3*z1*z3 + b1*c2*c3*z1*z3 + b2*c2*c3*z1*z3 + a1*a2*b1*z2*z3 + a1*b1*b2*z2*z3 + a1*a2*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + a1*a2*b1*b3*z2*z3 + a1*a2*b1*b2*b3*z2*z3 + a1*a3*b1*b2*b3*z2*z3 + a1*b1*c1*z2*z3 + a1*b2*c1*z2*z3 + a1*a3*b2*c1*z2*z3 + a1*b1*b2*c1*z2*z3 + a1*a2*b3*c1*z2*z3 + a1*b2*b3*c1*z2*z3 + a1*b1*b2*b3*c1*z2*z3 + a1*b1*c2*z2*z3 + a1*b1*b2*c2*z2*z3 + a1*b1*b2*b3*c2*z2*z3 + a1*b2*b3*c1*c2*z2*z3 + a1*b1*b2*c3*z2*z3 + a1*b1*b2*b3*c3*z2*z3;
end;
#####################################################################
C2in109:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a1*a2*a3*b1 + a1*a2*a3*b2 + a1*a3*b1*b2 + a2*a3*b1*b2 + a1*a2*a3*b1*b3 + a1*a2*b2*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*c1 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a1*a3*b2*c1 + a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a2*b1*b3*c1 + a2*a3*b1*b3*c1 + a1*a2*a3*b1*b3*c1 + a1*a2*b1*b2*b3*c1 + a1*a3*b1*b2*b3*c1 + a1*a3*b1*c2 + a1*a2*a3*b2*c2 + a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*a3*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a3*b2*b3*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a1*a2*a3*b1*b2*b3*c2 + a2*a3*c1*c2 + a2*a3*b1*c1*c2 + a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a2*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a2*a3*b3*c1*c2 + b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + a1*a2*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a1*a2*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a1*a2*b1*b2*b3*c1*c2 + a1*a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*a3*b1*c3 + a1*a2*a3*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a2*b1*b2*c3 + a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*b1*b3*c3 + a1*b2*b3*c3 + a1*a2*a3*b2*b3*c3 + a1*a2*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a1*a2*c1*c3 + a2*a3*b1*c1*c3 + a1*a2*a3*b1*c1*c3 + a1*a2*b2*c1*c3 + a1*a3*b2*c1*c3 + a1*a2*a3*b2*c1*c3 + b1*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + b1*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a2*b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a1*a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*a2*b2*c2*c3 + a1*a2*a3*b2*c2*c3 + a1*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a1*a3*b1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*a2*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*a3*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a1*a2*a3*b1*b2*b3*c2*c3 + a2*c1*c2*c3 + a2*a3*c1*c2*c3 + a1*a2*a3*c1*c2*c3 + b1*c1*c2*c3 + a1*b1*c1*c2*c3 + a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a1*a3*b1*c1*c2*c3 + a1*a2*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a1*b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + a1*a2*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a1*b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*a3*b1*b2*c1*c2*c3 + a2*a3*b1*b2*c1*c2*c3 + a1*a2*a3*b1*b2*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a1*a2*a3*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a1*a2*a3*b1*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a2*a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*a3*b1*b2*b3*c1*c2*c3 + a2*a3*(-a1 + x1) + a2*a3*b1*(-a1 + x1) + a1*a2*a3*b2*(-a1 + x1) + a3*b1*b2*(-a1 + x1) + a1*a3*b1*b2*(-a1 + x1) + a1*a2*a3*b1*b2*(-a1 + x1) + a2*b3*(-a1 + x1) + a1*a2*b3*(-a1 + x1) + a1*a2*a3*b3*(-a1 + x1) + a2*b1*b3*(-a1 + x1) + a1*a2*b1*b3*(-a1 + x1) + a2*a3*b1*b3*(-a1 + x1) + a1*b2*b3*(-a1 + x1) + a2*b2*b3*(-a1 + x1) + a1*a2*b2*b3*(-a1 + x1) + a3*b2*b3*(-a1 + x1) + a1*a3*b2*b3*(-a1 + x1) + a2*a3*b2*b3*(-a1 + x1) + a1*a3*b1*b2*b3*(-a1 + x1) + a1*a2*a3*b1*b2*b3*(-a1 + x1) + a2*a3*c1*(-a1 + x1) + a2*a3*b1*c1*(-a1 + x1) + a3*b1*b2*c1*(-a1 + x1) + a2*a3*b1*b2*c1*(-a1 + x1) + a1*a2*b3*c1*(-a1 + x1) + a2*a3*b3*c1*(-a1 + x1) + a1*a2*a3*b3*c1*(-a1 + x1) + b2*b3*c1*(-a1 + x1) + a1*a2*b2*b3*c1*(-a1 + x1) + a3*b2*b3*c1*(-a1 + x1) + b1*b2*b3*c1*(-a1 + x1) + a1*b1*b2*b3*c1*(-a1 + x1) + a2*b1*b2*b3*c1*(-a1 + x1) + a2*a3*c2*(-a1 + x1) + a1*a2*a3*c2*(-a1 + x1) + a1*a3*b2*c2*(-a1 + x1) + a1*a2*a3*b2*c2*(-a1 + x1) + a3*b1*b2*c2*(-a1 + x1) + a1*a2*a3*b1*b2*c2*(-a1 + x1) + b3*c2*(-a1 + x1) + a1*b3*c2*(-a1 + x1) + a2*b3*c2*(-a1 + x1) + a1*a3*b3*c2*(-a1 + x1) + a1*a2*a3*b3*c2*(-a1 + x1) + a1*b1*b3*c2*(-a1 + x1) + a2*b1*b3*c2*(-a1 + x1) + a1*a3*b1*b3*c2*(-a1 + x1) + a1*a2*a3*b1*b3*c2*(-a1 + x1) + b2*b3*c2*(-a1 + x1) + a1*a2*b2*b3*c2*(-a1 + x1) + a3*b2*b3*c2*(-a1 + x1) + a1*a3*b2*b3*c2*(-a1 + x1) + a2*a3*b2*b3*c2*(-a1 + x1) + a1*a2*b1*b2*b3*c2*(-a1 + x1) + a3*b1*b2*b3*c2*(-a1 + x1) + a2*a3*b1*b2*b3*c2*(-a1 + x1) + a3*c1*c2*(-a1 + x1) + a3*b1*c1*c2*(-a1 + x1) + a1*a3*b2*c1*c2*(-a1 + x1) + a3*b1*b2*c1*c2*(-a1 + x1) + a1*a2*b3*c1*c2*(-a1 + x1) + a3*b3*c1*c2*(-a1 + x1) + a1*b1*b3*c1*c2*(-a1 + x1) + a2*b1*b3*c1*c2*(-a1 + x1) + a1*a2*b1*b3*c1*c2*(-a1 + x1) + a3*b1*b3*c1*c2*(-a1 + x1) + a1*b2*b3*c1*c2*(-a1 + x1) + a3*b2*b3*c1*c2*(-a1 + x1) + a1*b1*b2*b3*c1*c2*(-a1 + x1) + a1*a2*c3*(-a1 + x1) + a1*a2*a3*c3*(-a1 + x1) + a1*a2*b1*c3*(-a1 + x1) + a1*a2*a3*b1*c3*(-a1 + x1) + a2*b2*c3*(-a1 + x1) + a1*a2*b2*c3*(-a1 + x1) + a1*a3*b2*c3*(-a1 + x1) + a2*a3*b2*c3*(-a1 + x1) + a1*a2*a3*b2*c3*(-a1 + x1) + b1*b2*c3*(-a1 + x1) + a2*b1*b2*c3*(-a1 + x1) + a3*b1*b2*c3*(-a1 + x1) + a1*a3*b1*b2*c3*(-a1 + x1) + a2*a3*b1*b2*c3*(-a1 + x1) + a2*b3*c3*(-a1 + x1) + a1*a2*b3*c3*(-a1 + x1) + a1*a2*a3*b3*c3*(-a1 + x1) + b2*b3*c3*(-a1 + x1) + a3*b2*b3*c3*(-a1 + x1) + a1*a3*b2*b3*c3*(-a1 + x1) + a2*a3*b2*b3*c3*(-a1 + x1) + a1*a2*b1*b2*b3*c3*(-a1 + x1) + a2*c1*c3*(-a1 + x1) + a2*b1*c1*c3*(-a1 + x1) + b2*c1*c3*(-a1 + x1) + a1*b2*c1*c3*(-a1 + x1) + a1*a2*b2*c1*c3*(-a1 + x1) + a3*b2*c1*c3*(-a1 + x1) + a1*a3*b2*c1*c3*(-a1 + x1) + b1*b2*c1*c3*(-a1 + x1) + a1*a2*b1*b2*c1*c3*(-a1 + x1) + a3*b1*b2*c1*c3*(-a1 + x1) + a2*b3*c1*c3*(-a1 + x1) + a2*a3*b3*c1*c3*(-a1 + x1) + a2*b1*b3*c1*c3*(-a1 + x1) + b2*b3*c1*c3*(-a1 + x1) + a2*b2*b3*c1*c3*(-a1 + x1) + a1*a2*b2*b3*c1*c3*(-a1 + x1) + a3*b2*b3*c1*c3*(-a1 + x1) + b1*b2*b3*c1*c3*(-a1 + x1) + a2*b1*b2*b3*c1*c3*(-a1 + x1) + c2*c3*(-a1 + x1) + a1*a2*c2*c3*(-a1 + x1) + a3*c2*c3*(-a1 + x1) + a2*a3*c2*c3*(-a1 + x1) + a1*b1*c2*c3*(-a1 + x1) + a1*a2*b1*c2*c3*(-a1 + x1) + a3*b1*c2*c3*(-a1 + x1) + a1*a3*b1*c2*c3*(-a1 + x1) + a1*b2*c2*c3*(-a1 + x1) + a2*b2*c2*c3*(-a1 + x1) + a3*b2*c2*c3*(-a1 + x1) + a1*a3*b2*c2*c3*(-a1 + x1) + a1*a2*a3*b2*c2*c3*(-a1 + x1) + a1*a3*b1*b2*c2*c3*(-a1 + x1) + a1*a2*a3*b1*b2*c2*c3*(-a1 + x1) + a1*b3*c2*c3*(-a1 + x1) + a1*a3*b3*c2*c3*(-a1 + x1) + a2*a3*b3*c2*c3*(-a1 + x1) + b1*b3*c2*c3*(-a1 + x1) + a1*b1*b3*c2*c3*(-a1 + x1) + a1*a2*b1*b3*c2*c3*(-a1 + x1) + a1*a2*b2*b3*c2*c3*(-a1 + x1) + a1*a3*b2*b3*c2*c3*(-a1 + x1) + a1*a2*a3*b2*b3*c2*c3*(-a1 + x1) + b1*b2*b3*c2*c3*(-a1 + x1) + a1*b1*b2*b3*c2*c3*(-a1 + x1) + a1*a3*b1*b2*b3*c2*c3*(-a1 + x1) + a1*a2*a3*b1*b2*b3*c2*c3*(-a1 + x1) + a3*c1*c2*c3*(-a1 + x1) + a1*a3*c1*c2*c3*(-a1 + x1) + a2*a3*c1*c2*c3*(-a1 + x1) + a2*b1*c1*c2*c3*(-a1 + x1) + a3*b1*c1*c2*c3*(-a1 + x1) + a1*a3*b1*c1*c2*c3*(-a1 + x1) + a2*a3*b1*c1*c2*c3*(-a1 + x1) + a1*a3*b2*c1*c2*c3*(-a1 + x1) + b1*b2*c1*c2*c3*(-a1 + x1) + a2*a3*b1*b2*c1*c2*c3*(-a1 + x1) + a3*b3*c1*c2*c3*(-a1 + x1) + a1*a3*b3*c1*c2*c3*(-a1 + x1) + a2*a3*b3*c1*c2*c3*(-a1 + x1) + a2*b1*b3*c1*c2*c3*(-a1 + x1) + a1*b2*b3*c1*c2*c3*(-a1 + x1) + a2*b2*b3*c1*c2*c3*(-a1 + x1) + a3*b2*b3*c1*c2*c3*(-a1 + x1) + a2*a3*b2*b3*c1*c2*c3*(-a1 + x1) + a3*b1*b2*b3*c1*c2*c3*(-a1 + x1) + a2*a3*b1*b2*b3*c1*c2*c3*(-a1 + x1) + (a2*a3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b1*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b2*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b1*b2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*a2*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*a3*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*b2*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b2*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*b3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b1*b3*c1*(-a1 + x1)*(1 - a1 + x1))/2 + (b2*b3*c1*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b2*b3*c1*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b1*b2*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*b1*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b1*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a1*b2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*b3*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b3*c1*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b2*b3*c1*c2*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b1*b2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b1*b2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a2*b1*b3*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (b2*b3*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (a3*b2*b3*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b3*c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + (b1*b2*b3*c2*c3*(-a1 + x1)*(1 - a1 + x1))/2 + a1*a3*(-a2 + x2) + a1*a3*b1*(-a2 + x2) + a2*a3*b1*(-a2 + x2) + a1*a3*b2*(-a2 + x2) + a1*a2*a3*b2*(-a2 + x2) + a3*b1*b2*(-a2 + x2) + a1*a2*a3*b3*(-a2 + x2) + b1*b3*(-a2 + x2) + a1*a2*b1*b3*(-a2 + x2) + a1*a3*b1*b3*(-a2 + x2) + a1*a2*a3*b1*b3*(-a2 + x2) + a1*a2*a3*b1*b2*b3*(-a2 + x2) + a3*c1*(-a2 + x2) + a2*a3*c1*(-a2 + x2) + a1*a2*a3*c1*(-a2 + x2) + a3*b1*c1*(-a2 + x2) + a1*a3*b1*c1*(-a2 + x2) + a2*a3*b1*c1*(-a2 + x2) + a1*a2*a3*b1*c1*(-a2 + x2) + a3*b2*c1*(-a2 + x2) + a2*a3*b2*c1*(-a2 + x2) + a3*b1*b2*c1*(-a2 + x2) + a1*a2*a3*b1*b2*c1*(-a2 + x2) + a1*b3*c1*(-a2 + x2) + a1*a2*b3*c1*(-a2 + x2) + a3*b3*c1*(-a2 + x2) + a2*a3*b3*c1*(-a2 + x2) + a1*b1*b3*c1*(-a2 + x2) + a1*a2*b1*b3*c1*(-a2 + x2) + a3*b1*b3*c1*(-a2 + x2) + a1*a3*b1*b3*c1*(-a2 + x2) + a1*a2*a3*b1*b3*c1*(-a2 + x2) + a3*b2*b3*c1*(-a2 + x2) + a1*a3*b2*b3*c1*(-a2 + x2) + a2*a3*b2*b3*c1*(-a2 + x2) + a1*b1*b2*b3*c1*(-a2 + x2) + a2*b1*b2*b3*c1*(-a2 + x2) + a1*a2*b1*b2*b3*c1*(-a2 + x2) + a1*a3*b1*b2*b3*c1*(-a2 + x2) + a1*a2*a3*c2*(-a2 + x2) + a2*a3*b1*c2*(-a2 + x2) + a1*a2*a3*b1*c2*(-a2 + x2) + a1*a3*b1*b2*c2*(-a2 + x2) + a1*a2*b3*c2*(-a2 + x2) + a1*a3*b3*c2*(-a2 + x2) + a1*b1*b3*c2*(-a2 + x2) + a2*b1*b3*c2*(-a2 + x2) + a1*a2*b1*b3*c2*(-a2 + x2) + a1*b2*b3*c2*(-a2 + x2) + a1*a3*b2*b3*c2*(-a2 + x2) + a2*b1*b2*b3*c2*(-a2 + x2) + a1*a2*b1*b2*b3*c2*(-a2 + x2) + a1*a3*b1*b2*b3*c2*(-a2 + x2) + a2*a3*b1*c1*c2*(-a2 + x2) + a2*a3*b2*c1*c2*(-a2 + x2) + a1*a3*b1*b2*c1*c2*(-a2 + x2) + a1*a2*a3*b1*b2*c1*c2*(-a2 + x2) + a1*b3*c1*c2*(-a2 + x2) + a2*b3*c1*c2*(-a2 + x2) + a3*b3*c1*c2*(-a2 + x2) + a1*a3*b3*c1*c2*(-a2 + x2) + a2*a3*b3*c1*c2*(-a2 + x2) + a1*b1*b3*c1*c2*(-a2 + x2) + a1*a3*b1*b3*c1*c2*(-a2 + x2) + a1*a2*a3*b1*b3*c1*c2*(-a2 + x2) + a1*b2*b3*c1*c2*(-a2 + x2) + a1*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a2*b1*b2*b3*c1*c2*(-a2 + x2) + a3*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a3*b1*b2*b3*c1*c2*(-a2 + x2) + a1*a3*c3*(-a2 + x2) + a1*a3*b1*c3*(-a2 + x2) + a1*a2*b2*c3*(-a2 + x2) + a1*a3*b2*c3*(-a2 + x2) + a1*b1*b2*c3*(-a2 + x2) + a1*a2*b1*b2*c3*(-a2 + x2) + a1*a2*a3*b1*b2*c3*(-a2 + x2) + a1*a3*b3*c3*(-a2 + x2) + a1*b1*b3*c3*(-a2 + x2) + a2*b1*b3*c3*(-a2 + x2) + a1*a3*b1*b3*c3*(-a2 + x2) + a2*a3*b1*b3*c3*(-a2 + x2) + a1*a2*a3*b1*b3*c3*(-a2 + x2) + a1*a2*b2*b3*c3*(-a2 + x2) + a1*a3*b2*b3*c3*(-a2 + x2) + b1*b2*b3*c3*(-a2 + x2) + a2*b1*b2*b3*c3*(-a2 + x2) + a1*a2*b1*b2*b3*c3*(-a2 + x2) + a2*a3*b1*b2*b3*c3*(-a2 + x2) + c1*c3*(-a2 + x2) + a1*c1*c3*(-a2 + x2) + a2*c1*c3*(-a2 + x2) + b1*c1*c3*(-a2 + x2) + a3*b1*c1*c3*(-a2 + x2) + a1*b2*c1*c3*(-a2 + x2) + a2*b1*b2*c1*c3*(-a2 + x2) + a1*a2*b1*b2*c1*c3*(-a2 + x2) + a3*b1*b2*c1*c3*(-a2 + x2) + a1*a3*b1*b2*c1*c3*(-a2 + x2) + a2*a3*b1*b2*c1*c3*(-a2 + x2) + a1*a2*a3*b1*b2*c1*c3*(-a2 + x2) + b3*c1*c3*(-a2 + x2) + a2*b3*c1*c3*(-a2 + x2) + a2*a3*b3*c1*c3*(-a2 + x2) + b1*b3*c1*c3*(-a2 + x2) + a1*b1*b3*c1*c3*(-a2 + x2) + a1*a2*b1*b3*c1*c3*(-a2 + x2) + a3*b1*b3*c1*c3*(-a2 + x2) + a1*a3*b1*b3*c1*c3*(-a2 + x2) + b2*b3*c1*c3*(-a2 + x2) + a2*b2*b3*c1*c3*(-a2 + x2) + a3*b2*b3*c1*c3*(-a2 + x2) + a1*a3*b2*b3*c1*c3*(-a2 + x2) + a2*a3*b2*b3*c1*c3*(-a2 + x2) + b1*b2*b3*c1*c3*(-a2 + x2) + a1*b1*b2*b3*c1*c3*(-a2 + x2) + a3*b1*b2*b3*c1*c3*(-a2 + x2) + a1*a3*b1*b2*b3*c1*c3*(-a2 + x2) + a2*a3*b1*b2*b3*c1*c3*(-a2 + x2) + a1*a2*a3*b1*b2*b3*c1*c3*(-a2 + x2) + a1*c2*c3*(-a2 + x2) + a1*a2*c2*c3*(-a2 + x2) + a1*a3*c2*c3*(-a2 + x2) + b1*c2*c3*(-a2 + x2) + a1*b1*c2*c3*(-a2 + x2) + a2*b1*c2*c3*(-a2 + x2) + a1*a2*b1*c2*c3*(-a2 + x2) + a3*b1*c2*c3*(-a2 + x2) + a1*a3*b1*c2*c3*(-a2 + x2) + a1*b2*c2*c3*(-a2 + x2) + a1*b1*b2*c2*c3*(-a2 + x2) + a1*a3*b1*b2*c2*c3*(-a2 + x2) + a1*a2*a3*b1*b2*c2*c3*(-a2 + x2) + a1*b3*c2*c3*(-a2 + x2) + b1*b3*c2*c3*(-a2 + x2) + a1*b1*b3*c2*c3*(-a2 + x2) + a2*b1*b3*c2*c3*(-a2 + x2) + a1*a2*b1*b3*c2*c3*(-a2 + x2) + a1*a3*b1*b3*c2*c3*(-a2 + x2) + a1*a3*b2*b3*c2*c3*(-a2 + x2) + a1*a2*b1*b2*b3*c2*c3*(-a2 + x2) + a1*a3*b1*b2*b3*c2*c3*(-a2 + x2) + a2*a3*b1*b2*b3*c2*c3*(-a2 + x2) + a1*a2*a3*b1*b2*b3*c2*c3*(-a2 + x2) + c1*c2*c3*(-a2 + x2) + a1*c1*c2*c3*(-a2 + x2) + a1*b1*c1*c2*c3*(-a2 + x2) + a2*b1*c1*c2*c3*(-a2 + x2) + a3*b1*c1*c2*c3*(-a2 + x2) + b1*b2*c1*c2*c3*(-a2 + x2) + a1*b1*b2*c1*c2*c3*(-a2 + x2) + a1*a2*b1*b2*c1*c2*c3*(-a2 + x2) + a1*a3*b1*b2*c1*c2*c3*(-a2 + x2) + a2*a3*b1*b2*c1*c2*c3*(-a2 + x2) + a1*a2*a3*b1*b2*c1*c2*c3*(-a2 + x2) + b3*c1*c2*c3*(-a2 + x2) + a3*b3*c1*c2*c3*(-a2 + x2) + a1*b1*b3*c1*c2*c3*(-a2 + x2) + a2*b1*b3*c1*c2*c3*(-a2 + x2) + a1*a2*b1*b3*c1*c2*c3*(-a2 + x2) + a3*b1*b3*c1*c2*c3*(-a2 + x2) + a1*a2*a3*b1*b3*c1*c2*c3*(-a2 + x2) + a3*b2*b3*c1*c2*c3*(-a2 + x2) + b1*b2*b3*c1*c2*c3*(-a2 + x2) + a2*b1*b2*b3*c1*c2*c3*(-a2 + x2) + a1*a3*b1*b2*b3*c1*c2*c3*(-a2 + x2) + a2*a3*b1*b2*b3*c1*c2*c3*(-a2 + x2) + a3*(-a1 + x1)*(-a2 + x2) + a2*a3*(-a1 + x1)*(-a2 + x2) + a3*b1*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*(-a1 + x1)*(-a2 + x2) + a2*a3*b1*(-a1 + x1)*(-a2 + x2) + a3*b2*(-a1 + x1)*(-a2 + x2) + a1*a3*b2*(-a1 + x1)*(-a2 + x2) + a2*a3*b2*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*b2*(-a1 + x1)*(-a2 + x2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + x2) + b3*(-a1 + x1)*(-a2 + x2) + a2*b3*(-a1 + x1)*(-a2 + x2) + a3*b3*(-a1 + x1)*(-a2 + x2) + a1*a3*b3*(-a1 + x1)*(-a2 + x2) + a2*a3*b3*(-a1 + x1)*(-a2 + x2) + a1*a2*b1*b3*(-a1 + x1)*(-a2 + x2) + a1*b2*b3*(-a1 + x1)*(-a2 + x2) + a2*b2*b3*(-a1 + x1)*(-a2 + x2) + a1*a2*b2*b3*(-a1 + x1)*(-a2 + x2) + a3*b2*b3*(-a1 + x1)*(-a2 + x2) + a1*a3*c1*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*c1*(-a1 + x1)*(-a2 + x2) + a3*b2*c1*(-a1 + x1)*(-a2 + x2) + a1*a3*b2*c1*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*c1*(-a1 + x1)*(-a2 + x2) + a2*b3*c1*(-a1 + x1)*(-a2 + x2) + a1*a2*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*b3*c1*(-a1 + x1)*(-a2 + x2) + a1*a3*b3*c1*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*(-a1 + x1)*(-a2 + x2) + a2*b1*b3*c1*(-a1 + x1)*(-a2 + x2) + a3*b1*b3*c1*(-a1 + x1)*(-a2 + x2) + b2*b3*c1*(-a1 + x1)*(-a2 + x2) + a2*b2*b3*c1*(-a1 + x1)*(-a2 + x2) + b1*b2*b3*c1*(-a1 + x1)*(-a2 + x2) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a2 + x2) + a1*a3*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*c2*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*c2*(-a1 + x1)*(-a2 + x2) + a1*a3*b2*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*c2*(-a1 + x1)*(-a2 + x2) + b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*a2*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*a3*b3*c2*(-a1 + x1)*(-a2 + x2) + b1*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b1*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*b3*c2*(-a1 + x1)*(-a2 + x2) + b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + b1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a2 + x2) + a3*c1*c2*(-a1 + x1)*(-a2 + x2) + a3*b1*c1*c2*(-a1 + x1)*(-a2 + x2) + a3*b2*c1*c2*(-a1 + x1)*(-a2 + x2) + a1*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + a2*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + a3*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + a1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + x2) + c3*(-a1 + x1)*(-a2 + x2) + a1*a2*c3*(-a1 + x1)*(-a2 + x2) + a1*a3*c3*(-a1 + x1)*(-a2 + x2) + b1*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*c3*(-a1 + x1)*(-a2 + x2) + a2*b1*c3*(-a1 + x1)*(-a2 + x2) + a1*a2*b1*c3*(-a1 + x1)*(-a2 + x2) + a3*b1*c3*(-a1 + x1)*(-a2 + x2) + a1*a3*b1*c3*(-a1 + x1)*(-a2 + x2) + b2*c3*(-a1 + x1)*(-a2 + x2) + a1*a2*b2*c3*(-a1 + x1)*(-a2 + x2) + a1*a3*b2*c3*(-a1 + x1)*(-a2 + x2) + b1*b2*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b2*c3*(-a1 + x1)*(-a2 + x2) + a2*b1*b2*c3*(-a1 + x1)*(-a2 + x2) + a3*b1*b2*c3*(-a1 + x1)*(-a2 + x2) + b3*c3*(-a1 + x1)*(-a2 + x2) + a1*a2*b3*c3*(-a1 + x1)*(-a2 + x2) + a1*a3*b3*c3*(-a1 + x1)*(-a2 + x2) + b1*b3*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b3*c3*(-a1 + x1)*(-a2 + x2) + a2*b1*b3*c3*(-a1 + x1)*(-a2 + x2) + b2*b3*c3*(-a1 + x1)*(-a2 + x2) + a3*b2*b3*c3*(-a1 + x1)*(-a2 + x2) + b1*b2*b3*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b2*b3*c3*(-a1 + x1)*(-a2 + x2) + a2*b1*b2*b3*c3*(-a1 + x1)*(-a2 + x2) + a1*c1*c3*(-a1 + x1)*(-a2 + x2) + a2*c1*c3*(-a1 + x1)*(-a2 + x2) + a3*c1*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*c1*c3*(-a1 + x1)*(-a2 + x2) + a2*b1*c1*c3*(-a1 + x1)*(-a2 + x2) + a3*b1*c1*c3*(-a1 + x1)*(-a2 + x2) + b2*c1*c3*(-a1 + x1)*(-a2 + x2) + a1*b2*c1*c3*(-a1 + x1)*(-a2 + x2) + a2*b2*c1*c3*(-a1 + x1)*(-a2 + x2) + a3*b2*c1*c3*(-a1 + x1)*(-a2 + x2) + b1*b2*c1*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b2*c1*c3*(-a1 + x1)*(-a2 + x2) + b3*c1*c3*(-a1 + x1)*(-a2 + x2) + a1*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + a2*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + a3*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b3*c1*c3*(-a1 + x1)*(-a2 + x2) + c2*c3*(-a1 + x1)*(-a2 + x2) + b1*c2*c3*(-a1 + x1)*(-a2 + x2) + a1*b1*b3*c2*c3*(-a1 + x1)*(-a2 + x2) + a1*b2*b3*c2*c3*(-a1 + x1)*(-a2 + x2) + b1*b3*c1*c2*c3*(-a1 + x1)*(-a2 + x2) + b2*b3*c1*c2*c3*(-a1 + x1)*(-a2 + x2) + (a3*b1*b2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b3*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b2*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b2*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b3*c1*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b2*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b2*b3*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b2*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b3*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b3*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b2*b3*c1*c2*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a2*b1*b3*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*a3*b1*b3*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b2*b3*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b2*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b2*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a2*b1*b3*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a3*b1*b3*c1*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b3*c2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (a1*b1*b2*b3*c2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b3*c1*c2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + (b1*b2*b3*c1*c2*c3*(-a2 + x2)*(1 - a2 + x2))/2 + a1*a2*(-a3 + x3) + a1*a2*a3*(-a3 + x3) + a2*a3*b1*(-a3 + x3) + a1*a2*a3*b1*(-a3 + x3) + a1*a2*b2*(-a3 + x3) + a1*a2*a3*b2*(-a3 + x3) + b1*b2*(-a3 + x3) + a1*b1*b2*(-a3 + x3) + a3*b1*b2*(-a3 + x3) + a1*a2*a3*b1*b2*(-a3 + x3) + a1*a2*a3*b1*b3*(-a3 + x3) + a1*a2*b2*b3*(-a3 + x3) + a1*a3*b2*b3*(-a3 + x3) + a1*b1*b2*b3*(-a3 + x3) + a1*a3*b1*b2*b3*(-a3 + x3) + a1*a2*a3*b1*b2*b3*(-a3 + x3) + a1*a2*a3*c1*(-a3 + x3) + a2*b1*c1*(-a3 + x3) + a1*a2*a3*b2*c1*(-a3 + x3) + b1*b2*c1*(-a3 + x3) + a1*b1*b2*c1*(-a3 + x3) + a1*a3*b1*b2*c1*(-a3 + x3) + a2*a3*b1*b2*c1*(-a3 + x3) + a1*a2*a3*b3*c1*(-a3 + x3) + a2*a3*b1*b3*c1*(-a3 + x3) + b2*b3*c1*(-a3 + x3) + a1*b2*b3*c1*(-a3 + x3) + a2*b2*b3*c1*(-a3 + x3) + a3*b2*b3*c1*(-a3 + x3) + a1*a3*b2*b3*c1*(-a3 + x3) + a2*a3*b2*b3*c1*(-a3 + x3) + a2*b1*b2*b3*c1*(-a3 + x3) + a3*b1*b2*b3*c1*(-a3 + x3) + a1*a3*b1*b2*b3*c1*(-a3 + x3) + a1*c2*(-a3 + x3) + a1*a3*c2*(-a3 + x3) + b1*c2*(-a3 + x3) + a2*b1*c2*(-a3 + x3) + a3*b1*c2*(-a3 + x3) + a1*a3*b1*c2*(-a3 + x3) + a1*b2*c2*(-a3 + x3) + a1*a3*b2*c2*(-a3 + x3) + a1*b1*b2*c2*(-a3 + x3) + a2*b1*b2*c2*(-a3 + x3) + a1*a3*b1*b2*c2*(-a3 + x3) + a2*a3*b1*b2*c2*(-a3 + x3) + a1*a2*b3*c2*(-a3 + x3) + a1*a2*a3*b3*c2*(-a3 + x3) + b1*b3*c2*(-a3 + x3) + a1*b1*b3*c2*(-a3 + x3) + a1*a2*b1*b3*c2*(-a3 + x3) + a3*b1*b3*c2*(-a3 + x3) + a1*a3*b2*b3*c2*(-a3 + x3) + a2*b1*b2*b3*c2*(-a3 + x3) + a2*a3*b1*b2*b3*c2*(-a3 + x3) + a1*c1*c2*(-a3 + x3) + a1*a2*c1*c2*(-a3 + x3) + a1*a3*c1*c2*(-a3 + x3) + a2*b1*c1*c2*(-a3 + x3) + a1*b2*c1*c2*(-a3 + x3) + a1*a2*b2*c1*c2*(-a3 + x3) + a1*a3*b2*c1*c2*(-a3 + x3) + b1*b2*c1*c2*(-a3 + x3) + a1*a2*b1*b2*c1*c2*(-a3 + x3) + a2*a3*b1*b2*c1*c2*(-a3 + x3) + a1*a2*a3*b1*b2*c1*c2*(-a3 + x3) + a2*b3*c1*c2*(-a3 + x3) + a1*a2*b3*c1*c2*(-a3 + x3) + a2*a3*b3*c1*c2*(-a3 + x3) + b1*b3*c1*c2*(-a3 + x3) + a2*b1*b3*c1*c2*(-a3 + x3) + a3*b1*b3*c1*c2*(-a3 + x3) + a2*a3*b1*b3*c1*c2*(-a3 + x3) + b2*b3*c1*c2*(-a3 + x3) + a1*b2*b3*c1*c2*(-a3 + x3) + a1*a2*b2*b3*c1*c2*(-a3 + x3) + a3*b2*b3*c1*c2*(-a3 + x3) + b1*b2*b3*c1*c2*(-a3 + x3) + a1*b1*b2*b3*c1*c2*(-a3 + x3) + a2*b1*b2*b3*c1*c2*(-a3 + x3) + a1*a2*b1*b2*b3*c1*c2*(-a3 + x3) + a2*a3*b1*b2*b3*c1*c2*(-a3 + x3) + a1*a2*a3*b1*b2*b3*c1*c2*(-a3 + x3) + a1*a2*c3*(-a3 + x3) + a1*a2*b1*c3*(-a3 + x3) + a1*a2*b2*c3*(-a3 + x3) + b1*b2*c3*(-a3 + x3) + a1*b1*b2*c3*(-a3 + x3) + a2*b1*b2*c3*(-a3 + x3) + a1*a2*b1*b2*c3*(-a3 + x3) + a3*b1*b2*c3*(-a3 + x3) + a1*a2*b3*c3*(-a3 + x3) + a2*b1*b3*c3*(-a3 + x3) + a2*a3*b1*b3*c3*(-a3 + x3) + a1*b2*b3*c3*(-a3 + x3) + a1*a2*b2*b3*c3*(-a3 + x3) + b1*b2*b3*c3*(-a3 + x3) + a2*b1*b2*b3*c3*(-a3 + x3) + a3*b1*b2*b3*c3*(-a3 + x3) + a2*b1*c1*c3*(-a3 + x3) + b1*b2*c1*c3*(-a3 + x3) + a1*b1*b2*c1*c3*(-a3 + x3) + a1*a3*b1*b2*c1*c3*(-a3 + x3) + a2*a3*b1*b2*c1*c3*(-a3 + x3) + a2*b1*b3*c1*c3*(-a3 + x3) + a1*a2*b1*b3*c1*c3*(-a3 + x3) + a2*a3*b1*b3*c1*c3*(-a3 + x3) + a1*a2*a3*b1*b3*c1*c3*(-a3 + x3) + b1*b2*b3*c1*c3*(-a3 + x3) + a1*b1*b2*b3*c1*c3*(-a3 + x3) + a1*a2*b1*b2*b3*c1*c3*(-a3 + x3) + a1*a3*b1*b2*b3*c1*c3*(-a3 + x3) + a1*a2*a3*b1*b2*b3*c1*c3*(-a3 + x3) + a1*c2*c3*(-a3 + x3) + a1*a3*c2*c3*(-a3 + x3) + b1*c2*c3*(-a3 + x3) + a1*b1*c2*c3*(-a3 + x3) + a2*b1*c2*c3*(-a3 + x3) + a3*b1*c2*c3*(-a3 + x3) + a1*a3*b1*c2*c3*(-a3 + x3) + a1*b2*c2*c3*(-a3 + x3) + a1*a3*b2*c2*c3*(-a3 + x3) + a1*b1*b2*c2*c3*(-a3 + x3) + a3*b1*b2*c2*c3*(-a3 + x3) + a1*a3*b1*b2*c2*c3*(-a3 + x3) + a2*a3*b1*b2*c2*c3*(-a3 + x3) + a1*a2*a3*b1*b2*c2*c3*(-a3 + x3) + a1*a2*b3*c2*c3*(-a3 + x3) + a2*b1*b3*c2*c3*(-a3 + x3) + a1*a2*b1*b3*c2*c3*(-a3 + x3) + a1*a3*b1*b3*c2*c3*(-a3 + x3) + a1*a2*a3*b1*b3*c2*c3*(-a3 + x3) + a1*b2*b3*c2*c3*(-a3 + x3) + a1*a3*b2*b3*c2*c3*(-a3 + x3) + b1*b2*b3*c2*c3*(-a3 + x3) + a1*a2*b1*b2*b3*c2*c3*(-a3 + x3) + a1*a3*b1*b2*b3*c2*c3*(-a3 + x3) + a2*a3*b1*b2*b3*c2*c3*(-a3 + x3) + a1*a3*c1*c2*c3*(-a3 + x3) + a2*a3*c1*c2*c3*(-a3 + x3) + b1*c1*c2*c3*(-a3 + x3) + a1*a3*b1*c1*c2*c3*(-a3 + x3) + a2*a3*b1*c1*c2*c3*(-a3 + x3) + a1*a3*b2*c1*c2*c3*(-a3 + x3) + a2*a3*b2*c1*c2*c3*(-a3 + x3) + b1*b2*c1*c2*c3*(-a3 + x3) + a2*b1*b2*c1*c2*c3*(-a3 + x3) + a1*a2*b1*b2*c1*c2*c3*(-a3 + x3) + a3*b1*b2*c1*c2*c3*(-a3 + x3) + a1*b3*c1*c2*c3*(-a3 + x3) + a2*b3*c1*c2*c3*(-a3 + x3) + a1*a3*b3*c1*c2*c3*(-a3 + x3) + a2*a3*b3*c1*c2*c3*(-a3 + x3) + b1*b3*c1*c2*c3*(-a3 + x3) + a1*b1*b3*c1*c2*c3*(-a3 + x3) + a3*b1*b3*c1*c2*c3*(-a3 + x3) + a1*a3*b1*b3*c1*c2*c3*(-a3 + x3) + a2*a3*b1*b3*c1*c2*c3*(-a3 + x3) + a1*b2*b3*c1*c2*c3*(-a3 + x3) + a2*b2*b3*c1*c2*c3*(-a3 + x3) + a1*a3*b2*b3*c1*c2*c3*(-a3 + x3) + a2*a3*b2*b3*c1*c2*c3*(-a3 + x3) + a2*b1*b2*b3*c1*c2*c3*(-a3 + x3) + a1*a2*b1*b2*b3*c1*c2*c3*(-a3 + x3) + a3*b1*b2*b3*c1*c2*c3*(-a3 + x3) + a1*a2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b3*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*b3*(-a1 + x1)*(-a3 + x3) + a1*a3*b1*b2*b3*(-a1 + x1)*(-a3 + x3) + a2*c1*(-a1 + x1)*(-a3 + x3) + a2*b1*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + x3) + a1*c2*(-a1 + x1)*(-a3 + x3) + b1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*c2*(-a1 + x1)*(-a3 + x3) + a1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b2*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b2*c2*(-a1 + x1)*(-a3 + x3) + a1*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b3*c2*(-a1 + x1)*(-a3 + x3) + b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a3*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b3*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + x3) + c1*c2*(-a1 + x1)*(-a3 + x3) + b1*c1*c2*(-a1 + x1)*(-a3 + x3) + b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*a3*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + x3) + b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*a3*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + b1*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*b1*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b3*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b3*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b3*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*a3*b1*b3*c3*(-a1 + x1)*(-a3 + x3) + a2*b2*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*a3*b2*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b2*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*b3*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*a3*b3*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*b1*b3*c1*c3*(-a1 + x1)*(-a3 + x3) + a2*a3*b1*b3*c1*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a3*b2*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a3*b1*b2*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a3*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*b1*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a3*b1*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*b2*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b2*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*b1*b2*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + x1)*(-a3 + x3) + a2*b2*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a3*b2*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a3*b1*b2*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a3*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + b1*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a3*b1*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a2*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + b1*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + x3) + a1*(-a2 + x2)*(-a3 + x3) + a1*a3*(-a2 + x2)*(-a3 + x3) + b1*(-a2 + x2)*(-a3 + x3) + a1*b1*(-a2 + x2)*(-a3 + x3) + a2*b1*(-a2 + x2)*(-a3 + x3) + a3*b1*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*(-a2 + x2)*(-a3 + x3) + a1*b2*(-a2 + x2)*(-a3 + x3) + a1*a3*b2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + x3) + a1*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*b3*(-a2 + x2)*(-a3 + x3) + a1*b1*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*b3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*b3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*b3*(-a2 + x2)*(-a3 + x3) + c1*(-a2 + x2)*(-a3 + x3) + a1*c1*(-a2 + x2)*(-a3 + x3) + a2*c1*(-a2 + x2)*(-a3 + x3) + a3*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*c1*(-a2 + x2)*(-a3 + x3) + b1*c1*(-a2 + x2)*(-a3 + x3) + a1*b1*c1*(-a2 + x2)*(-a3 + x3) + a2*b1*c1*(-a2 + x2)*(-a3 + x3) + a3*b1*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*c1*(-a2 + x2)*(-a3 + x3) + b2*c1*(-a2 + x2)*(-a3 + x3) + a1*b2*c1*(-a2 + x2)*(-a3 + x3) + a2*b2*c1*(-a2 + x2)*(-a3 + x3) + a3*b2*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*b2*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*b2*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + x3) + b3*c1*(-a2 + x2)*(-a3 + x3) + a1*a3*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*a3*b3*c1*(-a2 + x2)*(-a3 + x3) + b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*b3*c1*(-a2 + x2)*(-a3 + x3) + a1*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*c2*(-a2 + x2)*(-a3 + x3) + b1*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*c2*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*c2*(-a2 + x2)*(-a3 + x3) + a1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c2*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b3*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*b3*c2*(-a2 + x2)*(-a3 + x3) + b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + x3) + a1*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*c3*(-a2 + x2)*(-a3 + x3) + b1*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*c3*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b2*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + x3) + a1*b3*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b3*c3*(-a2 + x2)*(-a3 + x3) + b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*b3*c3*(-a2 + x2)*(-a3 + x3) + c1*c3*(-a2 + x2)*(-a3 + x3) + a1*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*c1*c3*(-a2 + x2)*(-a3 + x3) + b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*a3*b1*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + x3) + a1*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*c2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b2*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*a3*b1*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + a3*b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + a2*b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + x3) + (a2*a3*b1*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b1*b2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*b3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*b2*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b2*b3*c1*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*b2*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*b3*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b3*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b2*b3*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b2*b3*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c1*c2*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*a3*b1*b2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b2*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*a3*b2*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*b3*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*b3*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*b3*c1*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a3*b1*b2*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a1*b1*b2*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (a2*b1*b2*b3*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*c1*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + (b1*b2*b3*c1*c2*c3*(-a3 + x3)*(1 - a3 + x3))/2 + a2*a3*b1*(-a1 + y1) + a3*b2*(-a1 + y1) + a1*a3*b2*(-a1 + y1) + a1*a2*a3*b2*(-a1 + y1) + a1*a3*b1*b2*(-a1 + y1) + a2*a3*b1*b2*(-a1 + y1) + a1*a2*a3*b1*b2*(-a1 + y1) + a2*b3*(-a1 + y1) + a2*a3*b3*(-a1 + y1) + a1*a2*a3*b3*(-a1 + y1) + a2*b1*b3*(-a1 + y1) + a1*a2*b1*b3*(-a1 + y1) + a2*a3*b1*b3*(-a1 + y1) + b2*b3*(-a1 + y1) + a1*b2*b3*(-a1 + y1) + a2*b2*b3*(-a1 + y1) + a3*b2*b3*(-a1 + y1) + a1*a3*b2*b3*(-a1 + y1) + a3*b1*b2*b3*(-a1 + y1) + a1*a3*b1*b2*b3*(-a1 + y1) + a2*a3*b1*b2*b3*(-a1 + y1) + a1*a2*a3*b1*b2*b3*(-a1 + y1) + a2*a3*c1*(-a1 + y1) + a2*a3*b2*c1*(-a1 + y1) + a2*a3*b1*b2*c1*(-a1 + y1) + a2*b3*c1*(-a1 + y1) + a2*a3*b3*c1*(-a1 + y1) + a1*a2*a3*b3*c1*(-a1 + y1) + a2*b1*b3*c1*(-a1 + y1) + b2*b3*c1*(-a1 + y1) + a1*a2*b2*b3*c1*(-a1 + y1) + a3*b2*b3*c1*(-a1 + y1) + a2*b1*b2*b3*c1*(-a1 + y1) + a1*a2*a3*c2*(-a1 + y1) + a2*a3*b1*c2*(-a1 + y1) + a1*a3*b2*c2*(-a1 + y1) + a2*a3*b2*c2*(-a1 + y1) + a1*a2*a3*b2*c2*(-a1 + y1) + a3*b1*b2*c2*(-a1 + y1) + a2*a3*b1*b2*c2*(-a1 + y1) + a1*a2*a3*b1*b2*c2*(-a1 + y1) + b3*c2*(-a1 + y1) + a3*b3*c2*(-a1 + y1) + a1*a3*b3*c2*(-a1 + y1) + a2*a3*b3*c2*(-a1 + y1) + a1*a2*a3*b3*c2*(-a1 + y1) + a1*b1*b3*c2*(-a1 + y1) + a2*b1*b3*c2*(-a1 + y1) + a3*b1*b3*c2*(-a1 + y1) + a1*a3*b1*b3*c2*(-a1 + y1) + a2*a3*b1*b3*c2*(-a1 + y1) + a1*a2*a3*b1*b3*c2*(-a1 + y1) + a1*a2*b2*b3*c2*(-a1 + y1) + a1*a3*b2*b3*c2*(-a1 + y1) + a2*a3*b2*b3*c2*(-a1 + y1) + a1*a2*b1*b2*b3*c2*(-a1 + y1) + a3*b1*b2*b3*c2*(-a1 + y1) + a2*a3*b1*b2*b3*c2*(-a1 + y1) + a3*c1*c2*(-a1 + y1) + a1*a3*b2*c1*c2*(-a1 + y1) + a3*b1*b2*c1*c2*(-a1 + y1) + b3*c1*c2*(-a1 + y1) + a1*b3*c1*c2*(-a1 + y1) + a2*b3*c1*c2*(-a1 + y1) + a1*a2*b3*c1*c2*(-a1 + y1) + a3*b3*c1*c2*(-a1 + y1) + b1*b3*c1*c2*(-a1 + y1) + a1*a2*b1*b3*c1*c2*(-a1 + y1) + a3*b1*b3*c1*c2*(-a1 + y1) + a2*b2*b3*c1*c2*(-a1 + y1) + a3*b2*b3*c1*c2*(-a1 + y1) + b1*b2*b3*c1*c2*(-a1 + y1) + a1*b1*b2*b3*c1*c2*(-a1 + y1) + a1*a2*c3*(-a1 + y1) + a1*a2*a3*c3*(-a1 + y1) + a2*b1*c3*(-a1 + y1) + a1*a2*b1*c3*(-a1 + y1) + a1*a2*a3*b1*c3*(-a1 + y1) + b2*c3*(-a1 + y1) + a1*b2*c3*(-a1 + y1) + a1*a2*b2*c3*(-a1 + y1) + a3*b2*c3*(-a1 + y1) + a1*a3*b2*c3*(-a1 + y1) + a2*a3*b2*c3*(-a1 + y1) + a1*a2*a3*b2*c3*(-a1 + y1) + a1*b1*b2*c3*(-a1 + y1) + a1*a3*b1*b2*c3*(-a1 + y1) + a2*a3*b1*b2*c3*(-a1 + y1) + a2*b3*c3*(-a1 + y1) + a1*a2*b3*c3*(-a1 + y1) + a1*a2*a3*b3*c3*(-a1 + y1) + a1*b2*b3*c3*(-a1 + y1) + a2*b2*b3*c3*(-a1 + y1) + a1*a3*b2*b3*c3*(-a1 + y1) + a2*a3*b2*b3*c3*(-a1 + y1) + a2*b1*b2*b3*c3*(-a1 + y1) + a1*a2*b1*b2*b3*c3*(-a1 + y1) + a2*c1*c3*(-a1 + y1) + a2*b1*c1*c3*(-a1 + y1) + a1*b2*c1*c3*(-a1 + y1) + a2*b2*c1*c3*(-a1 + y1) + a1*a2*b2*c1*c3*(-a1 + y1) + a1*a3*b2*c1*c3*(-a1 + y1) + a1*a2*b1*b2*c1*c3*(-a1 + y1) + a3*b1*b2*c1*c3*(-a1 + y1) + a2*b3*c1*c3*(-a1 + y1) + a2*a3*b3*c1*c3*(-a1 + y1) + a1*a2*b2*b3*c1*c3*(-a1 + y1) + a3*b2*b3*c1*c3*(-a1 + y1) + a2*b1*b2*b3*c1*c3*(-a1 + y1) + c2*c3*(-a1 + y1) + a1*a2*c2*c3*(-a1 + y1) + a2*a3*c2*c3*(-a1 + y1) + b1*c2*c3*(-a1 + y1) + a1*b1*c2*c3*(-a1 + y1) + a2*b1*c2*c3*(-a1 + y1) + a1*a2*b1*c2*c3*(-a1 + y1) + a1*a3*b1*c2*c3*(-a1 + y1) + b2*c2*c3*(-a1 + y1) + a1*b2*c2*c3*(-a1 + y1) + a2*b2*c2*c3*(-a1 + y1) + a3*b2*c2*c3*(-a1 + y1) + a1*a3*b2*c2*c3*(-a1 + y1) + a1*a2*a3*b2*c2*c3*(-a1 + y1) + a3*b1*b2*c2*c3*(-a1 + y1) + a1*a3*b1*b2*c2*c3*(-a1 + y1) + a2*a3*b1*b2*c2*c3*(-a1 + y1) + a1*a2*a3*b1*b2*c2*c3*(-a1 + y1) + b3*c2*c3*(-a1 + y1) + a1*b3*c2*c3*(-a1 + y1) + a3*b3*c2*c3*(-a1 + y1) + a1*a3*b3*c2*c3*(-a1 + y1) + a2*a3*b3*c2*c3*(-a1 + y1) + b1*b3*c2*c3*(-a1 + y1) + a1*b1*b3*c2*c3*(-a1 + y1) + a1*a2*b1*b3*c2*c3*(-a1 + y1) + b2*b3*c2*c3*(-a1 + y1) + a1*a2*b2*b3*c2*c3*(-a1 + y1) + a1*a3*b2*b3*c2*c3*(-a1 + y1) + a1*a2*a3*b2*b3*c2*c3*(-a1 + y1) + a1*b1*b2*b3*c2*c3*(-a1 + y1) + a3*b1*b2*b3*c2*c3*(-a1 + y1) + a1*a3*b1*b2*b3*c2*c3*(-a1 + y1) + a2*a3*b1*b2*b3*c2*c3*(-a1 + y1) + a1*a2*a3*b1*b2*b3*c2*c3*(-a1 + y1) + a3*c1*c2*c3*(-a1 + y1) + a1*a3*c1*c2*c3*(-a1 + y1) + a2*a3*c1*c2*c3*(-a1 + y1) + a2*b1*c1*c2*c3*(-a1 + y1) + a3*b1*c1*c2*c3*(-a1 + y1) + a1*a3*b1*c1*c2*c3*(-a1 + y1) + a2*a3*b1*c1*c2*c3*(-a1 + y1) + a1*a3*b2*c1*c2*c3*(-a1 + y1) + b1*b2*c1*c2*c3*(-a1 + y1) + a2*a3*b1*b2*c1*c2*c3*(-a1 + y1) + a3*b3*c1*c2*c3*(-a1 + y1) + a1*a3*b3*c1*c2*c3*(-a1 + y1) + a2*a3*b3*c1*c2*c3*(-a1 + y1) + b1*b3*c1*c2*c3*(-a1 + y1) + a2*b1*b3*c1*c2*c3*(-a1 + y1) + a1*b2*b3*c1*c2*c3*(-a1 + y1) + a2*b2*b3*c1*c2*c3*(-a1 + y1) + a3*b2*b3*c1*c2*c3*(-a1 + y1) + a2*a3*b2*b3*c1*c2*c3*(-a1 + y1) + a3*b1*b2*b3*c1*c2*c3*(-a1 + y1) + a2*a3*b1*b2*b3*c1*c2*c3*(-a1 + y1) + a2*a3*(-a1 + x1)*(-a1 + y1) + a2*a3*b1*(-a1 + x1)*(-a1 + y1) + a2*a3*b2*(-a1 + x1)*(-a1 + y1) + a3*b1*b2*(-a1 + x1)*(-a1 + y1) + a1*a2*b3*(-a1 + x1)*(-a1 + y1) + a2*a3*b3*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*(-a1 + x1)*(-a1 + y1) + b2*b3*(-a1 + x1)*(-a1 + y1) + a3*b2*b3*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*c1*(-a1 + x1)*(-a1 + y1) + a3*b1*b2*c2*(-a1 + x1)*(-a1 + y1) + b1*b3*c2*(-a1 + x1)*(-a1 + y1) + a1*b1*b3*c2*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*c2*(-a1 + x1)*(-a1 + y1) + a1*b2*b3*c2*(-a1 + x1)*(-a1 + y1) + a3*b2*b3*c2*(-a1 + x1)*(-a1 + y1) + b1*b3*c1*c2*(-a1 + x1)*(-a1 + y1) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a1 + y1) + b1*b2*c3*(-a1 + x1)*(-a1 + y1) + a2*b1*b2*c3*(-a1 + x1)*(-a1 + y1) + a3*b1*b2*c3*(-a1 + x1)*(-a1 + y1) + a2*b1*b3*c3*(-a1 + x1)*(-a1 + y1) + b2*b3*c3*(-a1 + x1)*(-a1 + y1) + a3*b2*b3*c3*(-a1 + x1)*(-a1 + y1) + c2*c3*(-a1 + x1)*(-a1 + y1) + b1*b3*c2*c3*(-a1 + x1)*(-a1 + y1) + b1*b2*b3*c2*c3*(-a1 + x1)*(-a1 + y1) + a2*a3*(-a2 + x2)*(-a1 + y1) + a3*b1*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*(-a2 + x2)*(-a1 + y1) + a2*a3*b1*(-a2 + x2)*(-a1 + y1) + a1*a3*b2*(-a2 + x2)*(-a1 + y1) + a2*a3*b2*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*b2*(-a2 + x2)*(-a1 + y1) + a2*a3*b1*b2*(-a2 + x2)*(-a1 + y1) + a1*a3*b3*(-a2 + x2)*(-a1 + y1) + a2*a3*b3*(-a2 + x2)*(-a1 + y1) + b1*b3*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*(-a2 + x2)*(-a1 + y1) + a1*a2*b1*b3*(-a2 + x2)*(-a1 + y1) + b2*b3*(-a2 + x2)*(-a1 + y1) + a1*b2*b3*(-a2 + x2)*(-a1 + y1) + a1*a2*b2*b3*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*(-a2 + x2)*(-a1 + y1) + a1*a3*c1*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*c1*(-a2 + x2)*(-a1 + y1) + a3*b2*c1*(-a2 + x2)*(-a1 + y1) + a1*a3*b2*c1*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*c1*(-a2 + x2)*(-a1 + y1) + a2*b3*c1*(-a2 + x2)*(-a1 + y1) + a1*a2*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*b3*c1*(-a2 + x2)*(-a1 + y1) + a1*a3*b3*c1*(-a2 + x2)*(-a1 + y1) + a2*b1*b3*c1*(-a2 + x2)*(-a1 + y1) + a3*b1*b3*c1*(-a2 + x2)*(-a1 + y1) + b2*b3*c1*(-a2 + x2)*(-a1 + y1) + a2*b2*b3*c1*(-a2 + x2)*(-a1 + y1) + b1*b2*b3*c1*(-a2 + x2)*(-a1 + y1) + a2*b1*b2*b3*c1*(-a2 + x2)*(-a1 + y1) + a1*a3*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*c2*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*c2*(-a2 + x2)*(-a1 + y1) + a1*a3*b2*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*c2*(-a2 + x2)*(-a1 + y1) + a1*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*a2*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*a3*b3*c2*(-a2 + x2)*(-a1 + y1) + b1*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + b1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a2*b1*b2*b3*c2*(-a2 + x2)*(-a1 + y1) + a3*c1*c2*(-a2 + x2)*(-a1 + y1) + a3*b1*c1*c2*(-a2 + x2)*(-a1 + y1) + a3*b2*c1*c2*(-a2 + x2)*(-a1 + y1) + a1*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + a2*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + a3*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + a1*b2*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a1 + y1) + a1*a2*c3*(-a2 + x2)*(-a1 + y1) + a1*a3*c3*(-a2 + x2)*(-a1 + y1) + b1*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*c3*(-a2 + x2)*(-a1 + y1) + a2*b1*c3*(-a2 + x2)*(-a1 + y1) + a1*a2*b1*c3*(-a2 + x2)*(-a1 + y1) + a3*b1*c3*(-a2 + x2)*(-a1 + y1) + a1*a3*b1*c3*(-a2 + x2)*(-a1 + y1) + a1*a2*b2*c3*(-a2 + x2)*(-a1 + y1) + a1*a3*b2*c3*(-a2 + x2)*(-a1 + y1) + b1*b2*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b2*c3*(-a2 + x2)*(-a1 + y1) + a2*b1*b2*c3*(-a2 + x2)*(-a1 + y1) + a3*b1*b2*c3*(-a2 + x2)*(-a1 + y1) + a1*a2*b3*c3*(-a2 + x2)*(-a1 + y1) + a1*a3*b3*c3*(-a2 + x2)*(-a1 + y1) + b1*b3*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*c3*(-a2 + x2)*(-a1 + y1) + a2*b1*b3*c3*(-a2 + x2)*(-a1 + y1) + b2*b3*c3*(-a2 + x2)*(-a1 + y1) + a3*b2*b3*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b2*b3*c3*(-a2 + x2)*(-a1 + y1) + a2*b1*b2*b3*c3*(-a2 + x2)*(-a1 + y1) + a1*c1*c3*(-a2 + x2)*(-a1 + y1) + a2*c1*c3*(-a2 + x2)*(-a1 + y1) + a3*c1*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*c1*c3*(-a2 + x2)*(-a1 + y1) + a2*b1*c1*c3*(-a2 + x2)*(-a1 + y1) + a3*b1*c1*c3*(-a2 + x2)*(-a1 + y1) + b2*c1*c3*(-a2 + x2)*(-a1 + y1) + a1*b2*c1*c3*(-a2 + x2)*(-a1 + y1) + a2*b2*c1*c3*(-a2 + x2)*(-a1 + y1) + a3*b2*c1*c3*(-a2 + x2)*(-a1 + y1) + b1*b2*c1*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b2*c1*c3*(-a2 + x2)*(-a1 + y1) + b3*c1*c3*(-a2 + x2)*(-a1 + y1) + a1*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + a2*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + a3*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*c1*c3*(-a2 + x2)*(-a1 + y1) + c2*c3*(-a2 + x2)*(-a1 + y1) + b1*c2*c3*(-a2 + x2)*(-a1 + y1) + a1*b1*b3*c2*c3*(-a2 + x2)*(-a1 + y1) + a1*b2*b3*c2*c3*(-a2 + x2)*(-a1 + y1) + b1*b3*c1*c2*c3*(-a2 + x2)*(-a1 + y1) + b2*b3*c1*c2*c3*(-a2 + x2)*(-a1 + y1) + a2*(-a3 + x3)*(-a1 + y1) + a1*a2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*(-a3 + x3)*(-a1 + y1) + a2*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a1 + y1) + a2*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b3*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a1 + y1) + a2*b2*b3*(-a3 + x3)*(-a1 + y1) + a3*b2*b3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*b3*(-a3 + x3)*(-a1 + y1) + a3*b1*b2*b3*(-a3 + x3)*(-a1 + y1) + a1*a3*b1*b2*b3*(-a3 + x3)*(-a1 + y1) + a2*c1*(-a3 + x3)*(-a1 + y1) + a2*b1*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b2*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b3*c1*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a1 + y1) + c2*(-a3 + x3)*(-a1 + y1) + a1*c2*(-a3 + x3)*(-a1 + y1) + b1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*c2*(-a3 + x3)*(-a1 + y1) + b2*c2*(-a3 + x3)*(-a1 + y1) + a1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b2*c2*(-a3 + x3)*(-a1 + y1) + b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b2*c2*(-a3 + x3)*(-a1 + y1) + b3*c2*(-a3 + x3)*(-a1 + y1) + a1*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b3*c2*(-a3 + x3)*(-a1 + y1) + b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a3*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b3*c2*(-a3 + x3)*(-a1 + y1) + b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*c2*(-a3 + x3)*(-a1 + y1) + c1*c2*(-a3 + x3)*(-a1 + y1) + b1*c1*c2*(-a3 + x3)*(-a1 + y1) + b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c1*c2*(-a3 + x3)*(-a1 + y1) + b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + b1*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c1*c2*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b2*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b3*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b3*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b3*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*a3*b1*b3*c3*(-a3 + x3)*(-a1 + y1) + a2*b2*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b2*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b2*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*b3*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b3*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b3*c1*c3*(-a3 + x3)*(-a1 + y1) + a2*a3*b1*b3*c1*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a3*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b1*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a3*b1*b2*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a3*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + b1*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*b1*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b1*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a3*b1*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a1*a2*b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b2*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b2*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b1*b2*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + b1*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a3*b1*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + a2*b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + y1) + (a2*a3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b1*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b2*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b1*b2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*a2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*a3*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (b2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*b2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*b3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b1*b3*c1*(-a1 + y1)*(1 - a1 + y1))/2 + (b2*b3*c1*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b2*b3*c1*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b1*b2*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*b1*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b1*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a1*b2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*b3*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b3*c1*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b2*b3*c1*c2*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b1*b2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b1*b2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a2*b1*b3*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (b2*b3*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (a3*b2*b3*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b3*c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + (b1*b2*b3*c2*c3*(-a1 + y1)*(1 - a1 + y1))/2 + a1*a3*(-a2 + y2) + a3*b1*(-a2 + y2) + a2*a3*b1*(-a2 + y2) + a1*a2*a3*b2*(-a2 + y2) + a3*b1*b2*(-a2 + y2) + a1*a3*b1*b2*(-a2 + y2) + a2*a3*b1*b2*(-a2 + y2) + a1*a2*a3*b1*b2*(-a2 + y2) + a1*a2*b3*(-a2 + y2) + a1*a2*a3*b3*(-a2 + y2) + a2*b1*b3*(-a2 + y2) + a2*a3*b1*b3*(-a2 + y2) + a1*a2*b2*b3*(-a2 + y2) + a1*a3*b2*b3*(-a2 + y2) + a1*a3*b1*b2*b3*(-a2 + y2) + a1*a2*a3*b1*b2*b3*(-a2 + y2) + a2*a3*c1*(-a2 + y2) + a1*a2*a3*c1*(-a2 + y2) + a3*b1*c1*(-a2 + y2) + a1*a2*a3*b1*c1*(-a2 + y2) + a3*b2*c1*(-a2 + y2) + a3*b1*b2*c1*(-a2 + y2) + a1*a3*b1*b2*c1*(-a2 + y2) + a2*a3*b1*b2*c1*(-a2 + y2) + b3*c1*(-a2 + y2) + a2*b3*c1*(-a2 + y2) + a3*b3*c1*(-a2 + y2) + a2*a3*b3*c1*(-a2 + y2) + b1*b3*c1*(-a2 + y2) + a1*b1*b3*c1*(-a2 + y2) + a2*b1*b3*c1*(-a2 + y2) + a2*a3*b1*b3*c1*(-a2 + y2) + a3*b2*b3*c1*(-a2 + y2) + a1*a3*b2*b3*c1*(-a2 + y2) + a2*a3*b2*b3*c1*(-a2 + y2) + b1*b2*b3*c1*(-a2 + y2) + a2*b1*b2*b3*c1*(-a2 + y2) + a1*a2*b1*b2*b3*c1*(-a2 + y2) + a1*a3*b1*b2*b3*c1*(-a2 + y2) + a1*a3*c2*(-a2 + y2) + a1*a2*a3*c2*(-a2 + y2) + a3*b1*c2*(-a2 + y2) + a1*a3*b1*c2*(-a2 + y2) + a2*a3*b1*c2*(-a2 + y2) + a1*a2*a3*b1*c2*(-a2 + y2) + a1*a3*b2*c2*(-a2 + y2) + a3*b1*b2*c2*(-a2 + y2) + a1*a3*b1*b2*c2*(-a2 + y2) + a1*a2*a3*b1*b2*c2*(-a2 + y2) + a1*b3*c2*(-a2 + y2) + a1*a2*b3*c2*(-a2 + y2) + a1*a2*a3*b1*b3*c2*(-a2 + y2) + a1*b2*b3*c2*(-a2 + y2) + a1*a3*b2*b3*c2*(-a2 + y2) + a2*b1*b2*b3*c2*(-a2 + y2) + a1*a2*b1*b2*b3*c2*(-a2 + y2) + a3*b1*b2*b3*c2*(-a2 + y2) + a1*a3*b1*b2*b3*c2*(-a2 + y2) + a3*c1*c2*(-a2 + y2) + a1*a3*c1*c2*(-a2 + y2) + a1*a3*b1*c1*c2*(-a2 + y2) + a2*a3*b1*c1*c2*(-a2 + y2) + a1*a3*b2*c1*c2*(-a2 + y2) + a2*a3*b2*c1*c2*(-a2 + y2) + a3*b1*b2*c1*c2*(-a2 + y2) + a1*a3*b1*b2*c1*c2*(-a2 + y2) + a1*a2*a3*b1*b2*c1*c2*(-a2 + y2) + b3*c1*c2*(-a2 + y2) + a1*b3*c1*c2*(-a2 + y2) + a1*a2*b3*c1*c2*(-a2 + y2) + a3*b3*c1*c2*(-a2 + y2) + a2*a3*b3*c1*c2*(-a2 + y2) + b1*b3*c1*c2*(-a2 + y2) + a1*b1*b3*c1*c2*(-a2 + y2) + a2*b1*b3*c1*c2*(-a2 + y2) + a1*a3*b1*b3*c1*c2*(-a2 + y2) + a1*a2*a3*b1*b3*c1*c2*(-a2 + y2) + a1*b2*b3*c1*c2*(-a2 + y2) + a2*b2*b3*c1*c2*(-a2 + y2) + b1*b2*b3*c1*c2*(-a2 + y2) + a1*b1*b2*b3*c1*c2*(-a2 + y2) + a1*a3*b1*b2*b3*c1*c2*(-a2 + y2) + a1*a3*c3*(-a2 + y2) + b1*c3*(-a2 + y2) + a1*b1*c3*(-a2 + y2) + a2*b1*c3*(-a2 + y2) + a1*a3*b1*c3*(-a2 + y2) + a2*a3*b1*c3*(-a2 + y2) + a1*b2*c3*(-a2 + y2) + a1*a2*b2*c3*(-a2 + y2) + a1*a3*b2*c3*(-a2 + y2) + a1*b1*b2*c3*(-a2 + y2) + a1*a3*b1*b2*c3*(-a2 + y2) + a1*a3*b3*c3*(-a2 + y2) + a1*a2*b1*b3*c3*(-a2 + y2) + a1*b2*b3*c3*(-a2 + y2) + a1*a2*b2*b3*c3*(-a2 + y2) + a1*a3*b2*b3*c3*(-a2 + y2) + b1*b2*b3*c3*(-a2 + y2) + a1*a2*b1*b2*b3*c3*(-a2 + y2) + a1*a2*c1*c3*(-a2 + y2) + a3*c1*c3*(-a2 + y2) + a1*a3*c1*c3*(-a2 + y2) + a1*b1*c1*c3*(-a2 + y2) + a2*b1*c1*c3*(-a2 + y2) + a1*a2*b1*c1*c3*(-a2 + y2) + a1*a3*b1*c1*c3*(-a2 + y2) + b2*c1*c3*(-a2 + y2) + a2*b2*c1*c3*(-a2 + y2) + a1*a2*b2*c1*c3*(-a2 + y2) + a3*b2*c1*c3*(-a2 + y2) + a1*a3*b2*c1*c3*(-a2 + y2) + a1*b1*b2*c1*c3*(-a2 + y2) + a2*b1*b2*c1*c3*(-a2 + y2) + a1*a3*b1*b2*c1*c3*(-a2 + y2) + a2*a3*b1*b2*c1*c3*(-a2 + y2) + a1*a2*a3*b1*b2*c1*c3*(-a2 + y2) + b3*c1*c3*(-a2 + y2) + a1*b3*c1*c3*(-a2 + y2) + a2*b3*c1*c3*(-a2 + y2) + a1*a2*b3*c1*c3*(-a2 + y2) + a1*a3*b3*c1*c3*(-a2 + y2) + a2*a3*b3*c1*c3*(-a2 + y2) + a2*b1*b3*c1*c3*(-a2 + y2) + a3*b1*b3*c1*c3*(-a2 + y2) + a2*a3*b1*b3*c1*c3*(-a2 + y2) + a3*b2*b3*c1*c3*(-a2 + y2) + a1*a3*b2*b3*c1*c3*(-a2 + y2) + a2*a3*b2*b3*c1*c3*(-a2 + y2) + a1*b1*b2*b3*c1*c3*(-a2 + y2) + a1*a2*a3*b1*b2*b3*c1*c3*(-a2 + y2) + a1*a2*c2*c3*(-a2 + y2) + a1*a3*c2*c3*(-a2 + y2) + b1*c2*c3*(-a2 + y2) + a1*a2*b1*c2*c3*(-a2 + y2) + a1*a3*b1*c2*c3*(-a2 + y2) + a2*a3*b1*c2*c3*(-a2 + y2) + b1*b2*c2*c3*(-a2 + y2) + a1*b1*b2*c2*c3*(-a2 + y2) + a1*a2*a3*b1*b2*c2*c3*(-a2 + y2) + b1*b3*c2*c3*(-a2 + y2) + a2*b1*b3*c2*c3*(-a2 + y2) + a3*b1*b3*c2*c3*(-a2 + y2) + a1*a3*b1*b3*c2*c3*(-a2 + y2) + a1*a3*b2*b3*c2*c3*(-a2 + y2) + a1*b1*b2*b3*c2*c3*(-a2 + y2) + a1*a2*a3*b1*b2*b3*c2*c3*(-a2 + y2) + c1*c2*c3*(-a2 + y2) + a1*c1*c2*c3*(-a2 + y2) + a1*b1*c1*c2*c3*(-a2 + y2) + a2*b1*c1*c2*c3*(-a2 + y2) + a3*b1*c1*c2*c3*(-a2 + y2) + a2*b1*b2*c1*c2*c3*(-a2 + y2) + a1*a2*b1*b2*c1*c2*c3*(-a2 + y2) + a3*b1*b2*c1*c2*c3*(-a2 + y2) + a1*a2*a3*b1*b2*c1*c2*c3*(-a2 + y2) + a3*b3*c1*c2*c3*(-a2 + y2) + a2*b1*b3*c1*c2*c3*(-a2 + y2) + a1*a2*b1*b3*c1*c2*c3*(-a2 + y2) + a1*a3*b1*b3*c1*c2*c3*(-a2 + y2) + a2*a3*b1*b3*c1*c2*c3*(-a2 + y2) + a1*a2*a3*b1*b3*c1*c2*c3*(-a2 + y2) + a1*b2*b3*c1*c2*c3*(-a2 + y2) + a3*b2*b3*c1*c2*c3*(-a2 + y2) + a1*b1*b2*b3*c1*c2*c3*(-a2 + y2) + a1*a3*b1*b2*b3*c1*c2*c3*(-a2 + y2) + a2*a3*b1*b2*b3*c1*c2*c3*(-a2 + y2) + a2*a3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*(-a1 + x1)*(-a2 + y2) + a2*a3*b1*(-a1 + x1)*(-a2 + y2) + a3*b2*(-a1 + x1)*(-a2 + y2) + a2*a3*b2*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*(-a1 + x1)*(-a2 + y2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + y2) + a1*b3*(-a1 + x1)*(-a2 + y2) + a2*b3*(-a1 + x1)*(-a2 + y2) + a1*a2*b3*(-a1 + x1)*(-a2 + y2) + a3*b3*(-a1 + x1)*(-a2 + y2) + a2*a3*b3*(-a1 + x1)*(-a2 + y2) + a1*b1*b3*(-a1 + x1)*(-a2 + y2) + a3*b1*b3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b3*(-a1 + x1)*(-a2 + y2) + b2*b3*(-a1 + x1)*(-a2 + y2) + a1*a2*b2*b3*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*(-a1 + x1)*(-a2 + y2) + a3*c1*(-a1 + x1)*(-a2 + y2) + a1*a3*c1*(-a1 + x1)*(-a2 + y2) + a3*b1*c1*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*c1*(-a1 + x1)*(-a2 + y2) + a3*b2*c1*(-a1 + x1)*(-a2 + y2) + a1*a3*b2*c1*(-a1 + x1)*(-a2 + y2) + b3*c1*(-a1 + x1)*(-a2 + y2) + a1*b3*c1*(-a1 + x1)*(-a2 + y2) + a2*b3*c1*(-a1 + x1)*(-a2 + y2) + a1*a2*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*b3*c1*(-a1 + x1)*(-a2 + y2) + a1*a3*b3*c1*(-a1 + x1)*(-a2 + y2) + b1*b3*c1*(-a1 + x1)*(-a2 + y2) + a2*b2*b3*c1*(-a1 + x1)*(-a2 + y2) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a2 + y2) + a3*c2*(-a1 + x1)*(-a2 + y2) + a1*a3*c2*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*c2*(-a1 + x1)*(-a2 + y2) + a3*b2*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*c2*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b2*c2*(-a1 + x1)*(-a2 + y2) + b3*c2*(-a1 + x1)*(-a2 + y2) + a2*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b3*c2*(-a1 + x1)*(-a2 + y2) + a1*b1*b3*c2*(-a1 + x1)*(-a2 + y2) + a1*a2*b1*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b3*c2*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b3*c2*(-a1 + x1)*(-a2 + y2) + a1*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a2 + y2) + a3*c1*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*c1*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*c1*c2*(-a1 + x1)*(-a2 + y2) + a1*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + b1*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + a2*b1*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + a3*b1*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + b2*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + a1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + b1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + y2) + a1*c3*(-a1 + x1)*(-a2 + y2) + a2*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*c3*(-a1 + x1)*(-a2 + y2) + a3*c3*(-a1 + x1)*(-a2 + y2) + a1*a3*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*b1*c3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*c3*(-a1 + x1)*(-a2 + y2) + a1*b2*c3*(-a1 + x1)*(-a2 + y2) + a2*b2*c3*(-a1 + x1)*(-a2 + y2) + a3*b2*c3*(-a1 + x1)*(-a2 + y2) + b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b2*c3*(-a1 + x1)*(-a2 + y2) + a1*b3*c3*(-a1 + x1)*(-a2 + y2) + a2*b3*c3*(-a1 + x1)*(-a2 + y2) + a3*b3*c3*(-a1 + x1)*(-a2 + y2) + b1*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b3*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*b1*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*a3*b1*b3*c3*(-a1 + x1)*(-a2 + y2) + b2*b3*c3*(-a1 + x1)*(-a2 + y2) + a3*b2*b3*c3*(-a1 + x1)*(-a2 + y2) + b1*b2*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b2*b3*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*b2*b3*c3*(-a1 + x1)*(-a2 + y2) + a1*c1*c3*(-a1 + x1)*(-a2 + y2) + a2*c1*c3*(-a1 + x1)*(-a2 + y2) + a3*c1*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*c1*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*c1*c3*(-a1 + x1)*(-a2 + y2) + a3*b1*c1*c3*(-a1 + x1)*(-a2 + y2) + b2*c1*c3*(-a1 + x1)*(-a2 + y2) + a1*b2*c1*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b2*c1*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*b2*c1*c3*(-a1 + x1)*(-a2 + y2) + a3*b1*b2*c1*c3*(-a1 + x1)*(-a2 + y2) + b3*c1*c3*(-a1 + x1)*(-a2 + y2) + a1*b3*c1*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b3*c1*c3*(-a1 + x1)*(-a2 + y2) + a2*b1*b3*c1*c3*(-a1 + x1)*(-a2 + y2) + a3*b1*b3*c1*c3*(-a1 + x1)*(-a2 + y2) + c2*c3*(-a1 + x1)*(-a2 + y2) + b1*c2*c3*(-a1 + x1)*(-a2 + y2) + a1*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + b1*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + b2*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + a1*b1*b2*b3*c2*c3*(-a1 + x1)*(-a2 + y2) + b3*c1*c2*c3*(-a1 + x1)*(-a2 + y2) + b1*b2*b3*c1*c2*c3*(-a1 + x1)*(-a2 + y2) + a1*a2*b3*(-a2 + x2)*(-a2 + y2) + a1*b1*b3*c1*(-a2 + x2)*(-a2 + y2) + a1*b2*b3*c2*(-a2 + x2)*(-a2 + y2) + b1*b3*c1*c2*(-a2 + x2)*(-a2 + y2) + b1*b2*c1*c3*(-a2 + x2)*(-a2 + y2) + b1*b3*c1*c3*(-a2 + x2)*(-a2 + y2) + a1*(-a3 + x3)*(-a2 + y2) + a1*a3*(-a3 + x3)*(-a2 + y2) + b1*(-a3 + x3)*(-a2 + y2) + a1*b1*(-a3 + x3)*(-a2 + y2) + a2*b1*(-a3 + x3)*(-a2 + y2) + a3*b1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*(-a3 + x3)*(-a2 + y2) + a1*b2*(-a3 + x3)*(-a2 + y2) + a1*a3*b2*(-a3 + x3)*(-a2 + y2) + b1*b2*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*(-a3 + x3)*(-a2 + y2) + a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a2 + y2) + a1*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*b3*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*b3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*b3*(-a3 + x3)*(-a2 + y2) + c1*(-a3 + x3)*(-a2 + y2) + a1*c1*(-a3 + x3)*(-a2 + y2) + a2*c1*(-a3 + x3)*(-a2 + y2) + a3*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*c1*(-a3 + x3)*(-a2 + y2) + b1*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*c1*(-a3 + x3)*(-a2 + y2) + a3*b1*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*c1*(-a3 + x3)*(-a2 + y2) + b2*c1*(-a3 + x3)*(-a2 + y2) + a1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*b2*c1*(-a3 + x3)*(-a2 + y2) + a3*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b2*c1*(-a3 + x3)*(-a2 + y2) + b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b2*c1*(-a3 + x3)*(-a2 + y2) + b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a2*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a3*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*b3*c1*(-a3 + x3)*(-a2 + y2) + a1*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*c2*(-a3 + x3)*(-a2 + y2) + b1*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*c2*(-a3 + x3)*(-a2 + y2) + a1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b2*c2*(-a3 + x3)*(-a2 + y2) + b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b2*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b3*c2*(-a3 + x3)*(-a2 + y2) + b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b3*c2*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c2*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b2*c1*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a3*b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + y2) + a1*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*c3*(-a3 + x3)*(-a2 + y2) + b1*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b2*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b2*c3*(-a3 + x3)*(-a2 + y2) + a1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b3*c3*(-a3 + x3)*(-a2 + y2) + b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*a3*b1*b3*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c3*(-a3 + x3)*(-a2 + y2) + c1*c3*(-a3 + x3)*(-a2 + y2) + a1*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*c1*c3*(-a3 + x3)*(-a2 + y2) + b1*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*c1*c3*(-a3 + x3)*(-a2 + y2) + b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b2*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*a3*b1*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a2*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a3*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + y2) + a1*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*b1*b2*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b2*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*b3*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*a3*b1*b3*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*b2*b3*c2*c3*(-a3 + x3)*(-a2 + y2) + a1*a2*b1*b2*b3*c2*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*b2*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + b1*b3*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + a3*b1*b3*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + a2*b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a2 + y2) + a3*(-a1 + y1)*(-a2 + y2) + a2*a3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*(-a1 + y1)*(-a2 + y2) + a2*a3*b1*(-a1 + y1)*(-a2 + y2) + a2*a3*b2*(-a1 + y1)*(-a2 + y2) + a3*b1*b2*(-a1 + y1)*(-a2 + y2) + a2*a3*b1*b2*(-a1 + y1)*(-a2 + y2) + b3*(-a1 + y1)*(-a2 + y2) + a1*b3*(-a1 + y1)*(-a2 + y2) + a1*a2*b3*(-a1 + y1)*(-a2 + y2) + a2*a3*b3*(-a1 + y1)*(-a2 + y2) + a2*b1*b3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b3*(-a1 + y1)*(-a2 + y2) + b2*b3*(-a1 + y1)*(-a2 + y2) + a2*b2*b3*(-a1 + y1)*(-a2 + y2) + a1*a2*b2*b3*(-a1 + y1)*(-a2 + y2) + a3*b2*b3*(-a1 + y1)*(-a2 + y2) + a3*c1*(-a1 + y1)*(-a2 + y2) + a1*a3*c1*(-a1 + y1)*(-a2 + y2) + a3*b1*c1*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*c1*(-a1 + y1)*(-a2 + y2) + a3*b2*c1*(-a1 + y1)*(-a2 + y2) + a1*a3*b2*c1*(-a1 + y1)*(-a2 + y2) + b3*c1*(-a1 + y1)*(-a2 + y2) + a1*b3*c1*(-a1 + y1)*(-a2 + y2) + a2*b3*c1*(-a1 + y1)*(-a2 + y2) + a1*a2*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*b3*c1*(-a1 + y1)*(-a2 + y2) + a1*a3*b3*c1*(-a1 + y1)*(-a2 + y2) + a2*b2*b3*c1*(-a1 + y1)*(-a2 + y2) + a2*b1*b2*b3*c1*(-a1 + y1)*(-a2 + y2) + a3*c2*(-a1 + y1)*(-a2 + y2) + a1*a3*c2*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*c2*(-a1 + y1)*(-a2 + y2) + a3*b2*c2*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b2*c2*(-a1 + y1)*(-a2 + y2) + a2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b3*c2*(-a1 + y1)*(-a2 + y2) + a1*b1*b3*c2*(-a1 + y1)*(-a2 + y2) + a2*b1*b3*c2*(-a1 + y1)*(-a2 + y2) + a1*a2*b1*b3*c2*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b3*c2*(-a1 + y1)*(-a2 + y2) + b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a1*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a1*b1*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a2*b1*b2*b3*c2*(-a1 + y1)*(-a2 + y2) + a3*c1*c2*(-a1 + y1)*(-a2 + y2) + a3*b1*c1*c2*(-a1 + y1)*(-a2 + y2) + a3*b1*b2*c1*c2*(-a1 + y1)*(-a2 + y2) + a1*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + b1*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + a2*b1*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + a3*b1*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + b2*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + a1*b2*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + b1*b2*b3*c1*c2*(-a1 + y1)*(-a2 + y2) + c3*(-a1 + y1)*(-a2 + y2) + a1*c3*(-a1 + y1)*(-a2 + y2) + a2*c3*(-a1 + y1)*(-a2 + y2) + a1*a2*c3*(-a1 + y1)*(-a2 + y2) + a3*c3*(-a1 + y1)*(-a2 + y2) + a1*a3*c3*(-a1 + y1)*(-a2 + y2) + a1*a2*b1*c3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*c3*(-a1 + y1)*(-a2 + y2) + b2*c3*(-a1 + y1)*(-a2 + y2) + a1*b2*c3*(-a1 + y1)*(-a2 + y2) + a2*b2*c3*(-a1 + y1)*(-a2 + y2) + a3*b2*c3*(-a1 + y1)*(-a2 + y2) + b1*b2*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b2*c3*(-a1 + y1)*(-a2 + y2) + a1*a2*b1*b2*c3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b2*c3*(-a1 + y1)*(-a2 + y2) + b3*c3*(-a1 + y1)*(-a2 + y2) + a1*b3*c3*(-a1 + y1)*(-a2 + y2) + a2*b3*c3*(-a1 + y1)*(-a2 + y2) + a3*b3*c3*(-a1 + y1)*(-a2 + y2) + b1*b3*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b3*c3*(-a1 + y1)*(-a2 + y2) + a1*a2*b1*b3*c3*(-a1 + y1)*(-a2 + y2) + a3*b1*b3*c3*(-a1 + y1)*(-a2 + y2) + a1*a3*b1*b3*c3*(-a1 + y1)*(-a2 + y2) + b2*b3*c3*(-a1 + y1)*(-a2 + y2) + a3*b2*b3*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b2*b3*c3*(-a1 + y1)*(-a2 + y2) + a2*b1*b2*b3*c3*(-a1 + y1)*(-a2 + y2) + a1*c1*c3*(-a1 + y1)*(-a2 + y2) + a2*c1*c3*(-a1 + y1)*(-a2 + y2) + a3*c1*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*c1*c3*(-a1 + y1)*(-a2 + y2) + a2*b1*c1*c3*(-a1 + y1)*(-a2 + y2) + a3*b1*c1*c3*(-a1 + y1)*(-a2 + y2) + b2*c1*c3*(-a1 + y1)*(-a2 + y2) + a1*b2*c1*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b2*c1*c3*(-a1 + y1)*(-a2 + y2) + a2*b1*b2*c1*c3*(-a1 + y1)*(-a2 + y2) + a3*b1*b2*c1*c3*(-a1 + y1)*(-a2 + y2) + b3*c1*c3*(-a1 + y1)*(-a2 + y2) + a1*b3*c1*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b3*c1*c3*(-a1 + y1)*(-a2 + y2) + a2*b1*b3*c1*c3*(-a1 + y1)*(-a2 + y2) + a3*b1*b3*c1*c3*(-a1 + y1)*(-a2 + y2) + c2*c3*(-a1 + y1)*(-a2 + y2) + b1*c2*c3*(-a1 + y1)*(-a2 + y2) + a1*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + b2*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + b1*b2*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + a1*b1*b2*b3*c2*c3*(-a1 + y1)*(-a2 + y2) + b3*c1*c2*c3*(-a1 + y1)*(-a2 + y2) + b1*b2*b3*c1*c2*c3*(-a1 + y1)*(-a2 + y2) + (a3*b1*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b2*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b3*c1*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b2*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b2*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b2*b3*c1*c2*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a2*b1*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*a3*b1*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b2*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b2*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a2*b1*b3*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a3*b1*b3*c1*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b3*c2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (a1*b1*b2*b3*c2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b3*c1*c2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + (b1*b2*b3*c1*c2*c3*(-a2 + y2)*(1 - a2 + y2))/2 + a1*a2*(-a3 + y3) + a1*a2*a3*(-a3 + y3) + a1*a2*b1*(-a3 + y3) + a1*a2*a3*b1*(-a3 + y3) + a1*b2*(-a3 + y3) + a1*a2*a3*b2*(-a3 + y3) + a1*b1*b2*(-a3 + y3) + a1*a2*b1*b2*(-a3 + y3) + a3*b1*b2*(-a3 + y3) + a1*a3*b1*b2*(-a3 + y3) + a1*a2*b3*(-a3 + y3) + a2*b1*b3*(-a3 + y3) + a1*a2*b1*b3*(-a3 + y3) + a1*a2*b2*b3*(-a3 + y3) + a1*a3*b2*b3*(-a3 + y3) + a1*a2*a3*b2*b3*(-a3 + y3) + a1*b1*b2*b3*(-a3 + y3) + a1*a2*a3*b1*b2*b3*(-a3 + y3) + a1*a2*c1*(-a3 + y3) + a1*a2*a3*c1*(-a3 + y3) + b2*c1*(-a3 + y3) + a2*b2*c1*(-a3 + y3) + a1*a2*b2*c1*(-a3 + y3) + a1*a3*b2*c1*(-a3 + y3) + a1*a2*a3*b2*c1*(-a3 + y3) + a2*b1*b2*c1*(-a3 + y3) + a2*a3*b1*b2*c1*(-a3 + y3) + a1*a2*a3*b1*b2*c1*(-a3 + y3) + a1*a2*b3*c1*(-a3 + y3) + a1*a2*a3*b1*b3*c1*(-a3 + y3) + b2*b3*c1*(-a3 + y3) + a1*b2*b3*c1*(-a3 + y3) + a2*b2*b3*c1*(-a3 + y3) + b1*b2*b3*c1*(-a3 + y3) + a2*b1*b2*b3*c1*(-a3 + y3) + a1*c2*(-a3 + y3) + b1*c2*(-a3 + y3) + a1*b1*c2*(-a3 + y3) + a2*b1*c2*(-a3 + y3) + a1*a3*b1*c2*(-a3 + y3) + a2*a3*b1*c2*(-a3 + y3) + a1*a3*b2*c2*(-a3 + y3) + a1*b1*b2*c2*(-a3 + y3) + a2*b1*b2*c2*(-a3 + y3) + a3*b1*b2*c2*(-a3 + y3) + a1*a3*b1*b2*c2*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a3 + y3) + a1*a2*b3*c2*(-a3 + y3) + a1*a3*b3*c2*(-a3 + y3) + a1*a2*a3*b3*c2*(-a3 + y3) + a1*a2*b1*b3*c2*(-a3 + y3) + a1*a3*b1*b3*c2*(-a3 + y3) + a2*a3*b1*b3*c2*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a3 + y3) + a1*b2*b3*c2*(-a3 + y3) + a3*b1*b2*b3*c2*(-a3 + y3) + a2*a3*b1*b2*b3*c2*(-a3 + y3) + c1*c2*(-a3 + y3) + a1*c1*c2*(-a3 + y3) + a2*c1*c2*(-a3 + y3) + a1*a2*c1*c2*(-a3 + y3) + a3*c1*c2*(-a3 + y3) + a2*a3*c1*c2*(-a3 + y3) + b1*c1*c2*(-a3 + y3) + a2*b1*c1*c2*(-a3 + y3) + a1*a3*b1*c1*c2*(-a3 + y3) + a2*a3*b1*c1*c2*(-a3 + y3) + b2*c1*c2*(-a3 + y3) + a1*b2*c1*c2*(-a3 + y3) + a1*a2*b2*c1*c2*(-a3 + y3) + a3*b2*c1*c2*(-a3 + y3) + a2*a3*b2*c1*c2*(-a3 + y3) + a2*b1*b2*c1*c2*(-a3 + y3) + a3*b1*b2*c1*c2*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a3 + y3) + a1*a2*a3*b1*b2*c1*c2*(-a3 + y3) + b3*c1*c2*(-a3 + y3) + a1*a2*b3*c1*c2*(-a3 + y3) + a3*b3*c1*c2*(-a3 + y3) + a1*a3*b3*c1*c2*(-a3 + y3) + a2*a3*b3*c1*c2*(-a3 + y3) + b1*b3*c1*c2*(-a3 + y3) + a1*b1*b3*c1*c2*(-a3 + y3) + a3*b1*b3*c1*c2*(-a3 + y3) + a1*a3*b1*b3*c1*c2*(-a3 + y3) + b2*b3*c1*c2*(-a3 + y3) + a1*b2*b3*c1*c2*(-a3 + y3) + a2*b2*b3*c1*c2*(-a3 + y3) + a1*a2*b2*b3*c1*c2*(-a3 + y3) + a1*a3*b2*b3*c1*c2*(-a3 + y3) + a2*a3*b2*b3*c1*c2*(-a3 + y3) + b1*b2*b3*c1*c2*(-a3 + y3) + a1*b1*b2*b3*c1*c2*(-a3 + y3) + a2*a3*b1*b2*b3*c1*c2*(-a3 + y3) + a1*a2*a3*b1*b2*b3*c1*c2*(-a3 + y3) + a1*a2*c3*(-a3 + y3) + a1*a2*b1*c3*(-a3 + y3) + a2*a3*b1*c3*(-a3 + y3) + a1*a2*b2*c3*(-a3 + y3) + b1*b2*c3*(-a3 + y3) + a1*b1*b2*c3*(-a3 + y3) + a2*b1*b2*c3*(-a3 + y3) + a1*a2*b1*b2*c3*(-a3 + y3) + a3*b1*b2*c3*(-a3 + y3) + a1*a3*b1*b2*c3*(-a3 + y3) + a2*a3*b1*b2*c3*(-a3 + y3) + a1*a2*a3*b1*b2*c3*(-a3 + y3) + a1*a2*b3*c3*(-a3 + y3) + a2*b1*b3*c3*(-a3 + y3) + a2*a3*b1*b3*c3*(-a3 + y3) + a1*a2*a3*b1*b3*c3*(-a3 + y3) + a1*b2*b3*c3*(-a3 + y3) + a1*a2*b2*b3*c3*(-a3 + y3) + a1*a3*b2*b3*c3*(-a3 + y3) + a1*a2*a3*b2*b3*c3*(-a3 + y3) + b1*b2*b3*c3*(-a3 + y3) + a2*b1*b2*b3*c3*(-a3 + y3) + a3*b1*b2*b3*c3*(-a3 + y3) + a2*a3*b1*b2*b3*c3*(-a3 + y3) + a2*b1*c1*c3*(-a3 + y3) + b2*c1*c3*(-a3 + y3) + a1*b1*b2*c1*c3*(-a3 + y3) + a2*b1*b2*c1*c3*(-a3 + y3) + a1*a2*b1*b2*c1*c3*(-a3 + y3) + a3*b1*b2*c1*c3*(-a3 + y3) + a1*a3*b1*b2*c1*c3*(-a3 + y3) + a2*a3*b1*b2*c1*c3*(-a3 + y3) + a1*a2*a3*b3*c1*c3*(-a3 + y3) + a2*a3*b1*b3*c1*c3*(-a3 + y3) + a1*a2*a3*b1*b3*c1*c3*(-a3 + y3) + b2*b3*c1*c3*(-a3 + y3) + a1*a3*b2*b3*c1*c3*(-a3 + y3) + a2*a3*b2*b3*c1*c3*(-a3 + y3) + b1*b2*b3*c1*c3*(-a3 + y3) + a1*b1*b2*b3*c1*c3*(-a3 + y3) + a1*a2*b1*b2*b3*c1*c3*(-a3 + y3) + a3*b1*b2*b3*c1*c3*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c3*(-a3 + y3) + a2*a3*b1*b2*b3*c1*c3*(-a3 + y3) + a1*a2*a3*b1*b2*b3*c1*c3*(-a3 + y3) + a1*c2*c3*(-a3 + y3) + a1*b1*c2*c3*(-a3 + y3) + a2*b1*c2*c3*(-a3 + y3) + a3*b1*c2*c3*(-a3 + y3) + a1*b2*c2*c3*(-a3 + y3) + b1*b2*c2*c3*(-a3 + y3) + a1*b1*b2*c2*c3*(-a3 + y3) + a3*b1*b2*c2*c3*(-a3 + y3) + a2*a3*b1*b2*c2*c3*(-a3 + y3) + a1*a2*a3*b1*b2*c2*c3*(-a3 + y3) + a1*a2*b3*c2*c3*(-a3 + y3) + a1*a3*b3*c2*c3*(-a3 + y3) + b1*b3*c2*c3*(-a3 + y3) + a2*b1*b3*c2*c3*(-a3 + y3) + a3*b1*b3*c2*c3*(-a3 + y3) + a1*a2*a3*b1*b3*c2*c3*(-a3 + y3) + b1*b2*b3*c2*c3*(-a3 + y3) + a1*b1*b2*b3*c2*c3*(-a3 + y3) + a2*b1*b2*b3*c2*c3*(-a3 + y3) + a1*a3*c1*c2*c3*(-a3 + y3) + a2*a3*c1*c2*c3*(-a3 + y3) + b1*c1*c2*c3*(-a3 + y3) + a1*a3*b1*c1*c2*c3*(-a3 + y3) + a2*a3*b1*c1*c2*c3*(-a3 + y3) + a1*a3*b2*c1*c2*c3*(-a3 + y3) + a2*a3*b2*c1*c2*c3*(-a3 + y3) + b1*b2*c1*c2*c3*(-a3 + y3) + a1*b1*b2*c1*c2*c3*(-a3 + y3) + a1*a2*b1*b2*c1*c2*c3*(-a3 + y3) + a3*b1*b2*c1*c2*c3*(-a3 + y3) + a1*a3*b1*b2*c1*c2*c3*(-a3 + y3) + a2*a3*b1*b2*c1*c2*c3*(-a3 + y3) + a1*b3*c1*c2*c3*(-a3 + y3) + a2*b3*c1*c2*c3*(-a3 + y3) + a1*a3*b3*c1*c2*c3*(-a3 + y3) + b1*b3*c1*c2*c3*(-a3 + y3) + a1*b1*b3*c1*c2*c3*(-a3 + y3) + a3*b1*b3*c1*c2*c3*(-a3 + y3) + a1*a3*b1*b3*c1*c2*c3*(-a3 + y3) + a2*a3*b1*b3*c1*c2*c3*(-a3 + y3) + a1*b2*b3*c1*c2*c3*(-a3 + y3) + a2*b2*b3*c1*c2*c3*(-a3 + y3) + a1*b1*b2*b3*c1*c2*c3*(-a3 + y3) + a1*a2*b1*b2*b3*c1*c2*c3*(-a3 + y3) + a2*(-a1 + x1)*(-a3 + y3) + a1*a2*(-a1 + x1)*(-a3 + y3) + a2*b1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*(-a1 + x1)*(-a3 + y3) + b2*(-a1 + x1)*(-a3 + y3) + a1*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*(-a1 + x1)*(-a3 + y3) + a3*b2*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + y3) + b1*b2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + y3) + a2*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*b3*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + y3) + a2*b1*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + y3) + b2*b3*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*b3*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*b3*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b2*b3*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*b3*(-a1 + x1)*(-a3 + y3) + a2*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*c1*(-a1 + x1)*(-a3 + y3) + b2*c1*(-a1 + x1)*(-a3 + y3) + a2*b2*c1*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + y3) + b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + y3) + a2*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*b1*b3*c1*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a3 + y3) + c2*(-a1 + x1)*(-a3 + y3) + a1*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*c2*(-a1 + x1)*(-a3 + y3) + b2*c2*(-a1 + x1)*(-a3 + y3) + a1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b2*c2*(-a1 + x1)*(-a3 + y3) + b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a1 + x1)*(-a3 + y3) + b3*c2*(-a1 + x1)*(-a3 + y3) + a1*b3*c2*(-a1 + x1)*(-a3 + y3) + a3*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b3*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a1 + x1)*(-a3 + y3) + b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a1*b1*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + y3) + c1*c2*(-a1 + x1)*(-a3 + y3) + b1*c1*c2*(-a1 + x1)*(-a3 + y3) + b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + y3) + b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + b1*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b2*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b3*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*a3*b1*b3*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*b3*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*b3*c3*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b2*c1*c3*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b2*c1*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b3*c1*c3*(-a1 + x1)*(-a3 + y3) + a2*a3*b1*b3*c1*c3*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*c1*c3*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*b3*c1*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b2*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b2*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b2*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b1*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*b1*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*b2*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b2*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + x1)*(-a3 + y3) + a2*b2*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b2*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b1*b2*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b3*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a3*b1*b3*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a2*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + y3) + a1*a3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*(-a2 + x2)*(-a3 + y3) + a1*a3*b2*(-a2 + x2)*(-a3 + y3) + a1*b1*b2*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + y3) + a1*a2*b3*(-a2 + x2)*(-a3 + y3) + a1*a3*b3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + y3) + a1*b1*b2*b3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*b3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*b3*(-a2 + x2)*(-a3 + y3) + a1*a3*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b2*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*b2*c1*(-a2 + x2)*(-a3 + y3) + b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + y3) + a1*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*a3*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*b1*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*b1*b2*b3*c1*(-a2 + x2)*(-a3 + y3) + a1*a3*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*c2*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b2*c2*(-a2 + x2)*(-a3 + y3) + b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + y3) + a1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b3*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*b3*c2*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + y3) + b1*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a3*b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + y3) + a1*a3*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*c3*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b2*c3*(-a2 + x2)*(-a3 + y3) + a1*b1*b2*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c3*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*b3*c3*(-a2 + x2)*(-a3 + y3) + c1*c3*(-a2 + x2)*(-a3 + y3) + a1*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*c1*c3*(-a2 + x2)*(-a3 + y3) + b1*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*b1*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*c1*c3*(-a2 + x2)*(-a3 + y3) + b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*b1*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*a3*b1*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + y3) + a1*c2*c3*(-a2 + x2)*(-a3 + y3) + b1*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*b1*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*c2*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b2*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + b1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*b1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a3*b1*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b2*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a3*b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + y3) + a1*a2*b3*(-a3 + x3)*(-a3 + y3) + a2*b1*b3*c1*(-a3 + x3)*(-a3 + y3) + a1*b1*b3*c2*(-a3 + x3)*(-a3 + y3) + a2*b1*b3*c2*(-a3 + x3)*(-a3 + y3) + a1*b2*b3*c2*(-a3 + x3)*(-a3 + y3) + b1*b3*c1*c2*(-a3 + x3)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a3 + x3)*(-a3 + y3) + b1*b3*c2*c3*(-a3 + x3)*(-a3 + y3) + a1*a2*(-a1 + y1)*(-a3 + y3) + a2*b1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*(-a1 + y1)*(-a3 + y3) + a1*b2*(-a1 + y1)*(-a3 + y3) + a2*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*(-a1 + y1)*(-a3 + y3) + a3*b2*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b2*(-a1 + y1)*(-a3 + y3) + b1*b2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a1 + y1)*(-a3 + y3) + a1*a2*b3*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b3*(-a1 + y1)*(-a3 + y3) + a2*b1*b3*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a1 + y1)*(-a3 + y3) + b2*b3*(-a1 + y1)*(-a3 + y3) + a2*b2*b3*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*b3*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*b3*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b2*b3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*b3*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*b3*(-a1 + y1)*(-a3 + y3) + a2*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*c1*(-a1 + y1)*(-a3 + y3) + b2*c1*(-a1 + y1)*(-a3 + y3) + a2*b2*c1*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*c1*(-a1 + y1)*(-a3 + y3) + b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a1 + y1)*(-a3 + y3) + a2*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*b1*b3*c1*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*b3*c1*(-a1 + y1)*(-a3 + y3) + a1*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*c2*(-a1 + y1)*(-a3 + y3) + a1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b2*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a1 + y1)*(-a3 + y3) + a1*b3*c2*(-a1 + y1)*(-a3 + y3) + a3*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b3*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + a1*b1*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*c2*(-a1 + y1)*(-a3 + y3) + c1*c2*(-a1 + y1)*(-a3 + y3) + b1*c1*c2*(-a1 + y1)*(-a3 + y3) + b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a1 + y1)*(-a3 + y3) + b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + b1*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a3*b1*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*c1*c2*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b2*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b2*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b3*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*a3*b1*b3*c3*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*b3*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*b3*c3*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b2*c1*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b2*c1*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b3*c1*c3*(-a1 + y1)*(-a3 + y3) + a2*a3*b1*b3*c1*c3*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c1*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*b3*c1*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b2*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*b1*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*b2*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b2*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b2*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b2*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b2*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b3*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a3*b1*b3*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b2*b3*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + y1)*(-a3 + y3) + a1*a3*(-a2 + y2)*(-a3 + y3) + b1*(-a2 + y2)*(-a3 + y3) + a2*b1*(-a2 + y2)*(-a3 + y3) + a3*b1*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*(-a2 + y2)*(-a3 + y3) + a1*a3*b2*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b2*(-a2 + y2)*(-a3 + y3) + a1*a2*b3*(-a2 + y2)*(-a3 + y3) + a1*a3*b3*(-a2 + y2)*(-a3 + y3) + b1*b3*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b3*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*b3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*b3*(-a2 + y2)*(-a3 + y3) + a1*a3*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*b2*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b2*c1*(-a2 + y2)*(-a3 + y3) + b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + y3) + a1*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*b1*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a2*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a3*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*b3*c1*(-a2 + y2)*(-a3 + y3) + a1*a3*c2*(-a2 + y2)*(-a3 + y3) + b1*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b2*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b2*c2*(-a2 + y2)*(-a3 + y3) + a1*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b3*c2*(-a2 + y2)*(-a3 + y3) + b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b3*c2*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c2*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*c2*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b2*c1*c2*(-a2 + y2)*(-a3 + y3) + b1*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a3*b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + y3) + a1*a3*c3*(-a2 + y2)*(-a3 + y3) + b1*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b2*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b2*c3*(-a2 + y2)*(-a3 + y3) + b1*b3*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b3*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*a3*b1*b3*c3*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c3*(-a2 + y2)*(-a3 + y3) + c1*c3*(-a2 + y2)*(-a3 + y3) + a1*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*c1*c3*(-a2 + y2)*(-a3 + y3) + b1*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*c1*c3*(-a2 + y2)*(-a3 + y3) + b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b2*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*a3*b1*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a2*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a3*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + y3) + a1*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b2*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b2*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*a3*b1*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*b1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*c1*c2*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*b2*c1*c2*c3*(-a2 + y2)*(-a3 + y3) + a3*b1*b3*c1*c2*c3*(-a2 + y2)*(-a3 + y3) + a2*b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a3 + y3) + (a2*b1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b1*b2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*b3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b1*b2*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*b2*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b2*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b2*b3*c1*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*b2*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*b3*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b3*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b2*b3*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*b3*c1*c2*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b1*b2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*a3*b1*b2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*a3*b2*b3*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*b3*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*b3*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*b3*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*c1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*c1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*b3*c1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*b3*c1*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a3*b1*b2*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b3*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a1*b1*b2*b3*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (a2*b1*b2*b3*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*c1*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + (b1*b2*b3*c1*c2*c3*(-a3 + y3)*(1 - a3 + y3))/2 + a1*a3*b2*(-a1 + z1) + a2*a3*b2*(-a1 + z1) + a1*a3*b1*b2*(-a1 + z1) + a1*a2*a3*b1*b2*(-a1 + z1) + a1*a2*a3*b3*(-a1 + z1) + a2*b1*b3*(-a1 + z1) + a1*a2*b1*b3*(-a1 + z1) + a2*a3*b1*b3*(-a1 + z1) + a1*a2*b2*b3*(-a1 + z1) + a2*a3*b2*b3*(-a1 + z1) + a1*a2*a3*b2*b3*(-a1 + z1) + a1*a3*b1*b2*b3*(-a1 + z1) + a1*a2*a3*b1*b2*b3*(-a1 + z1) + a2*a3*b1*c1*(-a1 + z1) + a1*a2*a3*b1*c1*(-a1 + z1) + a1*a2*a3*b2*c1*(-a1 + z1) + a1*a3*b1*b2*c1*(-a1 + z1) + a1*a2*b3*c1*(-a1 + z1) + b1*b2*b3*c1*(-a1 + z1) + a2*b1*b2*b3*c1*(-a1 + z1) + a2*a3*c2*(-a1 + z1) + a1*a2*a3*c2*(-a1 + z1) + a2*a3*b1*c2*(-a1 + z1) + a1*a2*a3*b1*c2*(-a1 + z1) + a1*a3*b2*c2*(-a1 + z1) + a1*a2*a3*b2*c2*(-a1 + z1) + a2*a3*b1*b2*c2*(-a1 + z1) + a1*a2*a3*b1*b2*c2*(-a1 + z1) + a1*b3*c2*(-a1 + z1) + a2*b3*c2*(-a1 + z1) + a1*a3*b3*c2*(-a1 + z1) + a1*a2*a3*b3*c2*(-a1 + z1) + b1*b3*c2*(-a1 + z1) + a1*a3*b1*b3*c2*(-a1 + z1) + a1*a2*a3*b1*b3*c2*(-a1 + z1) + b2*b3*c2*(-a1 + z1) + a1*b2*b3*c2*(-a1 + z1) + a3*b2*b3*c2*(-a1 + z1) + a1*a3*b2*b3*c2*(-a1 + z1) + a1*a2*b1*b2*b3*c2*(-a1 + z1) + a3*b1*b2*b3*c2*(-a1 + z1) + a2*a3*b1*b2*b3*c2*(-a1 + z1) + a1*a3*b1*c1*c2*(-a1 + z1) + a2*a3*b1*c1*c2*(-a1 + z1) + a3*b2*c1*c2*(-a1 + z1) + a2*a3*b2*c1*c2*(-a1 + z1) + a1*b3*c1*c2*(-a1 + z1) + a1*a2*b3*c1*c2*(-a1 + z1) + a2*a3*b3*c1*c2*(-a1 + z1) + b1*b3*c1*c2*(-a1 + z1) + a1*a2*b1*b3*c1*c2*(-a1 + z1) + a3*b1*b3*c1*c2*(-a1 + z1) + b2*b3*c1*c2*(-a1 + z1) + a2*b2*b3*c1*c2*(-a1 + z1) + a1*a2*b2*b3*c1*c2*(-a1 + z1) + a1*a2*b1*c3*(-a1 + z1) + a2*a3*b1*c3*(-a1 + z1) + a1*b2*c3*(-a1 + z1) + a2*b2*c3*(-a1 + z1) + a1*a2*b1*b2*c3*(-a1 + z1) + a1*a3*b1*b2*c3*(-a1 + z1) + a1*a2*b3*c3*(-a1 + z1) + a1*a2*b2*b3*c3*(-a1 + z1) + a1*a3*b2*b3*c3*(-a1 + z1) + a2*a3*b2*b3*c3*(-a1 + z1) + a2*b1*b2*b3*c3*(-a1 + z1) + a1*a2*b1*b2*b3*c3*(-a1 + z1) + a2*b1*c1*c3*(-a1 + z1) + a1*b2*c1*c3*(-a1 + z1) + a1*a2*b2*c1*c3*(-a1 + z1) + a1*a3*b2*c1*c3*(-a1 + z1) + b1*b2*c1*c3*(-a1 + z1) + a1*b1*b2*c1*c3*(-a1 + z1) + a3*b1*b2*c1*c3*(-a1 + z1) + a1*a2*b1*b3*c1*c3*(-a1 + z1) + a1*b2*b3*c1*c3*(-a1 + z1) + a1*a2*b2*b3*c1*c3*(-a1 + z1) + b1*b2*b3*c1*c3*(-a1 + z1) + a1*b1*b2*b3*c1*c3*(-a1 + z1) + a1*a3*c2*c3*(-a1 + z1) + a2*a3*c2*c3*(-a1 + z1) + a1*b1*c2*c3*(-a1 + z1) + a1*a2*b1*c2*c3*(-a1 + z1) + a3*b1*c2*c3*(-a1 + z1) + a1*a3*b1*c2*c3*(-a1 + z1) + a1*b2*c2*c3*(-a1 + z1) + a2*b2*c2*c3*(-a1 + z1) + a3*b2*c2*c3*(-a1 + z1) + a1*a3*b1*b2*c2*c3*(-a1 + z1) + a1*a2*a3*b1*b2*c2*c3*(-a1 + z1) + a1*a3*b3*c2*c3*(-a1 + z1) + a2*a3*b3*c2*c3*(-a1 + z1) + a2*b1*b3*c2*c3*(-a1 + z1) + a1*b1*b2*b3*c2*c3*(-a1 + z1) + a2*b1*b2*b3*c2*c3*(-a1 + z1) + a1*a3*b1*b2*b3*c2*c3*(-a1 + z1) + a1*a2*a3*b1*b2*b3*c2*c3*(-a1 + z1) + a2*c1*c2*c3*(-a1 + z1) + a2*b1*c1*c2*c3*(-a1 + z1) + a3*b1*c1*c2*c3*(-a1 + z1) + b2*c1*c2*c3*(-a1 + z1) + a3*b2*c1*c2*c3*(-a1 + z1) + b1*b2*c1*c2*c3*(-a1 + z1) + a3*b1*b2*c1*c2*c3*(-a1 + z1) + a2*a3*b1*b2*c1*c2*c3*(-a1 + z1) + a1*b1*b3*c1*c2*c3*(-a1 + z1) + a3*b2*b3*c1*c2*c3*(-a1 + z1) + b1*b2*b3*c1*c2*c3*(-a1 + z1) + a3*b1*b2*b3*c1*c2*c3*(-a1 + z1) + a2*a3*b1*b2*b3*c1*c2*c3*(-a1 + z1) + a3*b2*(-a1 + x1)*(-a1 + z1) + a1*a3*b2*(-a1 + x1)*(-a1 + z1) + a3*b1*b2*(-a1 + x1)*(-a1 + z1) + a1*a2*b3*(-a1 + x1)*(-a1 + z1) + a2*a3*b3*(-a1 + x1)*(-a1 + z1) + a1*b2*b3*(-a1 + x1)*(-a1 + z1) + a2*b2*b3*(-a1 + x1)*(-a1 + z1) + a3*b2*b3*(-a1 + x1)*(-a1 + z1) + a3*b2*c1*(-a1 + x1)*(-a1 + z1) + a3*b1*b2*c1*(-a1 + x1)*(-a1 + z1) + a2*b3*c1*(-a1 + x1)*(-a1 + z1) + b2*b3*c1*(-a1 + x1)*(-a1 + z1) + a1*b2*b3*c1*(-a1 + x1)*(-a1 + z1) + a2*b2*b3*c1*(-a1 + x1)*(-a1 + z1) + a3*b1*b2*c2*(-a1 + x1)*(-a1 + z1) + a3*b3*c2*(-a1 + x1)*(-a1 + z1) + b2*b3*c2*(-a1 + x1)*(-a1 + z1) + a2*b2*b3*c2*(-a1 + x1)*(-a1 + z1) + a3*b2*b3*c2*(-a1 + x1)*(-a1 + z1) + a1*b2*c3*(-a1 + x1)*(-a1 + z1) + a1*b1*b2*c3*(-a1 + x1)*(-a1 + z1) + a2*b1*b2*c3*(-a1 + x1)*(-a1 + z1) + a3*b1*b2*c3*(-a1 + x1)*(-a1 + z1) + a2*b3*c3*(-a1 + x1)*(-a1 + z1) + a1*b2*b3*c3*(-a1 + x1)*(-a1 + z1) + a2*b2*b3*c3*(-a1 + x1)*(-a1 + z1) + a3*b2*b3*c3*(-a1 + x1)*(-a1 + z1) + b2*c1*c3*(-a1 + x1)*(-a1 + z1) + b1*b2*c1*c3*(-a1 + x1)*(-a1 + z1) + b2*b3*c1*c3*(-a1 + x1)*(-a1 + z1) + b1*b2*b3*c1*c3*(-a1 + x1)*(-a1 + z1) + b3*c2*c3*(-a1 + x1)*(-a1 + z1) + b2*b3*c2*c3*(-a1 + x1)*(-a1 + z1) + b1*b2*b3*c2*c3*(-a1 + x1)*(-a1 + z1) + a1*a3*(-a2 + x2)*(-a1 + z1) + a2*a3*b1*(-a2 + x2)*(-a1 + z1) + a1*a3*b2*(-a2 + x2)*(-a1 + z1) + a1*a3*b1*b2*(-a2 + x2)*(-a1 + z1) + a2*a3*b1*b2*(-a2 + x2)*(-a1 + z1) + a1*b3*(-a2 + x2)*(-a1 + z1) + a2*b3*(-a2 + x2)*(-a1 + z1) + a1*a2*b3*(-a2 + x2)*(-a1 + z1) + a3*b3*(-a2 + x2)*(-a1 + z1) + a1*a3*b3*(-a2 + x2)*(-a1 + z1) + a2*a3*b3*(-a2 + x2)*(-a1 + z1) + a1*a2*b1*b3*(-a2 + x2)*(-a1 + z1) + a1*b2*b3*(-a2 + x2)*(-a1 + z1) + a2*b2*b3*(-a2 + x2)*(-a1 + z1) + a1*a2*b2*b3*(-a2 + x2)*(-a1 + z1) + a3*b2*b3*(-a2 + x2)*(-a1 + z1) + a3*b1*c1*(-a2 + x2)*(-a1 + z1) + b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a1*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a2*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + a3*b1*b3*c1*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c1*(-a2 + x2)*(-a1 + z1) + a2*b1*b2*b3*c1*(-a2 + x2)*(-a1 + z1) + a3*c2*(-a2 + x2)*(-a1 + z1) + a3*b2*c2*(-a2 + x2)*(-a1 + z1) + b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b3*c2*(-a2 + x2)*(-a1 + z1) + a2*b3*c2*(-a2 + x2)*(-a1 + z1) + a3*b1*b3*c2*(-a2 + x2)*(-a1 + z1) + b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a2*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a3*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a1 + z1) + a1*c3*(-a2 + x2)*(-a1 + z1) + a2*c3*(-a2 + x2)*(-a1 + z1) + a3*c3*(-a2 + x2)*(-a1 + z1) + a1*b2*c3*(-a2 + x2)*(-a1 + z1) + a2*b2*c3*(-a2 + x2)*(-a1 + z1) + a3*b2*c3*(-a2 + x2)*(-a1 + z1) + a1*b3*c3*(-a2 + x2)*(-a1 + z1) + a3*b3*c3*(-a2 + x2)*(-a1 + z1) + a2*b1*b3*c3*(-a2 + x2)*(-a1 + z1) + a2*b2*b3*c3*(-a2 + x2)*(-a1 + z1) + a3*b2*b3*c3*(-a2 + x2)*(-a1 + z1) + a1*b1*b2*b3*c3*(-a2 + x2)*(-a1 + z1) + a2*b1*b2*b3*c3*(-a2 + x2)*(-a1 + z1) + b1*c1*c3*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a1 + z1) + b1*c2*c3*(-a2 + x2)*(-a1 + z1) + b3*c2*c3*(-a2 + x2)*(-a1 + z1) + b1*b3*c2*c3*(-a2 + x2)*(-a1 + z1) + b1*b2*b3*c2*c3*(-a2 + x2)*(-a1 + z1) + a1*a2*(-a3 + x3)*(-a1 + z1) + a2*a3*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*(-a3 + x3)*(-a1 + z1) + a1*a2*b2*(-a3 + x3)*(-a1 + z1) + a2*a3*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a1 + z1) + a1*a2*b3*(-a3 + x3)*(-a1 + z1) + a2*a3*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b3*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*b2*b3*(-a3 + x3)*(-a1 + z1) + a1*a3*b2*b3*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*b3*(-a3 + x3)*(-a1 + z1) + a1*a3*b1*b2*b3*(-a3 + x3)*(-a1 + z1) + a2*b1*c1*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b3*c1*(-a3 + x3)*(-a1 + z1) + c2*(-a3 + x3)*(-a1 + z1) + a1*c2*(-a3 + x3)*(-a1 + z1) + a2*c2*(-a3 + x3)*(-a1 + z1) + a3*c2*(-a3 + x3)*(-a1 + z1) + b1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*c2*(-a3 + x3)*(-a1 + z1) + b2*c2*(-a3 + x3)*(-a1 + z1) + a1*b2*c2*(-a3 + x3)*(-a1 + z1) + a2*b2*c2*(-a3 + x3)*(-a1 + z1) + a3*b2*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b2*c2*(-a3 + x3)*(-a1 + z1) + b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b3*c2*(-a3 + x3)*(-a1 + z1) + a3*b3*c2*(-a3 + x3)*(-a1 + z1) + b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a3*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b3*c2*(-a3 + x3)*(-a1 + z1) + b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a3 + x3)*(-a1 + z1) + b1*c1*c2*(-a3 + x3)*(-a1 + z1) + b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*c1*c2*(-a3 + x3)*(-a1 + z1) + b1*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*b1*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b3*c1*c2*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*c3*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b2*c3*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b3*c3*(-a3 + x3)*(-a1 + z1) + a1*a2*a3*b1*b3*c3*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c1*c3*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b2*c1*c3*(-a3 + x3)*(-a1 + z1) + a2*b1*b3*c1*c3*(-a3 + x3)*(-a1 + z1) + a2*a3*b1*b3*c1*c3*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*a3*b1*b2*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*b1*b3*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*a3*b1*b3*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*a2*b1*b2*b3*c2*c3*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + a3*b1*b2*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + b1*b3*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + a3*b1*b3*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + a2*b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a1 + z1) + a1*a3*b2*(-a1 + y1)*(-a1 + z1) + a3*b1*b2*(-a1 + y1)*(-a1 + z1) + a2*b3*(-a1 + y1)*(-a1 + z1) + a1*a2*b3*(-a1 + y1)*(-a1 + z1) + a2*a3*b3*(-a1 + y1)*(-a1 + z1) + a2*b1*b3*(-a1 + y1)*(-a1 + z1) + b2*b3*(-a1 + y1)*(-a1 + z1) + a3*b2*b3*(-a1 + y1)*(-a1 + z1) + a3*b2*c1*(-a1 + y1)*(-a1 + z1) + a3*b1*b2*c1*(-a1 + y1)*(-a1 + z1) + a2*b3*c1*(-a1 + y1)*(-a1 + z1) + b2*b3*c1*(-a1 + y1)*(-a1 + z1) + a1*b2*b3*c1*(-a1 + y1)*(-a1 + z1) + a2*b2*b3*c1*(-a1 + y1)*(-a1 + z1) + b1*b2*b3*c1*(-a1 + y1)*(-a1 + z1) + a3*b1*b2*c2*(-a1 + y1)*(-a1 + z1) + a3*b3*c2*(-a1 + y1)*(-a1 + z1) + b2*b3*c2*(-a1 + y1)*(-a1 + z1) + a2*b2*b3*c2*(-a1 + y1)*(-a1 + z1) + a3*b2*b3*c2*(-a1 + y1)*(-a1 + z1) + b2*c3*(-a1 + y1)*(-a1 + z1) + a1*b2*c3*(-a1 + y1)*(-a1 + z1) + b1*b2*c3*(-a1 + y1)*(-a1 + z1) + a1*b1*b2*c3*(-a1 + y1)*(-a1 + z1) + a2*b1*b2*c3*(-a1 + y1)*(-a1 + z1) + a3*b1*b2*c3*(-a1 + y1)*(-a1 + z1) + a2*b3*c3*(-a1 + y1)*(-a1 + z1) + b2*b3*c3*(-a1 + y1)*(-a1 + z1) + a1*b2*b3*c3*(-a1 + y1)*(-a1 + z1) + a2*b2*b3*c3*(-a1 + y1)*(-a1 + z1) + a3*b2*b3*c3*(-a1 + y1)*(-a1 + z1) + b2*c1*c3*(-a1 + y1)*(-a1 + z1) + b1*b2*c1*c3*(-a1 + y1)*(-a1 + z1) + b2*b3*c1*c3*(-a1 + y1)*(-a1 + z1) + b1*b2*b3*c1*c3*(-a1 + y1)*(-a1 + z1) + b3*c2*c3*(-a1 + y1)*(-a1 + z1) + b2*b3*c2*c3*(-a1 + y1)*(-a1 + z1) + b1*b2*b3*c2*c3*(-a1 + y1)*(-a1 + z1) + a1*a3*(-a2 + y2)*(-a1 + z1) + a2*a3*b1*(-a2 + y2)*(-a1 + z1) + a1*a3*b2*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*(-a2 + y2)*(-a1 + z1) + a2*a3*b1*b2*(-a2 + y2)*(-a1 + z1) + a1*b3*(-a2 + y2)*(-a1 + z1) + a2*b3*(-a2 + y2)*(-a1 + z1) + a1*a2*b3*(-a2 + y2)*(-a1 + z1) + a1*a3*b3*(-a2 + y2)*(-a1 + z1) + a2*a3*b3*(-a2 + y2)*(-a1 + z1) + a1*b1*b3*(-a2 + y2)*(-a1 + z1) + a3*b1*b3*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b3*(-a2 + y2)*(-a1 + z1) + b2*b3*(-a2 + y2)*(-a1 + z1) + a1*a2*b2*b3*(-a2 + y2)*(-a1 + z1) + a3*b2*b3*(-a2 + y2)*(-a1 + z1) + a3*b1*c1*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*c1*(-a2 + y2)*(-a1 + z1) + a1*b1*b3*c1*(-a2 + y2)*(-a1 + z1) + a2*b1*b2*b3*c1*(-a2 + y2)*(-a1 + z1) + a3*c2*(-a2 + y2)*(-a1 + z1) + a3*b2*c2*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b2*c2*(-a2 + y2)*(-a1 + z1) + b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b3*c2*(-a2 + y2)*(-a1 + z1) + a2*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*a2*b1*b3*c2*(-a2 + y2)*(-a1 + z1) + a3*b1*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a2*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a3*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*c1*c2*(-a2 + y2)*(-a1 + z1) + a2*b1*b3*c1*c2*(-a2 + y2)*(-a1 + z1) + a3*b1*b3*c1*c2*(-a2 + y2)*(-a1 + z1) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a1 + z1) + a1*c3*(-a2 + y2)*(-a1 + z1) + a2*c3*(-a2 + y2)*(-a1 + z1) + a3*c3*(-a2 + y2)*(-a1 + z1) + a1*b2*c3*(-a2 + y2)*(-a1 + z1) + a2*b2*c3*(-a2 + y2)*(-a1 + z1) + a3*b2*c3*(-a2 + y2)*(-a1 + z1) + a1*a2*b1*b2*c3*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b2*c3*(-a2 + y2)*(-a1 + z1) + b3*c3*(-a2 + y2)*(-a1 + z1) + a1*b3*c3*(-a2 + y2)*(-a1 + z1) + a3*b3*c3*(-a2 + y2)*(-a1 + z1) + b1*b3*c3*(-a2 + y2)*(-a1 + z1) + a2*b1*b3*c3*(-a2 + y2)*(-a1 + z1) + a1*a2*b1*b3*c3*(-a2 + y2)*(-a1 + z1) + a1*a3*b1*b3*c3*(-a2 + y2)*(-a1 + z1) + b2*b3*c3*(-a2 + y2)*(-a1 + z1) + a2*b2*b3*c3*(-a2 + y2)*(-a1 + z1) + a3*b2*b3*c3*(-a2 + y2)*(-a1 + z1) + a1*b1*b2*b3*c3*(-a2 + y2)*(-a1 + z1) + a2*b1*b2*b3*c3*(-a2 + y2)*(-a1 + z1) + b1*c1*c3*(-a2 + y2)*(-a1 + z1) + a2*b1*b2*c1*c3*(-a2 + y2)*(-a1 + z1) + a3*b1*b2*c1*c3*(-a2 + y2)*(-a1 + z1) + a2*b1*b3*c1*c3*(-a2 + y2)*(-a1 + z1) + a3*b1*b3*c1*c3*(-a2 + y2)*(-a1 + z1) + b1*b2*b3*c1*c3*(-a2 + y2)*(-a1 + z1) + b1*c2*c3*(-a2 + y2)*(-a1 + z1) + b3*c2*c3*(-a2 + y2)*(-a1 + z1) + b1*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + a1*b1*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + b1*b2*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + a1*b1*b2*b3*c2*c3*(-a2 + y2)*(-a1 + z1) + b1*b3*c1*c2*c3*(-a2 + y2)*(-a1 + z1) + b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a1 + z1) + a1*a2*(-a3 + y3)*(-a1 + z1) + a2*a3*(-a3 + y3)*(-a1 + z1) + a2*b1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*(-a3 + y3)*(-a1 + z1) + a1*b2*(-a3 + y3)*(-a1 + z1) + a2*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*b2*(-a3 + y3)*(-a1 + z1) + a2*a3*b2*(-a3 + y3)*(-a1 + z1) + b1*b2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b2*(-a3 + y3)*(-a1 + z1) + a1*a2*b3*(-a3 + y3)*(-a1 + z1) + a2*a3*b3*(-a3 + y3)*(-a1 + z1) + a2*b1*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b3*(-a3 + y3)*(-a1 + z1) + b2*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*b2*b3*(-a3 + y3)*(-a1 + z1) + a3*b2*b3*(-a3 + y3)*(-a1 + z1) + a2*a3*b2*b3*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b2*b3*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*b3*(-a3 + y3)*(-a1 + z1) + a2*b1*c1*(-a3 + y3)*(-a1 + z1) + b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*c1*(-a3 + y3)*(-a1 + z1) + a2*b1*b3*c1*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*c1*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*b3*c1*(-a3 + y3)*(-a1 + z1) + c2*(-a3 + y3)*(-a1 + z1) + a1*c2*(-a3 + y3)*(-a1 + z1) + a2*c2*(-a3 + y3)*(-a1 + z1) + a3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*c2*(-a3 + y3)*(-a1 + z1) + a1*b2*c2*(-a3 + y3)*(-a1 + z1) + a2*b2*c2*(-a3 + y3)*(-a1 + z1) + a3*b2*c2*(-a3 + y3)*(-a1 + z1) + b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b2*c2*(-a3 + y3)*(-a1 + z1) + b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b3*c2*(-a3 + y3)*(-a1 + z1) + a3*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b3*c2*(-a3 + y3)*(-a1 + z1) + b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a3*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a1*b1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*b3*c2*(-a3 + y3)*(-a1 + z1) + b1*c1*c2*(-a3 + y3)*(-a1 + z1) + b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*c1*c2*(-a3 + y3)*(-a1 + z1) + b1*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + a3*b1*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*c1*c2*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*c3*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b2*c3*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*c3*(-a3 + y3)*(-a1 + z1) + a1*a2*a3*b1*b3*c3*(-a3 + y3)*(-a1 + z1) + a1*a3*b2*b3*c3*(-a3 + y3)*(-a1 + z1) + a2*a3*b2*b3*c3*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*c3*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b2*c1*c3*(-a3 + y3)*(-a1 + z1) + a2*a3*b1*b3*c1*c3*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*b3*c1*c3*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b2*c2*c3*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b2*c2*c3*(-a3 + y3)*(-a1 + z1) + a3*b1*b3*c2*c3*(-a3 + y3)*(-a1 + z1) + a1*a3*b1*b3*c2*c3*(-a3 + y3)*(-a1 + z1) + a3*b2*b3*c2*c3*(-a3 + y3)*(-a1 + z1) + a1*a2*b1*b2*b3*c2*c3*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*c1*c2*c3*(-a3 + y3)*(-a1 + z1) + a3*b1*b2*c1*c2*c3*(-a3 + y3)*(-a1 + z1) + a3*b1*b3*c1*c2*c3*(-a3 + y3)*(-a1 + z1) + a2*b1*b2*b3*c1*c2*c3*(-a3 + y3)*(-a1 + z1) + (a2*a3*b1*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*a3*b2*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b1*b2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*a2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*a3*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*b3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c1*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b1*b3*c1*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b2*b3*c1*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b1*b2*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b1*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a1*b2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*b3*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b2*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b2*b3*c1*c2*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b1*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b1*b2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b3*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a2*b1*b3*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (a3*b2*b3*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b2*b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + (b1*b2*b3*c2*c3*(-a1 + z1)*(1 - a1 + z1))/2 + a1*a2*a3*b1*(-a2 + z2) + a1*a2*a3*b1*b2*(-a2 + z2) + a1*a3*b1*b2*b3*(-a2 + z2) + a1*a2*a3*b1*b2*b3*(-a2 + z2) + a1*a2*a3*b1*c1*(-a2 + z2) + a3*b1*b2*c1*(-a2 + z2) + a1*a3*b1*b2*c1*(-a2 + z2) + a2*a3*b1*b2*c1*(-a2 + z2) + a1*a2*a3*b1*b2*c1*(-a2 + z2) + a2*b1*b3*c1*(-a2 + z2) + a2*a3*b1*b3*c1*(-a2 + z2) + a1*a2*a3*b1*b3*c1*(-a2 + z2) + a1*b1*b2*b3*c1*(-a2 + z2) + a2*b1*b2*b3*c1*(-a2 + z2) + a1*a2*b1*b2*b3*c1*(-a2 + z2) + a1*a3*b1*b2*b3*c1*(-a2 + z2) + a1*a2*a3*b1*c2*(-a2 + z2) + a1*a3*b1*b2*c2*(-a2 + z2) + a1*a2*b1*b3*c2*(-a2 + z2) + a3*b2*c1*c2*(-a2 + z2) + a2*a3*b2*c1*c2*(-a2 + z2) + a3*b1*b2*c1*c2*(-a2 + z2) + a2*a3*b1*b2*c1*c2*(-a2 + z2) + a2*a3*b3*c1*c2*(-a2 + z2) + a1*a2*b1*b3*c1*c2*(-a2 + z2) + a3*b1*b3*c1*c2*(-a2 + z2) + a2*a3*b1*b3*c1*c2*(-a2 + z2) + b2*b3*c1*c2*(-a2 + z2) + a2*b2*b3*c1*c2*(-a2 + z2) + b1*b2*b3*c1*c2*(-a2 + z2) + a2*b1*b2*b3*c1*c2*(-a2 + z2) + a1*a3*b1*b2*b3*c1*c2*(-a2 + z2) + a1*a2*b1*c3*(-a2 + z2) + a1*a2*b1*b2*c3*(-a2 + z2) + a1*a2*a3*b1*b2*c3*(-a2 + z2) + a1*a2*b1*b3*c3*(-a2 + z2) + a1*a2*a3*b1*b3*c3*(-a2 + z2) + a1*a2*b1*b2*b3*c3*(-a2 + z2) + a2*b1*b2*c1*c3*(-a2 + z2) + a1*a2*b1*b2*c1*c3*(-a2 + z2) + a3*b1*b2*c1*c3*(-a2 + z2) + a1*b1*b3*c1*c3*(-a2 + z2) + a2*b1*b3*c1*c3*(-a2 + z2) + a1*a2*b1*b3*c1*c3*(-a2 + z2) + a3*b1*b3*c1*c3*(-a2 + z2) + a2*a3*b1*b3*c1*c3*(-a2 + z2) + a1*a2*a3*b1*b3*c1*c3*(-a2 + z2) + a1*a2*a3*b1*b2*b3*c1*c3*(-a2 + z2) + a1*a2*b1*c2*c3*(-a2 + z2) + a1*a3*b1*c2*c3*(-a2 + z2) + a1*a3*b1*b2*c2*c3*(-a2 + z2) + a1*a2*a3*b1*b2*c2*c3*(-a2 + z2) + a1*b1*b3*c2*c3*(-a2 + z2) + a1*a2*b1*b3*c2*c3*(-a2 + z2) + a1*b1*b2*b3*c2*c3*(-a2 + z2) + a1*a2*b1*b2*b3*c2*c3*(-a2 + z2) + a1*a3*b1*b2*b3*c2*c3*(-a2 + z2) + a1*a2*a3*b1*b2*b3*c2*c3*(-a2 + z2) + a2*c1*c2*c3*(-a2 + z2) + b1*c1*c2*c3*(-a2 + z2) + a1*b1*c1*c2*c3*(-a2 + z2) + a3*b1*c1*c2*c3*(-a2 + z2) + b2*c1*c2*c3*(-a2 + z2) + a3*b2*c1*c2*c3*(-a2 + z2) + b1*b2*c1*c2*c3*(-a2 + z2) + a1*b1*b2*c1*c2*c3*(-a2 + z2) + a1*a2*b1*b2*c1*c2*c3*(-a2 + z2) + a1*a3*b1*b2*c1*c2*c3*(-a2 + z2) + a2*a3*b1*b2*c1*c2*c3*(-a2 + z2) + a1*a2*a3*b1*b2*c1*c2*c3*(-a2 + z2) + a1*b1*b3*c1*c2*c3*(-a2 + z2) + a2*b1*b3*c1*c2*c3*(-a2 + z2) + a1*a3*b1*b3*c1*c2*c3*(-a2 + z2) + a2*a3*b1*b3*c1*c2*c3*(-a2 + z2) + a1*a2*a3*b1*b3*c1*c2*c3*(-a2 + z2) + a3*b2*b3*c1*c2*c3*(-a2 + z2) + b1*b2*b3*c1*c2*c3*(-a2 + z2) + a2*b1*b2*b3*c1*c2*c3*(-a2 + z2) + a1*a2*b1*b2*b3*c1*c2*c3*(-a2 + z2) + a3*b1*b2*b3*c1*c2*c3*(-a2 + z2) + a3*(-a1 + x1)*(-a2 + z2) + a1*a3*(-a1 + x1)*(-a2 + z2) + a3*b1*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*(-a1 + x1)*(-a2 + z2) + a3*b2*(-a1 + x1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + x1)*(-a2 + z2) + b3*(-a1 + x1)*(-a2 + z2) + a1*b3*(-a1 + x1)*(-a2 + z2) + a1*a3*b3*(-a1 + x1)*(-a2 + z2) + a2*a3*b3*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*b3*(-a1 + x1)*(-a2 + z2) + a1*b2*b3*(-a1 + x1)*(-a2 + z2) + a2*b2*b3*(-a1 + x1)*(-a2 + z2) + a1*a2*b2*b3*(-a1 + x1)*(-a2 + z2) + a3*b2*b3*(-a1 + x1)*(-a2 + z2) + a1*a3*c1*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*c1*(-a1 + x1)*(-a2 + z2) + a3*b2*c1*(-a1 + x1)*(-a2 + z2) + a1*a3*b2*c1*(-a1 + x1)*(-a2 + z2) + a2*b3*c1*(-a1 + x1)*(-a2 + z2) + a1*a2*b3*c1*(-a1 + x1)*(-a2 + z2) + a1*a3*b3*c1*(-a1 + x1)*(-a2 + z2) + a2*b1*b3*c1*(-a1 + x1)*(-a2 + z2) + a3*b1*b3*c1*(-a1 + x1)*(-a2 + z2) + b2*b3*c1*(-a1 + x1)*(-a2 + z2) + a2*b2*b3*c1*(-a1 + x1)*(-a2 + z2) + b1*b2*b3*c1*(-a1 + x1)*(-a2 + z2) + a2*b1*b2*b3*c1*(-a1 + x1)*(-a2 + z2) + a1*a3*c2*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*c2*(-a1 + x1)*(-a2 + z2) + a3*b2*c2*(-a1 + x1)*(-a2 + z2) + a1*a3*b2*c2*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*c2*(-a1 + x1)*(-a2 + z2) + a2*b3*c2*(-a1 + x1)*(-a2 + z2) + a1*a2*b3*c2*(-a1 + x1)*(-a2 + z2) + a1*a3*b3*c2*(-a1 + x1)*(-a2 + z2) + a2*b1*b3*c2*(-a1 + x1)*(-a2 + z2) + a3*b1*b3*c2*(-a1 + x1)*(-a2 + z2) + a2*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + a3*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + b1*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a2 + z2) + a1*b2*b3*c1*c2*(-a1 + x1)*(-a2 + z2) + a1*a2*c3*(-a1 + x1)*(-a2 + z2) + a1*a3*c3*(-a1 + x1)*(-a2 + z2) + a1*a2*b1*c3*(-a1 + x1)*(-a2 + z2) + a1*a3*b1*c3*(-a1 + x1)*(-a2 + z2) + a1*b2*c3*(-a1 + x1)*(-a2 + z2) + a2*b2*c3*(-a1 + x1)*(-a2 + z2) + a1*a2*b2*c3*(-a1 + x1)*(-a2 + z2) + a3*b2*c3*(-a1 + x1)*(-a2 + z2) + a1*a3*b2*c3*(-a1 + x1)*(-a2 + z2) + b1*b2*c3*(-a1 + x1)*(-a2 + z2) + a1*b1*b2*c3*(-a1 + x1)*(-a2 + z2) + a2*b1*b2*c3*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*c3*(-a1 + x1)*(-a2 + z2) + a1*a2*b3*c3*(-a1 + x1)*(-a2 + z2) + a3*b3*c3*(-a1 + x1)*(-a2 + z2) + a1*a3*b3*c3*(-a1 + x1)*(-a2 + z2) + a1*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + a2*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + a3*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + b1*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + a1*b1*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + a2*b1*b2*b3*c3*(-a1 + x1)*(-a2 + z2) + b1*c1*c3*(-a1 + x1)*(-a2 + z2) + b2*c1*c3*(-a1 + x1)*(-a2 + z2) + b1*b2*c1*c3*(-a1 + x1)*(-a2 + z2) + a1*b1*b2*c1*c3*(-a1 + x1)*(-a2 + z2) + a1*b1*b3*c1*c3*(-a1 + x1)*(-a2 + z2) + b2*b3*c1*c3*(-a1 + x1)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a1 + x1)*(-a2 + z2) + b1*c2*c3*(-a1 + x1)*(-a2 + z2) + a1*b1*b3*c2*c3*(-a1 + x1)*(-a2 + z2) + a1*b2*b3*c2*c3*(-a1 + x1)*(-a2 + z2) + a3*b1*b2*(-a2 + x2)*(-a2 + z2) + b1*b3*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c1*(-a2 + x2)*(-a2 + z2) + b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c2*(-a2 + x2)*(-a2 + z2) + b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c2*(-a2 + x2)*(-a2 + z2) + b1*b2*b3*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a2 + z2) + a3*b1*b2*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c1*c2*(-a2 + x2)*(-a2 + z2) + b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b2*c3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c3*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*c3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c3*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*c3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*c1*c3*(-a2 + x2)*(-a2 + z2) + a2*b1*b2*c1*c3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b2*c1*c3*(-a2 + x2)*(-a2 + z2) + a3*b1*b2*c1*c3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b2*c1*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*c3*(-a2 + x2)*(-a2 + z2) + a2*b1*b3*c1*c3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b3*c1*c3*(-a2 + x2)*(-a2 + z2) + a3*b1*b3*c1*c3*(-a2 + x2)*(-a2 + z2) + a1*a3*b1*b3*c1*c3*(-a2 + x2)*(-a2 + z2) + b1*b3*c2*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c2*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*b3*c2*c3*(-a2 + x2)*(-a2 + z2) + b1*b3*c1*c2*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b3*c1*c2*c3*(-a2 + x2)*(-a2 + z2) + b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a2 + z2) + a1*a2*b1*b2*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b2*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b3*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*b3*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*b3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b2*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b3*c1*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c2*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b2*c2*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b3*c2*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b3*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*c1*c2*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*c2*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b2*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b3*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*a3*b1*b3*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b2*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b3*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*a3*b1*b3*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*a2*b1*b2*b3*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*c1*c2*c3*(-a3 + x3)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*c3*(-a3 + x3)*(-a2 + z2) + a3*(-a1 + y1)*(-a2 + z2) + a1*a3*(-a1 + y1)*(-a2 + z2) + a3*b1*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*(-a1 + y1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + y1)*(-a2 + z2) + a2*b3*(-a1 + y1)*(-a2 + z2) + a1*a3*b3*(-a1 + y1)*(-a2 + z2) + a2*a3*b3*(-a1 + y1)*(-a2 + z2) + b1*b3*(-a1 + y1)*(-a2 + z2) + a1*b1*b3*(-a1 + y1)*(-a2 + z2) + a2*b1*b3*(-a1 + y1)*(-a2 + z2) + a3*b1*b3*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*b3*(-a1 + y1)*(-a2 + z2) + b2*b3*(-a1 + y1)*(-a2 + z2) + a1*b2*b3*(-a1 + y1)*(-a2 + z2) + a1*a2*b2*b3*(-a1 + y1)*(-a2 + z2) + a3*b2*b3*(-a1 + y1)*(-a2 + z2) + a1*a3*c1*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*c1*(-a1 + y1)*(-a2 + z2) + a3*b2*c1*(-a1 + y1)*(-a2 + z2) + a1*a3*b2*c1*(-a1 + y1)*(-a2 + z2) + a2*b3*c1*(-a1 + y1)*(-a2 + z2) + a1*a2*b3*c1*(-a1 + y1)*(-a2 + z2) + a1*a3*b3*c1*(-a1 + y1)*(-a2 + z2) + a2*b1*b3*c1*(-a1 + y1)*(-a2 + z2) + a3*b1*b3*c1*(-a1 + y1)*(-a2 + z2) + b2*b3*c1*(-a1 + y1)*(-a2 + z2) + a2*b2*b3*c1*(-a1 + y1)*(-a2 + z2) + b1*b2*b3*c1*(-a1 + y1)*(-a2 + z2) + a2*b1*b2*b3*c1*(-a1 + y1)*(-a2 + z2) + a1*a3*c2*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*c2*(-a1 + y1)*(-a2 + z2) + a3*b2*c2*(-a1 + y1)*(-a2 + z2) + a1*a3*b2*c2*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*c2*(-a1 + y1)*(-a2 + z2) + a2*b3*c2*(-a1 + y1)*(-a2 + z2) + a1*a2*b3*c2*(-a1 + y1)*(-a2 + z2) + a1*a3*b3*c2*(-a1 + y1)*(-a2 + z2) + a2*b1*b3*c2*(-a1 + y1)*(-a2 + z2) + a3*b1*b3*c2*(-a1 + y1)*(-a2 + z2) + a2*b2*b3*c2*(-a1 + y1)*(-a2 + z2) + a3*b2*b3*c2*(-a1 + y1)*(-a2 + z2) + a2*b1*b2*b3*c2*(-a1 + y1)*(-a2 + z2) + a1*b2*b3*c1*c2*(-a1 + y1)*(-a2 + z2) + a1*a2*c3*(-a1 + y1)*(-a2 + z2) + a1*a3*c3*(-a1 + y1)*(-a2 + z2) + a1*a2*b1*c3*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*c3*(-a1 + y1)*(-a2 + z2) + b2*c3*(-a1 + y1)*(-a2 + z2) + a1*b2*c3*(-a1 + y1)*(-a2 + z2) + a2*b2*c3*(-a1 + y1)*(-a2 + z2) + a1*a2*b2*c3*(-a1 + y1)*(-a2 + z2) + a3*b2*c3*(-a1 + y1)*(-a2 + z2) + a1*a3*b2*c3*(-a1 + y1)*(-a2 + z2) + b1*b2*c3*(-a1 + y1)*(-a2 + z2) + a1*b1*b2*c3*(-a1 + y1)*(-a2 + z2) + a2*b1*b2*c3*(-a1 + y1)*(-a2 + z2) + a3*b1*b2*c3*(-a1 + y1)*(-a2 + z2) + a1*a2*b3*c3*(-a1 + y1)*(-a2 + z2) + a3*b3*c3*(-a1 + y1)*(-a2 + z2) + a1*a3*b3*c3*(-a1 + y1)*(-a2 + z2) + b1*b3*c3*(-a1 + y1)*(-a2 + z2) + b2*b3*c3*(-a1 + y1)*(-a2 + z2) + a1*b2*b3*c3*(-a1 + y1)*(-a2 + z2) + a2*b2*b3*c3*(-a1 + y1)*(-a2 + z2) + a3*b2*b3*c3*(-a1 + y1)*(-a2 + z2) + a1*b1*b2*b3*c3*(-a1 + y1)*(-a2 + z2) + a2*b1*b2*b3*c3*(-a1 + y1)*(-a2 + z2) + b1*c1*c3*(-a1 + y1)*(-a2 + z2) + b2*c1*c3*(-a1 + y1)*(-a2 + z2) + b1*b2*c1*c3*(-a1 + y1)*(-a2 + z2) + a1*b1*b2*c1*c3*(-a1 + y1)*(-a2 + z2) + a1*b1*b3*c1*c3*(-a1 + y1)*(-a2 + z2) + b2*b3*c1*c3*(-a1 + y1)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a1 + y1)*(-a2 + z2) + b1*c2*c3*(-a1 + y1)*(-a2 + z2) + a1*b1*b3*c2*c3*(-a1 + y1)*(-a2 + z2) + a1*b2*b3*c2*c3*(-a1 + y1)*(-a2 + z2) + a1*a3*b1*b2*(-a2 + y2)*(-a2 + z2) + a1*a2*b1*b3*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b3*(-a2 + y2)*(-a2 + z2) + a3*b1*b2*c1*(-a2 + y2)*(-a2 + z2) + a2*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + a3*b1*b3*c1*(-a2 + y2)*(-a2 + z2) + a3*b1*b2*c2*(-a2 + y2)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a2 + y2)*(-a2 + z2) + a3*b1*b2*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b2*c1*c2*(-a2 + y2)*(-a2 + z2) + b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a2*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*a2*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a3*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*(-a2 + y2)*(-a2 + z2) + b1*b2*c3*(-a2 + y2)*(-a2 + z2) + a1*b1*b2*c3*(-a2 + y2)*(-a2 + z2) + a2*b1*b2*c3*(-a2 + y2)*(-a2 + z2) + a3*b1*b2*c3*(-a2 + y2)*(-a2 + z2) + a1*b1*b3*c3*(-a2 + y2)*(-a2 + z2) + b1*b2*b3*c3*(-a2 + y2)*(-a2 + z2) + b1*b2*c1*c3*(-a2 + y2)*(-a2 + z2) + a2*b1*b2*c1*c3*(-a2 + y2)*(-a2 + z2) + a1*a2*b1*b2*c1*c3*(-a2 + y2)*(-a2 + z2) + a3*b1*b2*c1*c3*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b2*c1*c3*(-a2 + y2)*(-a2 + z2) + b1*b3*c1*c3*(-a2 + y2)*(-a2 + z2) + a2*b1*b3*c1*c3*(-a2 + y2)*(-a2 + z2) + a1*a2*b1*b3*c1*c3*(-a2 + y2)*(-a2 + z2) + a3*b1*b3*c1*c3*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b3*c1*c3*(-a2 + y2)*(-a2 + z2) + b1*b2*b3*c2*c3*(-a2 + y2)*(-a2 + z2) + b1*b3*c1*c2*c3*(-a2 + y2)*(-a2 + z2) + a1*b1*b3*c1*c2*c3*(-a2 + y2)*(-a2 + z2) + b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a2 + z2) + a1*a3*b1*b2*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b2*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b3*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*b3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*b3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c1*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b2*c1*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b3*c1*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c1*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c2*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b2*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c2*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b3*c2*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c1*c2*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*c2*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b2*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*a3*b1*b3*c3*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + b1*b2*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*b3*c1*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b2*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b1*b3*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*a2*b1*b2*b3*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*c1*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*b1*b2*b3*c1*c2*c3*(-a3 + y3)*(-a2 + z2) + a1*a3*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b1*b2*(-a1 + z1)*(-a2 + z2) + a2*a3*b3*(-a1 + z1)*(-a2 + z2) + a1*a3*b1*b3*(-a1 + z1)*(-a2 + z2) + a1*b2*b3*(-a1 + z1)*(-a2 + z2) + a2*b2*b3*(-a1 + z1)*(-a2 + z2) + a1*a2*b2*b3*(-a1 + z1)*(-a2 + z2) + a3*b2*b3*(-a1 + z1)*(-a2 + z2) + a3*b1*b2*c1*(-a1 + z1)*(-a2 + z2) + b3*c1*(-a1 + z1)*(-a2 + z2) + a1*b3*c1*(-a1 + z1)*(-a2 + z2) + a2*b3*c1*(-a1 + z1)*(-a2 + z2) + b1*b3*c1*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*c1*(-a1 + z1)*(-a2 + z2) + a2*b1*b3*c1*(-a1 + z1)*(-a2 + z2) + a3*b1*b3*c1*(-a1 + z1)*(-a2 + z2) + b1*b2*b3*c1*(-a1 + z1)*(-a2 + z2) + a2*b1*b2*b3*c1*(-a1 + z1)*(-a2 + z2) + a3*b2*c2*(-a1 + z1)*(-a2 + z2) + b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b3*c2*(-a1 + z1)*(-a2 + z2) + a2*b3*c2*(-a1 + z1)*(-a2 + z2) + b1*b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*c2*(-a1 + z1)*(-a2 + z2) + a2*b1*b3*c2*(-a1 + z1)*(-a2 + z2) + a3*b1*b3*c2*(-a1 + z1)*(-a2 + z2) + a1*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + a3*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + b1*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + a2*b1*b2*b3*c2*(-a1 + z1)*(-a2 + z2) + b2*b3*c1*c2*(-a1 + z1)*(-a2 + z2) + a1*b2*c3*(-a1 + z1)*(-a2 + z2) + a2*b2*c3*(-a1 + z1)*(-a2 + z2) + a3*b2*c3*(-a1 + z1)*(-a2 + z2) + a2*b3*c3*(-a1 + z1)*(-a2 + z2) + a1*b1*b3*c3*(-a1 + z1)*(-a2 + z2) + a1*b2*b3*c3*(-a1 + z1)*(-a2 + z2) + a3*b2*b3*c3*(-a1 + z1)*(-a2 + z2) + a1*b1*b2*b3*c3*(-a1 + z1)*(-a2 + z2) + a2*b1*b2*b3*c3*(-a1 + z1)*(-a2 + z2) + c1*c3*(-a1 + z1)*(-a2 + z2) + b1*c1*c3*(-a1 + z1)*(-a2 + z2) + b2*c1*c3*(-a1 + z1)*(-a2 + z2) + b3*c1*c3*(-a1 + z1)*(-a2 + z2) + c2*c3*(-a1 + z1)*(-a2 + z2) + b1*c2*c3*(-a1 + z1)*(-a2 + z2) + b3*c2*c3*(-a1 + z1)*(-a2 + z2) + b2*b3*c2*c3*(-a1 + z1)*(-a2 + z2) + b1*b2*b3*c2*c3*(-a1 + z1)*(-a2 + z2) + (a3*b1*b2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b3*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b2*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b2*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b3*c1*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b2*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b2*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b2*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*b3*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b2*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b2*b3*c1*c2*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a2*b1*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a2*b1*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a3*b1*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*a3*b1*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*b3*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b2*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b2*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b3*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*c1*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b3*c2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b3*c2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (b1*b2*b3*c2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + (a1*b1*b2*b3*c2*c3*(-a2 + z2)*(1 - a2 + z2))/2 + a1*a2*b2*b3*(-a3 + z3) + a1*a2*a3*b2*b3*(-a3 + z3) + a1*a2*a3*b1*b2*b3*(-a3 + z3) + a1*a2*a3*b2*c1*(-a3 + z3) + a2*b1*b2*b3*c1*(-a3 + z3) + a1*a2*a3*c2*(-a3 + z3) + a1*a2*b1*b2*c2*(-a3 + z3) + a1*a2*a3*b3*c2*(-a3 + z3) + a2*b1*b2*b3*c2*(-a3 + z3) + a1*a2*b1*b2*b3*c2*(-a3 + z3) + a2*a3*b1*b2*b3*c2*(-a3 + z3) + a2*a3*b1*c1*c2*(-a3 + z3) + a1*a2*b1*b2*c1*c2*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a3 + z3) + a1*a2*a3*b1*b2*c1*c2*(-a3 + z3) + b1*b3*c1*c2*(-a3 + z3) + a1*b1*b3*c1*c2*(-a3 + z3) + a2*b1*b3*c1*c2*(-a3 + z3) + a3*b1*b3*c1*c2*(-a3 + z3) + a1*a3*b1*b3*c1*c2*(-a3 + z3) + a1*b2*b3*c1*c2*(-a3 + z3) + a2*b2*b3*c1*c2*(-a3 + z3) + a1*a2*b2*b3*c1*c2*(-a3 + z3) + a1*a3*b2*b3*c1*c2*(-a3 + z3) + a2*a3*b2*b3*c1*c2*(-a3 + z3) + b1*b2*b3*c1*c2*(-a3 + z3) + a2*b1*b2*b3*c1*c2*(-a3 + z3) + a1*a2*b1*b2*b3*c1*c2*(-a3 + z3) + a3*b1*b2*b3*c1*c2*(-a3 + z3) + a2*a3*b1*b2*b3*c1*c2*(-a3 + z3) + a1*a2*a3*b1*b2*b3*c1*c2*(-a3 + z3) + a1*a2*b1*b2*c3*(-a3 + z3) + a1*a2*b2*b3*c3*(-a3 + z3) + a2*a3*b1*b2*b3*c3*(-a3 + z3) + a1*a2*b1*b2*c1*c3*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a3 + z3) + a1*a2*a3*b1*b2*c1*c3*(-a3 + z3) + a2*b1*b2*b3*c1*c3*(-a3 + z3) + a1*a2*b1*b2*b3*c1*c3*(-a3 + z3) + a2*a3*b1*b2*b3*c1*c3*(-a3 + z3) + a1*a2*a3*b1*b2*b3*c1*c3*(-a3 + z3) + a1*a2*c2*c3*(-a3 + z3) + a1*a3*b1*c2*c3*(-a3 + z3) + a1*a3*b2*c2*c3*(-a3 + z3) + b1*b2*c2*c3*(-a3 + z3) + a3*b1*b2*c2*c3*(-a3 + z3) + a1*a3*b1*b2*c2*c3*(-a3 + z3) + a1*a2*b3*c2*c3*(-a3 + z3) + a2*b1*b3*c2*c3*(-a3 + z3) + a3*b1*b3*c2*c3*(-a3 + z3) + a2*a3*b1*b3*c2*c3*(-a3 + z3) + a1*a3*b2*b3*c2*c3*(-a3 + z3) + b1*b2*b3*c2*c3*(-a3 + z3) + a2*b1*b2*b3*c2*c3*(-a3 + z3) + b1*c1*c2*c3*(-a3 + z3) + a1*b1*c1*c2*c3*(-a3 + z3) + a3*b1*c1*c2*c3*(-a3 + z3) + a1*b2*c1*c2*c3*(-a3 + z3) + a2*b2*c1*c2*c3*(-a3 + z3) + b1*b2*c1*c2*c3*(-a3 + z3) + a1*b1*b2*c1*c2*c3*(-a3 + z3) + a2*b1*b2*c1*c2*c3*(-a3 + z3) + a1*a3*b1*b2*c1*c2*c3*(-a3 + z3) + a2*a3*b1*b2*c1*c2*c3*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a3 + z3) + a3*b1*b3*c1*c2*c3*(-a3 + z3) + a1*a3*b2*b3*c1*c2*c3*(-a3 + z3) + a2*a3*b2*b3*c1*c2*c3*(-a3 + z3) + a1*b1*b2*b3*c1*c2*c3*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a3 + z3) + a1*a2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*(-a1 + x1)*(-a3 + z3) + a1*a3*b2*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b2*(-a1 + x1)*(-a3 + z3) + a1*a3*b1*b2*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + x1)*(-a3 + z3) + a1*a3*b2*b3*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a1 + x1)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a1 + x1)*(-a3 + z3) + a2*c1*(-a1 + x1)*(-a3 + z3) + a2*b1*c1*(-a1 + x1)*(-a3 + z3) + a3*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*c1*(-a1 + x1)*(-a3 + z3) + a3*b1*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b3*c1*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + x1)*(-a3 + z3) + a3*b2*b3*c1*(-a1 + x1)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b2*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a1 + x1)*(-a3 + z3) + a2*b2*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*a3*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b3*c1*c2*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b3*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b3*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a1 + x1)*(-a3 + z3) + a2*b2*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*a3*b2*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*b3*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*a3*b3*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*b1*b3*c1*c3*(-a1 + x1)*(-a3 + z3) + a2*a3*b1*b3*c1*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b3*c2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b2*b3*c2*c3*(-a1 + x1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + x1)*(-a3 + z3) + a2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a1 + x1)*(-a3 + z3) + a2*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + x1)*(-a3 + z3) + a1*(-a2 + x2)*(-a3 + z3) + a1*a2*(-a2 + x2)*(-a3 + z3) + a1*a3*(-a2 + x2)*(-a3 + z3) + b1*(-a2 + x2)*(-a3 + z3) + a1*b1*(-a2 + x2)*(-a3 + z3) + a2*b1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*(-a2 + x2)*(-a3 + z3) + a3*b1*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*(-a2 + x2)*(-a3 + z3) + a1*b2*(-a2 + x2)*(-a3 + z3) + a1*a3*b2*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + x2)*(-a3 + z3) + a1*b3*(-a2 + x2)*(-a3 + z3) + a1*a2*b3*(-a2 + x2)*(-a3 + z3) + a1*a3*b3*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b3*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a2 + x2)*(-a3 + z3) + c1*(-a2 + x2)*(-a3 + z3) + a1*c1*(-a2 + x2)*(-a3 + z3) + a2*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*c1*(-a2 + x2)*(-a3 + z3) + b1*c1*(-a2 + x2)*(-a3 + z3) + a1*b1*c1*(-a2 + x2)*(-a3 + z3) + a2*b1*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*c1*(-a2 + x2)*(-a3 + z3) + b2*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*b2*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*b2*c1*(-a2 + x2)*(-a3 + z3) + b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b2*c1*(-a2 + x2)*(-a3 + z3) + b3*c1*(-a2 + x2)*(-a3 + z3) + a1*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*a3*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a2*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a3*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a2 + x2)*(-a3 + z3) + a1*a3*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*c2*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*b2*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*b3*c2*(-a2 + x2)*(-a3 + z3) + b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*c2*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*b3*c2*(-a2 + x2)*(-a3 + z3) + b2*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*c1*c2*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a2 + x2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a3*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + x2)*(-a3 + z3) + a1*a3*c3*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*c3*(-a2 + x2)*(-a3 + z3) + a1*a3*b2*c3*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a2 + x2)*(-a3 + z3) + a1*a3*b3*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c3*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*b3*c3*(-a2 + x2)*(-a3 + z3) + b2*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a3*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a3*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + a1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + x2)*(-a3 + z3) + b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + a1*b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a2 + x2)*(-a3 + z3) + a2*a3*b1*(-a3 + x3)*(-a3 + z3) + b1*b2*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*(-a3 + x3)*(-a3 + z3) + a2*b1*b3*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*(-a3 + x3)*(-a3 + z3) + b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a2*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a2*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a2*a3*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*c2*(-a3 + x3)*(-a3 + z3) + b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c2*(-a3 + x3)*(-a3 + z3) + a2*b1*b3*c2*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c2*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*b3*c2*(-a3 + x3)*(-a3 + z3) + b1*b2*c1*c2*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c1*c2*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*c2*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*c2*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c3*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b3*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c3*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c1*c3*(-a3 + x3)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c1*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c1*c3*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a2*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a2*a3*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*b1*b2*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b1*b2*c2*c3*(-a3 + x3)*(-a3 + z3) + a2*a3*b1*b2*c2*c3*(-a3 + x3)*(-a3 + z3) + a2*b1*b3*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*b2*b3*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*a3*b2*b3*c2*c3*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*b3*c2*c3*(-a3 + x3)*(-a3 + z3) + b1*b2*c1*c2*c3*(-a3 + x3)*(-a3 + z3) + a3*b1*b2*c1*c2*c3*(-a3 + x3)*(-a3 + z3) + b2*b3*c1*c2*c3*(-a3 + x3)*(-a3 + z3) + a3*b2*b3*c1*c2*c3*(-a3 + x3)*(-a3 + z3) + a1*a2*(-a1 + y1)*(-a3 + z3) + a2*b1*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*(-a1 + y1)*(-a3 + z3) + a1*a3*b2*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b2*(-a1 + y1)*(-a3 + z3) + a3*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a3*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + y1)*(-a3 + z3) + a2*b2*b3*(-a1 + y1)*(-a3 + z3) + a1*a3*b2*b3*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a1 + y1)*(-a3 + z3) + a3*b1*b2*b3*(-a1 + y1)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a1 + y1)*(-a3 + z3) + a2*c1*(-a1 + y1)*(-a3 + z3) + a2*b1*c1*(-a1 + y1)*(-a3 + z3) + a3*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*c1*(-a1 + y1)*(-a3 + z3) + a3*b1*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b3*c1*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + y1)*(-a3 + z3) + a3*b2*b3*c1*(-a1 + y1)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b2*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b3*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a1 + y1)*(-a3 + z3) + a2*b2*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c1*c2*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b2*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b3*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b3*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a1 + y1)*(-a3 + z3) + a2*b2*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b2*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*b3*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b3*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c1*c3*(-a1 + y1)*(-a3 + z3) + a2*a3*b1*b3*c1*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b2*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b3*c1*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b2*b3*c1*c2*c3*(-a1 + y1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + y1)*(-a3 + z3) + a1*a2*(-a2 + y2)*(-a3 + z3) + a1*a3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*(-a2 + y2)*(-a3 + z3) + a3*b1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*(-a2 + y2)*(-a3 + z3) + a1*a3*b2*(-a2 + y2)*(-a3 + z3) + b1*b2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*(-a2 + y2)*(-a3 + z3) + a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + y2)*(-a3 + z3) + a1*a2*b3*(-a2 + y2)*(-a3 + z3) + a1*a3*b3*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a2 + y2)*(-a3 + z3) + c1*(-a2 + y2)*(-a3 + z3) + a1*c1*(-a2 + y2)*(-a3 + z3) + a2*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*c1*(-a2 + y2)*(-a3 + z3) + b1*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*c1*(-a2 + y2)*(-a3 + z3) + b2*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b2*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b2*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b2*c1*(-a2 + y2)*(-a3 + z3) + b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b3*c1*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a2*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a3*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a2 + y2)*(-a3 + z3) + a1*a3*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b2*c2*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*c2*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b3*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c2*(-a2 + y2)*(-a3 + z3) + b2*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a3*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + y2)*(-a3 + z3) + a1*a3*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b2*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b3*c3*(-a2 + y2)*(-a3 + z3) + b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c3*(-a2 + y2)*(-a3 + z3) + b2*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b2*c1*c3*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a3*b1*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a2*a3*b1*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a2*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a3*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + y2)*(-a3 + z3) + b1*b3*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + y2)*(-a3 + z3) + b1*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + b2*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a2 + y2)*(-a3 + z3) + a1*b1*b2*(-a3 + y3)*(-a3 + z3) + a1*a3*b1*b2*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b3*(-a3 + y3)*(-a3 + z3) + a1*a3*b2*b3*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*b3*(-a3 + y3)*(-a3 + z3) + b1*b2*c1*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*c1*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a3 + y3)*(-a3 + z3) + b1*b2*c2*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*c2*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c2*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b2*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b3*c3*(-a3 + y3)*(-a3 + z3) + a1*b2*b3*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c3*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*b3*c3*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*b3*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*c1*c3*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*c1*c3*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a3 + y3)*(-a3 + z3) + a1*a3*b1*b2*c1*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a3 + y3)*(-a3 + z3) + a1*a3*b2*b3*c1*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b2*b3*c1*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*b3*c1*c3*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*b3*c1*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*a3*b1*b2*c2*c3*(-a3 + y3)*(-a3 + z3) + a2*a3*b1*b2*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*a3*b2*b3*c2*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*b1*b2*b3*c2*c3*(-a3 + y3)*(-a3 + z3) + a2*b1*b2*b3*c2*c3*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*b3*c2*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*c1*c2*c3*(-a3 + y3)*(-a3 + z3) + a3*b1*b2*c1*c2*c3*(-a3 + y3)*(-a3 + z3) + a3*b2*b3*c1*c2*c3*(-a3 + y3)*(-a3 + z3) + b1*b2*b3*c1*c2*c3*(-a3 + y3)*(-a3 + z3) + a1*a2*b1*(-a1 + z1)*(-a3 + z3) + a1*a3*b1*b2*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b2*b3*(-a1 + z1)*(-a3 + z3) + a2*a3*b2*b3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a1 + z1)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a1 + z1)*(-a3 + z3) + a2*b1*c1*(-a1 + z1)*(-a3 + z3) + a3*b1*b2*c1*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*c1*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b3*c1*(-a1 + z1)*(-a3 + z3) + a3*b1*b2*b3*c1*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a1 + z1)*(-a3 + z3) + a2*b2*b3*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*b3*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*b1*b3*c1*c2*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b3*c1*c2*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*c1*c3*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b2*c1*c3*(-a1 + z1)*(-a3 + z3) + a2*b1*b3*c1*c3*(-a1 + z1)*(-a3 + z3) + a2*a3*b1*b3*c1*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a1 + z1)*(-a3 + z3) + a2*b1*b3*c1*c2*c3*(-a1 + z1)*(-a3 + z3) + a2*b1*b2*b3*c1*c2*c3*(-a1 + z1)*(-a3 + z3) + a1*a2*b1*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*b3*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*b3*(-a2 + z2)*(-a3 + z3) + b1*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*c1*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b2*c1*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b3*c1*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*b3*c1*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*c2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b2*c2*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c2*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b3*c2*(-a2 + z2)*(-a3 + z3) + b1*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*c2*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*c1*c2*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c2*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b2*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*a3*b1*b3*c3*(-a2 + z2)*(-a3 + z3) + b1*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b2*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + b1*b2*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*b1*b2*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*a3*b1*b2*b3*c1*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b3*c2*c3*(-a2 + z2)*(-a3 + z3) + a1*a2*b1*b2*b3*c2*c3*(-a2 + z2)*(-a3 + z3) + (a1*a2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b1*b2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*b3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*b2*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c1*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b1*b2*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*b2*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*b3*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b2*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c1*c2*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b1*b2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*a3*b1*b2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*a3*b2*b3*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*b3*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*b3*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b1*b2*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a3*b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*b3*c1*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b2*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a1*b1*b2*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (a2*b1*b2*b3*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b2*b3*c1*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2 + (b1*b2*b3*c1*c2*c3*(-a3 + z3)*(1 - a3 + z3))/2;
end;
#####################################################################
#####################################################################
#Space Group No. 110 ( I4_1cd)
#####################################################################
Ampin110:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin110:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain110:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + b1*c2;
end;
#####################################################################
CGAPin110:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3 + a2*a3*b1 + a1*a3*b2 + a1*a3*b1*b2 + a1*a2*b1*b3 + a2*a3*b1*b3 + a1*a3*b2*b3 + a1*b1*b2*b3 + a2*b1*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a2*a3*b1*c1 + a1*a2*a3*b1*c1 + a1*a3*b2*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a1*a2*a3*b3*c1 + a2*a3*b1*b3*c1 + a1*b2*b3*c1 + a1*a3*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a1*a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a2*a3*c2 + a3*b1*c2 + a1*a3*b1*c2 + a1*a2*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a1*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*a2*a3*b3*c2 + a2*b1*b3*c2 + a3*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a3*c1*c2 + a1*a2*a3*c1*c2 + a1*a3*b2*c1*c2 + a2*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + a1*a2*a3*b1*b2*c1*c2 + a2*b3*c1*c2 + a3*b3*c1*c2 + a1*a3*b3*c1*c2 + b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a1*a2*a3*b1*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a2*a3*b1*c3 + a1*b2*c3 + a1*a2*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a2*b3*c3 + a2*b1*b3*c3 + a1*b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a2*a3*b1*b2*b3*c3 + a2*c1*c3 + a1*a2*c1*c3 + a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a1*a2*a3*b1*c1*c3 + a1*b2*c1*c3 + a3*b2*c1*c3 + a1*a3*b2*c1*c3 + a2*a3*b2*c1*c3 + a1*a2*a3*b2*c1*c3 + b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a2*a3*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + a1*a2*a3*b1*b3*c1*c3 + a1*b2*b3*c1*c3 + a2*b2*b3*c1*c3 + a1*a2*b2*b3*c1*c3 + a3*b2*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a1*a2*a3*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a2*b1*b2*b3*c1*c3 + a1*a2*b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a1*a3*c2*c3 + a1*a2*a3*c2*c3 + a1*a2*b1*c2*c3 + a1*a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*a2*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*a3*b2*c2*c3 + b1*b2*c2*c3 + a1*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*a3*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a2*c1*c2*c3 + a1*a2*c1*c2*c3 + a1*a3*c1*c2*c3 + b1*c1*c2*c3 + a1*b1*c1*c2*c3 + a1*a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a2*a3*b1*c1*c2*c3 + a1*a2*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a1*b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a2*b1*b2*c1*c2*c3 + a2*a3*b1*b2*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a2*a3*b3*c1*c2*c3 + a1*a2*a3*b3*c1*c2*c3 + a2*b1*b3*c1*c2*c3 + a2*a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a1*a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*a3*b2*b3*c1*c2*c3 + a1*a2*b1*b2*b3*c1*c2*c3 + a1*a3*b1*b2*b3*c1*c2*c3 + a2*a3*b1*b2*b3*c1*c2*c3 + a3*b2*x1 + a1*a3*b2*x1 + a3*b1*b2*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a2*b1*b3*x1 + b2*b3*x1 + a1*b2*b3*x1 + a3*b2*b3*x1 + b1*b2*b3*x1 + a2*b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a3*b2*c1*x1 + a1*a3*b2*c1*x1 + a2*b3*c1*x1 + a2*b1*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a3*b2*b3*c1*x1 + a3*c2*x1 + a2*a3*c2*x1 + a3*b1*c2*x1 + a1*a3*b1*c2*x1 + a3*b2*c2*x1 + a1*a3*b2*c2*x1 + a1*a2*a3*b2*c2*x1 + a1*a3*b1*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a2*a3*b3*c2*x1 + a1*a2*a3*b3*c2*x1 + b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a1*a2*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a2*a3*c1*c2*x1 + a1*a3*b1*c1*c2*x1 + a2*a3*b1*c1*c2*x1 + a3*b2*c1*c2*x1 + a2*a3*b1*b2*c1*c2*x1 + b3*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a1*a3*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + a3*b1*b3*c1*c2*x1 + a2*a3*b1*b3*c1*c2*x1 + a2*b1*b2*b3*c1*c2*x1 + b2*c3*x1 + a1*b2*c3*x1 + b1*b2*c3*x1 + a2*b3*c3*x1 + b2*b3*c3*x1 + a2*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a1*b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a1*a3*b1*b2*b3*c3*x1 + a2*a3*b1*b2*b3*c3*x1 + a2*c1*c3*x1 + a2*b1*c1*c3*x1 + b2*c1*c3*x1 + a2*b2*c1*c3*x1 + a1*a2*b2*c1*c3*x1 + a1*a3*b2*c1*c3*x1 + b1*b2*c1*c3*x1 + b2*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a2*c2*c3*x1 + a1*a2*c2*c3*x1 + a3*c2*c3*x1 + a2*a3*c2*c3*x1 + a1*b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a1*a2*a3*b2*c2*c3*x1 + a1*a3*b1*b2*c2*c3*x1 + a2*a3*b1*b2*c2*c3*x1 + b3*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + a3*b3*c2*c3*x1 + a2*a3*b3*c2*c3*x1 + a1*a2*a3*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a1*a3*b1*b3*c2*c3*x1 + a2*a3*b1*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a1*a2*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + a2*b1*b2*b3*c2*c3*x1 + a3*b1*b2*b3*c2*c3*x1 + a1*c1*c2*c3*x1 + a1*b1*c1*c2*c3*x1 + a1*b2*c1*c2*c3*x1 + a2*b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a2*a3*b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + a3*b1*b2*c1*c2*c3*x1 + a2*a3*b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a2*b3*c1*c2*c3*x1 + a1*a2*b3*c1*c2*c3*x1 + a1*a2*a3*b3*c1*c2*c3*x1 + a1*b1*b3*c1*c2*c3*x1 + a2*b1*b3*c1*c2*c3*x1 + a3*b1*b3*c1*c2*c3*x1 + a1*a3*b1*b3*c1*c2*c3*x1 + a2*a3*b1*b3*c1*c2*c3*x1 + a1*b2*b3*c1*c2*c3*x1 + a2*b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a2*b1*b2*b3*c1*c2*c3*x1 + a1*a3*x2 + a1*a3*b1*x2 + a2*a3*b1*x2 + a1*a2*a3*b1*x2 + a1*a2*a3*b2*x2 + a1*a3*b1*b2*x2 + a2*a3*b1*b2*x2 + a1*b3*x2 + a1*a2*a3*b3*x2 + b1*b3*x2 + a3*b1*b3*x2 + a1*a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*b2*b3*x2 + a1*b1*b2*b3*x2 + a1*a2*b1*b2*b3*x2 + a1*a3*b1*b2*b3*x2 + a1*a3*c1*x2 + a1*a2*a3*b1*c1*x2 + a3*b2*c1*x2 + a1*a3*b2*c1*x2 + a1*a2*a3*b2*c1*x2 + a1*a3*b1*b2*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + a1*a3*b3*c1*x2 + a1*a2*a3*b3*c1*x2 + b1*b3*c1*x2 + a1*b1*b3*c1*x2 + a2*b1*b3*c1*x2 + a1*a2*b1*b3*c1*x2 + a1*a3*b1*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*b1*b2*b3*c1*x2 + a2*b1*b2*b3*c1*x2 + a1*a2*b1*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a1*a3*b1*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a2*a3*b1*c2*x2 + a1*a2*a3*b2*c2*x2 + a3*b1*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a1*a2*b3*c2*x2 + a1*a2*a3*b3*c2*x2 + b1*b3*c2*x2 + a1*b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a1*a2*b1*b2*b3*c2*x2 + a1*a3*b1*b2*b3*c2*x2 + a3*c1*c2*x2 + a1*a3*c1*c2*x2 + a1*a2*a3*b1*c1*c2*x2 + a1*a2*a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a1*a3*b1*b2*c1*c2*x2 + a1*a2*a3*b1*b2*c1*c2*x2 + b3*c1*c2*x2 + a2*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + a1*a3*b3*c1*c2*x2 + a1*a2*a3*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a1*a2*b1*b3*c1*c2*x2 + a1*a2*a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a2*b2*b3*c1*c2*x2 + a1*a2*b2*b3*c1*c2*x2 + a3*b2*b3*c1*c2*x2 + a1*a3*b2*b3*c1*c2*x2 + a1*b1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a1*a2*b1*b2*b3*c1*c2*x2 + a3*b1*b2*b3*c1*c2*x2 + a1*a2*c3*x2 + a1*a3*c3*x2 + b1*c3*x2 + a1*b1*c3*x2 + a2*b1*c3*x2 + a1*a3*b1*c3*x2 + a1*a2*a3*b1*c3*x2 + a1*a2*b2*c3*x2 + a1*a2*a3*b2*c3*x2 + b1*b2*c3*x2 + a1*b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*a3*b3*c3*x2 + a1*b1*b3*c3*x2 + a1*a3*b1*b3*c3*x2 + a2*a3*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + a1*a2*b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + a1*a3*b1*b2*b3*c3*x2 + c1*c3*x2 + a2*c1*c3*x2 + a1*a2*c1*c3*x2 + a1*a3*c1*c3*x2 + a1*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + a1*a3*b1*c1*c3*x2 + a2*a3*b1*c1*c3*x2 + a1*b2*c1*c3*x2 + a2*b2*c1*c3*x2 + a3*b2*c1*c3*x2 + a2*a3*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + a1*a2*b1*b2*c1*c3*x2 + a1*b3*c1*c3*x2 + a2*b3*c1*c3*x2 + a1*a2*b3*c1*c3*x2 + a1*a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a3*b1*b3*c1*c3*x2 + a1*b2*b3*c1*c3*x2 + a2*b2*b3*c1*c3*x2 + a1*a2*b2*b3*c1*c3*x2 + a3*b2*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a2*b1*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + a1*c2*c3*x2 + a1*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + a1*a2*b2*c2*c3*x2 + a1*a3*b2*c2*c3*x2 + b1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a1*a2*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*a3*b1*b3*c2*c3*x2 + a1*b2*b3*c2*c3*x2 + a1*a2*b2*b3*c2*c3*x2 + b1*b2*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + a3*b1*b2*b3*c2*c3*x2 + a1*b1*c1*c2*c3*x2 + a2*b1*c1*c2*c3*x2 + a1*a2*b1*c1*c2*c3*x2 + a3*b1*c1*c2*c3*x2 + a1*a3*b1*c1*c2*c3*x2 + a2*a3*b1*c1*c2*c3*x2 + a1*a2*a3*b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a2*b2*c1*c2*c3*x2 + a1*a3*b2*c1*c2*c3*x2 + a2*a3*b2*c1*c2*c3*x2 + a1*a2*a3*b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a1*b1*b2*c1*c2*c3*x2 + a1*a2*b1*b2*c1*c2*c3*x2 + b3*c1*c2*c3*x2 + a3*b1*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + a1*a2*b2*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a3*b1*x1*x2 + a1*a3*b2*x1*x2 + a1*a3*b1*b2*x1*x2 + a1*b3*x1*x2 + a1*b1*b3*x1*x2 + a2*b1*b3*x1*x2 + a1*a2*b1*b3*x1*x2 + a3*b1*b3*x1*x2 + a1*a3*b1*b3*x1*x2 + a1*b2*b3*x1*x2 + a3*b2*c1*x1*x2 + b3*c1*x1*x2 + b1*b3*c1*x1*x2 + a1*b1*b3*c1*x1*x2 + a2*b1*b3*c1*x1*x2 + a3*b1*b3*c1*x1*x2 + b2*b3*c1*x1*x2 + b1*b2*b3*c1*x1*x2 + a1*a3*c2*x1*x2 + a1*a3*b1*c2*x1*x2 + a3*b1*b2*c2*x1*x2 + a1*a3*b1*b2*c2*x1*x2 + a1*b1*b3*c2*x1*x2 + a1*a2*b1*b3*c2*x1*x2 + a1*a3*b1*b3*c2*x1*x2 + a3*c1*c2*x1*x2 + a3*b1*c1*c2*x1*x2 + b1*b2*b3*c1*c2*x1*x2 + a1*a2*c3*x1*x2 + a1*a3*c3*x1*x2 + a1*b1*c3*x1*x2 + a2*b1*c3*x1*x2 + a1*a2*b1*c3*x1*x2 + a3*b1*c3*x1*x2 + a1*a3*b1*c3*x1*x2 + a2*b1*b2*c3*x1*x2 + a1*a2*b1*b2*c3*x1*x2 + a3*b1*b2*c3*x1*x2 + a1*a3*b1*b2*c3*x1*x2 + a1*a2*b3*c3*x1*x2 + a1*a3*b3*c3*x1*x2 + a1*a2*a3*b3*c3*x1*x2 + a1*b1*b3*c3*x1*x2 + a1*a2*b1*b3*c3*x1*x2 + a1*a3*b2*b3*c3*x1*x2 + b1*b2*b3*c3*x1*x2 + a2*c1*c3*x1*x2 + a3*c1*c3*x1*x2 + a2*b1*c1*c3*x1*x2 + a3*b1*c1*c3*x1*x2 + b1*b2*c1*c3*x1*x2 + a2*b3*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + a2*a3*b3*c1*c3*x1*x2 + b1*b3*c1*c3*x1*x2 + a2*b1*b3*c1*c3*x1*x2 + a3*b1*b3*c1*c3*x1*x2 + a2*a3*b1*b3*c1*c3*x1*x2 + a3*b2*b3*c1*c3*x1*x2 + a3*b1*b2*b3*c1*c3*x1*x2 + a1*a3*b3*c2*c3*x1*x2 + b1*b3*c2*c3*x1*x2 + a2*b1*b3*c2*c3*x1*x2 + a3*b1*b3*c2*c3*x1*x2 + a2*a3*b1*b3*c2*c3*x1*x2 + a1*b2*b3*c2*c3*x1*x2 + a1*a3*b2*b3*c2*c3*x1*x2 + b1*b2*b3*c2*c3*x1*x2 + a1*b1*b2*b3*c2*c3*x1*x2 + a3*b3*c1*c2*c3*x1*x2 + a3*b1*b3*c1*c2*c3*x1*x2 + b2*b3*c1*c2*c3*x1*x2 + a3*b2*b3*c1*c2*c3*x1*x2 + b1*b2*b3*c1*c2*c3*x1*x2 + a3*b1*b2*b3*c1*c2*c3*x1*x2 + a2*b1*x3 + a1*a2*b1*x3 + a1*a2*a3*b1*x3 + a1*b2*x3 + a1*a2*a3*b2*x3 + b1*b2*x3 + a1*b1*b2*x3 + a1*a2*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*a3*b1*b2*x3 + a1*a2*b3*x3 + a1*a2*a3*b3*x3 + a2*b1*b3*x3 + a1*a2*a3*b1*b3*x3 + a1*b2*b3*x3 + a1*a2*b2*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a1*b1*b2*b3*x3 + a1*a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*a3*b1*b2*b3*x3 + a2*a3*b1*c1*x3 + b2*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a3*b2*c1*x3 + a2*a3*b2*c1*x3 + a1*a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a1*a3*b1*b2*c1*x3 + a1*a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a1*b2*b3*c1*x3 + a2*b2*b3*c1*x3 + a1*a2*b2*b3*c1*x3 + a3*b2*b3*c1*x3 + a2*a3*b2*b3*c1*x3 + b1*b2*b3*c1*x3 + a2*b1*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*b1*c2*x3 + a2*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a2*a3*b1*c2*x3 + a1*a2*b2*c2*x3 + a1*a2*a3*b2*c2*x3 + b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a1*a2*b1*b2*c2*x3 + a2*a3*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*a2*a3*b3*c2*x3 + a2*b1*b3*c2*x3 + a1*a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + a2*a3*b1*b2*b3*c2*x3 + a1*c1*c2*x3 + a1*a2*c1*c2*x3 + a3*c1*c2*x3 + a2*a3*c1*c2*x3 + a1*a2*a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a1*a2*b1*c1*c2*x3 + a2*a3*b1*c1*c2*x3 + b2*c1*c2*x3 + a1*a3*b2*c1*c2*x3 + a1*a2*a3*b2*c1*c2*x3 + a1*b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a1*a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*a3*b1*b2*c1*c2*x3 + a2*a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a1*a2*b3*c1*c2*x3 + a1*a3*b3*c1*c2*x3 + a2*a3*b3*c1*c2*x3 + a1*a2*a3*b3*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a1*a2*b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + a2*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a1*a3*b1*b2*b3*c1*c2*x3 + a2*a3*b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a2*a3*b1*c3*x3 + a1*a2*a3*b1*c3*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a2*a3*b2*c3*x3 + a1*b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a1*a2*a3*b3*c3*x3 + a1*b2*b3*c3*x3 + a1*b1*b2*b3*c3*x3 + a2*b1*b2*b3*c3*x3 + a1*a2*b1*b2*b3*c3*x3 + a3*b1*b2*b3*c3*x3 + a2*a3*b1*b2*b3*c3*x3 + a1*a2*c1*c3*x3 + a1*a2*b1*c1*c3*x3 + b2*c1*c3*x3 + a2*a3*b2*c1*c3*x3 + a1*a2*a3*b2*c1*c3*x3 + b1*b2*c1*c3*x3 + a1*b1*b2*c1*c3*x3 + a1*a2*b1*b2*c1*c3*x3 + a1*a3*b1*b2*c1*c3*x3 + a2*a3*b1*b2*c1*c3*x3 + a2*b3*c1*c3*x3 + a1*a2*b3*c1*c3*x3 + a2*a3*b3*c1*c3*x3 + a1*a2*b1*b3*c1*c3*x3 + a2*a3*b1*b3*c1*c3*x3 + b2*b3*c1*c3*x3 + a2*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a1*b1*b2*b3*c1*c3*x3 + a1*c2*c3*x3 + a1*a3*c2*c3*x3 + b1*c2*c3*x3 + a2*a3*b1*c2*c3*x3 + a1*a2*a3*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + a1*a2*a3*b2*c2*c3*x3 + a2*b1*b2*c2*c3*x3 + a1*a2*b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + a1*a3*b1*b2*c2*c3*x3 + a1*a2*a3*b1*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + a1*a2*b3*c2*c3*x3 + a1*a3*b3*c2*c3*x3 + a1*a2*a3*b3*c2*c3*x3 + b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a2*a3*b1*b3*c2*c3*x3 + a1*a2*a3*b1*b3*c2*c3*x3 + a1*a2*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a3*b1*b2*b3*c2*c3*x3 + a1*a3*b1*b2*b3*c2*c3*x3 + a1*a2*c1*c2*c3*x3 + a3*c1*c2*c3*x3 + a1*a3*c1*c2*c3*x3 + a2*a3*c1*c2*c3*x3 + a1*b1*c1*c2*c3*x3 + a2*b1*c1*c2*c3*x3 + a1*a2*b1*c1*c2*c3*x3 + a3*b1*c1*c2*c3*x3 + a1*a2*a3*b1*c1*c2*c3*x3 + b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + a1*a3*b2*c1*c2*c3*x3 + a1*a2*a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + a2*a3*b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + a1*b3*c1*c2*c3*x3 + a3*b3*c1*c2*c3*x3 + a1*a3*b3*c1*c2*c3*x3 + a2*a3*b3*c1*c2*c3*x3 + a1*a2*a3*b3*c1*c2*c3*x3 + b1*b3*c1*c2*c3*x3 + a1*b2*b3*c1*c2*c3*x3 + a1*a2*b2*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + a2*a3*b2*b3*c1*c2*c3*x3 + a1*b1*b2*b3*c1*c2*c3*x3 + a2*b1*b2*b3*c1*c2*c3*x3 + a3*b1*b2*b3*c1*c2*c3*x3 + a1*a2*x1*x3 + a1*a2*b1*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*a2*a3*b1*b2*x1*x3 + a2*b3*x1*x3 + a1*a2*b3*x1*x3 + a2*a3*b3*x1*x3 + a1*a2*a3*b3*x1*x3 + a2*b1*b3*x1*x3 + a1*a2*b1*b3*x1*x3 + a2*a3*b1*b3*x1*x3 + a1*a2*a3*b1*b3*x1*x3 + a2*b2*b3*x1*x3 + a1*a2*b2*b3*x1*x3 + a2*a3*b2*b3*x1*x3 + a1*b1*b2*b3*x1*x3 + a1*a2*b1*b2*b3*x1*x3 + a1*a3*b1*b2*b3*x1*x3 + a2*c1*x1*x3 + a2*b1*c1*x1*x3 + a2*a3*b2*c1*x1*x3 + a2*a3*b1*b2*c1*x1*x3 + a2*b3*c1*x1*x3 + a2*a3*b3*c1*x1*x3 + a2*b1*b3*c1*x1*x3 + a2*a3*b1*b3*c1*x1*x3 + a2*b2*b3*c1*x1*x3 + a2*b1*b2*b3*c1*x1*x3 + c2*x1*x3 + a2*c2*x1*x3 + a1*a2*c2*x1*x3 + a3*c2*x1*x3 + a1*a3*c2*x1*x3 + a2*a3*c2*x1*x3 + b1*c2*x1*x3 + a2*b1*c2*x1*x3 + a1*a2*b1*c2*x1*x3 + a3*b1*c2*x1*x3 + a1*a3*b1*c2*x1*x3 + a2*a3*b1*c2*x1*x3 + b2*c2*x1*x3 + a2*b2*c2*x1*x3 + a3*b2*c2*x1*x3 + a2*a3*b2*c2*x1*x3 + b1*b2*c2*x1*x3 + a2*b1*b2*c2*x1*x3 + a3*b1*b2*c2*x1*x3 + a2*a3*b1*b2*c2*x1*x3 + a1*b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a1*a3*b3*c2*x1*x3 + a2*a3*b3*c2*x1*x3 + a2*b1*b3*c2*x1*x3 + a1*a2*b1*b3*c2*x1*x3 + a2*a3*b1*b3*c2*x1*x3 + a1*b2*b3*c2*x1*x3 + a2*b2*b3*c2*x1*x3 + a3*b2*b3*c2*x1*x3 + a1*a3*b2*b3*c2*x1*x3 + b1*b2*b3*c2*x1*x3 + a2*b1*b2*b3*c2*x1*x3 + a1*a2*b1*b2*b3*c2*x1*x3 + a2*c1*c2*x1*x3 + a3*c1*c2*x1*x3 + a2*b1*c1*c2*x1*x3 + a3*b1*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + a3*b3*c1*c2*x1*x3 + b1*b3*c1*c2*x1*x3 + a3*b1*b3*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + a3*b2*b3*c1*c2*x1*x3 + b1*b2*b3*c1*c2*x1*x3 + a3*b1*b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + a1*a2*c3*x1*x3 + a2*b1*c3*x1*x3 + a1*a2*b1*c3*x1*x3 + a2*b2*c3*x1*x3 + a1*a2*b2*c3*x1*x3 + a1*b1*b2*c3*x1*x3 + a1*a2*b1*b2*c3*x1*x3 + a1*a3*b1*b2*c3*x1*x3 + a2*a3*b1*b2*c3*x1*x3 + a2*b3*c3*x1*x3 + a2*a3*b3*c3*x1*x3 + a2*b1*b3*c3*x1*x3 + a1*a2*b1*b3*c3*x1*x3 + a2*b2*b3*c3*x1*x3 + a1*a2*b2*b3*c3*x1*x3 + a2*a3*b2*b3*c3*x1*x3 + a1*b1*b2*b3*c3*x1*x3 + a2*c1*c3*x1*x3 + a2*b1*c1*c3*x1*x3 + a2*b2*c1*c3*x1*x3 + a2*b1*b2*c1*c3*x1*x3 + a2*b2*b3*c1*c3*x1*x3 + a2*b1*b2*b3*c1*c3*x1*x3 + a2*c2*c3*x1*x3 + a2*b1*c2*c3*x1*x3 + a2*b2*c2*c3*x1*x3 + b1*b2*c2*c3*x1*x3 + a2*b1*b2*c2*c3*x1*x3 + a3*b1*b2*c2*c3*x1*x3 + a1*b3*c2*c3*x1*x3 + a2*b3*c2*c3*x1*x3 + a3*b3*c2*c3*x1*x3 + a2*b1*b3*c2*c3*x1*x3 + a3*b1*b3*c2*c3*x1*x3 + a2*b2*b3*c2*c3*x1*x3 + b1*b2*b3*c2*c3*x1*x3 + a1*b1*b2*b3*c2*c3*x1*x3 + a2*b1*b2*b3*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + b1*b3*c1*c2*c3*x1*x3 + a2*a3*b1*x2*x3 + a1*a2*b2*x2*x3 + b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a1*a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*a3*b1*b2*x2*x3 + a1*a2*a3*b1*b2*x2*x3 + a1*b3*x2*x3 + a1*a2*b3*x2*x3 + a1*a3*b3*x2*x3 + a1*b1*b3*x2*x3 + a1*a3*b1*b3*x2*x3 + a1*a2*a3*b1*b3*x2*x3 + a1*b2*b3*x2*x3 + a1*b1*b2*b3*x2*x3 + a1*a2*b1*b2*b3*x2*x3 + a1*a3*b1*b2*b3*x2*x3 + a1*a2*b2*c1*x2*x3 + a3*b2*c1*x2*x3 + a1*a3*b2*c1*x2*x3 + a1*b1*b2*c1*x2*x3 + a2*a3*b1*b2*c1*x2*x3 + b3*c1*x2*x3 + a1*a2*b3*c1*x2*x3 + a1*a3*b3*c1*x2*x3 + b1*b3*c1*x2*x3 + a2*b1*b3*c1*x2*x3 + a1*a2*b1*b3*c1*x2*x3 + a1*a3*b1*b3*c1*x2*x3 + a2*a3*b1*b3*c1*x2*x3 + a1*b2*b3*c1*x2*x3 + a2*b2*b3*c1*x2*x3 + a3*b2*b3*c1*x2*x3 + a1*a2*b1*b2*b3*c1*x2*x3 + a1*a3*b1*b2*b3*c1*x2*x3 + a3*b1*c2*x2*x3 + a1*a2*b2*c2*x2*x3 + a1*a3*b2*c2*x2*x3 + b1*b2*c2*x2*x3 + a1*b1*b2*c2*x2*x3 + a2*b1*b2*c2*x2*x3 + a1*a2*b3*c2*x2*x3 + a1*a3*b3*c2*x2*x3 + a1*b1*b3*c2*x2*x3 + a1*a2*b1*b3*c2*x2*x3 + a1*b2*b3*c2*x2*x3 + b1*b2*b3*c2*x2*x3 + a1*b1*b2*b3*c2*x2*x3 + a1*a2*b1*b2*b3*c2*x2*x3 + a2*b2*c1*c2*x2*x3 + a3*b2*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + b3*c1*c2*x2*x3 + a1*b3*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + a3*b3*c1*c2*x2*x3 + a1*b1*b3*c1*c2*x2*x3 + a2*b1*b3*c1*c2*x2*x3 + a1*b2*b3*c1*c2*x2*x3 + a1*b1*b2*b3*c1*c2*x2*x3 + a2*b1*b2*b3*c1*c2*x2*x3 + a1*c3*x2*x3 + a1*a3*c3*x2*x3 + a1*b1*c3*x2*x3 + a2*b1*c3*x2*x3 + a1*a3*b1*c3*x2*x3 + a1*b2*c3*x2*x3 + a1*a2*b2*c3*x2*x3 + a1*a3*b2*c3*x2*x3 + a2*b1*b2*c3*x2*x3 + a1*a2*b1*b2*c3*x2*x3 + a1*a3*b1*b2*c3*x2*x3 + a1*b3*c3*x2*x3 + a1*a2*b3*c3*x2*x3 + a1*b1*b3*c3*x2*x3 + a2*b1*b3*c3*x2*x3 + a1*a2*b1*b3*c3*x2*x3 + a1*b1*b2*b3*c3*x2*x3 + c1*c3*x2*x3 + a3*c1*c3*x2*x3 + b1*c1*c3*x2*x3 + a3*b1*c1*c3*x2*x3 + b2*c1*c3*x2*x3 + a2*b2*c1*c3*x2*x3 + a3*b2*c1*c3*x2*x3 + a2*b1*b2*c1*c3*x2*x3 + a3*b1*b2*c1*c3*x2*x3 + b3*c1*c3*x2*x3 + a2*b3*c1*c3*x2*x3 + b1*b3*c1*c3*x2*x3 + a2*b1*b3*c1*c3*x2*x3 + b2*b3*c1*c3*x2*x3 + b1*c2*c3*x2*x3 + b1*b2*c2*c3*x2*x3 + a1*b3*c2*c3*x2*x3 + b1*b3*c2*c3*x2*x3 + a1*b1*b3*c2*c3*x2*x3 + a1*b2*b3*c2*c3*x2*x3 + a1*b1*b2*b3*c2*c3*x2*x3 + b3*c1*c2*c3*x2*x3 + b1*b3*c1*c2*c3*x2*x3 + b2*b3*c1*c2*c3*x2*x3 + b1*b2*b3*c1*c2*c3*x2*x3 + a2*a3*b1*y1 + a1*a3*b2*y1 + a2*a3*b2*y1 + a3*b1*b2*y1 + a2*b1*b3*y1 + a1*b2*b3*y1 + a3*b2*b3*y1 + b1*b2*b3*y1 + a1*b1*b2*b3*y1 + a2*a3*b1*c1*y1 + a1*a3*b2*c1*y1 + a2*a3*b2*c1*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*a3*b3*c1*y1 + a2*b1*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a3*b1*c2*y1 + a2*a3*b1*c2*y1 + a3*b2*c2*y1 + a1*a2*a3*b2*c2*y1 + a1*a3*b1*b2*c2*y1 + a2*a3*b1*b2*c2*y1 + a1*b3*c2*y1 + a1*a2*b3*c2*y1 + a3*b3*c2*y1 + a1*a3*b3*c2*y1 + a2*a3*b3*c2*y1 + a1*a2*a3*b3*c2*y1 + b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a2*a3*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a1*a2*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a2*a3*c1*c2*y1 + a3*b1*c1*c2*y1 + a1*a3*b2*c1*c2*y1 + a2*a3*b2*c1*c2*y1 + a2*a3*b1*b2*c1*c2*y1 + b3*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + b1*b3*c1*c2*y1 + a2*b1*b3*c1*c2*y1 + a2*a3*b1*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a2*b1*b2*b3*c1*c2*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + b2*c3*y1 + a1*a3*b2*c3*y1 + a2*a3*b2*c3*y1 + a2*b1*b2*c3*y1 + a3*b1*b2*c3*y1 + a2*b1*b3*c3*y1 + a2*b2*b3*c3*y1 + a2*b1*b2*b3*c3*y1 + a1*a3*b1*b2*b3*c3*y1 + a2*a3*b1*b2*b3*c3*y1 + a2*c1*c3*y1 + a2*b1*c1*c3*y1 + a1*b2*c1*c3*y1 + a2*b2*c1*c3*y1 + a1*a2*b2*c1*c3*y1 + a3*b2*c1*c3*y1 + a1*a3*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + b2*b3*c1*c3*y1 + a2*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + c2*c3*y1 + a2*c2*c3*y1 + a1*a2*c2*c3*y1 + a2*a3*c2*c3*y1 + b1*c2*c3*y1 + a1*b1*c2*c3*y1 + a2*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + a3*b2*c2*c3*y1 + a1*a3*b2*c2*c3*y1 + a2*a3*b2*c2*c3*y1 + a1*a2*a3*b2*c2*c3*y1 + a3*b1*b2*c2*c3*y1 + a1*a3*b1*b2*c2*c3*y1 + a2*a3*b1*b2*c2*c3*y1 + b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + a1*a2*a3*b3*c2*c3*y1 + a3*b1*b3*c2*c3*y1 + a1*a3*b1*b3*c2*c3*y1 + a2*a3*b1*b3*c2*c3*y1 + a1*a2*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + a2*b1*b2*b3*c2*c3*y1 + a3*b1*b2*b3*c2*c3*y1 + a1*c1*c2*c3*y1 + b1*c1*c2*c3*y1 + a2*b1*c1*c2*c3*y1 + a3*b1*c1*c2*c3*y1 + a1*a3*b1*c1*c2*c3*y1 + a2*a3*b1*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + a1*a3*b2*c1*c2*c3*y1 + a2*a3*b1*b2*c1*c2*c3*y1 + a1*b3*c1*c2*c3*y1 + a2*b3*c1*c2*c3*y1 + a1*a2*b3*c1*c2*c3*y1 + a3*b3*c1*c2*c3*y1 + a2*a3*b3*c1*c2*c3*y1 + a1*a2*a3*b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + a1*a3*b1*b3*c1*c2*c3*y1 + a2*a3*b1*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a2*b1*b2*b3*c1*c2*c3*y1 + a3*b2*x1*y1 + b2*b3*x1*y1 + a1*a3*b2*c2*x1*y1 + a3*b1*b2*c2*x1*y1 + a1*a2*b3*c2*x1*y1 + a1*a3*b3*c2*x1*y1 + a2*b1*b3*c2*x1*y1 + a3*b1*b3*c2*x1*y1 + a1*b2*b3*c2*x1*y1 + b1*b2*b3*c2*x1*y1 + a3*b2*c1*c2*x1*y1 + a3*b1*b2*c1*c2*x1*y1 + a2*b3*c1*c2*x1*y1 + a3*b3*c1*c2*x1*y1 + a2*b1*b3*c1*c2*x1*y1 + a3*b1*b3*c1*c2*x1*y1 + b2*b3*c1*c2*x1*y1 + b1*b2*b3*c1*c2*x1*y1 + b2*c3*x1*y1 + a1*b2*c3*x1*y1 + a1*a2*b2*c3*x1*y1 + a1*a3*b2*c3*x1*y1 + a2*b1*b2*c3*x1*y1 + a3*b1*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + a1*a2*b3*c3*x1*y1 + a2*a3*b3*c3*x1*y1 + a2*b1*b3*c3*x1*y1 + a3*b2*b3*c3*x1*y1 + b2*c1*c3*x1*y1 + a2*b2*c1*c3*x1*y1 + a3*b2*c1*c3*x1*y1 + b1*b2*c1*c3*x1*y1 + a2*b1*b2*c1*c3*x1*y1 + a3*b1*b2*c1*c3*x1*y1 + a2*b3*c1*c3*x1*y1 + a2*b1*b3*c1*c3*x1*y1 + b3*c2*c3*x1*y1 + a1*b3*c2*c3*x1*y1 + a3*b3*c2*c3*x1*y1 + a3*b1*b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + a1*b2*b3*c2*c3*x1*y1 + a3*b2*b3*c2*c3*x1*y1 + b1*b2*b3*c2*c3*x1*y1 + b3*c1*c2*c3*x1*y1 + b1*b3*c1*c2*c3*x1*y1 + b2*b3*c1*c2*c3*x1*y1 + b1*b2*b3*c1*c2*c3*x1*y1 + a3*b1*x2*y1 + a1*a3*b1*x2*y1 + a3*b2*x2*y1 + a1*a3*b1*b2*x2*y1 + a1*b3*x2*y1 + a1*a2*b3*x2*y1 + a1*a3*b3*x2*y1 + b1*b3*x2*y1 + a2*b1*b3*x2*y1 + a1*a2*b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a1*a3*b1*b3*x2*y1 + b2*b3*x2*y1 + a1*b2*b3*x2*y1 + a3*b1*c1*x2*y1 + a1*a3*b1*c1*x2*y1 + a3*b2*c1*x2*y1 + a1*a3*b2*c1*x2*y1 + a3*b1*b2*c1*x2*y1 + b3*c1*x2*y1 + a1*a2*b3*c1*x2*y1 + a1*a3*b3*c1*x2*y1 + b2*b3*c1*x2*y1 + b1*b2*b3*c1*x2*y1 + a1*a3*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + a3*b1*b2*c2*x2*y1 + a1*a3*b1*b2*c2*x2*y1 + b3*c2*x2*y1 + a2*b3*c2*x2*y1 + a1*a2*b3*c2*x2*y1 + a3*b3*c2*x2*y1 + a1*a3*b3*c2*x2*y1 + b1*b3*c2*x2*y1 + a1*a2*b1*b3*c2*x2*y1 + a1*a3*b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + a3*c1*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + b3*c1*c2*x2*y1 + a1*b3*c1*c2*x2*y1 + a2*b3*c1*c2*x2*y1 + a3*b3*c1*c2*x2*y1 + b2*b3*c1*c2*x2*y1 + a1*b2*b3*c1*c2*x2*y1 + c3*x2*y1 + a1*a2*c3*x2*y1 + a1*a3*c3*x2*y1 + b1*c3*x2*y1 + a2*b1*c3*x2*y1 + a3*b1*c3*x2*y1 + b2*c3*x2*y1 + a2*b2*c3*x2*y1 + a1*a2*b2*c3*x2*y1 + a3*b2*c3*x2*y1 + a1*a3*b2*c3*x2*y1 + b1*b2*c3*x2*y1 + a1*b1*b2*c3*x2*y1 + a2*b1*b2*c3*x2*y1 + a1*a2*b1*b2*c3*x2*y1 + a3*b1*b2*c3*x2*y1 + a1*a3*b1*b2*c3*x2*y1 + a1*b3*c3*x2*y1 + a3*b3*c3*x2*y1 + a1*a3*b3*c3*x2*y1 + a2*a3*b3*c3*x2*y1 + a1*a2*a3*b3*c3*x2*y1 + b1*b3*c3*x2*y1 + a1*a2*b1*b3*c3*x2*y1 + a3*b2*b3*c3*x2*y1 + a1*a3*b2*b3*c3*x2*y1 + b1*b2*b3*c3*x2*y1 + a2*c1*c3*x2*y1 + a3*c1*c3*x2*y1 + b1*c1*c3*x2*y1 + a1*b1*c1*c3*x2*y1 + a2*b2*c1*c3*x2*y1 + a3*b2*c1*c3*x2*y1 + a1*b1*b2*c1*c3*x2*y1 + b3*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + a2*a3*b3*c1*c3*x2*y1 + a1*b1*b3*c1*c3*x2*y1 + a2*b1*b3*c1*c3*x2*y1 + a3*b1*b3*c1*c3*x2*y1 + a2*a3*b1*b3*c1*c3*x2*y1 + a3*b2*b3*c1*c3*x2*y1 + a3*b1*b2*b3*c1*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + a3*b3*c2*c3*x2*y1 + a1*a3*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + a1*b1*b3*c2*c3*x2*y1 + a2*b1*b3*c2*c3*x2*y1 + a3*b1*b3*c2*c3*x2*y1 + a2*a3*b1*b3*c2*c3*x2*y1 + a3*b2*b3*c2*c3*x2*y1 + a1*a3*b2*b3*c2*c3*x2*y1 + b1*b2*b3*c2*c3*x2*y1 + a1*b1*b2*b3*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + a3*b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + a3*b1*b3*c1*c2*c3*x2*y1 + a3*b2*b3*c1*c2*c3*x2*y1 + b1*b2*b3*c1*c2*c3*x2*y1 + a3*b1*b2*b3*c1*c2*c3*x2*y1 + a1*a2*x3*y1 + a2*b1*x3*y1 + a1*a2*b1*x3*y1 + a1*a2*a3*b2*x3*y1 + a2*a3*b1*b2*x3*y1 + a1*a2*a3*b1*b2*x3*y1 + a2*b3*x3*y1 + a1*a2*b3*x3*y1 + a2*a3*b3*x3*y1 + a1*a2*a3*b3*x3*y1 + a1*a2*b1*b3*x3*y1 + a1*a2*a3*b1*b3*x3*y1 + b2*b3*x3*y1 + a2*b2*b3*x3*y1 + a1*a2*b2*b3*x3*y1 + a3*b2*b3*x3*y1 + a2*a3*b2*b3*x3*y1 + b1*b2*b3*x3*y1 + a1*b1*b2*b3*x3*y1 + a2*b1*b2*b3*x3*y1 + a1*a2*b1*b2*b3*x3*y1 + a3*b1*b2*b3*x3*y1 + a1*a3*b1*b2*b3*x3*y1 + a2*c1*x3*y1 + a2*b1*c1*x3*y1 + a2*a3*b2*c1*x3*y1 + a2*a3*b1*b2*c1*x3*y1 + a2*b3*c1*x3*y1 + a2*a3*b3*c1*x3*y1 + a2*b1*b3*c1*x3*y1 + a2*a3*b1*b3*c1*x3*y1 + a2*b2*b3*c1*x3*y1 + a2*b1*b2*b3*c1*x3*y1 + c2*x3*y1 + a2*c2*x3*y1 + a1*a2*c2*x3*y1 + a3*c2*x3*y1 + a1*a3*c2*x3*y1 + a2*a3*c2*x3*y1 + b1*c2*x3*y1 + a1*a2*b1*c2*x3*y1 + a1*a3*b1*c2*x3*y1 + a2*a3*b1*c2*x3*y1 + b2*c2*x3*y1 + a2*b2*c2*x3*y1 + a3*b2*c2*x3*y1 + a2*a3*b2*c2*x3*y1 + b1*b2*c2*x3*y1 + a2*b1*b2*c2*x3*y1 + a3*b1*b2*c2*x3*y1 + a2*a3*b1*b2*c2*x3*y1 + b3*c2*x3*y1 + a1*b3*c2*x3*y1 + a3*b3*c2*x3*y1 + a1*a3*b3*c2*x3*y1 + a2*a3*b3*c2*x3*y1 + a1*a2*b1*b3*c2*x3*y1 + a2*a3*b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a1*b2*b3*c2*x3*y1 + a1*a3*b2*b3*c2*x3*y1 + b1*b2*b3*c2*x3*y1 + a1*a2*b1*b2*b3*c2*x3*y1 + a2*c1*c2*x3*y1 + a3*c1*c2*x3*y1 + a2*b1*c1*c2*x3*y1 + a3*b1*c1*c2*x3*y1 + b3*c1*c2*x3*y1 + a3*b3*c1*c2*x3*y1 + b1*b3*c1*c2*x3*y1 + a3*b1*b3*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a3*b2*b3*c1*c2*x3*y1 + b1*b2*b3*c1*c2*x3*y1 + a3*b1*b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + a1*a2*c3*x3*y1 + a1*a2*b1*c3*x3*y1 + b2*c3*x3*y1 + a2*b2*c3*x3*y1 + a1*a2*b2*c3*x3*y1 + a3*b2*c3*x3*y1 + b1*b2*c3*x3*y1 + a1*b1*b2*c3*x3*y1 + a2*b1*b2*c3*x3*y1 + a1*a2*b1*b2*c3*x3*y1 + a3*b1*b2*c3*x3*y1 + a1*a3*b1*b2*c3*x3*y1 + a2*a3*b1*b2*c3*x3*y1 + a2*a3*b3*c3*x3*y1 + a1*a2*b1*b3*c3*x3*y1 + b2*b3*c3*x3*y1 + a1*a2*b2*b3*c3*x3*y1 + a2*a3*b2*b3*c3*x3*y1 + b1*b2*b3*c3*x3*y1 + a1*b1*b2*b3*c3*x3*y1 + a2*c1*c3*x3*y1 + a2*b1*c1*c3*x3*y1 + a2*b2*c1*c3*x3*y1 + a2*b1*b2*c1*c3*x3*y1 + a2*b2*b3*c1*c3*x3*y1 + a2*b1*b2*b3*c1*c3*x3*y1 + a2*c2*c3*x3*y1 + a2*b1*c2*c3*x3*y1 + a2*b2*c2*c3*x3*y1 + b1*b2*c2*c3*x3*y1 + a2*b1*b2*c2*c3*x3*y1 + a3*b1*b2*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + a1*b3*c2*c3*x3*y1 + a2*b3*c2*c3*x3*y1 + a3*b3*c2*c3*x3*y1 + a2*b1*b3*c2*c3*x3*y1 + a3*b1*b3*c2*c3*x3*y1 + b2*b3*c2*c3*x3*y1 + a2*b2*b3*c2*c3*x3*y1 + a1*b1*b2*b3*c2*c3*x3*y1 + a2*b1*b2*b3*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + b1*b3*c1*c2*c3*x3*y1 + a1*a3*y2 + a3*b1*y2 + a1*a3*b1*y2 + a1*a2*a3*b1*y2 + a1*a2*a3*b2*y2 + a2*a3*b1*b2*y2 + a1*b3*y2 + a1*a2*b3*y2 + a1*a2*a3*b3*y2 + a1*b1*b3*y2 + a1*a2*b1*b3*y2 + a3*b1*b3*y2 + a2*a3*b1*b3*y2 + a1*b2*b3*y2 + b1*b2*b3*y2 + a1*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + a1*a3*b1*b2*b3*y2 + a1*a3*c1*y2 + a3*b1*c1*y2 + a2*a3*b1*c1*y2 + a1*a2*a3*b1*c1*y2 + a2*a3*b2*c1*y2 + a1*a2*a3*b2*c1*y2 + a3*b1*b2*c1*y2 + a1*a3*b1*b2*c1*y2 + a2*b3*c1*y2 + a2*a3*b3*c1*y2 + a1*a2*a3*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a1*a2*b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a1*a3*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + a1*b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a1*a2*b1*b2*b3*c1*y2 + a3*b1*b2*b3*c1*y2 + a1*a3*b1*b2*b3*c1*y2 + a3*b1*c2*y2 + a2*a3*b1*c2*y2 + a1*a2*a3*b1*c2*y2 + a1*a2*a3*b2*c2*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*a3*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + b1*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a2*b1*b2*b3*c2*y2 + a1*a2*b1*b2*b3*c2*y2 + a1*a3*b1*b2*b3*c2*y2 + a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a1*a2*a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a1*a3*b2*c1*c2*y2 + a2*a3*b2*c1*c2*y2 + a1*a2*a3*b2*c1*c2*y2 + a2*a3*b1*b2*c1*c2*y2 + a1*a2*a3*b1*b2*c1*c2*y2 + b3*c1*c2*y2 + a1*b3*c1*c2*y2 + a2*a3*b3*c1*c2*y2 + a1*a2*a3*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a1*a2*b1*b3*c1*c2*y2 + a1*a3*b1*b3*c1*c2*y2 + a2*a3*b1*b3*c1*c2*y2 + a1*a2*a3*b1*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + a1*a2*b2*b3*c1*c2*y2 + a1*a3*b2*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a1*a2*b1*b2*b3*c1*c2*y2 + a3*b1*b2*b3*c1*c2*y2 + a1*a2*c3*y2 + a1*a3*c3*y2 + a1*a2*b1*c3*y2 + a3*b1*c3*y2 + a1*a3*b1*c3*y2 + a2*a3*b1*c3*y2 + a1*a2*a3*b1*c3*y2 + a1*a2*a3*b2*c3*y2 + b1*b2*c3*y2 + a1*b1*b2*c3*y2 + a2*b1*b2*c3*y2 + a1*b3*c3*y2 + a1*a2*b3*c3*y2 + b1*b3*c3*y2 + a1*b1*b3*c3*y2 + a1*a3*b1*b3*c3*y2 + a2*a3*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + a1*a2*b1*b2*b3*c3*y2 + a3*b1*b2*b3*c3*y2 + a1*a3*b1*b2*b3*c3*y2 + a2*c1*c3*y2 + b1*c1*c3*y2 + a1*a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + a2*a3*b1*c1*c3*y2 + b2*c1*c3*y2 + a1*b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a2*a3*b2*c1*c3*y2 + b1*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a1*a2*b1*b2*c1*c3*y2 + a3*b1*b2*c1*c3*y2 + a2*b3*c1*c3*y2 + a1*a2*b3*c1*c3*y2 + a1*a3*b3*c1*c3*y2 + b1*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a1*a2*b2*b3*c1*c3*y2 + a3*b2*b3*c1*c3*y2 + a2*b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*c2*c3*y2 + a2*b1*c2*c3*y2 + a1*a2*b1*c2*c3*y2 + a1*a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*a3*b1*b2*c2*c3*y2 + a1*b3*c2*c3*y2 + a1*a2*b3*c2*c3*y2 + a1*a3*b3*c2*c3*y2 + b1*b3*c2*c3*y2 + a2*b1*b3*c2*c3*y2 + a1*a2*b1*b3*c2*c3*y2 + a1*a2*b2*b3*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + a3*b1*b2*b3*c2*c3*y2 + a1*b1*c1*c2*c3*y2 + a2*b1*c1*c2*c3*y2 + a3*b1*c1*c2*c3*y2 + a1*a3*b1*c1*c2*c3*y2 + a1*a2*a3*b1*c1*c2*c3*y2 + a2*b2*c1*c2*c3*y2 + a1*a2*b2*c1*c2*c3*y2 + a3*b2*c1*c2*c3*y2 + a1*a3*b2*c1*c2*c3*y2 + a1*a2*a3*b2*c1*c2*c3*y2 + a1*b1*b2*c1*c2*c3*y2 + a2*b1*b2*c1*c2*c3*y2 + a1*a2*b1*b2*c1*c2*c3*y2 + a2*b3*c1*c2*c3*y2 + a1*a2*b3*c1*c2*c3*y2 + a1*a3*b3*c1*c2*c3*y2 + a2*a3*b3*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a1*b1*b3*c1*c2*c3*y2 + a3*b1*b3*c1*c2*c3*y2 + a2*b2*b3*c1*c2*c3*y2 + a1*a2*b2*b3*c1*c2*c3*y2 + a3*b1*x1*y2 + b3*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a1*a2*b3*x1*y2 + a3*b3*x1*y2 + a1*a3*b3*x1*y2 + b1*b3*x1*y2 + a2*b1*b3*x1*y2 + a3*b1*b3*x1*y2 + b2*b3*x1*y2 + a1*b2*b3*x1*y2 + a3*b1*b2*c1*x1*y2 + b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + b1*b3*c1*x1*y2 + a1*b1*b3*c1*x1*y2 + b2*b3*c1*x1*y2 + b1*b2*b3*c1*x1*y2 + a3*c2*x1*y2 + a1*a3*c2*x1*y2 + a3*b1*c2*x1*y2 + a1*a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b1*b2*c2*x1*y2 + a1*b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a2*b1*b3*c2*x1*y2 + a1*a2*b1*b3*c2*x1*y2 + a3*b1*b3*c2*x1*y2 + a1*a3*b1*b3*c2*x1*y2 + a1*b2*b3*c2*x1*y2 + b1*b2*b3*c2*x1*y2 + a1*b1*b2*b3*c2*x1*y2 + a3*c1*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + b1*b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + a2*c3*x1*y2 + a1*a2*c3*x1*y2 + a3*c3*x1*y2 + a1*a3*c3*x1*y2 + a1*b1*c3*x1*y2 + a1*a2*b1*c3*x1*y2 + a1*a3*b1*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b1*b2*c3*x1*y2 + a1*a2*b1*b2*c3*x1*y2 + a1*a3*b1*b2*c3*x1*y2 + b3*c3*x1*y2 + a1*b3*c3*x1*y2 + a1*a2*b3*c3*x1*y2 + a3*b3*c3*x1*y2 + a2*a3*b3*c3*x1*y2 + a1*a2*a3*b3*c3*x1*y2 + b1*b3*c3*x1*y2 + a1*b1*b3*c3*x1*y2 + a2*b1*b3*c3*x1*y2 + a1*a2*b1*b3*c3*x1*y2 + a3*b2*b3*c3*x1*y2 + a1*a3*b2*b3*c3*x1*y2 + b1*b2*b3*c3*x1*y2 + a2*c1*c3*x1*y2 + a3*c1*c3*x1*y2 + a2*b1*c1*c3*x1*y2 + a3*b1*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + b3*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + a2*a3*b3*c1*c3*x1*y2 + a2*b1*b3*c1*c3*x1*y2 + a2*a3*b1*b3*c1*c3*x1*y2 + a3*b2*b3*c1*c3*x1*y2 + a3*b1*b2*b3*c1*c3*x1*y2 + b3*c2*c3*x1*y2 + a3*b3*c2*c3*x1*y2 + a1*a3*b3*c2*c3*x1*y2 + a2*b1*b3*c2*c3*x1*y2 + a2*a3*b1*b3*c2*c3*x1*y2 + a1*b2*b3*c2*c3*x1*y2 + a3*b2*b3*c2*c3*x1*y2 + a1*a3*b2*b3*c2*c3*x1*y2 + a1*b1*b2*b3*c2*c3*x1*y2 + a3*b3*c1*c2*c3*x1*y2 + a3*b1*b3*c1*c2*c3*x1*y2 + b2*b3*c1*c2*c3*x1*y2 + a3*b2*b3*c1*c2*c3*x1*y2 + b1*b2*b3*c1*c2*c3*x1*y2 + a3*b1*b2*b3*c1*c2*c3*x1*y2 + a1*a3*b1*x2*y2 + a1*a3*b2*x2*y2 + a3*b1*b2*x2*y2 + a1*a3*b1*b2*x2*y2 + a1*a2*b3*x2*y2 + a1*a3*b3*x2*y2 + a2*b1*b3*x2*y2 + a1*a2*b1*b3*x2*y2 + a3*b1*b3*x2*y2 + a1*a3*b1*b3*x2*y2 + a1*a3*b1*c1*x2*y2 + a1*a3*b2*c1*x2*y2 + a3*b1*b2*c1*x2*y2 + a1*a2*b3*c1*x2*y2 + a1*a3*b3*c1*x2*y2 + a2*b1*b3*c1*x2*y2 + a3*b1*b3*c1*x2*y2 + a1*a3*b1*c2*x2*y2 + a1*a3*b2*c2*x2*y2 + a1*a2*b3*c2*x2*y2 + a1*a3*b3*c2*x2*y2 + b1*b3*c2*x2*y2 + a1*b1*b3*c2*x2*y2 + b1*b2*b3*c2*x2*y2 + a1*b1*b2*b3*c2*x2*y2 + a3*b1*c1*c2*x2*y2 + a3*b2*c1*c2*x2*y2 + b3*c1*c2*x2*y2 + a1*b3*c1*c2*x2*y2 + a2*b3*c1*c2*x2*y2 + a3*b3*c1*c2*x2*y2 + b1*b3*c1*c2*x2*y2 + b2*b3*c1*c2*x2*y2 + a1*b2*b3*c1*c2*x2*y2 + b1*b2*b3*c1*c2*x2*y2 + a1*a2*b1*c3*x2*y2 + a1*a3*b1*c3*x2*y2 + a1*a2*b2*c3*x2*y2 + a1*a3*b2*c3*x2*y2 + a1*b3*c3*x2*y2 + a1*a2*b3*c3*x2*y2 + b1*c1*c3*x2*y2 + a1*b1*c1*c3*x2*y2 + a2*b1*c1*c3*x2*y2 + a3*b1*c1*c3*x2*y2 + a2*b2*c1*c3*x2*y2 + a3*b2*c1*c3*x2*y2 + b1*b2*c1*c3*x2*y2 + a1*b1*b2*c1*c3*x2*y2 + b3*c1*c3*x2*y2 + a2*b3*c1*c3*x2*y2 + b1*b3*c1*c3*x2*y2 + a1*b1*b3*c1*c3*x2*y2 + a1*b3*c2*c3*x2*y2 + a1*b1*b3*c2*c3*x2*y2 + a1*b2*b3*c2*c3*x2*y2 + b3*c1*c2*c3*x2*y2 + b1*b3*c1*c2*c3*x2*y2 + b2*b3*c1*c2*c3*x2*y2 + b1*x3*y2 + a1*b1*x3*y2 + a2*b1*x3*y2 + a1*a2*b1*x3*y2 + a1*b2*x3*y2 + a1*a2*a3*b1*b2*x3*y2 + a1*b3*x3*y2 + a1*a3*b3*x3*y2 + b1*b3*x3*y2 + a1*a2*b1*b3*x3*y2 + a3*b1*b3*x3*y2 + a1*a2*a3*b1*b3*x3*y2 + a1*b1*b2*b3*x3*y2 + a1*a2*b1*b2*b3*x3*y2 + a1*a3*b1*b2*b3*x3*y2 + b1*c1*x3*y2 + a1*b1*c1*x3*y2 + a2*b1*c1*x3*y2 + a1*a2*b1*c1*x3*y2 + a3*b1*c1*x3*y2 + a2*a3*b1*c1*x3*y2 + b2*c1*x3*y2 + a1*b2*c1*x3*y2 + a2*b2*c1*x3*y2 + a1*a3*b2*c1*x3*y2 + a2*a3*b2*c1*x3*y2 + a2*a3*b1*b2*c1*x3*y2 + b3*c1*x3*y2 + a1*a3*b3*c1*x3*y2 + a2*a3*b3*c1*x3*y2 + a1*b1*b3*c1*x3*y2 + a2*b1*b3*c1*x3*y2 + a1*a2*b1*b3*c1*x3*y2 + a1*a3*b1*b3*c1*x3*y2 + a2*a3*b1*b3*c1*x3*y2 + b2*b3*c1*x3*y2 + a1*b1*b2*b3*c1*x3*y2 + a2*b1*b2*b3*c1*x3*y2 + a1*a2*b1*b2*b3*c1*x3*y2 + a3*b1*b2*b3*c1*x3*y2 + a1*a3*b1*b2*b3*c1*x3*y2 + b1*c2*x3*y2 + a1*b1*c2*x3*y2 + a2*b1*c2*x3*y2 + a1*a2*b1*c2*x3*y2 + a2*a3*b1*c2*x3*y2 + a1*b2*c2*x3*y2 + a1*a3*b2*c2*x3*y2 + a1*b1*b2*c2*x3*y2 + a2*b1*b2*c2*x3*y2 + a1*a3*b3*c2*x3*y2 + a1*b1*b3*c2*x3*y2 + a2*b1*b3*c2*x3*y2 + a1*a2*b1*b3*c2*x3*y2 + a3*b1*b3*c2*x3*y2 + b1*b2*b3*c2*x3*y2 + a1*a2*b1*b2*b3*c2*x3*y2 + b1*c1*c2*x3*y2 + a1*b1*c1*c2*x3*y2 + a2*b1*c1*c2*x3*y2 + a3*b1*c1*c2*x3*y2 + b2*c1*c2*x3*y2 + a1*b2*c1*c2*x3*y2 + a2*b2*c1*c2*x3*y2 + b1*b2*c1*c2*x3*y2 + a2*b1*b2*c1*c2*x3*y2 + b1*b3*c1*c2*x3*y2 + a1*b1*b3*c1*c2*x3*y2 + a2*b1*b3*c1*c2*x3*y2 + a1*b2*b3*c1*c2*x3*y2 + a2*b2*b3*c1*c2*x3*y2 + a1*b1*b2*b3*c1*c2*x3*y2 + a2*b1*b2*b3*c1*c2*x3*y2 + a1*c3*x3*y2 + a1*a3*c3*x3*y2 + b1*c3*x3*y2 + a1*a2*b1*c3*x3*y2 + a1*a3*b1*c3*x3*y2 + a2*a3*b1*c3*x3*y2 + a1*a3*b2*c3*x3*y2 + b1*b2*c3*x3*y2 + a2*b1*b2*c3*x3*y2 + a1*a2*b1*b2*c3*x3*y2 + a1*a3*b1*b2*c3*x3*y2 + a1*b3*c3*x3*y2 + b1*b3*c3*x3*y2 + a1*a2*b1*b3*c3*x3*y2 + a1*b2*b3*c3*x3*y2 + b1*b2*b3*c3*x3*y2 + a1*b1*b2*b3*c3*x3*y2 + c1*c3*x3*y2 + a3*c1*c3*x3*y2 + b1*c1*c3*x3*y2 + a3*b1*c1*c3*x3*y2 + a3*b2*c1*c3*x3*y2 + b1*b2*c1*c3*x3*y2 + a3*b1*b2*c1*c3*x3*y2 + b3*c1*c3*x3*y2 + b1*b3*c1*c3*x3*y2 + b1*b2*b3*c1*c3*x3*y2 + a1*b1*c2*c3*x3*y2 + a2*b1*c2*c3*x3*y2 + a3*b1*c2*c3*x3*y2 + a1*b2*c2*c3*x3*y2 + b1*b2*c2*c3*x3*y2 + a1*b1*b3*c2*c3*x3*y2 + a2*b1*b3*c2*c3*x3*y2 + a1*b2*b3*c2*c3*x3*y2 + a1*b1*b2*b3*c2*c3*x3*y2 + b2*c1*c2*c3*x3*y2 + b1*b2*c1*c2*c3*x3*y2 + b2*b3*c1*c2*c3*x3*y2 + b1*b2*b3*c1*c2*c3*x3*y2 + a1*a3*b1*y1*y2 + a1*a3*b2*y1*y2 + a3*b1*b2*y1*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + a1*b2*b3*y1*y2 + a1*a3*b1*c1*y1*y2 + a3*b2*c1*y1*y2 + a1*a3*b2*c1*y1*y2 + a1*b3*c1*y1*y2 + a1*a2*b3*c1*y1*y2 + a1*a3*b3*c1*y1*y2 + a2*b1*b3*c1*y1*y2 + a3*b1*b3*c1*y1*y2 + b2*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + a3*c2*y1*y2 + a1*a3*c2*y1*y2 + a3*b2*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + a1*a3*b1*b2*c2*y1*y2 + a2*b3*c2*y1*y2 + a1*a2*b3*c2*y1*y2 + a3*b3*c2*y1*y2 + a1*a3*b3*c2*y1*y2 + a1*b1*b3*c2*y1*y2 + a2*b1*b3*c2*y1*y2 + a1*a2*b1*b3*c2*y1*y2 + a3*b1*b3*c2*y1*y2 + a1*a3*b1*b3*c2*y1*y2 + b2*b3*c2*y1*y2 + a1*b2*b3*c2*y1*y2 + a1*b1*b2*b3*c2*y1*y2 + a3*c1*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + a1*b3*c1*c2*y1*y2 + a2*b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b1*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + a1*b2*b3*c1*c2*y1*y2 + b1*b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a2*c3*y1*y2 + a1*a2*c3*y1*y2 + a3*c3*y1*y2 + a1*a3*c3*y1*y2 + a1*b1*c3*y1*y2 + a2*b1*c3*y1*y2 + a3*b1*c3*y1*y2 + a1*b2*c3*y1*y2 + a2*b2*c3*y1*y2 + a1*a2*b2*c3*y1*y2 + a3*b2*c3*y1*y2 + a1*a3*b2*c3*y1*y2 + a1*b1*b2*c3*y1*y2 + a1*a2*b1*b2*c3*y1*y2 + a1*a3*b1*b2*c3*y1*y2 + a1*b3*c3*y1*y2 + a2*b3*c3*y1*y2 + a3*b3*c3*y1*y2 + a1*a2*a3*b3*c3*y1*y2 + a2*b1*b3*c3*y1*y2 + a1*a2*b1*b3*c3*y1*y2 + a1*a3*b2*b3*c3*y1*y2 + b1*b2*b3*c3*y1*y2 + a2*c1*c3*y1*y2 + a3*c1*c3*y1*y2 + b1*c1*c3*y1*y2 + a1*b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + a1*b1*b2*c1*c3*y1*y2 + b3*c1*c3*y1*y2 + a2*a3*b3*c1*c3*y1*y2 + a1*b1*b3*c1*c3*y1*y2 + a2*b1*b3*c1*c3*y1*y2 + a2*a3*b1*b3*c1*c3*y1*y2 + a3*b2*b3*c1*c3*y1*y2 + a3*b1*b2*b3*c1*c3*y1*y2 + a1*b3*c2*c3*y1*y2 + a1*a3*b3*c2*c3*y1*y2 + b1*b3*c2*c3*y1*y2 + a1*b1*b3*c2*c3*y1*y2 + a2*b1*b3*c2*c3*y1*y2 + a2*a3*b1*b3*c2*c3*y1*y2 + b2*b3*c2*c3*y1*y2 + a1*a3*b2*b3*c2*c3*y1*y2 + a1*b1*b2*b3*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + a3*b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + a3*b1*b3*c1*c2*c3*y1*y2 + a3*b2*b3*c1*c2*c3*y1*y2 + b1*b2*b3*c1*c2*c3*y1*y2 + a3*b1*b2*b3*c1*c2*c3*y1*y2 + a2*b1*y3 + a2*a3*b1*y3 + a1*a2*a3*b1*y3 + a1*a2*b2*y3 + a1*a2*a3*b2*y3 + b1*b2*y3 + a1*a2*a3*b1*b2*y3 + a1*a2*a3*b3*y3 + a1*a2*b1*b3*y3 + a2*a3*b1*b3*y3 + a1*a2*a3*b1*b3*y3 + a1*a2*b2*b3*y3 + b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a1*a2*b1*b2*b3*y3 + a2*a3*b1*b2*b3*y3 + a1*a2*c1*y3 + a2*a3*b1*c1*y3 + a1*b2*c1*y3 + a2*b2*c1*y3 + a1*a2*b2*c1*y3 + a1*a3*b2*c1*y3 + a2*a3*b2*c1*y3 + a1*a2*a3*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a1*a2*b1*b2*c1*y3 + a1*a3*b1*b2*c1*y3 + a2*a3*b3*c1*y3 + a1*a2*a3*b3*c1*y3 + a2*b1*b3*c1*y3 + a1*a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + a1*b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a1*a2*b2*b3*c1*y3 + a1*a3*b2*b3*c1*y3 + b1*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a1*c2*y3 + a1*a2*c2*y3 + a1*a3*c2*y3 + a1*b1*c2*y3 + a2*b1*c2*y3 + a1*a2*b1*c2*y3 + a3*b1*c2*y3 + a1*a2*a3*b1*c2*y3 + a1*b2*c2*y3 + a1*a2*a3*b2*c2*y3 + a2*b1*b2*c2*y3 + a1*a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a1*a2*b3*c2*y3 + a1*a2*a3*b3*c2*y3 + b1*b3*c2*y3 + a1*b1*b3*c2*y3 + a2*b1*b3*c2*y3 + a1*a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*a3*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a2*a3*b1*b2*b3*c2*y3 + a1*c1*c2*y3 + a1*a3*c1*c2*y3 + a2*a3*c1*c2*y3 + a1*a2*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*a2*b1*c1*c2*y3 + a1*a3*b1*c1*c2*y3 + b2*c1*c2*y3 + a1*a2*b2*c1*c2*y3 + a3*b2*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + a1*a2*a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + a1*b1*b2*c1*c2*y3 + a1*a2*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a1*a3*b3*c1*c2*y3 + a2*a3*b3*c1*c2*y3 + a1*a2*a3*b3*c1*c2*y3 + a1*b1*b3*c1*c2*y3 + a2*b1*b3*c1*c2*y3 + a1*a2*b1*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + a3*b2*b3*c1*c2*y3 + a1*a3*b2*b3*c1*c2*y3 + a2*a3*b2*b3*c1*c2*y3 + a1*b1*b2*b3*c1*c2*y3 + a2*b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a3*b1*b2*b3*c1*c2*y3 + a2*a3*b1*b2*b3*c1*c2*y3 + a1*a2*c3*y3 + a1*a2*b1*c3*y3 + a1*a2*a3*b1*c3*y3 + a1*a2*a3*b2*c3*y3 + b1*b2*c3*y3 + a1*b1*b2*c3*y3 + a2*b1*b2*c3*y3 + a1*a2*b3*c3*y3 + a1*a2*a3*b3*c3*y3 + a1*b2*b3*c3*y3 + a1*a2*b1*b2*b3*c3*y3 + a2*a3*b1*b2*b3*c3*y3 + a1*a2*b1*c1*c3*y3 + a1*b2*c1*c3*y3 + a2*b2*c1*c3*y3 + a1*a2*b2*c1*c3*y3 + a1*a3*b2*c1*c3*y3 + a2*a3*b2*c1*c3*y3 + a1*a2*a3*b2*c1*c3*y3 + b1*b2*c1*c3*y3 + a1*b1*b2*c1*c3*y3 + a2*b1*b2*c1*c3*y3 + a1*a2*b1*b2*c1*c3*y3 + a1*a3*b1*b2*c1*c3*y3 + a2*a3*b1*b2*c1*c3*y3 + a2*a3*b3*c1*c3*y3 + a2*b1*b3*c1*c3*y3 + a1*a2*b1*b3*c1*c3*y3 + a2*a3*b1*b3*c1*c3*y3 + a2*b2*b3*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a1*b1*b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*a2*b1*c2*c3*y3 + a3*b1*c2*c3*y3 + a1*a2*a3*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + a1*a2*b2*c2*c3*y3 + a1*a2*a3*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*a2*a3*b1*b2*c2*c3*y3 + a1*a2*a3*b3*c2*c3*y3 + b1*b3*c2*c3*y3 + a1*b1*b3*c2*c3*y3 + a1*a2*b1*b3*c2*c3*y3 + a3*b1*b3*c2*c3*y3 + a1*a3*b1*b3*c2*c3*y3 + a2*a3*b1*b3*c2*c3*y3 + a1*a2*a3*b1*b3*c2*c3*y3 + a1*a2*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + a1*a3*b1*b2*b3*c2*c3*y3 + a1*a2*c1*c2*c3*y3 + a3*c1*c2*c3*y3 + a1*a3*c1*c2*c3*y3 + a2*a3*c1*c2*c3*y3 + b1*c1*c2*c3*y3 + a1*a3*b1*c1*c2*c3*y3 + a1*a2*a3*b1*c1*c2*c3*y3 + b2*c1*c2*c3*y3 + a1*b2*c1*c2*c3*y3 + a2*b2*c1*c2*c3*y3 + a1*a2*b2*c1*c2*c3*y3 + a1*a2*a3*b2*c1*c2*c3*y3 + a2*b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a2*a3*b1*b2*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + a2*b3*c1*c2*c3*y3 + a1*a2*b3*c1*c2*c3*y3 + a3*b3*c1*c2*c3*y3 + a2*a3*b3*c1*c2*c3*y3 + a1*a2*a3*b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + a1*b1*b3*c1*c2*c3*y3 + a2*b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*b2*b3*c1*c2*c3*y3 + a1*a2*b2*b3*c1*c2*c3*y3 + a2*a3*b2*b3*c1*c2*c3*y3 + a1*b1*b2*b3*c1*c2*c3*y3 + a2*b1*b2*b3*c1*c2*c3*y3 + a3*b1*b2*b3*c1*c2*c3*y3 + a2*x1*y3 + a1*a2*x1*y3 + a2*b1*x1*y3 + a1*a2*b1*x1*y3 + a2*b2*x1*y3 + a1*a2*b2*x1*y3 + a1*a3*b2*x1*y3 + a1*a2*a3*b2*x1*y3 + a1*b1*b2*x1*y3 + a1*a2*b1*b2*x1*y3 + a1*a3*b1*b2*x1*y3 + a1*a2*a3*b1*b2*x1*y3 + a1*a2*a3*b3*x1*y3 + a1*a2*a3*b1*b3*x1*y3 + a1*b2*b3*x1*y3 + a1*a2*b2*b3*x1*y3 + a1*a3*b2*b3*x1*y3 + a1*b1*b2*b3*x1*y3 + a1*a2*b1*b2*b3*x1*y3 + a1*a3*b1*b2*b3*x1*y3 + a2*c1*x1*y3 + a2*b1*c1*x1*y3 + a2*b2*c1*x1*y3 + a3*b2*c1*x1*y3 + a2*a3*b2*c1*x1*y3 + a2*b1*b2*c1*x1*y3 + a3*b1*b2*c1*x1*y3 + a2*a3*b1*b2*c1*x1*y3 + a2*a3*b3*c1*x1*y3 + a2*a3*b1*b3*c1*x1*y3 + b2*b3*c1*x1*y3 + a2*b2*b3*c1*x1*y3 + a3*b2*b3*c1*x1*y3 + b1*b2*b3*c1*x1*y3 + a2*b1*b2*b3*c1*x1*y3 + a3*b1*b2*b3*c1*x1*y3 + c2*x1*y3 + a1*a2*c2*x1*y3 + a1*a3*c2*x1*y3 + a2*a3*c2*x1*y3 + b1*c2*x1*y3 + a1*a2*b1*c2*x1*y3 + a1*a3*b1*c2*x1*y3 + a2*a3*b1*c2*x1*y3 + b2*c2*x1*y3 + a2*a3*b2*c2*x1*y3 + a2*a3*b1*b2*c2*x1*y3 + a1*a3*b3*c2*x1*y3 + a2*a3*b3*c2*x1*y3 + a1*b1*b3*c2*x1*y3 + a1*a2*b1*b3*c2*x1*y3 + a2*a3*b1*b3*c2*x1*y3 + a2*b2*b3*c2*x1*y3 + a1*a3*b2*b3*c2*x1*y3 + a1*b1*b2*b3*c2*x1*y3 + a2*b1*b2*b3*c2*x1*y3 + a1*a2*b1*b2*b3*c2*x1*y3 + a2*c1*c2*x1*y3 + a3*c1*c2*x1*y3 + a2*b1*c1*c2*x1*y3 + a3*b1*c1*c2*x1*y3 + a3*b3*c1*c2*x1*y3 + a3*b1*b3*c1*c2*x1*y3 + a3*b2*b3*c1*c2*x1*y3 + a3*b1*b2*b3*c1*c2*x1*y3 + a1*a2*c3*x1*y3 + a1*a2*b1*c3*x1*y3 + a1*a2*b2*c3*x1*y3 + b1*b2*c3*x1*y3 + a1*b1*b2*c3*x1*y3 + a2*b1*b2*c3*x1*y3 + a1*a2*b1*b2*c3*x1*y3 + a3*b1*b2*c3*x1*y3 + a1*a3*b1*b2*c3*x1*y3 + a2*a3*b1*b2*c3*x1*y3 + a2*a3*b3*c3*x1*y3 + a1*a2*b1*b3*c3*x1*y3 + b2*b3*c3*x1*y3 + a2*b2*b3*c3*x1*y3 + a1*a2*b2*b3*c3*x1*y3 + a3*b2*b3*c3*x1*y3 + a2*a3*b2*b3*c3*x1*y3 + a1*b1*b2*b3*c3*x1*y3 + a2*c1*c3*x1*y3 + a2*b1*c1*c3*x1*y3 + a2*b2*c1*c3*x1*y3 + a2*b1*b2*c1*c3*x1*y3 + a2*b2*b3*c1*c3*x1*y3 + a2*b1*b2*b3*c1*c3*x1*y3 + a2*c2*c3*x1*y3 + a2*b1*c2*c3*x1*y3 + a2*b2*c2*c3*x1*y3 + b1*b2*c2*c3*x1*y3 + a2*b1*b2*c2*c3*x1*y3 + a3*b1*b2*c2*c3*x1*y3 + a1*b3*c2*c3*x1*y3 + a2*b3*c2*c3*x1*y3 + a3*b3*c2*c3*x1*y3 + a2*b1*b3*c2*c3*x1*y3 + a3*b1*b3*c2*c3*x1*y3 + b2*b3*c2*c3*x1*y3 + a2*b2*b3*c2*c3*x1*y3 + a1*b1*b2*b3*c2*c3*x1*y3 + a2*b1*b2*b3*c2*c3*x1*y3 + b3*c1*c2*c3*x1*y3 + b1*b3*c1*c2*c3*x1*y3 + a1*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b2*x2*y3 + a1*a2*b2*x2*y3 + b1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + a3*b1*b2*x2*y3 + a1*a2*a3*b1*b2*x2*y3 + a1*b3*x2*y3 + a1*a2*b3*x2*y3 + a1*b1*b3*x2*y3 + a1*a2*b1*b3*x2*y3 + a1*a3*b1*b3*x2*y3 + a1*a2*a3*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a1*b1*b2*b3*x2*y3 + a1*a2*b1*b2*b3*x2*y3 + a1*a3*b1*b2*b3*x2*y3 + c1*x2*y3 + b1*c1*x2*y3 + b2*c1*x2*y3 + a1*a2*b2*c1*x2*y3 + a3*b2*c1*x2*y3 + a1*a3*b2*c1*x2*y3 + b1*b2*c1*x2*y3 + a1*b1*b2*c1*x2*y3 + a2*b1*b2*c1*x2*y3 + a3*b1*b2*c1*x2*y3 + a2*a3*b1*b2*c1*x2*y3 + b3*c1*x2*y3 + a1*a2*b3*c1*x2*y3 + a3*b3*c1*x2*y3 + a1*a3*b3*c1*x2*y3 + b1*b3*c1*x2*y3 + a1*a2*b1*b3*c1*x2*y3 + a1*a3*b1*b3*c1*x2*y3 + a2*a3*b1*b3*c1*x2*y3 + a1*b2*b3*c1*x2*y3 + a2*b2*b3*c1*x2*y3 + a3*b2*b3*c1*x2*y3 + a1*a2*b1*b2*b3*c1*x2*y3 + a1*a3*b1*b2*b3*c1*x2*y3 + b1*c2*x2*y3 + a3*b1*c2*x2*y3 + a1*a2*b2*c2*x2*y3 + a1*a3*b2*c2*x2*y3 + a1*b1*b2*c2*x2*y3 + a2*b1*b2*c2*x2*y3 + a1*a2*b3*c2*x2*y3 + a1*a3*b3*c2*x2*y3 + a1*a2*b1*b3*c2*x2*y3 + a1*b2*b3*c2*x2*y3 + b1*b2*b3*c2*x2*y3 + a1*a2*b1*b2*b3*c2*x2*y3 + a2*b2*c1*c2*x2*y3 + a3*b2*c1*c2*x2*y3 + b1*b2*c1*c2*x2*y3 + b3*c1*c2*x2*y3 + a1*b3*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + a3*b3*c1*c2*x2*y3 + b1*b3*c1*c2*x2*y3 + a1*b1*b3*c1*c2*x2*y3 + a2*b1*b3*c1*c2*x2*y3 + a1*b2*b3*c1*c2*x2*y3 + b1*b2*b3*c1*c2*x2*y3 + a1*b1*b2*b3*c1*c2*x2*y3 + a2*b1*b2*b3*c1*c2*x2*y3 + a1*c3*x2*y3 + a1*a3*c3*x2*y3 + b1*c3*x2*y3 + a1*b1*c3*x2*y3 + a2*b1*c3*x2*y3 + a1*a3*b1*c3*x2*y3 + a1*b2*c3*x2*y3 + a1*a2*b2*c3*x2*y3 + a1*a3*b2*c3*x2*y3 + b1*b2*c3*x2*y3 + a2*b1*b2*c3*x2*y3 + a1*a2*b1*b2*c3*x2*y3 + a1*a3*b1*b2*c3*x2*y3 + a1*b3*c3*x2*y3 + a1*a2*b3*c3*x2*y3 + b1*b3*c3*x2*y3 + a1*b1*b3*c3*x2*y3 + a2*b1*b3*c3*x2*y3 + a1*a2*b1*b3*c3*x2*y3 + a1*b1*b2*b3*c3*x2*y3 + c1*c3*x2*y3 + a3*c1*c3*x2*y3 + b1*c1*c3*x2*y3 + a3*b1*c1*c3*x2*y3 + b2*c1*c3*x2*y3 + a2*b2*c1*c3*x2*y3 + a3*b2*c1*c3*x2*y3 + a2*b1*b2*c1*c3*x2*y3 + a3*b1*b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + a2*b3*c1*c3*x2*y3 + b1*b3*c1*c3*x2*y3 + a2*b1*b3*c1*c3*x2*y3 + b2*b3*c1*c3*x2*y3 + b1*c2*c3*x2*y3 + b1*b2*c2*c3*x2*y3 + a1*b3*c2*c3*x2*y3 + b1*b3*c2*c3*x2*y3 + a1*b1*b3*c2*c3*x2*y3 + a1*b2*b3*c2*c3*x2*y3 + a1*b1*b2*b3*c2*c3*x2*y3 + b3*c1*c2*c3*x2*y3 + b1*b3*c1*c2*c3*x2*y3 + b2*b3*c1*c2*c3*x2*y3 + b1*b2*b3*c1*c2*c3*x2*y3 + a1*a2*b1*x3*y3 + a2*a3*b1*x3*y3 + a1*a2*b2*x3*y3 + b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a1*a2*b1*b2*x3*y3 + a3*b1*b2*x3*y3 + a1*a3*b1*b2*x3*y3 + a1*a2*b3*x3*y3 + a2*b1*b3*x3*y3 + a1*a2*b1*b3*x3*y3 + a2*a3*b1*b3*x3*y3 + a1*a3*b2*b3*x3*y3 + a1*a2*b1*c1*x3*y3 + a2*a3*b1*c1*x3*y3 + a1*a2*b2*c1*x3*y3 + a2*a3*b2*c1*x3*y3 + a1*b1*b2*c1*x3*y3 + a1*a2*b3*c1*x3*y3 + a2*a3*b3*c1*x3*y3 + a2*b1*b3*c1*x3*y3 + a1*b1*b2*b3*c1*x3*y3 + a2*b1*b2*b3*c1*x3*y3 + a1*a2*b1*c2*x3*y3 + a2*a3*b1*c2*x3*y3 + a1*a2*b2*c2*x3*y3 + b1*b2*c2*x3*y3 + a1*a2*b3*c2*x3*y3 + b1*b3*c2*x3*y3 + a1*b1*b3*c2*x3*y3 + a3*b1*b3*c2*x3*y3 + a1*b1*b2*b3*c2*x3*y3 + b1*c1*c2*x3*y3 + a1*b1*c1*c2*x3*y3 + a2*b1*c1*c2*x3*y3 + a3*b1*c1*c2*x3*y3 + a1*b2*c1*c2*x3*y3 + a3*b2*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + a2*b1*b2*c1*c2*x3*y3 + b3*c1*c2*x3*y3 + a1*b3*c1*c2*x3*y3 + a2*b3*c1*c2*x3*y3 + a3*b3*c1*c2*x3*y3 + b1*b3*c1*c2*x3*y3 + b2*b3*c1*c2*x3*y3 + a2*b2*b3*c1*c2*x3*y3 + b1*b2*b3*c1*c2*x3*y3 + a1*a2*b1*c3*x3*y3 + a2*a3*b1*c3*x3*y3 + a1*a2*b2*c3*x3*y3 + b1*b2*c3*x3*y3 + a1*a2*b3*c3*x3*y3 + b1*b2*b3*c3*x3*y3 + a2*b2*c1*c3*x3*y3 + a2*b1*b2*c1*c3*x3*y3 + a2*b3*c1*c3*x3*y3 + a2*b1*b3*c1*c3*x3*y3 + b1*c2*c3*x3*y3 + a1*b1*c2*c3*x3*y3 + a2*b1*c2*c3*x3*y3 + a3*b1*c2*c3*x3*y3 + a1*b2*c2*c3*x3*y3 + a1*b3*c2*c3*x3*y3 + b1*b3*c2*c3*x3*y3 + a2*b1*b3*c2*c3*x3*y3 + b2*c1*c2*c3*x3*y3 + b1*b2*c1*c2*c3*x3*y3 + b3*c1*c2*c3*x3*y3 + b1*b3*c1*c2*c3*x3*y3 + a2*y1*y3 + a1*a2*y1*y3 + a1*a2*b1*y1*y3 + b2*y1*y3 + a2*b2*y1*y3 + a1*a2*b2*y1*y3 + a1*a3*b2*y1*y3 + a1*a2*a3*b2*y1*y3 + b1*b2*y1*y3 + a1*b1*b2*y1*y3 + a2*b1*b2*y1*y3 + a1*a2*b1*b2*y1*y3 + a3*b1*b2*y1*y3 + a1*a3*b1*b2*y1*y3 + a2*a3*b1*b2*y1*y3 + a1*a2*a3*b1*b2*y1*y3 + a1*a2*a3*b3*y1*y3 + a2*a3*b1*b3*y1*y3 + a1*a2*a3*b1*b3*y1*y3 + a1*b2*b3*y1*y3 + a1*a2*b2*b3*y1*y3 + a1*a3*b2*b3*y1*y3 + b1*b2*b3*y1*y3 + a1*b1*b2*b3*y1*y3 + a2*b1*b2*b3*y1*y3 + a1*a2*b1*b2*b3*y1*y3 + a3*b1*b2*b3*y1*y3 + a1*a3*b1*b2*b3*y1*y3 + a2*c1*y1*y3 + a2*b1*c1*y1*y3 + a2*b2*c1*y1*y3 + a3*b2*c1*y1*y3 + a2*a3*b2*c1*y1*y3 + a2*b1*b2*c1*y1*y3 + a3*b1*b2*c1*y1*y3 + a2*a3*b1*b2*c1*y1*y3 + a2*a3*b3*c1*y1*y3 + a2*a3*b1*b3*c1*y1*y3 + b2*b3*c1*y1*y3 + a2*b2*b3*c1*y1*y3 + a3*b2*b3*c1*y1*y3 + b1*b2*b3*c1*y1*y3 + a2*b1*b2*b3*c1*y1*y3 + a3*b1*b2*b3*c1*y1*y3 + c2*y1*y3 + a1*a2*c2*y1*y3 + a1*a3*c2*y1*y3 + a2*a3*c2*y1*y3 + b1*c2*y1*y3 + a2*b1*c2*y1*y3 + a1*a2*b1*c2*y1*y3 + a3*b1*c2*y1*y3 + a1*a3*b1*c2*y1*y3 + a2*a3*b1*c2*y1*y3 + b2*c2*y1*y3 + a2*a3*b2*c2*y1*y3 + a2*a3*b1*b2*c2*y1*y3 + b3*c2*y1*y3 + a2*b3*c2*y1*y3 + a3*b3*c2*y1*y3 + a1*a3*b3*c2*y1*y3 + a2*a3*b3*c2*y1*y3 + b1*b3*c2*y1*y3 + a1*b1*b3*c2*y1*y3 + a2*b1*b3*c2*y1*y3 + a1*a2*b1*b3*c2*y1*y3 + a2*a3*b1*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + a3*b2*b3*c2*y1*y3 + a1*a3*b2*b3*c2*y1*y3 + b1*b2*b3*c2*y1*y3 + a1*b1*b2*b3*c2*y1*y3 + a1*a2*b1*b2*b3*c2*y1*y3 + a2*c1*c2*y1*y3 + a3*c1*c2*y1*y3 + a2*b1*c1*c2*y1*y3 + a3*b1*c1*c2*y1*y3 + a3*b3*c1*c2*y1*y3 + a3*b1*b3*c1*c2*y1*y3 + a3*b2*b3*c1*c2*y1*y3 + a3*b1*b2*b3*c1*c2*y1*y3 + a1*a2*c3*y1*y3 + a2*b1*c3*y1*y3 + a1*a2*b1*c3*y1*y3 + b2*c3*y1*y3 + a1*a2*b2*c3*y1*y3 + a3*b2*c3*y1*y3 + a1*b1*b2*c3*y1*y3 + a1*a2*b1*b2*c3*y1*y3 + a1*a3*b1*b2*c3*y1*y3 + a2*a3*b1*b2*c3*y1*y3 + a2*b3*c3*y1*y3 + a2*a3*b3*c3*y1*y3 + a2*b1*b3*c3*y1*y3 + a1*a2*b1*b3*c3*y1*y3 + a1*a2*b2*b3*c3*y1*y3 + a3*b2*b3*c3*y1*y3 + a2*a3*b2*b3*c3*y1*y3 + b1*b2*b3*c3*y1*y3 + a1*b1*b2*b3*c3*y1*y3 + a2*c1*c3*y1*y3 + a2*b1*c1*c3*y1*y3 + a2*b2*c1*c3*y1*y3 + a2*b1*b2*c1*c3*y1*y3 + a2*b2*b3*c1*c3*y1*y3 + a2*b1*b2*b3*c1*c3*y1*y3 + a2*c2*c3*y1*y3 + a2*b1*c2*c3*y1*y3 + a2*b2*c2*c3*y1*y3 + b1*b2*c2*c3*y1*y3 + a2*b1*b2*c2*c3*y1*y3 + a3*b1*b2*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + a1*b3*c2*c3*y1*y3 + a2*b3*c2*c3*y1*y3 + a3*b3*c2*c3*y1*y3 + a2*b1*b3*c2*c3*y1*y3 + a3*b1*b3*c2*c3*y1*y3 + a2*b2*b3*c2*c3*y1*y3 + b1*b2*b3*c2*c3*y1*y3 + a1*b1*b2*b3*c2*c3*y1*y3 + a2*b1*b2*b3*c2*c3*y1*y3 + b3*c1*c2*c3*y1*y3 + b1*b3*c1*c2*c3*y1*y3 + a1*y2*y3 + b1*y2*y3 + a1*b1*y2*y3 + a2*b1*y2*y3 + a1*a2*b1*y2*y3 + a1*b2*y2*y3 + a1*b1*b2*y2*y3 + a1*a2*b1*b2*y2*y3 + a1*a3*b1*b2*y2*y3 + a1*a2*a3*b1*b2*y2*y3 + a1*a2*a3*b1*b3*y2*y3 + a1*b1*b2*b3*y2*y3 + a1*a2*b1*b2*b3*y2*y3 + a1*a3*b1*b2*b3*y2*y3 + c1*y2*y3 + b1*c1*y2*y3 + a1*a2*b1*c1*y2*y3 + a2*a3*b1*c1*y2*y3 + b2*c1*y2*y3 + a3*b2*c1*y2*y3 + a1*a3*b2*c1*y2*y3 + a2*a3*b2*c1*y2*y3 + b1*b2*c1*y2*y3 + a2*b1*b2*c1*y2*y3 + a3*b1*b2*c1*y2*y3 + a2*a3*b1*b2*c1*y2*y3 + a1*b3*c1*y2*y3 + a2*b3*c1*y2*y3 + a1*a3*b3*c1*y2*y3 + a2*a3*b3*c1*y2*y3 + a1*b1*b3*c1*y2*y3 + a1*a2*b1*b3*c1*y2*y3 + a1*a3*b1*b3*c1*y2*y3 + a2*a3*b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + a1*b1*b2*b3*c1*y2*y3 + a2*b1*b2*b3*c1*y2*y3 + a1*a2*b1*b2*b3*c1*y2*y3 + a3*b1*b2*b3*c1*y2*y3 + a1*a3*b1*b2*b3*c1*y2*y3 + b1*c2*y2*y3 + a1*a2*b1*c2*y2*y3 + a3*b1*c2*y2*y3 + a2*a3*b1*c2*y2*y3 + a1*a3*b2*c2*y2*y3 + b1*b2*c2*y2*y3 + a1*b1*b2*c2*y2*y3 + a2*b1*b2*c2*y2*y3 + a1*b3*c2*y2*y3 + a1*a3*b3*c2*y2*y3 + a2*b1*b3*c2*y2*y3 + a1*a2*b1*b3*c2*y2*y3 + a3*b1*b3*c2*y2*y3 + b1*b2*b3*c2*y2*y3 + a1*b1*b2*b3*c2*y2*y3 + a1*a2*b1*b2*b3*c2*y2*y3 + b1*c1*c2*y2*y3 + a1*b1*c1*c2*y2*y3 + a2*b1*c1*c2*y2*y3 + a3*b1*c1*c2*y2*y3 + a1*b2*c1*c2*y2*y3 + a2*b2*c1*c2*y2*y3 + a2*b1*b2*c1*c2*y2*y3 + a1*b1*b3*c1*c2*y2*y3 + a2*b1*b3*c1*c2*y2*y3 + b2*b3*c1*c2*y2*y3 + a1*b2*b3*c1*c2*y2*y3 + a2*b2*b3*c1*c2*y2*y3 + b1*b2*b3*c1*c2*y2*y3 + a1*b1*b2*b3*c1*c2*y2*y3 + a2*b1*b2*b3*c1*c2*y2*y3 + a1*c3*y2*y3 + a1*a3*c3*y2*y3 + b1*c3*y2*y3 + a1*b1*c3*y2*y3 + a2*b1*c3*y2*y3 + a1*a2*b1*c3*y2*y3 + a3*b1*c3*y2*y3 + a1*a3*b1*c3*y2*y3 + a2*a3*b1*c3*y2*y3 + a1*b2*c3*y2*y3 + a1*a3*b2*c3*y2*y3 + a2*b1*b2*c3*y2*y3 + a1*a2*b1*b2*c3*y2*y3 + a1*a3*b1*b2*c3*y2*y3 + a1*a2*b1*b3*c3*y2*y3 + a1*b2*b3*c3*y2*y3 + b1*b2*b3*c3*y2*y3 + a1*b1*b2*b3*c3*y2*y3 + c1*c3*y2*y3 + a3*c1*c3*y2*y3 + b1*c1*c3*y2*y3 + a3*b1*c1*c3*y2*y3 + b2*c1*c3*y2*y3 + a3*b2*c1*c3*y2*y3 + a3*b1*b2*c1*c3*y2*y3 + b1*b2*b3*c1*c3*y2*y3 + a1*b1*c2*c3*y2*y3 + a2*b1*c2*c3*y2*y3 + a3*b1*c2*c3*y2*y3 + a1*b2*c2*c3*y2*y3 + b1*b2*c2*c3*y2*y3 + b1*b3*c2*c3*y2*y3 + a1*b1*b3*c2*c3*y2*y3 + a2*b1*b3*c2*c3*y2*y3 + a1*b2*b3*c2*c3*y2*y3 + a1*b1*b2*b3*c2*c3*y2*y3 + b2*c1*c2*c3*y2*y3 + b1*b2*c1*c2*c3*y2*y3 + b2*b3*c1*c2*c3*y2*y3 + b1*b2*b3*c1*c2*c3*y2*y3 + a2*a3*b1*z1 + a1*a3*b2*z1 + a2*a3*b2*z1 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a1*b1*b2*b3*z1 + a1*a3*b2*c1*z1 + a3*b1*b2*c1*z1 + a1*a3*c2*z1 + a2*a3*c2*z1 + a3*b1*c2*z1 + a1*a3*b1*c2*z1 + a3*b2*c2*z1 + a2*a3*b2*c2*z1 + a1*a2*a3*b2*c2*z1 + a2*a3*b1*b2*c2*z1 + a1*b3*c2*z1 + a1*a2*b3*c2*z1 + a1*a3*b3*c2*z1 + a1*a2*a3*b3*c2*z1 + b1*b3*c2*z1 + a1*a2*b1*b3*c2*z1 + a2*a3*b1*b3*c2*z1 + b2*b3*c2*z1 + a1*b2*b3*c2*z1 + a1*a2*b2*b3*c2*z1 + a3*b1*b2*b3*c2*z1 + a1*a3*c1*c2*z1 + a1*a3*b2*c1*c2*z1 + a2*a3*b1*b2*c1*c2*z1 + b3*c1*c2*z1 + a2*b3*c1*c2*z1 + a3*b3*c1*c2*z1 + a3*b1*b3*c1*c2*z1 + a2*a3*b1*b3*c1*c2*z1 + a1*b2*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a2*b1*b2*b3*c1*c2*z1 + a2*b1*c3*z1 + a1*b2*c3*z1 + a2*b2*c3*z1 + a1*b1*b2*c3*z1 + a1*a2*b1*b2*c3*z1 + a1*a3*b1*b2*c3*z1 + a2*b1*b3*c3*z1 + a1*a2*b1*b3*c3*z1 + a2*a3*b1*b3*c3*z1 + a1*b2*b3*c3*z1 + a2*b2*b3*c3*z1 + a1*a3*b2*b3*c3*z1 + a2*a3*b2*b3*c3*z1 + a1*b1*b2*b3*c3*z1 + a1*a3*b1*b2*b3*c3*z1 + a2*a3*b1*b2*b3*c3*z1 + a1*a2*b2*c1*c3*z1 + a1*a3*b2*c1*c3*z1 + a2*b1*b2*c1*c3*z1 + a3*b1*b2*c1*c3*z1 + a2*b1*b3*c1*c3*z1 + a1*b2*b3*c1*c3*z1 + a1*c2*c3*z1 + a2*c2*c3*z1 + a1*a3*c2*c3*z1 + a2*a3*c2*c3*z1 + a1*b1*c2*c3*z1 + a1*a2*b1*c2*c3*z1 + a3*b1*c2*c3*z1 + a1*a3*b1*c2*c3*z1 + a3*b2*c2*c3*z1 + a2*a3*b2*c2*c3*z1 + a1*a2*a3*b2*c2*c3*z1 + a1*a3*b1*b2*c2*c3*z1 + a2*a3*b1*b2*c2*c3*z1 + a1*b3*c2*c3*z1 + a1*a2*b3*c2*c3*z1 + a3*b3*c2*c3*z1 + a1*a3*b3*c2*c3*z1 + a1*a2*a3*b3*c2*c3*z1 + a1*b1*b3*c2*c3*z1 + a2*b1*b3*c2*c3*z1 + a3*b1*b3*c2*c3*z1 + a1*a3*b1*b3*c2*c3*z1 + a2*a3*b1*b3*c2*c3*z1 + a2*b2*b3*c2*c3*z1 + a1*a2*b2*b3*c2*c3*z1 + a3*b2*b3*c2*c3*z1 + b1*b2*b3*c2*c3*z1 + a2*b1*b2*b3*c2*c3*z1 + b1*c1*c2*c3*z1 + a2*b1*c1*c2*c3*z1 + b2*c1*c2*c3*z1 + a3*b1*b2*c1*c2*c3*z1 + a2*a3*b1*b2*c1*c2*c3*z1 + a2*b3*c1*c2*c3*z1 + a1*a2*b3*c1*c2*c3*z1 + a3*b3*c1*c2*c3*z1 + a1*a3*b3*c1*c2*c3*z1 + a2*a3*b3*c1*c2*c3*z1 + a1*a2*a3*b3*c1*c2*c3*z1 + a1*b1*b3*c1*c2*c3*z1 + a2*b1*b3*c1*c2*c3*z1 + a3*b1*b3*c1*c2*c3*z1 + a1*a3*b1*b3*c1*c2*c3*z1 + a2*a3*b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + a1*b2*b3*c1*c2*c3*z1 + a2*b1*b2*b3*c1*c2*c3*z1 + a3*b2*x1*z1 + a3*b2*c1*x1*z1 + b2*b3*c1*x1*z1 + a3*c2*x1*z1 + a3*b2*c2*x1*z1 + b3*c2*x1*z1 + b2*b3*c2*x1*z1 + a3*b2*c1*c2*x1*z1 + a1*a3*b2*c1*c2*x1*z1 + a2*b3*c1*c2*x1*z1 + a1*a2*b3*c1*c2*x1*z1 + a3*b3*c1*c2*x1*z1 + a1*a3*b3*c1*c2*x1*z1 + b2*b3*c1*c2*x1*z1 + a1*b2*b3*c1*c2*x1*z1 + b2*c3*x1*z1 + a1*b2*c3*x1*z1 + a2*b2*c3*x1*z1 + a3*b2*c3*x1*z1 + b1*b2*c3*x1*z1 + b2*b3*c3*x1*z1 + b2*c1*c3*x1*z1 + a1*b2*c1*c3*x1*z1 + a2*b2*c1*c3*x1*z1 + a1*a2*b2*c1*c3*x1*z1 + a3*b2*c1*c3*x1*z1 + a1*a3*b2*c1*c3*x1*z1 + a1*a2*b3*c1*c3*x1*z1 + a2*a3*b3*c1*c3*x1*z1 + a3*b2*b3*c1*c3*x1*z1 + a1*b3*c2*c3*x1*z1 + a2*b3*c2*c3*x1*z1 + a3*b3*c2*c3*x1*z1 + a1*a3*b3*c2*c3*x1*z1 + a2*a3*b3*c2*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + b3*c1*c2*c3*x1*z1 + a1*b3*c1*c2*c3*x1*z1 + a1*b2*b3*c1*c2*c3*x1*z1 + a3*b2*b3*c1*c2*c3*x1*z1 + a3*x2*z1 + a3*b1*x2*z1 + a1*a3*b1*x2*z1 + a3*b2*x2*z1 + a1*a3*b2*x2*z1 + a3*b1*b2*x2*z1 + a1*a3*b1*b2*x2*z1 + a1*a2*b1*b3*x2*z1 + a1*a3*b1*b3*x2*z1 + a1*b2*b3*x2*z1 + a3*b1*c1*x2*z1 + a2*b1*b3*c1*x2*z1 + a3*b1*b3*c1*x2*z1 + b1*b2*b3*c1*x2*z1 + a1*a3*b1*c2*x2*z1 + a3*b2*c2*x2*z1 + a1*a3*b2*c2*x2*z1 + a3*b1*b2*c2*x2*z1 + a1*a3*b1*b2*c2*x2*z1 + a1*b3*c2*x2*z1 + a1*a2*b3*c2*x2*z1 + a1*a3*b3*c2*x2*z1 + a1*a2*b1*b3*c2*x2*z1 + a1*a3*b1*b3*c2*x2*z1 + b2*b3*c2*x2*z1 + a1*b2*b3*c2*x2*z1 + b1*b2*b3*c2*x2*z1 + a3*b1*c1*c2*x2*z1 + b1*b3*c1*c2*x2*z1 + b1*b2*b3*c1*c2*x2*z1 + a1*c3*x2*z1 + a2*c3*x2*z1 + a3*c3*x2*z1 + a2*b1*c3*x2*z1 + a1*a2*b1*c3*x2*z1 + a3*b1*c3*x2*z1 + a1*a3*b1*c3*x2*z1 + a1*b2*c3*x2*z1 + a2*b2*c3*x2*z1 + a1*a2*b2*c3*x2*z1 + a3*b2*c3*x2*z1 + a1*a3*b2*c3*x2*z1 + a2*b1*b2*c3*x2*z1 + a1*a2*b1*b2*c3*x2*z1 + a3*b1*b2*c3*x2*z1 + a1*a3*b1*b2*c3*x2*z1 + b3*c3*x2*z1 + a1*a3*b3*c3*x2*z1 + a1*a2*a3*b3*c3*x2*z1 + b1*b3*c3*x2*z1 + a1*b1*b3*c3*x2*z1 + a1*a2*b1*b3*c3*x2*z1 + b2*b3*c3*x2*z1 + a1*a3*b2*b3*c3*x2*z1 + b1*b2*b3*c3*x2*z1 + b1*c1*c3*x2*z1 + a2*b1*c1*c3*x2*z1 + a3*b1*c1*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b1*b3*c1*c3*x2*z1 + a2*b1*b3*c1*c3*x2*z1 + a3*b1*b3*c1*c3*x2*z1 + a2*a3*b1*b3*c1*c3*x2*z1 + a3*b1*b2*b3*c1*c3*x2*z1 + b3*c2*c3*x2*z1 + a2*b3*c2*c3*x2*z1 + a3*b3*c2*c3*x2*z1 + a1*a3*b3*c2*c3*x2*z1 + a2*a3*b3*c2*c3*x2*z1 + b1*b3*c2*c3*x2*z1 + a2*b1*b3*c2*c3*x2*z1 + a3*b1*b3*c2*c3*x2*z1 + a2*a3*b1*b3*c2*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + a1*a3*b2*b3*c2*c3*x2*z1 + b1*b2*b3*c2*c3*x2*z1 + a1*b1*b2*b3*c2*c3*x2*z1 + a3*b1*b3*c1*c2*c3*x2*z1 + b1*b2*b3*c1*c2*c3*x2*z1 + a3*b1*b2*b3*c1*c2*c3*x2*z1 + a1*a2*b1*x3*z1 + a1*a2*a3*b1*b2*x3*z1 + a2*b1*b3*x3*z1 + a1*a2*b1*b3*x3*z1 + a2*a3*b1*b3*x3*z1 + a1*a2*a3*b1*b3*x3*z1 + a1*b2*b3*x3*z1 + a2*b2*b3*x3*z1 + a1*a3*b2*b3*x3*z1 + a2*a3*b2*b3*x3*z1 + a1*b1*b2*b3*x3*z1 + a1*a2*b1*b2*b3*x3*z1 + a1*a3*b1*b2*b3*x3*z1 + a2*b1*c1*x3*z1 + a2*a3*b1*b2*c1*x3*z1 + a2*b1*b3*c1*x3*z1 + a2*a3*b1*b3*c1*x3*z1 + a2*b1*b2*b3*c1*x3*z1 + b1*c2*x3*z1 + a2*b1*c2*x3*z1 + a1*a2*b1*c2*x3*z1 + a3*b1*c2*x3*z1 + a1*a3*b1*c2*x3*z1 + a2*a3*b1*c2*x3*z1 + b1*b2*c2*x3*z1 + a2*b1*b2*c2*x3*z1 + a3*b1*b2*c2*x3*z1 + a2*a3*b1*b2*c2*x3*z1 + a1*b3*c2*x3*z1 + a1*a2*b3*c2*x3*z1 + a1*a3*b3*c2*x3*z1 + a2*b1*b3*c2*x3*z1 + a1*a2*b1*b3*c2*x3*z1 + a2*a3*b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + a1*b2*b3*c2*x3*z1 + a1*a2*b2*b3*c2*x3*z1 + a3*b2*b3*c2*x3*z1 + a1*a3*b2*b3*c2*x3*z1 + b1*b2*b3*c2*x3*z1 + a2*b1*b2*b3*c2*x3*z1 + a1*a2*b1*b2*b3*c2*x3*z1 + a2*b1*c1*c2*x3*z1 + a3*b1*c1*c2*x3*z1 + b1*b3*c1*c2*x3*z1 + a3*b1*b3*c1*c2*x3*z1 + b1*b2*b3*c1*c2*x3*z1 + a3*b1*b2*b3*c1*c2*x3*z1 + a2*b1*c3*x3*z1 + a1*a2*b1*c3*x3*z1 + a1*b2*c3*x3*z1 + a2*b2*c3*x3*z1 + a1*a3*b2*c3*x3*z1 + a2*a3*b2*c3*x3*z1 + a1*b1*b2*c3*x3*z1 + a1*a2*b1*b2*c3*x3*z1 + a1*a3*b1*b2*c3*x3*z1 + a2*a3*b1*b2*c3*x3*z1 + a1*a2*b3*c3*x3*z1 + a2*a3*b3*c3*x3*z1 + a2*b1*b3*c3*x3*z1 + a1*a2*b1*b3*c3*x3*z1 + a1*b2*b3*c3*x3*z1 + a2*b2*b3*c3*x3*z1 + a1*a2*b2*b3*c3*x3*z1 + a2*a3*b2*b3*c3*x3*z1 + a1*b1*b2*b3*c3*x3*z1 + a2*b1*c1*c3*x3*z1 + a2*b1*b2*c1*c3*x3*z1 + a2*b1*b2*b3*c1*c3*x3*z1 + a2*b1*c2*c3*x3*z1 + b2*c2*c3*x3*z1 + a3*b2*c2*c3*x3*z1 + b1*b2*c2*c3*x3*z1 + a2*b1*b2*c2*c3*x3*z1 + a3*b1*b2*c2*c3*x3*z1 + a1*b3*c2*c3*x3*z1 + a2*b1*b3*c2*c3*x3*z1 + a3*b1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + a1*b2*b3*c2*c3*x3*z1 + b1*b2*b3*c2*c3*x3*z1 + a1*b1*b2*b3*c2*c3*x3*z1 + a2*b1*b2*b3*c2*c3*x3*z1 + b1*b3*c1*c2*c3*x3*z1 + b2*b3*y1*z1 + a3*b2*c1*y1*z1 + b2*b3*c1*y1*z1 + a3*c2*y1*z1 + a1*a3*b2*c2*y1*z1 + a3*b1*b2*c2*y1*z1 + b3*c2*y1*z1 + a2*b3*c2*y1*z1 + a1*a2*b3*c2*y1*z1 + a3*b3*c2*y1*z1 + a1*a3*b3*c2*y1*z1 + a2*b1*b3*c2*y1*z1 + a3*b1*b3*c2*y1*z1 + a1*b2*b3*c2*y1*z1 + b1*b2*b3*c2*y1*z1 + a3*b2*c1*c2*y1*z1 + a1*a3*b2*c1*c2*y1*z1 + a3*b1*b2*c1*c2*y1*z1 + a2*b3*c1*c2*y1*z1 + a1*a2*b3*c1*c2*y1*z1 + a3*b3*c1*c2*y1*z1 + a1*a3*b3*c1*c2*y1*z1 + a2*b1*b3*c1*c2*y1*z1 + a3*b1*b3*c1*c2*y1*z1 + b2*b3*c1*c2*y1*z1 + a1*b2*b3*c1*c2*y1*z1 + b1*b2*b3*c1*c2*y1*z1 + a1*a2*b2*c3*y1*z1 + a1*a3*b2*c3*y1*z1 + b1*b2*c3*y1*z1 + a2*b1*b2*c3*y1*z1 + a3*b1*b2*c3*y1*z1 + a1*a2*b3*c3*y1*z1 + a2*a3*b3*c3*y1*z1 + a2*b1*b3*c3*y1*z1 + b2*b3*c3*y1*z1 + a3*b2*b3*c3*y1*z1 + b2*c1*c3*y1*z1 + a1*b2*c1*c3*y1*z1 + a2*b2*c1*c3*y1*z1 + a1*a2*b2*c1*c3*y1*z1 + a3*b2*c1*c3*y1*z1 + a1*a3*b2*c1*c3*y1*z1 + b1*b2*c1*c3*y1*z1 + a2*b1*b2*c1*c3*y1*z1 + a3*b1*b2*c1*c3*y1*z1 + a1*a2*b3*c1*c3*y1*z1 + a2*a3*b3*c1*c3*y1*z1 + a2*b1*b3*c1*c3*y1*z1 + a3*b2*b3*c1*c3*y1*z1 + b3*c2*c3*y1*z1 + a2*b3*c2*c3*y1*z1 + a3*b3*c2*c3*y1*z1 + a1*a3*b3*c2*c3*y1*z1 + a2*a3*b3*c2*c3*y1*z1 + a3*b1*b3*c2*c3*y1*z1 + b2*b3*c2*c3*y1*z1 + a1*b2*b3*c2*c3*y1*z1 + a3*b2*b3*c2*c3*y1*z1 + b1*b2*b3*c2*c3*y1*z1 + b3*c1*c2*c3*y1*z1 + a1*b3*c1*c2*c3*y1*z1 + b1*b3*c1*c2*c3*y1*z1 + a1*b2*b3*c1*c2*c3*y1*z1 + a3*b2*b3*c1*c2*c3*y1*z1 + b1*b2*b3*c1*c2*c3*y1*z1 + a3*y2*z1 + a1*a3*b1*y2*z1 + a1*a3*b2*y2*z1 + a3*b1*b2*y2*z1 + b1*b3*y2*z1 + a1*b1*b3*y2*z1 + b2*b3*y2*z1 + a1*b2*b3*y2*z1 + a3*b1*c1*y2*z1 + a3*b1*b2*c1*y2*z1 + b1*b3*c1*y2*z1 + b1*b2*b3*c1*y2*z1 + a3*b1*c2*y2*z1 + a1*a3*b1*c2*y2*z1 + a3*b2*c2*y2*z1 + a1*a3*b2*c2*y2*z1 + a1*a3*b1*b2*c2*y2*z1 + a1*b3*c2*y2*z1 + a1*a2*b3*c2*y2*z1 + a1*a3*b3*c2*y2*z1 + b1*b3*c2*y2*z1 + a1*b1*b3*c2*y2*z1 + a2*b1*b3*c2*y2*z1 + a1*a2*b1*b3*c2*y2*z1 + a3*b1*b3*c2*y2*z1 + a1*a3*b1*b3*c2*y2*z1 + b2*b3*c2*y2*z1 + a1*b2*b3*c2*y2*z1 + a1*b1*b2*b3*c2*y2*z1 + a3*b1*c1*c2*y2*z1 + a1*c3*y2*z1 + a2*c3*y2*z1 + a3*c3*y2*z1 + b1*c3*y2*z1 + a1*a2*b1*c3*y2*z1 + a1*a3*b1*c3*y2*z1 + a1*b2*c3*y2*z1 + a2*b2*c3*y2*z1 + a1*a2*b2*c3*y2*z1 + a3*b2*c3*y2*z1 + a1*a3*b2*c3*y2*z1 + b1*b2*c3*y2*z1 + a1*a2*b1*b2*c3*y2*z1 + a1*a3*b1*b2*c3*y2*z1 + a1*b3*c3*y2*z1 + a2*b3*c3*y2*z1 + a3*b3*c3*y2*z1 + a2*a3*b3*c3*y2*z1 + a1*a2*a3*b3*c3*y2*z1 + a1*b1*b3*c3*y2*z1 + a2*b1*b3*c3*y2*z1 + a1*a2*b1*b3*c3*y2*z1 + b2*b3*c3*y2*z1 + a3*b2*b3*c3*y2*z1 + a1*a3*b2*b3*c3*y2*z1 + b1*b2*b3*c3*y2*z1 + b1*c1*c3*y2*z1 + a2*b1*c1*c3*y2*z1 + a3*b1*c1*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + a2*b1*b3*c1*c3*y2*z1 + a2*a3*b1*b3*c1*c3*y2*z1 + a3*b1*b2*b3*c1*c3*y2*z1 + b3*c2*c3*y2*z1 + a2*b3*c2*c3*y2*z1 + a3*b3*c2*c3*y2*z1 + a1*a3*b3*c2*c3*y2*z1 + a2*a3*b3*c2*c3*y2*z1 + a2*b1*b3*c2*c3*y2*z1 + a2*a3*b1*b3*c2*c3*y2*z1 + a3*b2*b3*c2*c3*y2*z1 + a1*a3*b2*b3*c2*c3*y2*z1 + a1*b1*b2*b3*c2*c3*y2*z1 + a3*b1*b3*c1*c2*c3*y2*z1 + b1*b2*b3*c1*c2*c3*y2*z1 + a3*b1*b2*b3*c1*c2*c3*y2*z1 + a2*b1*y3*z1 + a1*a2*b1*y3*z1 + a1*b2*y3*z1 + a2*b2*y3*z1 + a1*b1*b2*y3*z1 + a1*a2*b1*b2*y3*z1 + a1*a3*b1*b2*y3*z1 + a1*a2*a3*b1*b2*y3*z1 + a1*a2*a3*b1*b3*y3*z1 + a1*b1*b2*b3*y3*z1 + a1*a2*b1*b2*b3*y3*z1 + a1*a3*b1*b2*b3*y3*z1 + a2*b1*c1*y3*z1 + a2*b1*b2*c1*y3*z1 + a3*b1*b2*c1*y3*z1 + a2*a3*b1*b2*c1*y3*z1 + a2*a3*b1*b3*c1*y3*z1 + b1*b2*b3*c1*y3*z1 + a2*b1*b2*b3*c1*y3*z1 + a3*b1*b2*b3*c1*y3*z1 + b1*c2*y3*z1 + a1*a2*b1*c2*y3*z1 + a1*a3*b1*c2*y3*z1 + a2*a3*b1*c2*y3*z1 + b2*c2*y3*z1 + a2*a3*b1*b2*c2*y3*z1 + a1*b3*c2*y3*z1 + a1*a2*b3*c2*y3*z1 + a1*a3*b3*c2*y3*z1 + a1*b1*b3*c2*y3*z1 + a1*a2*b1*b3*c2*y3*z1 + a2*a3*b1*b3*c2*y3*z1 + a1*b2*b3*c2*y3*z1 + a1*a2*b2*b3*c2*y3*z1 + a1*a3*b2*b3*c2*y3*z1 + a1*b1*b2*b3*c2*y3*z1 + a2*b1*b2*b3*c2*y3*z1 + a1*a2*b1*b2*b3*c2*y3*z1 + a2*b1*c1*c2*y3*z1 + a3*b1*c1*c2*y3*z1 + a3*b1*b3*c1*c2*y3*z1 + a3*b1*b2*b3*c1*c2*y3*z1 + a1*a2*b1*c3*y3*z1 + b2*c3*y3*z1 + a1*b2*c3*y3*z1 + a2*b2*c3*y3*z1 + a3*b2*c3*y3*z1 + a1*a3*b2*c3*y3*z1 + a2*a3*b2*c3*y3*z1 + b1*b2*c3*y3*z1 + a1*b1*b2*c3*y3*z1 + a2*b1*b2*c3*y3*z1 + a1*a2*b1*b2*c3*y3*z1 + a3*b1*b2*c3*y3*z1 + a1*a3*b1*b2*c3*y3*z1 + a2*a3*b1*b2*c3*y3*z1 + a1*a2*b3*c3*y3*z1 + a2*a3*b3*c3*y3*z1 + a1*a2*b1*b3*c3*y3*z1 + b2*b3*c3*y3*z1 + a1*b2*b3*c3*y3*z1 + a2*b2*b3*c3*y3*z1 + a1*a2*b2*b3*c3*y3*z1 + a3*b2*b3*c3*y3*z1 + a2*a3*b2*b3*c3*y3*z1 + a1*b1*b2*b3*c3*y3*z1 + a2*b1*c1*c3*y3*z1 + a2*b1*b2*c1*c3*y3*z1 + a2*b1*b2*b3*c1*c3*y3*z1 + a2*b1*c2*c3*y3*z1 + b2*c2*c3*y3*z1 + a3*b2*c2*c3*y3*z1 + b1*b2*c2*c3*y3*z1 + a2*b1*b2*c2*c3*y3*z1 + a3*b1*b2*c2*c3*y3*z1 + a1*b3*c2*c3*y3*z1 + a2*b1*b3*c2*c3*y3*z1 + a3*b1*b3*c2*c3*y3*z1 + b2*b3*c2*c3*y3*z1 + a1*b2*b3*c2*c3*y3*z1 + a1*b1*b2*b3*c2*c3*y3*z1 + a2*b1*b2*b3*c2*c3*y3*z1 + b1*b3*c1*c2*c3*y3*z1 + a1*a3*b1*z2 + a1*a2*a3*b1*z2 + a1*a2*a3*b2*z2 + a1*a3*b1*b2*z2 + a2*a3*b1*b2*z2 + a1*a2*b3*z2 + a1*a2*a3*b3*z2 + a2*b1*b3*z2 + a1*a3*b1*b3*z2 + a2*a3*b1*b3*z2 + a1*b1*b2*b3*z2 + a1*a2*b1*b2*b3*z2 + a1*a3*b1*b2*b3*z2 + a1*a3*b1*c1*z2 + a1*a2*a3*b1*c1*z2 + a1*a2*a3*b2*c1*z2 + a3*b1*b2*c1*z2 + a1*a3*b1*b2*c1*z2 + a1*a2*b3*c1*z2 + a1*a2*a3*b3*c1*z2 + a1*a2*b1*b3*c1*z2 + a1*a3*b1*b3*c1*z2 + a1*b1*b2*b3*c1*z2 + a2*b1*b2*b3*c1*z2 + a1*a2*b1*b2*b3*c1*z2 + a3*b1*b2*b3*c1*z2 + a1*a3*b1*b2*b3*c1*z2 + a1*a2*a3*b1*c2*z2 + a1*a2*a3*b2*c2*z2 + a1*a3*b1*b2*c2*z2 + a1*a2*b3*c2*z2 + a1*a2*a3*b3*c2*z2 + a1*a3*b1*b3*c2*z2 + a2*b1*b2*b3*c2*z2 + a1*a2*b1*b2*b3*c2*z2 + a1*a3*b1*b2*b3*c2*z2 + a3*b1*c1*c2*z2 + a1*a3*b1*c1*c2*z2 + a1*a2*a3*b1*c1*c2*z2 + a1*a3*b2*c1*c2*z2 + a1*a2*a3*b2*c1*c2*z2 + a3*b1*b2*c1*c2*z2 + a2*a3*b1*b2*c1*c2*z2 + a1*a2*a3*b1*b2*c1*c2*z2 + b3*c1*c2*z2 + a1*b3*c1*c2*z2 + a2*b3*c1*c2*z2 + a1*a2*b3*c1*c2*z2 + a3*b3*c1*c2*z2 + a1*a2*a3*b3*c1*c2*z2 + a1*b1*b3*c1*c2*z2 + a1*a2*b1*b3*c1*c2*z2 + a3*b1*b3*c1*c2*z2 + a1*a3*b1*b3*c1*c2*z2 + a2*a3*b1*b3*c1*c2*z2 + a1*a2*a3*b1*b3*c1*c2*z2 + a1*b2*b3*c1*c2*z2 + a1*a2*b2*b3*c1*c2*z2 + a1*a3*b2*b3*c1*c2*z2 + a1*b1*b2*b3*c1*c2*z2 + a2*b1*b2*b3*c1*c2*z2 + a1*a2*b1*b2*b3*c1*c2*z2 + a1*a3*b1*c3*z2 + a1*a2*a3*b1*c3*z2 + a1*a2*b2*c3*z2 + a1*a2*a3*b2*c3*z2 + a2*b1*b2*c3*z2 + a1*b1*b3*c3*z2 + a2*b1*b3*c3*z2 + a1*a2*b1*b2*b3*c3*z2 + a1*a3*b1*b2*b3*c3*z2 + a1*b1*c1*c3*z2 + a2*b1*c1*c3*z2 + a1*a2*b1*c1*c3*z2 + a3*b1*c1*c3*z2 + a1*a3*b1*c1*c3*z2 + a1*b2*c1*c3*z2 + a1*a2*b2*c1*c3*z2 + b1*b2*c1*c3*z2 + a2*b1*b2*c1*c3*z2 + a1*a2*b1*b2*c1*c3*z2 + a1*a3*b3*c1*c3*z2 + b1*b3*c1*c3*z2 + a1*a2*b2*b3*c1*c3*z2 + b1*b2*b3*c1*c3*z2 + a1*b1*b2*b3*c1*c3*z2 + a1*b1*c2*c3*z2 + a1*a2*b1*c2*c3*z2 + a1*a3*b1*c2*c3*z2 + a1*a3*b1*b2*c2*c3*z2 + a1*a2*b3*c2*c3*z2 + a1*a2*b1*b3*c2*c3*z2 + a1*a2*b2*b3*c2*c3*z2 + a1*a3*b1*c1*c2*c3*z2 + a1*a2*a3*b1*c1*c2*c3*z2 + b2*c1*c2*c3*z2 + a1*b2*c1*c2*c3*z2 + a1*a2*b2*c1*c2*c3*z2 + a1*a3*b2*c1*c2*c3*z2 + a1*a2*a3*b2*c1*c2*c3*z2 + a1*b1*b2*c1*c2*c3*z2 + a2*b1*b2*c1*c2*c3*z2 + a1*a2*b1*b2*c1*c2*c3*z2 + a2*b3*c1*c2*c3*z2 + a1*a2*b3*c1*c2*c3*z2 + a3*b3*c1*c2*c3*z2 + a2*a3*b3*c1*c2*c3*z2 + a2*b1*b3*c1*c2*c3*z2 + b2*b3*c1*c2*c3*z2 + a1*a2*b2*b3*c1*c2*c3*z2 + a3*x1*z2 + a3*b1*x1*z2 + a1*b3*x1*z2 + a2*b3*x1*z2 + a1*a2*b3*x1*z2 + a3*b3*x1*z2 + a1*a3*b3*x1*z2 + a2*b1*b3*x1*z2 + a3*b1*b3*x1*z2 + a1*b2*b3*x1*z2 + a3*c1*x1*z2 + a3*b1*c1*x1*z2 + a3*b2*c1*x1*z2 + a3*b1*b2*c1*x1*z2 + a1*b3*c1*x1*z2 + a1*b1*b3*c1*x1*z2 + b2*b3*c1*x1*z2 + b1*b2*b3*c1*x1*z2 + a3*c2*x1*z2 + a1*a3*c2*x1*z2 + a3*b1*c2*x1*z2 + a1*a3*b1*c2*x1*z2 + a3*b2*c2*x1*z2 + a1*a3*b2*c2*x1*z2 + a3*b1*b2*c2*x1*z2 + a1*a3*b1*b2*c2*x1*z2 + a1*b3*c2*x1*z2 + a1*a2*b3*c2*x1*z2 + a1*a3*b3*c2*x1*z2 + a1*b1*b3*c2*x1*z2 + a1*a2*b1*b3*c2*x1*z2 + a1*a3*b1*b3*c2*x1*z2 + a1*b1*b2*b3*c2*x1*z2 + a3*c1*c2*x1*z2 + a3*b1*c1*c2*x1*z2 + a3*b2*c1*c2*x1*z2 + a3*b1*b2*c1*c2*x1*z2 + a2*b3*c1*c2*x1*z2 + a3*b3*c1*c2*x1*z2 + a2*b1*b3*c1*c2*x1*z2 + a3*b1*b3*c1*c2*x1*z2 + b2*b3*c1*c2*x1*z2 + b1*b2*b3*c1*c2*x1*z2 + a1*c3*x1*z2 + a1*a2*c3*x1*z2 + a1*a3*c3*x1*z2 + a1*b1*c3*x1*z2 + a1*a2*b1*c3*x1*z2 + a1*a3*b1*c3*x1*z2 + a2*b2*c3*x1*z2 + a1*a2*b2*c3*x1*z2 + a3*b2*c3*x1*z2 + a1*a3*b2*c3*x1*z2 + a1*b1*b2*c3*x1*z2 + a2*b1*b2*c3*x1*z2 + a1*a2*b1*b2*c3*x1*z2 + a3*b1*b2*c3*x1*z2 + a1*a3*b1*b2*c3*x1*z2 + b3*c3*x1*z2 + a1*b3*c3*x1*z2 + a1*a2*a3*b3*c3*x1*z2 + b1*b3*c3*x1*z2 + a1*a2*b1*b3*c3*x1*z2 + b2*b3*c3*x1*z2 + a1*a3*b2*b3*c3*x1*z2 + b1*b2*b3*c3*x1*z2 + a2*c1*c3*x1*z2 + a3*c1*c3*x1*z2 + a2*b1*c1*c3*x1*z2 + a3*b1*c1*c3*x1*z2 + b2*c1*c3*x1*z2 + a2*b2*c1*c3*x1*z2 + a3*b2*c1*c3*x1*z2 + b1*b2*c1*c3*x1*z2 + a2*b1*b2*c1*c3*x1*z2 + a3*b1*b2*c1*c3*x1*z2 + a2*a3*b3*c1*c3*x1*z2 + a2*a3*b1*b3*c1*c3*x1*z2 + a3*b2*b3*c1*c3*x1*z2 + a3*b1*b2*b3*c1*c3*x1*z2 + a2*b3*c2*c3*x1*z2 + a3*b3*c2*c3*x1*z2 + a2*a3*b3*c2*c3*x1*z2 + a2*b1*b3*c2*c3*x1*z2 + a3*b1*b3*c2*c3*x1*z2 + a2*a3*b1*b3*c2*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + a1*a3*b2*b3*c2*c3*x1*z2 + b1*b2*b3*c2*c3*x1*z2 + a1*b1*b2*b3*c2*c3*x1*z2 + a3*b2*b3*c1*c2*c3*x1*z2 + a3*b1*b2*b3*c1*c2*c3*x1*z2 + a1*a3*b1*x2*z2 + a1*a3*b2*x2*z2 + a3*b1*b2*x2*z2 + a1*a3*b1*b2*x2*z2 + a1*a2*b3*x2*z2 + a1*a3*b3*x2*z2 + a2*b1*b3*x2*z2 + a1*a2*b1*b3*x2*z2 + a3*b1*b3*x2*z2 + a1*a3*b1*b3*x2*z2 + a1*a3*b1*c1*x2*z2 + a1*a3*b2*c1*x2*z2 + a3*b1*b2*c1*x2*z2 + a1*a3*b1*b2*c1*x2*z2 + a1*a2*b3*c1*x2*z2 + a1*a3*b3*c1*x2*z2 + a1*b1*b3*c1*x2*z2 + a2*b1*b3*c1*x2*z2 + a1*a2*b1*b3*c1*x2*z2 + a3*b1*b3*c1*x2*z2 + a1*a3*b1*b3*c1*x2*z2 + a1*a3*b1*c2*x2*z2 + a1*a3*b2*c2*x2*z2 + a1*a2*b3*c2*x2*z2 + a1*a3*b3*c2*x2*z2 + b1*b2*b3*c2*x2*z2 + a1*b1*b2*b3*c2*x2*z2 + a1*a3*b1*c1*c2*x2*z2 + a1*a3*b2*c1*c2*x2*z2 + a1*a2*b3*c1*c2*x2*z2 + a1*a3*b3*c1*c2*x2*z2 + a1*b1*b3*c1*c2*x2*z2 + b1*b2*b3*c1*c2*x2*z2 + a1*b1*b2*b3*c1*c2*x2*z2 + a1*a2*b1*c3*x2*z2 + a1*a3*b1*c3*x2*z2 + a1*a2*b2*c3*x2*z2 + a1*a3*b2*c3*x2*z2 + a1*b1*b2*c3*x2*z2 + a1*b3*c3*x2*z2 + a1*a2*b3*c3*x2*z2 + b1*b3*c3*x2*z2 + a1*b1*b3*c3*x2*z2 + a1*a2*b1*c1*c3*x2*z2 + a1*a3*b1*c1*c3*x2*z2 + a1*a2*b2*c1*c3*x2*z2 + a1*a3*b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + a1*b3*c1*c3*x2*z2 + a1*a2*b3*c1*c3*x2*z2 + b1*b3*c1*c3*x2*z2 + a1*b3*c2*c3*x2*z2 + a1*b1*b3*c2*c3*x2*z2 + a1*b2*b3*c2*c3*x2*z2 + a1*b3*c1*c2*c3*x2*z2 + a1*b1*b3*c1*c2*c3*x2*z2 + a1*b2*b3*c1*c2*c3*x2*z2 + a1*a2*b1*x3*z2 + a1*a2*a3*b1*b2*x3*z2 + a1*a2*b1*b3*x3*z2 + a1*a2*a3*b1*b3*x3*z2 + a1*b1*b2*b3*x3*z2 + a1*a2*b1*b2*b3*x3*z2 + a1*a3*b1*b2*b3*x3*z2 + a1*a2*b1*c1*x3*z2 + a1*a3*b1*c1*x3*z2 + a1*a3*b1*b2*c1*x3*z2 + a1*a2*b1*b3*c1*x3*z2 + a1*a2*b1*b2*b3*c1*x3*z2 + a1*a3*b1*b2*b3*c1*x3*z2 + a1*a2*b1*c2*x3*z2 + a1*a3*b1*c2*x3*z2 + a1*a2*b1*b3*c2*x3*z2 + a1*a2*b1*b2*b3*c2*x3*z2 + a1*b1*b2*c1*c2*x3*z2 + a1*a2*b1*c3*x3*z2 + a1*b1*b2*c3*x3*z2 + a1*a2*b1*b2*c3*x3*z2 + a1*a3*b1*b2*c3*x3*z2 + a1*a2*b1*b3*c3*x3*z2 + a1*b1*b2*b3*c3*x3*z2 + a1*b1*b2*b3*c2*c3*x3*z2 + a3*y1*z2 + a1*a3*b1*y1*z2 + a1*a3*b2*y1*z2 + a3*b1*b2*y1*z2 + b3*y1*z2 + a1*b1*b3*y1*z2 + b2*b3*y1*z2 + a1*b2*b3*y1*z2 + a3*c1*y1*z2 + a3*b1*c1*y1*z2 + a1*a3*b1*c1*y1*z2 + a1*a3*b2*c1*y1*z2 + b3*c1*y1*z2 + a2*b3*c1*y1*z2 + a1*a2*b3*c1*y1*z2 + a3*b3*c1*y1*z2 + a1*a3*b3*c1*y1*z2 + b1*b3*c1*y1*z2 + a2*b1*b3*c1*y1*z2 + a3*b1*b3*c1*y1*z2 + b2*b3*c1*y1*z2 + b1*b2*b3*c1*y1*z2 + a3*c2*y1*z2 + a1*a3*c2*y1*z2 + a3*b1*b2*c2*y1*z2 + a1*a3*b1*b2*c2*y1*z2 + b3*c2*y1*z2 + a2*b3*c2*y1*z2 + a3*b3*c2*y1*z2 + b1*b3*c2*y1*z2 + a1*a2*b1*b3*c2*y1*z2 + a1*a3*b1*b3*c2*y1*z2 + b1*b2*b3*c2*y1*z2 + a1*b1*b2*b3*c2*y1*z2 + a3*c1*c2*y1*z2 + a3*b1*c1*c2*y1*z2 + a3*b2*c1*c2*y1*z2 + a3*b1*b2*c1*c2*y1*z2 + a2*b3*c1*c2*y1*z2 + a3*b3*c1*c2*y1*z2 + a2*b1*b3*c1*c2*y1*z2 + a3*b1*b3*c1*c2*y1*z2 + a1*b2*b3*c1*c2*y1*z2 + a1*c3*y1*z2 + a1*a2*c3*y1*z2 + a1*a3*c3*y1*z2 + a1*b1*c3*y1*z2 + a2*b1*c3*y1*z2 + a3*b1*c3*y1*z2 + b2*c3*y1*z2 + a1*b2*c3*y1*z2 + a2*b1*b2*c3*y1*z2 + a1*a2*b1*b2*c3*y1*z2 + a3*b1*b2*c3*y1*z2 + a1*a3*b1*b2*c3*y1*z2 + b3*c3*y1*z2 + a1*b3*c3*y1*z2 + a1*a2*b3*c3*y1*z2 + a2*a3*b3*c3*y1*z2 + a1*a2*a3*b3*c3*y1*z2 + b1*b3*c3*y1*z2 + a1*b1*b3*c3*y1*z2 + a1*a2*b1*b3*c3*y1*z2 + b2*b3*c3*y1*z2 + a3*b2*b3*c3*y1*z2 + a1*a3*b2*b3*c3*y1*z2 + b1*b2*b3*c3*y1*z2 + a2*c1*c3*y1*z2 + a3*c1*c3*y1*z2 + a2*b1*c1*c3*y1*z2 + a3*b1*c1*c3*y1*z2 + a1*b2*c1*c3*y1*z2 + a2*b2*c1*c3*y1*z2 + a3*b2*c1*c3*y1*z2 + a1*b1*b2*c1*c3*y1*z2 + a2*b1*b2*c1*c3*y1*z2 + a3*b1*b2*c1*c3*y1*z2 + b3*c1*c3*y1*z2 + a1*b3*c1*c3*y1*z2 + a2*a3*b3*c1*c3*y1*z2 + b1*b3*c1*c3*y1*z2 + a1*b1*b3*c1*c3*y1*z2 + a2*a3*b1*b3*c1*c3*y1*z2 + a3*b2*b3*c1*c3*y1*z2 + a3*b1*b2*b3*c1*c3*y1*z2 + b3*c2*c3*y1*z2 + a1*b3*c2*c3*y1*z2 + a2*b3*c2*c3*y1*z2 + a3*b3*c2*c3*y1*z2 + a2*a3*b3*c2*c3*y1*z2 + b1*b3*c2*c3*y1*z2 + a1*b1*b3*c2*c3*y1*z2 + a2*b1*b3*c2*c3*y1*z2 + a3*b1*b3*c2*c3*y1*z2 + a2*a3*b1*b3*c2*c3*y1*z2 + b2*b3*c2*c3*y1*z2 + a1*b2*b3*c2*c3*y1*z2 + a3*b2*b3*c2*c3*y1*z2 + a1*a3*b2*b3*c2*c3*y1*z2 + b1*b2*b3*c2*c3*y1*z2 + a1*b1*b2*b3*c2*c3*y1*z2 + a3*b2*b3*c1*c2*c3*y1*z2 + a3*b1*b2*b3*c1*c2*c3*y1*z2 + a3*b1*b2*c1*y2*z2 + a1*a3*b1*b2*c1*y2*z2 + a2*b1*b3*c1*y2*z2 + a1*a2*b1*b3*c1*y2*z2 + a3*b1*b3*c1*y2*z2 + a1*a3*b1*b3*c1*y2*z2 + a1*b1*b3*c2*y2*z2 + a1*a3*b1*c1*c2*y2*z2 + a1*a3*b2*c1*c2*y2*z2 + a1*a2*b3*c1*c2*y2*z2 + a1*a3*b3*c1*c2*y2*z2 + a1*b1*b3*c1*c2*y2*z2 + a1*b2*b3*c1*c2*y2*z2 + b1*b2*b3*c1*c2*y2*z2 + a1*b1*b2*b3*c1*c2*y2*z2 + b1*b2*c3*y2*z2 + a1*b1*b2*c3*y2*z2 + a1*b1*b3*c3*y2*z2 + a1*a2*b1*c1*c3*y2*z2 + a1*a3*b1*c1*c3*y2*z2 + a1*b2*c1*c3*y2*z2 + a1*a2*b2*c1*c3*y2*z2 + a1*a3*b2*c1*c3*y2*z2 + b1*b2*c1*c3*y2*z2 + a1*b1*b2*c1*c3*y2*z2 + a1*a2*b3*c1*c3*y2*z2 + b1*b3*c1*c3*y2*z2 + a1*b1*b3*c1*c3*y2*z2 + a1*b3*c1*c2*c3*y2*z2 + a1*b1*b3*c1*c2*c3*y2*z2 + a1*b2*b3*c1*c2*c3*y2*z2 + a1*a2*b1*y3*z2 + a1*b1*b2*y3*z2 + a1*a2*b1*b2*y3*z2 + a1*a3*b1*b2*y3*z2 + a1*a2*a3*b1*b2*y3*z2 + a1*a2*a3*b1*b3*y3*z2 + a1*b1*b2*b3*y3*z2 + a1*a2*b1*b2*b3*y3*z2 + a1*a3*b1*b2*b3*y3*z2 + a1*a2*b1*c1*y3*z2 + a1*a3*b1*c1*y3*z2 + a1*b1*b2*c1*y3*z2 + a1*a3*b1*b2*c1*y3*z2 + a1*b1*b3*c1*y3*z2 + a1*a2*b1*b3*c1*y3*z2 + a1*a2*b1*b2*b3*c1*y3*z2 + a1*a3*b1*b2*b3*c1*y3*z2 + a1*a2*b1*c2*y3*z2 + a1*a3*b1*c2*y3*z2 + a1*b1*b3*c2*y3*z2 + a1*a2*b1*b3*c2*y3*z2 + a1*b1*b2*b3*c2*y3*z2 + a1*a2*b1*b2*b3*c2*y3*z2 + a1*b1*b2*c1*c2*y3*z2 + a1*a2*b1*c3*y3*z2 + a1*b1*b2*c3*y3*z2 + a1*a2*b1*b2*c3*y3*z2 + a1*a3*b1*b2*c3*y3*z2 + a1*a2*b1*b3*c3*y3*z2 + a1*b1*b2*b3*c3*y3*z2 + a1*b1*b2*b3*c2*c3*y3*z2 + a1*a3*b1*z1*z2 + a1*a3*b2*z1*z2 + a3*b1*b2*z1*z2 + a1*b1*b3*z1*z2 + a1*b2*b3*z1*z2 + a3*b1*c1*z1*z2 + a3*b1*b2*c1*z1*z2 + b1*b3*c1*z1*z2 + b1*b2*b3*c1*z1*z2 + a3*b1*c2*z1*z2 + a1*a3*b1*c2*z1*z2 + a3*b1*b2*c2*z1*z2 + a1*a3*b1*b2*c2*z1*z2 + b1*b3*c2*z1*z2 + a1*a2*b1*b3*c2*z1*z2 + a1*a3*b1*b3*c2*z1*z2 + b1*b2*b3*c2*z1*z2 + a1*b1*b2*b3*c2*z1*z2 + a3*b1*c1*c2*z1*z2 + a3*b1*b2*c1*c2*z1*z2 + a2*b1*b3*c1*c2*z1*z2 + a3*b1*b3*c1*c2*z1*z2 + b1*b2*b3*c1*c2*z1*z2 + a1*a2*b1*c3*z1*z2 + a1*a3*b1*c3*z1*z2 + a1*b1*b2*c3*z1*z2 + a2*b1*b2*c3*z1*z2 + a1*a2*b1*b2*c3*z1*z2 + a3*b1*b2*c3*z1*z2 + a1*a3*b1*b2*c3*z1*z2 + a1*a2*b3*c3*z1*z2 + a1*a2*a3*b3*c3*z1*z2 + a1*a2*b1*b3*c3*z1*z2 + a1*a3*b2*b3*c3*z1*z2 + b1*b2*b3*c3*z1*z2 + a2*b1*c1*c3*z1*z2 + a3*b1*c1*c3*z1*z2 + b1*b2*c1*c3*z1*z2 + a2*b1*b2*c1*c3*z1*z2 + a3*b1*b2*c1*c3*z1*z2 + a2*a3*b1*b3*c1*c3*z1*z2 + a3*b1*b2*b3*c1*c3*z1*z2 + a2*b1*b3*c2*c3*z1*z2 + a3*b1*b3*c2*c3*z1*z2 + a2*a3*b1*b3*c2*c3*z1*z2 + a1*b2*b3*c2*c3*z1*z2 + a1*a3*b2*b3*c2*c3*z1*z2 + b1*b2*b3*c2*c3*z1*z2 + a1*b1*b2*b3*c2*c3*z1*z2 + a3*b1*b2*b3*c1*c2*c3*z1*z2 + a2*a3*b1*z3 + a1*a2*a3*b1*z3 + a1*a2*b2*z3 + a1*a2*a3*b2*z3 + a1*a2*b1*b2*z3 + a1*a3*b1*b2*z3 + a1*a2*a3*b1*b2*z3 + a1*a2*a3*b3*z3 + a1*a2*a3*b1*b3*z3 + a1*a2*b2*b3*z3 + a1*a3*b2*b3*z3 + a2*b1*b2*b3*z3 + a1*a2*b1*b2*b3*z3 + a2*a3*b1*b2*b3*z3 + a1*a2*b1*c1*z3 + a1*a2*b2*c1*z3 + a1*a2*a3*b2*c1*z3 + a1*b1*b2*c1*z3 + a3*b1*b2*c1*z3 + a1*a3*b1*b2*c1*z3 + a2*a3*b1*b2*c1*z3 + a2*a3*b3*c1*z3 + a1*a2*a3*b3*c1*z3 + a1*a2*b2*b3*c1*z3 + a1*a3*b2*b3*c1*z3 + a1*b1*b2*b3*c1*z3 + a3*b1*b2*b3*c1*z3 + a1*a3*b1*c2*z3 + a1*a2*a3*b1*c2*z3 + a1*a2*b2*c2*z3 + a1*a3*b2*c2*z3 + a1*a2*a3*b2*c2*z3 + a1*a3*b1*b2*c2*z3 + a2*a3*b1*b2*c2*z3 + a1*a2*a3*b3*c2*z3 + a1*a2*b1*b3*c2*z3 + a1*a3*b2*b3*c2*z3 + a2*b1*b2*b3*c2*z3 + a2*a3*b1*b2*b3*c2*z3 + a1*a2*a3*c1*c2*z3 + a1*a2*b1*c1*c2*z3 + a2*a3*b1*c1*c2*z3 + a2*b2*c1*c2*z3 + a1*a3*b2*c1*c2*z3 + a1*a2*a3*b2*c1*c2*z3 + a1*a2*b1*b2*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a1*a3*b1*b2*c1*c2*z3 + a2*a3*b1*b2*c1*c2*z3 + a1*a2*b3*c1*c2*z3 + a1*a3*b3*c1*c2*z3 + a1*a2*a3*b3*c1*c2*z3 + a2*b1*b3*c1*c2*z3 + a1*a2*b1*b3*c1*c2*z3 + a1*a3*b1*b3*c1*c2*z3 + a2*a3*b1*b3*c1*c2*z3 + a2*b2*b3*c1*c2*z3 + a3*b2*b3*c1*c2*z3 + a1*a3*b2*b3*c1*c2*z3 + a2*a3*b2*b3*c1*c2*z3 + a2*b1*b2*b3*c1*c2*z3 + a3*b1*b2*b3*c1*c2*z3 + a1*a3*b1*b2*b3*c1*c2*z3 + a2*a3*b1*b2*b3*c1*c2*z3 + a2*a3*b1*c3*z3 + a1*a2*a3*b1*c3*z3 + a1*a2*b2*c3*z3 + a1*a2*a3*b2*c3*z3 + a1*a2*a3*b3*c3*z3 + a1*a2*b1*b2*b3*c3*z3 + a3*b1*b2*b3*c3*z3 + a2*a3*b1*b2*b3*c3*z3 + a1*a2*b1*c1*c3*z3 + a2*b2*c1*c3*z3 + a2*a3*b2*c1*c3*z3 + a1*a2*a3*b2*c1*c3*z3 + a1*a2*b1*b2*c1*c3*z3 + a1*a3*b1*b2*c1*c3*z3 + a2*a3*b1*b2*c1*c3*z3 + a2*a3*b3*c1*c3*z3 + a1*a2*b1*b3*c1*c3*z3 + a2*a3*b1*b3*c1*c3*z3 + a2*b2*b3*c1*c3*z3 + a1*b1*b2*b3*c1*c3*z3 + a1*a2*b1*c2*c3*z3 + a3*b1*c2*c3*z3 + a1*a2*a3*b1*c2*c3*z3 + a1*a2*b2*c2*c3*z3 + a1*a2*a3*b2*c2*c3*z3 + b1*b2*c2*c3*z3 + a2*b1*b2*c2*c3*z3 + a1*a2*b1*b2*c2*c3*z3 + a3*b1*b2*c2*c3*z3 + a1*a3*b1*b2*c2*c3*z3 + a1*a2*a3*b1*b2*c2*c3*z3 + a1*a3*b3*c2*c3*z3 + a1*a2*a3*b3*c2*c3*z3 + b1*b3*c2*c3*z3 + a2*a3*b1*b3*c2*c3*z3 + a1*a2*a3*b1*b3*c2*c3*z3 + a1*a2*b2*b3*c2*c3*z3 + b1*b2*b3*c2*c3*z3 + a1*a3*b1*b2*b3*c2*c3*z3 + a2*a3*c1*c2*c3*z3 + a1*a2*b1*c1*c2*c3*z3 + a3*b1*c1*c2*c3*z3 + a1*a2*a3*b1*c1*c2*c3*z3 + a1*a2*b2*c1*c2*c3*z3 + a1*a2*a3*b2*c1*c2*c3*z3 + a2*b1*b2*c1*c2*c3*z3 + a3*b1*b2*c1*c2*c3*z3 + a2*a3*b1*b2*c1*c2*c3*z3 + a1*a2*b3*c1*c2*c3*z3 + a3*b3*c1*c2*c3*z3 + a1*a2*a3*b3*c1*c2*c3*z3 + a1*b1*b3*c1*c2*c3*z3 + b2*b3*c1*c2*c3*z3 + a1*b2*b3*c1*c2*c3*z3 + a2*b2*b3*c1*c2*c3*z3 + a1*a2*b2*b3*c1*c2*c3*z3 + a2*a3*b2*b3*c1*c2*c3*z3 + b1*b2*b3*c1*c2*c3*z3 + a1*b1*b2*b3*c1*c2*c3*z3 + a2*b1*b2*b3*c1*c2*c3*z3 + a3*b1*b2*b3*c1*c2*c3*z3 + a1*a2*x1*z3 + a1*a2*b1*x1*z3 + a1*b2*x1*z3 + a1*a2*b2*x1*z3 + a1*a3*b2*x1*z3 + a1*a2*a3*b2*x1*z3 + a1*b1*b2*x1*z3 + a1*a2*b1*b2*x1*z3 + a1*a3*b1*b2*x1*z3 + a1*a2*a3*b1*b2*x1*z3 + a1*a2*a3*b3*x1*z3 + a1*a2*a3*b1*b3*x1*z3 + a1*b2*b3*x1*z3 + a1*a2*b2*b3*x1*z3 + a1*a3*b2*b3*x1*z3 + a1*b1*b2*b3*x1*z3 + a1*a2*b1*b2*b3*x1*z3 + a1*a3*b1*b2*b3*x1*z3 + a2*c1*x1*z3 + a2*b1*c1*x1*z3 + b2*c1*x1*z3 + a2*b2*c1*x1*z3 + a3*b2*c1*x1*z3 + a2*a3*b2*c1*x1*z3 + b1*b2*c1*x1*z3 + a2*b1*b2*c1*x1*z3 + a3*b1*b2*c1*x1*z3 + a2*a3*b1*b2*c1*x1*z3 + a2*a3*b3*c1*x1*z3 + a2*a3*b1*b3*c1*x1*z3 + b2*b3*c1*x1*z3 + a2*b2*b3*c1*x1*z3 + a3*b2*b3*c1*x1*z3 + b1*b2*b3*c1*x1*z3 + a2*b1*b2*b3*c1*x1*z3 + a3*b1*b2*b3*c1*x1*z3 + a1*a2*c2*x1*z3 + a1*a3*c2*x1*z3 + a2*a3*c2*x1*z3 + a1*a2*b1*c2*x1*z3 + a1*a3*b1*c2*x1*z3 + a2*a3*b1*c2*x1*z3 + a2*a3*b2*c2*x1*z3 + a1*a2*b1*b2*c2*x1*z3 + a1*a3*b1*b2*c2*x1*z3 + a2*a3*b1*b2*c2*x1*z3 + a1*a3*b3*c2*x1*z3 + a2*a3*b3*c2*x1*z3 + a1*a3*b1*b3*c2*x1*z3 + a2*a3*b1*b3*c2*x1*z3 + a2*b2*b3*c2*x1*z3 + a1*a3*b2*b3*c2*x1*z3 + a2*b1*b2*b3*c2*x1*z3 + a1*a2*b1*b2*b3*c2*x1*z3 + a2*c1*c2*x1*z3 + a3*c1*c2*x1*z3 + a2*b1*c1*c2*x1*z3 + a3*b1*c1*c2*x1*z3 + a3*b3*c1*c2*x1*z3 + a3*b1*b3*c1*c2*x1*z3 + a3*b2*b3*c1*c2*x1*z3 + a3*b1*b2*b3*c1*c2*x1*z3 + a1*a2*c3*x1*z3 + a1*a2*b1*c3*x1*z3 + a1*a3*b2*c3*x1*z3 + a1*a2*b1*b2*c3*x1*z3 + a1*a3*b1*b2*c3*x1*z3 + a2*a3*b1*b2*c3*x1*z3 + a1*a2*b3*c3*x1*z3 + a1*a2*b1*b3*c3*x1*z3 + a1*b2*b3*c3*x1*z3 + a1*a2*b2*b3*c3*x1*z3 + a2*a3*b2*b3*c3*x1*z3 + a1*b1*b2*b3*c3*x1*z3 + a2*c1*c3*x1*z3 + a2*b1*c1*c3*x1*z3 + a3*b2*c1*c3*x1*z3 + a3*b1*b2*c1*c3*x1*z3 + a2*b3*c1*c3*x1*z3 + a2*b1*b3*c1*c3*x1*z3 + b2*b3*c1*c3*x1*z3 + a2*b2*b3*c1*c3*x1*z3 + b1*b2*b3*c1*c3*x1*z3 + a2*b1*b2*b3*c1*c3*x1*z3 + a3*c2*c3*x1*z3 + a3*b1*c2*c3*x1*z3 + a3*b2*c2*c3*x1*z3 + a3*b3*c2*c3*x1*z3 + a3*b1*b3*c2*c3*x1*z3 + a1*b2*b3*c2*c3*x1*z3 + a2*b2*b3*c2*c3*x1*z3 + a3*b2*b3*c2*c3*x1*z3 + a1*b1*b2*b3*c2*c3*x1*z3 + a2*b1*b2*b3*c2*c3*x1*z3 + b2*b3*c1*c2*c3*x1*z3 + b1*b2*b3*c1*c2*c3*x1*z3 + a1*x2*z3 + b1*x2*z3 + a1*b1*x2*z3 + a2*b1*x2*z3 + a3*b1*x2*z3 + a2*a3*b1*x2*z3 + a1*b2*x2*z3 + a1*a2*b2*x2*z3 + b1*b2*x2*z3 + a1*b1*b2*x2*z3 + a2*b1*b2*x2*z3 + a3*b1*b2*x2*z3 + a1*a2*a3*b1*b2*x2*z3 + a1*b3*x2*z3 + a1*a2*b3*x2*z3 + a1*b1*b3*x2*z3 + a1*a2*b1*b3*x2*z3 + a1*a3*b1*b3*x2*z3 + a1*a2*a3*b1*b3*x2*z3 + a1*b2*b3*x2*z3 + a1*b1*b2*b3*x2*z3 + a1*a2*b1*b2*b3*x2*z3 + a1*a3*b1*b2*b3*x2*z3 + a1*c1*x2*z3 + a2*c1*x2*z3 + a3*c1*x2*z3 + a1*b1*c1*x2*z3 + a2*b1*c1*x2*z3 + a3*b1*c1*x2*z3 + a1*b2*c1*x2*z3 + a2*b2*c1*x2*z3 + a1*a2*b2*c1*x2*z3 + a1*a3*b2*c1*x2*z3 + a1*b1*b2*c1*x2*z3 + a1*a2*b1*b2*c1*x2*z3 + a1*a3*b1*b2*c1*x2*z3 + a2*a3*b1*b2*c1*x2*z3 + a1*b3*c1*x2*z3 + a2*b3*c1*x2*z3 + a1*a2*b3*c1*x2*z3 + a1*a3*b3*c1*x2*z3 + a2*b1*b3*c1*x2*z3 + a3*b1*b3*c1*x2*z3 + a2*a3*b1*b3*c1*x2*z3 + a1*b2*b3*c1*x2*z3 + a2*b2*b3*c1*x2*z3 + a3*b2*b3*c1*x2*z3 + a1*a2*b1*b2*b3*c1*x2*z3 + a1*a3*b1*b2*b3*c1*x2*z3 + a1*c2*x2*z3 + a1*b1*c2*x2*z3 + a2*b1*c2*x2*z3 + a1*b2*c2*x2*z3 + a1*a2*b2*c2*x2*z3 + a1*a3*b2*c2*x2*z3 + a1*b1*b2*c2*x2*z3 + a2*b1*b2*c2*x2*z3 + a1*a2*b1*b2*c2*x2*z3 + a1*a3*b1*b2*c2*x2*z3 + a1*b3*c2*x2*z3 + a1*a2*b3*c2*x2*z3 + a1*a3*b3*c2*x2*z3 + b1*b3*c2*x2*z3 + a1*b1*b3*c2*x2*z3 + a1*a3*b1*b3*c2*x2*z3 + a1*b2*b3*c2*x2*z3 + b1*b2*b3*c2*x2*z3 + a1*b1*b2*b3*c2*x2*z3 + a1*a2*b1*b2*b3*c2*x2*z3 + a2*b2*c1*c2*x2*z3 + a3*b2*c1*c2*x2*z3 + a2*b1*b2*c1*c2*x2*z3 + a3*b1*b2*c1*c2*x2*z3 + b3*c1*c2*x2*z3 + a1*b3*c1*c2*x2*z3 + a2*b3*c1*c2*x2*z3 + a3*b3*c1*c2*x2*z3 + b1*b3*c1*c2*x2*z3 + a3*b1*b3*c1*c2*x2*z3 + b2*b3*c1*c2*x2*z3 + a1*b2*b3*c1*c2*x2*z3 + b1*b2*b3*c1*c2*x2*z3 + a2*b1*b2*b3*c1*c2*x2*z3 + a1*c3*x2*z3 + a1*a3*c3*x2*z3 + a1*b1*c3*x2*z3 + a2*b1*c3*x2*z3 + a1*a3*b1*c3*x2*z3 + a1*b2*c3*x2*z3 + a1*a2*b2*c3*x2*z3 + a1*a3*b2*c3*x2*z3 + a1*b1*b2*c3*x2*z3 + a2*b1*b2*c3*x2*z3 + a1*a2*b1*b2*c3*x2*z3 + a1*a3*b1*b2*c3*x2*z3 + a1*a2*b3*c3*x2*z3 + a1*b1*b3*c3*x2*z3 + a2*b1*b3*c3*x2*z3 + a1*a2*b1*b3*c3*x2*z3 + a1*b1*b2*b3*c3*x2*z3 + a3*c1*c3*x2*z3 + a3*b1*c1*c3*x2*z3 + a2*b2*c1*c3*x2*z3 + a3*b2*c1*c3*x2*z3 + a2*b1*b2*c1*c3*x2*z3 + a3*b1*b2*c1*c3*x2*z3 + b3*c1*c3*x2*z3 + a2*b3*c1*c3*x2*z3 + a2*b1*b3*c1*c3*x2*z3 + b2*b3*c1*c3*x2*z3 + a1*b3*c2*c3*x2*z3 + a1*b1*b3*c2*c3*x2*z3 + a1*b2*b3*c2*c3*x2*z3 + a1*b1*b2*b3*c2*c3*x2*z3 + b3*c1*c2*c3*x2*z3 + b1*b3*c1*c2*c3*x2*z3 + b2*b3*c1*c2*c3*x2*z3 + b1*b2*b3*c1*c2*c3*x2*z3 + a1*a2*b1*x3*z3 + a2*a3*b1*x3*z3 + a1*a2*b2*x3*z3 + b1*b2*x3*z3 + a2*b1*b2*x3*z3 + a1*a2*b1*b2*x3*z3 + a3*b1*b2*x3*z3 + a1*a3*b1*b2*x3*z3 + a1*a2*b3*x3*z3 + a2*b1*b3*x3*z3 + a1*a2*b1*b3*x3*z3 + a2*a3*b1*b3*x3*z3 + a1*a3*b2*b3*x3*z3 + a1*a2*b1*c1*x3*z3 + a2*a3*b1*c1*x3*z3 + a1*a2*b2*c1*x3*z3 + a2*a3*b2*c1*x3*z3 + a1*b1*b2*c1*x3*z3 + a3*b1*b2*c1*x3*z3 + a1*a3*b1*b2*c1*x3*z3 + a2*a3*b1*b2*c1*x3*z3 + a1*a2*b3*c1*x3*z3 + a2*a3*b3*c1*x3*z3 + a2*b1*b3*c1*x3*z3 + b2*b3*c1*x3*z3 + a1*b2*b3*c1*x3*z3 + a2*b2*b3*c1*x3*z3 + a3*b2*b3*c1*x3*z3 + a1*a3*b2*b3*c1*x3*z3 + a2*a3*b2*b3*c1*x3*z3 + b1*b2*b3*c1*x3*z3 + a1*a2*b1*c2*x3*z3 + a2*a3*b1*c2*x3*z3 + a1*a2*b2*c2*x3*z3 + b1*b2*c2*x3*z3 + a1*b1*b2*c2*x3*z3 + a1*a2*b1*b2*c2*x3*z3 + a3*b1*b2*c2*x3*z3 + a1*a3*b1*b2*c2*x3*z3 + a1*a2*b3*c2*x3*z3 + a2*b1*b3*c2*x3*z3 + a1*a2*b1*b3*c2*x3*z3 + a2*a3*b1*b3*c2*x3*z3 + a1*b2*b3*c2*x3*z3 + a1*a3*b2*b3*c2*x3*z3 + b1*b2*b3*c2*x3*z3 + a1*a2*b1*c1*c2*x3*z3 + a2*a3*b1*c1*c2*x3*z3 + a1*a2*b2*c1*c2*x3*z3 + a2*a3*b2*c1*c2*x3*z3 + b1*b2*c1*c2*x3*z3 + a2*b1*b2*c1*c2*x3*z3 + a3*b1*b2*c1*c2*x3*z3 + a1*a2*b3*c1*c2*x3*z3 + a2*a3*b3*c1*c2*x3*z3 + a2*b1*b3*c1*c2*x3*z3 + b2*b3*c1*c2*x3*z3 + a3*b2*b3*c1*c2*x3*z3 + a1*a2*b1*c3*x3*z3 + a2*a3*b1*c3*x3*z3 + a1*a2*b2*c3*x3*z3 + a1*b1*b2*c3*x3*z3 + a2*b1*b2*c3*x3*z3 + a1*a2*b3*c3*x3*z3 + a1*b2*b3*c3*x3*z3 + a2*b2*c1*c3*x3*z3 + b1*b2*c1*c3*x3*z3 + a2*b1*b2*c1*c3*x3*z3 + a2*b3*c1*c3*x3*z3 + a2*b1*b3*c1*c3*x3*z3 + b1*b2*b3*c1*c3*x3*z3 + a1*a2*b1*c2*c3*x3*z3 + a2*a3*b1*c2*c3*x3*z3 + a1*a2*b2*c2*c3*x3*z3 + a1*a2*b3*c2*c3*x3*z3 + b1*b2*b3*c2*c3*x3*z3 + a2*b2*c1*c2*c3*x3*z3 + a2*b1*b2*c1*c2*c3*x3*z3 + a2*b3*c1*c2*c3*x3*z3 + a2*b1*b3*c1*c2*c3*x3*z3 + a1*a2*y1*z3 + a2*b1*y1*z3 + a1*a2*b1*y1*z3 + a1*b2*y1*z3 + a1*a2*b2*y1*z3 + a1*a3*b2*y1*z3 + a1*a2*a3*b2*y1*z3 + b1*b2*y1*z3 + a1*b1*b2*y1*z3 + a2*b1*b2*y1*z3 + a1*a2*b1*b2*y1*z3 + a3*b1*b2*y1*z3 + a1*a3*b1*b2*y1*z3 + a2*a3*b1*b2*y1*z3 + a1*a2*a3*b1*b2*y1*z3 + a1*a2*a3*b3*y1*z3 + a2*a3*b1*b3*y1*z3 + a1*a2*a3*b1*b3*y1*z3 + a1*b2*b3*y1*z3 + a1*a2*b2*b3*y1*z3 + a1*a3*b2*b3*y1*z3 + b1*b2*b3*y1*z3 + a1*b1*b2*b3*y1*z3 + a2*b1*b2*b3*y1*z3 + a1*a2*b1*b2*b3*y1*z3 + a3*b1*b2*b3*y1*z3 + a1*a3*b1*b2*b3*y1*z3 + a2*c1*y1*z3 + a2*b1*c1*y1*z3 + b2*c1*y1*z3 + a2*b2*c1*y1*z3 + a3*b2*c1*y1*z3 + a2*a3*b2*c1*y1*z3 + b1*b2*c1*y1*z3 + a2*b1*b2*c1*y1*z3 + a3*b1*b2*c1*y1*z3 + a2*a3*b1*b2*c1*y1*z3 + a2*a3*b3*c1*y1*z3 + a2*a3*b1*b3*c1*y1*z3 + b2*b3*c1*y1*z3 + a2*b2*b3*c1*y1*z3 + a3*b2*b3*c1*y1*z3 + b1*b2*b3*c1*y1*z3 + a2*b1*b2*b3*c1*y1*z3 + a3*b1*b2*b3*c1*y1*z3 + a1*a2*c2*y1*z3 + a1*a3*c2*y1*z3 + a2*a3*c2*y1*z3 + a2*b1*c2*y1*z3 + a1*a2*b1*c2*y1*z3 + a3*b1*c2*y1*z3 + a1*a3*b1*c2*y1*z3 + a2*a3*b1*c2*y1*z3 + a2*b2*c2*y1*z3 + a3*b2*c2*y1*z3 + a2*a3*b2*c2*y1*z3 + a2*b1*b2*c2*y1*z3 + a1*a2*b1*b2*c2*y1*z3 + a3*b1*b2*c2*y1*z3 + a1*a3*b1*b2*c2*y1*z3 + a2*a3*b1*b2*c2*y1*z3 + a1*a3*b3*c2*y1*z3 + a2*a3*b3*c2*y1*z3 + a3*b1*b3*c2*y1*z3 + a1*a3*b1*b3*c2*y1*z3 + a2*a3*b1*b3*c2*y1*z3 + a3*b2*b3*c2*y1*z3 + a1*a3*b2*b3*c2*y1*z3 + a1*a2*b1*b2*b3*c2*y1*z3 + a2*c1*c2*y1*z3 + a3*c1*c2*y1*z3 + a2*b1*c1*c2*y1*z3 + a3*b1*c1*c2*y1*z3 + a3*b3*c1*c2*y1*z3 + a3*b1*b3*c1*c2*y1*z3 + a3*b2*b3*c1*c2*y1*z3 + a3*b1*b2*b3*c1*c2*y1*z3 + a1*a2*c3*y1*z3 + a2*b1*c3*y1*z3 + a1*a2*b1*c3*y1*z3 + a2*b2*c3*y1*z3 + a1*a3*b2*c3*y1*z3 + a2*b1*b2*c3*y1*z3 + a1*a2*b1*b2*c3*y1*z3 + a3*b1*b2*c3*y1*z3 + a1*a3*b1*b2*c3*y1*z3 + a2*a3*b1*b2*c3*y1*z3 + a1*a2*b3*c3*y1*z3 + a2*b1*b3*c3*y1*z3 + a1*a2*b1*b3*c3*y1*z3 + a1*b2*b3*c3*y1*z3 + a2*b2*b3*c3*y1*z3 + a1*a2*b2*b3*c3*y1*z3 + a2*a3*b2*b3*c3*y1*z3 + b1*b2*b3*c3*y1*z3 + a1*b1*b2*b3*c3*y1*z3 + a2*c1*c3*y1*z3 + a2*b1*c1*c3*y1*z3 + a3*b2*c1*c3*y1*z3 + a3*b1*b2*c1*c3*y1*z3 + a2*b3*c1*c3*y1*z3 + a2*b1*b3*c1*c3*y1*z3 + b2*b3*c1*c3*y1*z3 + a2*b2*b3*c1*c3*y1*z3 + b1*b2*b3*c1*c3*y1*z3 + a2*b1*b2*b3*c1*c3*y1*z3 + a3*c2*c3*y1*z3 + a3*b1*c2*c3*y1*z3 + a3*b2*c2*c3*y1*z3 + a3*b3*c2*c3*y1*z3 + a3*b1*b3*c2*c3*y1*z3 + a1*b2*b3*c2*c3*y1*z3 + a2*b2*b3*c2*c3*y1*z3 + a3*b2*b3*c2*c3*y1*z3 + b1*b2*b3*c2*c3*y1*z3 + a1*b1*b2*b3*c2*c3*y1*z3 + a2*b1*b2*b3*c2*c3*y1*z3 + b2*b3*c1*c2*c3*y1*z3 + b1*b2*b3*c1*c2*c3*y1*z3 + a1*y2*z3 + b1*y2*z3 + a1*b1*y2*z3 + a2*b1*y2*z3 + a1*a2*b1*y2*z3 + a1*b2*y2*z3 + a1*b1*b2*y2*z3 + a1*a2*b1*b2*y2*z3 + a1*a3*b1*b2*y2*z3 + a1*a2*a3*b1*b2*y2*z3 + a1*a2*a3*b1*b3*y2*z3 + a1*b1*b2*b3*y2*z3 + a1*a2*b1*b2*b3*y2*z3 + a1*a3*b1*b2*b3*y2*z3 + a1*c1*y2*z3 + a2*c1*y2*z3 + a3*c1*y2*z3 + a1*b1*c1*y2*z3 + a2*b1*c1*y2*z3 + a1*a2*b1*c1*y2*z3 + a3*b1*c1*y2*z3 + a2*a3*b1*c1*y2*z3 + a1*b2*c1*y2*z3 + a2*b2*c1*y2*z3 + a1*a3*b2*c1*y2*z3 + a2*a3*b2*c1*y2*z3 + a1*b1*b2*c1*y2*z3 + a2*b1*b2*c1*y2*z3 + a1*a2*b1*b2*c1*y2*z3 + a3*b1*b2*c1*y2*z3 + a1*a3*b1*b2*c1*y2*z3 + a2*a3*b1*b2*c1*y2*z3 + b3*c1*y2*z3 + a3*b3*c1*y2*z3 + a1*a3*b3*c1*y2*z3 + a2*a3*b3*c1*y2*z3 + b1*b3*c1*y2*z3 + a2*a3*b1*b3*c1*y2*z3 + b2*b3*c1*y2*z3 + a1*b1*b2*b3*c1*y2*z3 + a2*b1*b2*b3*c1*y2*z3 + a1*a2*b1*b2*b3*c1*y2*z3 + a3*b1*b2*b3*c1*y2*z3 + a1*a3*b1*b2*b3*c1*y2*z3 + a1*c2*y2*z3 + a1*b1*c2*y2*z3 + a2*b1*c2*y2*z3 + a1*a2*b1*c2*y2*z3 + a2*a3*b1*c2*y2*z3 + a1*b2*c2*y2*z3 + a1*a3*b2*c2*y2*z3 + a1*b1*b2*c2*y2*z3 + a2*b1*b2*c2*y2*z3 + a1*a2*b1*b2*c2*y2*z3 + a1*a3*b1*b2*c2*y2*z3 + a1*a3*b3*c2*y2*z3 + a1*b1*b3*c2*y2*z3 + a2*b1*b3*c2*y2*z3 + a3*b1*b3*c2*y2*z3 + a1*a3*b1*b3*c2*y2*z3 + b1*b2*b3*c2*y2*z3 + a1*a2*b1*b2*b3*c2*y2*z3 + a3*b2*c1*c2*y2*z3 + a3*b1*b2*c1*c2*y2*z3 + b3*c1*c2*y2*z3 + a1*b3*c1*c2*y2*z3 + a2*b3*c1*c2*y2*z3 + a3*b3*c1*c2*y2*z3 + b1*b3*c1*c2*y2*z3 + a3*b1*b3*c1*c2*y2*z3 + b2*b3*c1*c2*y2*z3 + a1*b2*b3*c1*c2*y2*z3 + a2*b2*b3*c1*c2*y2*z3 + a2*b1*b2*b3*c1*c2*y2*z3 + a1*c3*y2*z3 + a1*a3*c3*y2*z3 + a1*b1*c3*y2*z3 + a2*b1*c3*y2*z3 + a1*a2*b1*c3*y2*z3 + a3*b1*c3*y2*z3 + a1*a3*b1*c3*y2*z3 + a2*a3*b1*c3*y2*z3 + a1*b2*c3*y2*z3 + a1*a3*b2*c3*y2*z3 + a1*b1*b2*c3*y2*z3 + a2*b1*b2*c3*y2*z3 + a1*a2*b1*b2*c3*y2*z3 + a1*a3*b1*b2*c3*y2*z3 + a1*b3*c3*y2*z3 + b1*b3*c3*y2*z3 + a1*a2*b1*b3*c3*y2*z3 + a1*b2*b3*c3*y2*z3 + b1*b2*b3*c3*y2*z3 + a1*b1*b2*b3*c3*y2*z3 + a3*c1*c3*y2*z3 + a3*b1*c1*c3*y2*z3 + a3*b2*c1*c3*y2*z3 + a3*b1*b2*c1*c3*y2*z3 + b1*b3*c1*c3*y2*z3 + b1*b2*b3*c1*c3*y2*z3 + a1*b3*c2*c3*y2*z3 + b1*b3*c2*c3*y2*z3 + a1*b1*b3*c2*c3*y2*z3 + a2*b1*b3*c2*c3*y2*z3 + a1*b2*b3*c2*c3*y2*z3 + a1*b1*b2*b3*c2*c3*y2*z3 + b3*c1*c2*c3*y2*z3 + b1*b3*c1*c2*c3*y2*z3 + b2*b3*c1*c2*c3*y2*z3 + b1*b2*b3*c1*c2*c3*y2*z3 + a1*b1*b2*c1*y3*z3 + a2*b1*b2*c1*y3*z3 + a1*a3*b1*b2*c1*y3*z3 + a2*a3*b1*b2*c1*y3*z3 + a1*a3*b2*b3*c1*y3*z3 + a2*a3*b2*b3*c1*y3*z3 + a1*b1*b2*b3*c1*y3*z3 + a2*b1*b2*b3*c1*y3*z3 + b1*b2*c2*y3*z3 + a1*b1*b2*c2*y3*z3 + a1*a2*b1*b2*c2*y3*z3 + a3*b1*b2*c2*y3*z3 + a1*a3*b1*b2*c2*y3*z3 + a1*a2*b1*b3*c2*y3*z3 + a2*a3*b1*b3*c2*y3*z3 + a1*a3*b2*b3*c2*y3*z3 + b1*b2*b3*c2*y3*z3 + a1*b1*b2*b3*c2*y3*z3 + a1*a2*b1*c1*c2*y3*z3 + a2*a3*b1*c1*c2*y3*z3 + a2*b2*c1*c2*y3*z3 + a1*a2*b2*c1*c2*y3*z3 + a2*a3*b2*c1*c2*y3*z3 + b1*b2*c1*c2*y3*z3 + a3*b1*b2*c1*c2*y3*z3 + a1*a2*b3*c1*c2*y3*z3 + a2*a3*b3*c1*c2*y3*z3 + a2*b1*b3*c1*c2*y3*z3 + a2*b2*b3*c1*c2*y3*z3 + a3*b2*b3*c1*c2*y3*z3 + b1*b2*b3*c1*c2*y3*z3 + a1*b1*b2*c3*y3*z3 + a2*b1*b2*c3*y3*z3 + a1*b2*b3*c3*y3*z3 + b1*b2*b3*c3*y3*z3 + b1*b2*c1*c3*y3*z3 + b1*b2*b3*c1*c3*y3*z3 + a1*a2*b1*c2*c3*y3*z3 + a2*a3*b1*c2*c3*y3*z3 + a1*a2*b2*c2*c3*y3*z3 + a1*a2*b3*c2*c3*y3*z3 + a2*b1*b3*c2*c3*y3*z3 + b1*b2*b3*c2*c3*y3*z3 + a2*b2*c1*c2*c3*y3*z3 + a2*b1*b2*c1*c2*c3*y3*z3 + a2*b3*c1*c2*c3*y3*z3 + a2*b1*b3*c1*c2*c3*y3*z3 + a1*a2*b1*z1*z3 + a1*b1*b2*z1*z3 + a1*a2*b1*b2*z1*z3 + a1*a3*b1*b2*z1*z3 + a1*a2*a3*b1*b2*z1*z3 + a1*a2*a3*b1*b3*z1*z3 + a1*b1*b2*b3*z1*z3 + a1*a2*b1*b2*b3*z1*z3 + a1*a3*b1*b2*b3*z1*z3 + a2*b1*c1*z1*z3 + b1*b2*c1*z1*z3 + a2*b1*b2*c1*z1*z3 + a3*b1*b2*c1*z1*z3 + a2*a3*b1*b2*c1*z1*z3 + a2*a3*b1*b3*c1*z1*z3 + b1*b2*b3*c1*z1*z3 + a2*b1*b2*b3*c1*z1*z3 + a3*b1*b2*b3*c1*z1*z3 + a1*a2*b1*c2*z1*z3 + a1*a3*b1*c2*z1*z3 + a2*a3*b1*c2*z1*z3 + a1*a2*b2*c2*z1*z3 + a1*a3*b2*c2*z1*z3 + a1*a2*b1*b2*c2*z1*z3 + a1*a3*b1*b2*c2*z1*z3 + a2*a3*b1*b2*c2*z1*z3 + a1*a3*b1*b3*c2*z1*z3 + a2*a3*b1*b3*c2*z1*z3 + a1*a2*b2*b3*c2*z1*z3 + a1*a3*b2*b3*c2*z1*z3 + a2*b1*b2*b3*c2*z1*z3 + a1*a2*b1*b2*b3*c2*z1*z3 + a2*b1*c1*c2*z1*z3 + a3*b1*c1*c2*z1*z3 + a3*b1*b3*c1*c2*z1*z3 + a3*b1*b2*b3*c1*c2*z1*z3 + a1*a2*b1*c3*z1*z3 + a1*a2*b2*c3*z1*z3 + a2*a3*b2*c3*z1*z3 + a1*a2*b1*b2*c3*z1*z3 + a1*a3*b1*b2*c3*z1*z3 + a2*a3*b1*b2*c3*z1*z3 + a1*a2*b1*b3*c3*z1*z3 + a1*a2*b2*b3*c3*z1*z3 + a2*a3*b2*b3*c3*z1*z3 + a1*b1*b2*b3*c3*z1*z3 + a2*b1*c1*c3*z1*z3 + a3*b1*b2*c1*c3*z1*z3 + a2*b1*b3*c1*c3*z1*z3 + b1*b2*b3*c1*c3*z1*z3 + a2*b1*b2*b3*c1*c3*z1*z3 + a3*b1*c2*c3*z1*z3 + a3*b2*c2*c3*z1*z3 + a3*b1*b3*c2*c3*z1*z3 + a3*b2*b3*c2*c3*z1*z3 + a1*b1*b2*b3*c2*c3*z1*z3 + a2*b1*b2*b3*c2*c3*z1*z3 + b1*b2*b3*c1*c2*c3*z1*z3 + a1*a2*b1*z2*z3 + a1*b1*b2*z2*z3 + a1*a2*b1*b2*z2*z3 + a1*a3*b1*b2*z2*z3 + a1*a2*a3*b1*b2*z2*z3 + a1*a2*a3*b1*b3*z2*z3 + a1*b1*b2*b3*z2*z3 + a1*a2*b1*b2*b3*z2*z3 + a1*a3*b1*b2*b3*z2*z3 + a1*a2*b1*c1*z2*z3 + a1*a3*b1*c1*z2*z3 + a1*a2*b1*b2*c1*z2*z3 + a1*a3*b1*b3*c1*z2*z3 + a1*a2*b1*b2*b3*c1*z2*z3 + a1*a3*b1*b2*b3*c1*z2*z3 + a1*a2*b1*c2*z2*z3 + a1*a3*b1*c2*z2*z3 + a1*a2*b1*b2*c2*z2*z3 + a1*a3*b1*b2*c2*z2*z3 + a1*a3*b1*b3*c2*z2*z3 + a1*a2*b1*b2*b3*c2*z2*z3 + a1*b1*b2*b3*c1*c2*z2*z3 + a1*a2*b1*c3*z2*z3 + a1*a2*b1*b2*c3*z2*z3 + a1*a3*b1*b2*c3*z2*z3 + a1*a2*b1*b3*c3*z2*z3 + a1*b1*b2*b3*c3*z2*z3 + a1*b1*b2*b3*c2*c3*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 111 ( P-42m)
#####################################################################
Acpin111:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin111:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin111:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin111:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain111:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyin111:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 112 ( P-42c)
#####################################################################
Acpin112:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin112:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin112:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain112:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyin112:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
Bczin112:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*b2 + a2*c1 + b2*z1;
end;
#####################################################################
Bzxyin112:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (1 + c1)*c2*x1 + c1*c2*y1 + a2*(x1 + y1) + x1*z2 + y1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 113 ( P-42_1m)
#####################################################################
Acpin113:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin113:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Azin113:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain113:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bphiin113:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1;
end;
#####################################################################
Cin113:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b1 + a1*a2*a3*b2 + a1*a3*b1*b2 + a1*a2*a3*b1*b2 + a1*a2*b1*b3 + a1*a3*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*c1 + a1*a3*b2*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*b1*b3*c1 + a2*a3*b1*b3*c1 + a1*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a2*a3*c2 + a1*a3*b1*c2 + a1*a3*b1*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a1*a3*b1*b3*c2 + a2*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*a2*b2*b3*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a2*a3*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a1*a2*b3*c1*c2 + a1*a3*b3*c1*c2 + a1*a2*a3*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + a1*b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a2*a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*a3*b1*c3 + a1*b2*c3 + a1*a2*a3*b2*c3 + a3*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a1*a2*b1*b3*c3 + a2*b1*b2*b3*c3 + a1*a3*b1*b2*b3*c3 + a1*a2*c1*c3 + a1*a2*a3*c1*c3 + a2*b1*c1*c3 + a1*a3*b2*c1*c3 + b1*b2*c1*c3 + a2*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a2*a3*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a2*b1*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a2*b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a1*a2*a3*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a1*a3*b2*c2*c3 + b1*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a1*a3*b1*b2*c2*c3 + a1*a2*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + b1*b2*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + a1*a2*c1*c2*c3 + a2*a3*c1*c2*c3 + a1*b1*c1*c2*c3 + a1*a2*b1*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a2*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a1*a2*a3*b1*x1 + a3*b2*x1 + a1*a3*b2*x1 + a2*a3*b2*x1 + a1*a2*a3*b2*x1 + a3*b1*b2*x1 + a1*a3*b1*b2*x1 + a2*a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*b1*b3*x1 + a1*a2*b2*b3*x1 + a1*b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a2*a3*c1*x1 + a1*a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + a2*b1*b3*c1*x1 + a1*b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a1*a2*b2*b3*c1*x1 + a1*a3*b2*b3*c1*x1 + a2*a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a1*b1*b2*b3*c1*x1 + a1*a2*a3*c2*x1 + a2*a3*b1*c2*x1 + a1*a3*b2*c2*x1 + a1*b3*c2*x1 + a1*a3*b3*c2*x1 + a2*a3*b3*c2*x1 + a1*b1*b3*c2*x1 + a2*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a1*a2*b2*b3*c2*x1 + a1*a3*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a2*a3*c1*c2*x1 + a1*a3*b2*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a2*b3*c1*c2*x1 + a2*a3*b3*c1*c2*x1 + a2*b2*b3*c1*c2*x1 + b1*b2*b3*c1*c2*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + b2*c3*x1 + a3*b2*c3*x1 + a1*b1*b2*c3*x1 + a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a1*b2*b3*c3*x1 + a2*b2*b3*c3*x1 + a2*b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a1*a2*c1*c3*x1 + a2*a3*c1*c3*x1 + b2*c1*c3*x1 + a3*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a3*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a1*a2*c2*c3*x1 + a2*a3*c2*c3*x1 + b1*c2*c3*x1 + b2*c2*c3*x1 + a1*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a3*b1*b2*c2*c3*x1 + a1*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + a1*b2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + b1*c1*c2*c3*x1 + a2*b1*c1*c2*c3*x1 + b2*c1*c2*c3*x1 + a1*b2*c1*c2*c3*x1 + a2*b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a2*b3*c1*c2*c3*x1 + a3*b1*x2 + a1*a3*b1*x2 + a2*a3*b1*x2 + a1*a2*a3*b1*x2 + a1*a2*a3*b2*x2 + a1*a3*b1*b2*x2 + a2*a3*b1*b2*x2 + a1*b3*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + b1*b3*x2 + a2*b1*b3*x2 + a1*a3*b1*b3*x2 + a1*a2*b2*b3*x2 + b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a3*c1*x2 + a2*a3*c1*x2 + a1*a2*a3*c1*x2 + a3*b1*c1*x2 + a2*a3*b1*c1*x2 + a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a2*a3*b1*b2*c1*x2 + a1*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + b1*b3*c1*x2 + a2*b1*b3*c1*x2 + b2*b3*c1*x2 + a2*b1*b2*b3*c1*x2 + a1*a2*a3*c2*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a3*b3*c2*x2 + b1*b3*c2*x2 + a2*b1*b3*c2*x2 + a1*a2*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a1*a2*b2*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a3*c1*c2*x2 + a3*b1*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a2*b3*c1*c2*x2 + a1*a2*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + a1*a3*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a3*b1*b2*b3*c1*c2*x2 + a1*a2*c3*x2 + a1*b1*c3*x2 + a2*b1*c3*x2 + a3*b1*c3*x2 + a1*b2*c3*x2 + b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*b3*c3*x2 + b1*b3*c3*x2 + a1*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a2*b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + c1*c3*x2 + b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + b3*c1*c3*x2 + a1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a1*b2*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a1*a2*c2*c3*x2 + a1*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a3*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a1*b2*b3*c2*c3*x2 + c1*c2*c3*x2 + a1*b1*c1*c2*c3*x2 + a2*b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a1*b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + b3*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a2*a3*c1*x1*x2 + b3*c1*x1*x2 + a3*b3*c1*x1*x2 + b3*c1*c2*x1*x2 + a2*b3*c1*c2*x1*x2 + a3*b3*c1*c2*x1*x2 + b2*b3*c1*c2*x1*x2 + b1*b2*c1*c3*x1*x2 + b3*c1*c3*x1*x2 + b2*b3*c1*c3*x1*x2 + b1*c1*c2*c3*x1*x2 + b2*c1*c2*c3*x1*x2 + b3*c1*c2*c3*x1*x2 + a1*a2*x3 + a2*b1*x3 + a1*a2*b1*x3 + a1*a2*a3*b1*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + a1*a2*a3*b2*x3 + b1*b2*x3 + a1*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*a2*b3*x3 + a1*a2*b2*b3*x3 + a1*a3*b2*b3*x3 + a2*a3*c1*x3 + a1*a2*a3*c1*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a2*a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a2*b1*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + a1*a2*a3*c2*x3 + a2*b1*c2*x3 + a1*a2*b1*c2*x3 + a1*a3*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a2*b2*c2*x3 + b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a2*a3*b1*b2*c2*x3 + a1*b1*b3*c2*x3 + a2*b1*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + a2*b1*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + a1*a2*c1*c2*x3 + a3*c1*c2*x3 + a2*a3*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + a1*b2*c1*c2*x3 + a3*b2*c1*c2*x3 + a1*a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + b1*b2*c3*x3 + a2*b1*b2*c3*x3 + a2*b1*b2*b3*c3*x3 + a3*b1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + b1*b2*c1*c3*x3 + a1*b1*b2*c1*c3*x3 + b2*b3*c1*c3*x3 + a1*b2*b3*c1*c3*x3 + b1*c2*c3*x3 + a1*b1*c2*c3*x3 + a2*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + b1*b2*c2*c3*x3 + a1*b1*b2*c2*c3*x3 + a2*b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + b1*c1*c2*c3*x3 + b2*b3*c1*c2*c3*x3 + a1*a2*c1*x1*x3 + a2*a3*c1*x1*x3 + a2*b1*c1*x1*x3 + a1*a2*c2*x1*x3 + a2*a3*c2*x1*x3 + a2*b1*c2*x1*x3 + a1*b2*c2*x1*x3 + a3*b2*c2*x1*x3 + b1*b2*c2*x1*x3 + a1*b2*c1*c2*x1*x3 + a3*b2*c1*c2*x1*x3 + b1*b2*c1*c2*x1*x3 + b1*b2*c1*c3*x1*x3 + b2*b3*c1*c3*x1*x3 + b1*b2*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a1*a2*c2*x2*x3 + a1*b1*c2*x2*x3 + a2*b1*c2*x2*x3 + a1*b2*c2*x2*x3 + b1*b2*c2*x2*x3 + c1*c2*x2*x3 + b1*c1*c2*x2*x3 + a2*b1*c1*c2*x2*x3 + b1*b2*c1*c2*x2*x3 + b1*c2*c3*x2*x3 + b1*b2*c2*c3*x2*x3 + a2*a3*y1 + a1*a2*a3*b1*y1 + a2*a3*b2*y1 + a1*a2*a3*b2*y1 + a1*a3*b1*b2*y1 + a1*a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a1*a3*b2*b3*y1 + a2*a3*b2*b3*y1 + a1*a2*a3*c1*y1 + a3*b1*b2*c1*y1 + a1*a2*b3*c1*y1 + a1*b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a1*a2*b2*b3*c1*y1 + a1*a3*b2*b3*c1*y1 + a2*a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a2*a3*c2*y1 + a3*b1*b2*c2*y1 + a2*b3*c2*y1 + a1*a2*b3*c2*y1 + a1*b1*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a1*a2*b2*b3*c2*y1 + a1*a3*b2*b3*c2*y1 + a2*a3*b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a3*b1*b2*b3*c2*y1 + a2*a3*c1*c2*y1 + a1*a3*b2*c1*c2*y1 + b3*c1*c2*y1 + a3*b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a1*b2*c3*y1 + a1*b1*b2*c3*y1 + a2*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a3*b2*b3*c3*y1 + a2*b1*b2*b3*c3*y1 + a3*b1*b2*b3*c3*y1 + a1*a2*c1*c3*y1 + a2*a3*c1*c3*y1 + a2*b1*c1*c3*y1 + a3*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + b2*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*a2*c2*c3*y1 + a2*a3*c2*c3*y1 + a1*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a3*b1*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*b1*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a3*b2*b3*c2*c3*y1 + a2*b1*c1*c2*c3*y1 + a1*b2*c1*c2*c3*y1 + a2*b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + a2*b3*c1*c2*c3*y1 + a2*a3*x1*y1 + a3*b2*x1*y1 + a2*b3*x1*y1 + b3*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*c3*x1*y1 + b1*b2*c3*x1*y1 + b2*b3*c3*x1*y1 + b1*c2*c3*x1*y1 + b2*c2*c3*x1*y1 + b3*c2*c3*x1*y1 + a2*a3*x2*y1 + b3*x2*y1 + a3*b3*x2*y1 + a2*a3*c1*x2*y1 + b3*c1*x2*y1 + a3*b3*c1*x2*y1 + b3*c2*x2*y1 + a2*b3*c2*x2*y1 + a3*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + b3*c1*c2*x2*y1 + a2*b3*c1*c2*x2*y1 + a3*b3*c1*c2*x2*y1 + b2*b3*c1*c2*x2*y1 + b1*b2*c3*x2*y1 + b3*c3*x2*y1 + b2*b3*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + b3*c1*c3*x2*y1 + b2*b3*c1*c3*x2*y1 + b1*c2*c3*x2*y1 + b2*c2*c3*x2*y1 + b3*c2*c3*x2*y1 + b1*c1*c2*c3*x2*y1 + b2*c1*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + a1*a2*x3*y1 + a2*a3*x3*y1 + a1*a2*c1*x3*y1 + a2*a3*c1*x3*y1 + a1*a2*c2*x3*y1 + a2*a3*c2*x3*y1 + a1*b2*c1*c2*x3*y1 + a3*b2*c1*c2*x3*y1 + b1*b2*c3*x3*y1 + b2*b3*c3*x3*y1 + b1*b2*c1*c3*x3*y1 + b2*b3*c1*c3*x3*y1 + b1*b2*c2*c3*x3*y1 + b2*b3*c2*c3*x3*y1 + a1*a2*a3*b1*y2 + a1*a2*a3*b2*y2 + a1*a3*b1*b2*y2 + a1*a2*b1*b3*y2 + a1*b2*b3*y2 + a1*a3*b2*b3*y2 + a1*a2*a3*c1*y2 + a1*a3*b2*c1*y2 + a2*a3*b1*b2*c1*y2 + a1*a2*b3*c1*y2 + b1*b2*b3*c1*y2 + a3*b1*b2*b3*c1*y2 + a1*a2*a3*c2*y2 + a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*a2*b2*b3*c2*y2 + a1*a3*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a2*b1*b2*b3*c2*y2 + a3*b1*b2*b3*c2*y2 + a2*a3*b1*c1*c2*y2 + a1*b3*c1*c2*y2 + a1*a2*b3*c1*c2*y2 + a1*a3*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a3*b1*b2*b3*c1*c2*y2 + a1*b1*c3*y2 + a1*b2*c3*y2 + a1*b1*b2*c3*y2 + a2*b1*b2*c3*y2 + a1*b2*b3*c3*y2 + a2*b1*b2*b3*c3*y2 + a3*b1*b2*b3*c3*y2 + a1*b1*c1*c3*y2 + a1*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a1*b2*b3*c1*c3*y2 + a1*a2*c2*c3*y2 + a1*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a2*b1*b2*c2*c3*y2 + a3*b1*b2*c2*c3*y2 + a1*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + a1*b1*c1*c2*c3*y2 + a2*b1*c1*c2*c3*y2 + a1*b2*c1*c2*c3*y2 + a1*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a2*a3*x1*y2 + a3*b2*x1*y2 + a2*b3*x1*y2 + a2*a3*c1*x1*y2 + a3*b2*c1*x1*y2 + a2*b3*c1*x1*y2 + b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + b1*c3*x1*y2 + b2*c3*x1*y2 + b1*b2*c3*x1*y2 + b2*b3*c3*x1*y2 + b1*c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + b2*b3*c1*c3*x1*y2 + b1*c2*c3*x1*y2 + b2*c2*c3*x1*y2 + b3*c2*c3*x1*y2 + b1*c1*c2*c3*x1*y2 + b2*c1*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b1*b2*c3*x2*y2 + b1*c2*c3*x2*y2 + a1*a2*x3*y2 + a2*b1*c1*x3*y2 + a1*a2*c2*x3*y2 + a2*b1*c1*c2*x3*y2 + b1*b2*c3*x3*y2 + b1*b2*c2*c3*x3*y2 + a2*a3*c1*y1*y2 + a3*b2*c1*y1*y2 + a2*b3*c1*y1*y2 + b3*c1*c2*y1*y2 + a2*b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b1*c1*c3*y1*y2 + b2*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + b2*b3*c1*c3*y1*y2 + b1*c1*c2*c3*y1*y2 + b2*c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + a1*a2*a3*b1*y3 + a1*a2*a3*b2*y3 + a1*b1*b2*y3 + a1*a3*b1*b2*y3 + a1*a2*b1*b3*y3 + a1*b2*b3*y3 + a1*a3*b2*b3*y3 + a1*a2*c1*y3 + a1*a2*a3*c1*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a1*b2*c1*y3 + a1*a3*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a1*a2*b3*c1*y3 + b1*b2*b3*c1*y3 + a3*b1*b2*b3*c1*y3 + a1*a2*a3*c2*y3 + a2*b1*c2*y3 + a1*a2*b1*c2*y3 + a1*a2*b2*c2*y3 + a1*a3*b2*c2*y3 + a1*b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a1*a2*b3*c2*y3 + a1*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a3*b1*b2*b3*c2*y3 + a1*a2*c1*c2*y3 + a2*a3*c1*c2*y3 + a1*b2*c1*c2*y3 + a3*b2*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a1*b1*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a2*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + a1*b2*b3*c1*c2*y3 + a1*b1*b2*c3*y3 + a1*b2*b3*c3*y3 + a2*b1*b2*b3*c3*y3 + a3*b1*b2*b3*c3*y3 + a1*b1*b2*c1*c3*y3 + a1*b2*b3*c1*c3*y3 + b1*b2*c2*c3*y3 + a1*b1*b2*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a1*b2*x1*y3 + a3*b2*x1*y3 + a2*b3*x1*y3 + a1*a2*c1*x1*y3 + a2*a3*c1*x1*y3 + a2*b1*c1*x1*y3 + a1*b2*c1*x1*y3 + a3*b2*c1*x1*y3 + a2*b3*c1*x1*y3 + a1*a2*c2*x1*y3 + a2*a3*c2*x1*y3 + a2*b1*c2*x1*y3 + a1*b2*c2*x1*y3 + a3*b2*c2*x1*y3 + a2*b3*c2*x1*y3 + a1*b2*c1*c2*x1*y3 + a3*b2*c1*c2*x1*y3 + b1*b2*c1*c2*x1*y3 + b2*b3*c1*c2*x1*y3 + b1*b2*c3*x1*y3 + b2*b3*c3*x1*y3 + b1*b2*c1*c3*x1*y3 + b2*b3*c1*c3*x1*y3 + b1*b2*c2*c3*x1*y3 + b2*b3*c2*c3*x1*y3 + a1*a2*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a1*b2*x2*y3 + c1*x2*y3 + b1*c1*x2*y3 + a2*b1*c1*x2*y3 + b1*b2*c1*x2*y3 + a1*a2*c2*x2*y3 + b1*c2*x2*y3 + a1*b1*c2*x2*y3 + a2*b1*c2*x2*y3 + a1*b2*c2*x2*y3 + c1*c2*x2*y3 + b1*c1*c2*x2*y3 + a2*b1*c1*c2*x2*y3 + b1*b2*c1*c2*x2*y3 + b1*c3*x2*y3 + b1*b2*c3*x2*y3 + b1*c2*c3*x2*y3 + b1*b2*c2*c3*x2*y3 + a1*a2*x3*y3 + a2*b1*c1*x3*y3 + a1*b1*c2*x3*y3 + a2*b1*c2*x3*y3 + a1*b2*c2*x3*y3 + b1*b2*c2*x3*y3 + c1*c2*x3*y3 + b1*c1*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + b1*b2*c3*x3*y3 + b1*c2*c3*x3*y3 + a1*a2*c1*y1*y3 + a2*a3*c1*y1*y3 + a1*b2*c1*y1*y3 + a3*b2*c1*y1*y3 + b1*b2*c1*y1*y3 + a2*b3*c1*y1*y3 + a1*a2*c2*y1*y3 + a2*a3*c2*y1*y3 + b1*b2*c2*y1*y3 + a2*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + a1*b2*c1*c2*y1*y3 + a3*b2*c1*c2*y1*y3 + b2*b3*c1*c2*y1*y3 + b1*b2*c1*c3*y1*y3 + b2*b3*c1*c3*y1*y3 + b1*b2*c2*c3*y1*y3 + b2*b3*c2*c3*y1*y3 + a1*a2*c2*y2*y3 + b1*b2*c2*y2*y3 + a2*b1*c1*c2*y2*y3 + b1*b2*c2*c3*y2*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 114 ( P-42_1c)
#####################################################################
Acpin114:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin114:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain114:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bcxyin114:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1;
end;
#####################################################################
Bcxyzin114:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a2*b2*c1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1 + b2*z1;
end;
#####################################################################
C1in114:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b1*b2 + a1*a2*b1*b3 + a1*b2*b3 + a1*a3*b2*c1 + a3*b1*b2*c1 + a1*a2*b3*c1 + a2*b1*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a3*b1*b2*c2 + a1*b3*c2 + a1*a2*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a3*b1*c1*c2 + a3*b2*c1*c2 + a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*b1*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*b2*b3*c3 + a3*b2*x1 + a2*b3*x1 + a3*b2*c1*x1 + a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a2*b1*b3*c1*x1 + a3*b2*b3*c1*x1 + a3*b1*c2*x1 + a3*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + b1*b3*c2*x1 + a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a3*b2*b3*c2*x1 + b3*c1*c2*x1 + b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + b1*b2*c3*x1 + b2*b3*c3*x1 + a1*a3*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + a1*a3*b2*b3*x2 + a3*c1*x2 + a3*b1*c1*x2 + a3*b2*c1*x2 + a3*b1*b3*c1*x2 + a3*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a1*a3*b3*c2*x2 + b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a3*c1*c2*x2 + b1*b3*c1*c2*x2 + b1*b2*c3*x2 + b1*b3*c1*x1*x2 + a1*b2*x3 + a1*a2*b2*x3 + a1*a2*b3*x3 + a1*a3*b2*b3*x3 + a3*b2*c1*x3 + b1*b2*c1*x3 + b2*b3*c1*x3 + a1*b2*b3*c1*x3 + a2*b2*b3*c1*x3 + a3*b2*b3*c1*x3 + b1*c2*x3 + a1*b1*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a3*c1*c2*x3 + b1*c1*c2*x3 + b2*c1*c2*x3 + a3*b2*c1*c2*x3 + a1*b3*c1*c2*x3 + a2*b3*c1*c2*x3 + b1*b2*c3*x3 + b1*b2*c1*x1*x3 + b2*b3*c1*x1*x3 + c2*x1*x3 + b1*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + c1*x2*x3 + b1*b3*c1*x2*x3 + b2*b3*c1*x2*x3 + a1*b2*c2*x2*x3 + a1*b3*c2*x2*x3 + b1*b3*c2*x2*x3 + a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a2*b1*b3*c1*y1 + a3*b2*b3*c1*y1 + a3*b1*c2*y1 + a3*b2*c2*y1 + a1*b3*c2*y1 + a2*b3*c2*y1 + a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a3*b2*b3*c2*y1 + b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + b1*b2*c3*y1 + b2*b3*c3*y1 + b1*b3*c1*x2*y1 + b1*b2*c1*x3*y1 + b2*b3*c1*x3*y1 + b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a1*a3*y2 + a1*a2*b3*y2 + a1*a3*b3*y2 + a1*a3*b2*b3*y2 + a3*b1*c1*y2 + b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a3*b2*b3*c1*y2 + a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*b3*c2*y2 + a1*a3*b3*c2*y2 + a3*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + b1*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + b1*b2*c3*y2 + b1*b3*c1*x1*y2 + a1*b3*x2*y2 + a1*b2*x3*y2 + a1*b3*x3*y2 + b1*b3*c1*x3*y2 + b2*b3*c1*x3*y2 + a1*b2*c2*x3*y2 + a1*b3*c2*x3*y2 + b1*b3*c2*x3*y2 + c1*c2*x3*y2 + b1*b3*c1*y1*y2 + a1*a2*b2*y3 + a1*a2*b3*y3 + a1*a3*b2*b3*y3 + b1*b2*c1*y3 + a1*b2*b3*c1*y3 + a2*b2*b3*c1*y3 + a3*b2*b3*c1*y3 + a1*b1*c2*y3 + a1*a3*b2*c2*y3 + b1*b2*c2*y3 + a1*a3*b3*c2*y3 + a2*c1*c2*y3 + b1*c1*c2*y3 + a3*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + a2*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + b1*b2*c3*y3 + b1*b2*c1*x1*y3 + b2*b3*c1*x1*y3 + c2*x1*y3 + b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + a1*b2*x2*y3 + a1*b3*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + b1*b3*c2*x2*y3 + a1*b2*x3*y3 + b2*b3*c1*x3*y3 + c1*c2*x3*y3 + b1*b2*c1*y1*y3 + b2*b3*c1*y1*y3 + b1*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + a1*b2*c2*y2*y3 + a1*b3*c2*y2*y3 + b1*b3*c2*y2*y3 + c1*c2*y2*y3 + a3*b1*b2*c1*z1 + a2*b1*b3*c1*z1 + a3*b2*b3*c1*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a1*b3*c2*z1 + a3*b1*b3*c2*z1 + a1*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a3*c1*c2*z1 + b1*b3*c1*c2*z1 + b2*b3*c1*c2*z1 + a1*b3*x2*z1 + b1*b3*c1*x2*z1 + a1*b2*x3*z1 + a2*b3*x3*z1 + b1*b2*c1*x3*z1 + c2*x3*z1 + b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + c1*c2*x3*z1 + a1*b3*y2*z1 + b1*b3*c1*y2*z1 + a1*b2*y3*z1 + a2*b3*y3*z1 + b1*b2*c1*y3*z1 + b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + c1*c2*y3*z1 + a3*b1*c1*z2 + a3*b1*b3*c1*z2 + a3*b2*b3*c1*z2 + a3*b1*c2*z2 + a1*b3*c2*z2 + a3*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + a3*c1*c2*z2 + b2*b3*c1*c2*z2 + b1*c3*z2 + a1*b3*x2*z2 + a1*b2*x3*z2 + b1*b3*c1*x3*z2 + b1*b3*c2*x3*z2 + c1*c2*x3*z2 + a1*b3*y2*z2 + a1*b2*y3*z2 + b1*b3*c1*y3*z2 + b1*b3*c2*y3*z2 + c1*c2*y3*z2 + a3*b2*c1*z3 + a1*b3*c2*z3 + a1*b2*b3*c2*z3 + a3*c1*c2*z3 + b2*c1*c2*z3 + b2*b3*c1*c2*z3 + a1*b2*x2*z3 + a1*b3*x2*z3 + c1*x2*z3 + a1*b2*x3*z3 + b2*b3*c1*x3*z3 + c1*c2*x3*z3 + a1*b2*y2*z3 + a1*b3*y2*z3 + a1*b2*y3*z3 + b2*b3*c1*y3*z3 + c1*c2*y3*z3 + c2*z1*z3;
end;
#####################################################################
C2in114:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a3*b1*b2 + a2*b1*b3 + a1*a2*b1*b3 + a1*a3*b2*b3 + a1*a3*b1*b2*c1 + a1*a2*b3*c1 + a2*b1*b3*c1 + a1*b2*b3*c1 + a1*a3*b1*b2*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a3*b2*b3*c2 + a3*c1*c2 + a1*a3*c1*c2 + a1*a3*b1*c1*c2 + a1*b3*c1*c2 + a3*b3*c1*c2 + b1*b3*c1*c2 + a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*b2*b3*c3 + a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + b2*b3*x1 + a1*b2*b3*x1 + b2*b3*c1*x1 + a1*b2*b3*c1*x1 + a3*c2*x1 + a3*b2*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a3*b3*c2*x1 + a1*b1*b3*c2*x1 + a1*b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b2*c1*c2*x1 + b3*c1*c2*x1 + b1*b2*c3*x1 + b2*b3*c3*x1 + a3*b1*x2 + a1*a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*b2*b3*x2 + a1*a3*b2*b3*x2 + a1*a3*c1*x2 + a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + a1*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*a3*b2*c2*x2 + a1*a3*b3*c2*x2 + b1*b3*c2*x2 + a1*a3*c1*c2*x2 + a3*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + b1*b2*c3*x2 + a3*c1*x1*x2 + a1*a2*b1*x3 + a1*b2*x3 + a1*b1*b2*x3 + a1*b2*b3*x3 + a1*a3*b2*b3*x3 + a2*c1*x3 + a1*a2*c1*x3 + a2*b1*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + b2*b3*c1*x3 + a1*b2*b3*c1*x3 + a1*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a2*b1*c2*x3 + a3*b1*c2*x3 + a1*b2*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a1*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*b1*b3*c2*x3 + a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*c1*c2*x3 + a3*c1*c2*x3 + a1*a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + b2*c1*c2*x3 + a3*b2*c1*c2*x3 + a3*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + b1*b2*c3*x3 + a2*x1*x3 + b2*x1*x3 + a2*c1*x1*x3 + b2*c1*x1*x3 + a3*c2*x1*x3 + b2*c2*x1*x3 + b3*c2*x1*x3 + b2*c1*c2*x1*x3 + b1*c1*x2*x3 + b2*c1*x2*x3 + a1*b2*c2*x2*x3 + a1*b3*c2*x2*x3 + a1*c1*c2*x2*x3 + b2*c1*c2*x2*x3 + a3*b2*y1 + a2*b3*y1 + a2*b1*b3*y1 + a3*b2*b3*y1 + a2*b3*c1*y1 + a1*b2*b3*c1*y1 + a3*b1*c2*y1 + a3*b2*c2*y1 + a1*b1*b3*c2*y1 + b2*b3*c2*y1 + a1*b2*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b2*c1*c2*y1 + b3*c1*c2*y1 + b2*b3*c1*c2*y1 + b1*b2*c3*y1 + b2*b3*c3*y1 + b3*c2*x1*y1 + a3*x2*y1 + a3*c1*x2*y1 + a2*c1*x3*y1 + a3*c2*x3*y1 + b1*c2*x3*y1 + b2*c2*x3*y1 + b3*c2*x3*y1 + b2*c1*c2*x3*y1 + a1*a3*b1*y2 + a1*a3*b2*y2 + a2*b1*b3*y2 + a1*a3*b2*b3*y2 + a1*a3*c1*y2 + a3*b1*c1*y2 + a1*a3*b2*c1*y2 + a3*b1*b2*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a3*b1*b3*c1*y2 + a3*b2*b3*c1*y2 + a3*b1*c2*y2 + a1*a3*b2*c2*y2 + a1*a3*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*a3*c1*c2*y2 + a3*b2*c1*c2*y2 + a3*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + b1*b2*c3*y2 + a3*c1*x1*y2 + b3*c2*x1*y2 + a1*b3*x2*y2 + a1*b2*x3*y2 + a1*b3*x3*y2 + a1*c1*x3*y2 + b1*c1*x3*y2 + b1*c2*x3*y2 + a1*b2*c2*x3*y2 + a1*b3*c2*x3*y2 + a1*c1*c2*x3*y2 + b2*c1*c2*x3*y2 + a3*y1*y2 + a3*c1*y1*y2 + b3*c2*y1*y2 + a1*a2*b1*y3 + a2*b1*b2*y3 + a3*b1*b2*y3 + a2*b1*b3*y3 + a1*a3*b2*b3*y3 + a1*a2*c1*y3 + a2*b1*c1*y3 + a1*b2*c1*y3 + a1*a3*b2*c1*y3 + b1*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*a3*c2*y3 + a1*b1*c2*y3 + a1*a3*b2*c2*y3 + b1*b2*c2*y3 + a1*b1*b2*c2*y3 + a1*a3*b3*c2*y3 + a1*b1*b3*c2*y3 + a3*b1*b3*c2*y3 + a1*c1*c2*y3 + a3*c1*c2*y3 + a1*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*b1*c1*c2*y3 + b2*c1*c2*y3 + a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + b1*b2*c3*y3 + a2*x1*y3 + a2*c1*x1*y3 + a3*c2*x1*y3 + b2*c2*x1*y3 + b2*c1*c2*x1*y3 + a1*b2*x2*y3 + a1*b3*x2*y3 + a1*c1*x2*y3 + b2*c1*x2*y3 + a1*b2*c2*x2*y3 + a1*b3*c2*x2*y3 + a1*c1*c2*x2*y3 + b2*c1*c2*x2*y3 + a1*b2*x3*y3 + a2*c1*x3*y3 + b2*b3*c1*x3*y3 + a1*c2*x3*y3 + b1*c2*x3*y3 + b2*c1*c2*x3*y3 + a2*c1*y1*y3 + b2*c1*y1*y3 + a3*c2*y1*y3 + b1*c2*y1*y3 + b2*c2*y1*y3 + b2*c1*c2*y1*y3 + b1*c2*y2*y3 + a1*b2*c2*y2*y3 + a1*b3*c2*y2*y3 + a1*c1*c2*y2*y3 + b2*c1*c2*y2*y3 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b1*b2*c1*z1 + a2*b1*b3*c1*z1 + a3*b2*b3*c1*z1 + a3*c2*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a2*b3*c2*z1 + a3*b3*c2*z1 + a3*b1*b3*c2*z1 + a1*b2*b3*c2*z1 + a3*b2*b3*c2*z1 + a1*b3*x2*z1 + b1*b3*c1*x2*z1 + a1*b2*x3*z1 + a2*b3*x3*z1 + b2*c1*x3*z1 + b1*b2*c1*x3*z1 + b1*c2*x3*z1 + b2*c2*x3*z1 + b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + a1*b3*y2*z1 + b1*b3*c1*y2*z1 + a1*b2*y3*z1 + a2*b3*y3*z1 + b2*c1*y3*z1 + b1*b2*c1*y3*z1 + b1*c2*y3*z1 + b2*c2*y3*z1 + b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + a1*a3*z2 + a2*b1*b3*z2 + a1*b2*b3*z2 + a3*b1*b3*c1*z2 + a1*b2*b3*c1*z2 + a3*b2*b3*c1*z2 + a3*b1*c2*z2 + a1*b3*c2*z2 + a3*b1*b3*c2*z2 + a1*b2*b3*c2*z2 + a1*b3*c1*c2*z2 + a3*x1*z2 + b3*c2*x1*z2 + a1*b3*x2*z2 + a1*b2*x3*z2 + a1*c1*x3*z2 + b2*c1*x3*z2 + b1*b3*c1*x3*z2 + b1*c2*x3*z2 + b1*b3*c2*x3*z2 + a3*y1*z2 + b3*c2*y1*z2 + a1*b3*y2*z2 + a1*b2*y3*z2 + a1*c1*y3*z2 + b2*c1*y3*z2 + b1*b3*c1*y3*z2 + b1*c2*y3*z2 + b1*b3*c2*y3*z2 + a1*b1*b2*z3 + a2*b1*b2*z3 + a3*b1*b2*z3 + a2*b1*b3*z3 + a1*b2*b3*z3 + a1*b2*c1*z3 + a1*b2*b3*c1*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a3*b1*c2*z3 + a1*b2*c2*z3 + a1*b3*c2*z3 + a1*b2*b3*c2*z3 + b2*c1*c2*z3 + b1*b2*c1*c2*z3 + a1*b3*c1*c2*z3 + b2*x1*z3 + b2*c1*x1*z3 + b3*c2*x1*z3 + a1*b2*x2*z3 + a1*b3*x2*z3 + a1*c1*x2*z3 + b1*c1*x2*z3 + a1*b2*x3*z3 + a2*c1*x3*z3 + b2*b3*c1*x3*z3 + a1*c2*x3*z3 + b1*c2*x3*z3 + b2*c1*c2*x3*z3 + b2*c1*y1*z3 + b3*c2*y1*z3 + a1*b2*y2*z3 + a1*b3*y2*z3 + a1*c1*y2*z3 + b1*c1*y2*z3 + a1*b2*y3*z3 + a2*c1*y3*z3 + b2*b3*c1*y3*z3 + a1*c2*y3*z3 + b1*c2*y3*z3 + b2*c1*c2*y3*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 115 ( P-4m2)
#####################################################################
Acpin115:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin115:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin115:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Azin115:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain115:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyin115:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 116 ( P-4c2)
#####################################################################
Acpin116:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin116:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyin116:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1;
end;
#####################################################################
Bdeltain116:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyin116:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*y1 + b1*x2*y1 + b1*x2*y2 + b1*y1*y2;
end;
#####################################################################
Bcpzin116:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*b2 + b1*b2*c1 + a1*c2 + b1*c1*c2 + b1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 117 ( P-4b2)
#####################################################################
Acpin117:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin117:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Azin117:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return z1;
end;
#####################################################################
Bdeltain117:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bphiin117:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1 + b2*c1 + a1*c2 + b1*c2 + a1*c1*c2 + a2*c1*c2 + b1*c1*c2 + c2*x1 + a1*x2 + b1*x2 + c1*x2 + c2*y1 + a1*y2 + b1*y2;
end;
#####################################################################
CGAPin117:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b2 + a1*a2*b3 + a2*b1*b3 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + b1*b2*b3 + a1*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a3*b2*c1 + a1*a2*a3*b2*c1 + a1*a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a2*b1*b3*c1 + b2*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a1*a2*b2*b3*c1 + a3*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + a1*a2*b1*b2*b3*c1 + a1*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a1*a2*b3*c2 + a2*b1*b3*c2 + a3*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*a2*b2*b3*c2 + a1*b1*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a1*a2*a3*c1*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a2*a3*b1*c1*c2 + a1*a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a1*a3*b3*c1*c2 + a1*a2*a3*b3*c1*c2 + a1*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a1*a2*a3*b1*c3 + a1*b2*c3 + a1*a2*a3*b2*c3 + b1*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a1*a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a3*b1*b2*c3 + a1*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a2*a3*c1*c3 + a1*a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a2*b2*c1*c3 + a3*b2*c1*c3 + a1*b1*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a3*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + b2*b3*c1*c3 + a3*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + a1*a2*a3*c2*c3 + b1*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a1*a2*b3*c2*c3 + a1*a3*b3*c2*c3 + a1*b1*b3*c2*c3 + a2*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a2*a3*b1*b2*b3*c2*c3 + a1*c1*c2*c3 + a2*c1*c2*c3 + a1*a2*c1*c2*c3 + a1*a3*c1*c2*c3 + a2*a3*c1*c2*c3 + b1*c1*c2*c3 + a1*a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a1*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a3*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + b3*c1*c2*c3 + a1*b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a3*b3*c1*c2*c3 + a2*b1*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + b1*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a3*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a3*b2*x1 + a2*a3*b2*x1 + a1*a2*a3*b2*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b2*b3*x1 + a2*b1*b2*b3*x1 + a1*a2*b1*b2*b3*x1 + a2*a3*b1*b2*b3*x1 + a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a3*b2*c1*x1 + a1*a3*b1*b2*c1*x1 + a1*a2*b3*c1*x1 + b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a1*a2*b2*b3*c1*x1 + a1*a3*b2*b3*c1*x1 + a2*a3*b2*b3*c1*x1 + a3*c2*x1 + a2*a3*c2*x1 + a1*a2*a3*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a2*a3*b2*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a1*a3*b3*c2*x1 + b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a2*a3*b2*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a1*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a2*a3*b3*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + a2*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a1*b1*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a1*a2*b1*c3*x1 + a2*a3*b1*c3*x1 + a1*a2*b2*c3*x1 + a3*b2*c3*x1 + b1*b2*c3*x1 + a1*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a2*b1*b3*c3*x1 + b2*b3*c3*x1 + a1*b2*b3*c3*x1 + a2*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + a2*c1*c3*x1 + a2*b1*c1*c3*x1 + a2*b2*c1*c3*x1 + a2*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + b2*b3*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + c2*c3*x1 + a3*c2*c3*x1 + a2*a3*c2*c3*x1 + a1*b1*c2*c3*x1 + a2*b1*c2*c3*x1 + b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a1*a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a3*b1*b2*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + a1*a3*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a2*b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a2*b3*c1*c2*c3*x1 + a3*b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a3*b1*x2 + a1*a3*b1*x2 + a2*a3*b1*x2 + a1*a3*b2*x2 + a1*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*b1*b2*b3*x2 + a1*a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a1*a3*b1*b2*b3*x2 + a3*c1*x2 + a1*a3*c1*x2 + a2*a3*c1*x2 + a3*b1*c1*x2 + a2*a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a2*a3*b1*b2*c1*x2 + a2*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + b1*b3*c1*x2 + a1*b1*b3*c1*x2 + b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a1*a2*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + a1*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a3*c1*c2*x2 + a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + b3*c1*c2*x2 + a1*b3*c1*c2*x2 + a2*b3*c1*c2*x2 + a3*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a1*a2*c3*x2 + a2*b1*c3*x2 + a1*a2*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + a2*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a1*c1*c3*x2 + a2*c1*c3*x2 + b1*c1*c3*x2 + a1*b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + a3*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a1*b2*c2*c3*x2 + a1*b1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a3*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*b2*b3*c2*c3*x2 + b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a3*b1*b2*x1*x2 + b1*b3*x1*x2 + a3*b1*b3*x1*x2 + a1*b1*b2*b3*x1*x2 + a2*b1*b2*b3*x1*x2 + a3*b1*b2*b3*x1*x2 + b1*b2*b3*c1*x1*x2 + a3*c2*x1*x2 + a3*b2*c2*x1*x2 + b3*c2*x1*x2 + a2*b3*c2*x1*x2 + a3*b3*c2*x1*x2 + b2*b3*c2*x1*x2 + c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + b2*c3*x1*x2 + a2*b2*c3*x1*x2 + a3*b2*c3*x1*x2 + b3*c3*x1*x2 + a2*b3*c3*x1*x2 + a3*b3*c3*x1*x2 + b2*b3*c2*c3*x1*x2 + a1*a2*x3 + a2*b1*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + a1*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*b2*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a1*b1*b2*b3*x3 + a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*b1*c1*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + b2*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a1*a2*b2*c1*x3 + a2*a3*b2*c1*x3 + a1*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a3*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a2*b1*c2*x3 + a1*a3*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*b2*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a1*a3*b1*b2*c2*x3 + a2*a3*b1*b2*c2*x3 + a1*b3*c2*x3 + a1*a2*b3*c2*x3 + a1*a3*b3*c2*x3 + b1*b3*c2*x3 + a2*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + a2*b1*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + c1*c2*x3 + a1*c1*c2*x3 + a2*c1*c2*x3 + a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + b2*c1*c2*x3 + a1*b2*c1*c2*x3 + a2*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a1*b3*c1*c2*x3 + a2*b3*c1*c2*x3 + a3*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + a2*b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a2*b1*c3*x3 + a1*b2*c3*x3 + b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a2*b1*b3*c3*x3 + a1*b2*b3*c3*x3 + b1*b2*b3*c3*x3 + a1*c2*c3*x3 + b1*c2*c3*x3 + a1*b1*c2*c3*x3 + a2*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a1*b2*c2*c3*x3 + a1*b3*c2*c3*x3 + a1*b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a3*b1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + a3*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + a3*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + b2*x1*x3 + a1*b2*x1*x3 + a1*a2*b2*x1*x3 + a1*a3*b2*x1*x3 + a2*b1*b2*x1*x3 + a3*b1*b2*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + b2*c1*x1*x3 + a2*b2*c1*x1*x3 + a3*b2*c1*x1*x3 + b2*b3*c1*x1*x3 + a2*b2*b3*c1*x1*x3 + a3*b2*b3*c1*x1*x3 + c2*x1*x3 + a2*c2*x1*x3 + a3*c2*x1*x3 + b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a3*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + a1*b2*b3*c2*x1*x3 + b1*b2*b3*c2*x1*x3 + a2*c3*x1*x3 + b2*c3*x1*x3 + a2*b3*c3*x1*x3 + b2*b3*c3*x1*x3 + b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*b2*b3*x2*x3 + b1*b2*c1*x2*x3 + b1*b2*b3*c1*x2*x3 + b1*b2*b3*c2*x2*x3 + a2*a3*y1 + a3*b2*y1 + a2*b3*y1 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a2*b1*b2*b3*y1 + a1*a2*b1*b2*b3*y1 + a2*a3*b1*b2*b3*y1 + a3*b2*c1*y1 + a1*a3*b2*c1*y1 + a2*a3*b2*c1*y1 + a1*a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a1*a2*b3*c1*y1 + a2*b1*b3*c1*y1 + a1*b2*b3*c1*y1 + a1*a2*b2*b3*c1*y1 + a1*a3*b2*b3*c1*y1 + a2*a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a3*b1*c2*y1 + a1*a3*b2*c2*y1 + a2*a3*b2*c2*y1 + a1*a2*b3*c2*y1 + a2*a3*b3*c2*y1 + a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a2*a3*b1*b3*c2*y1 + b2*b3*c2*y1 + a1*b2*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + a1*a3*b2*b3*c2*y1 + a2*a3*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b2*c1*c2*y1 + a2*a3*b2*c1*c2*y1 + a3*b1*b2*c1*c2*y1 + b3*c1*c2*y1 + a2*b3*c1*c2*y1 + a3*b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a3*b1*b2*b3*c1*c2*y1 + a2*b1*c3*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a1*b2*c3*y1 + a2*b2*c3*y1 + a1*a2*b2*c3*y1 + a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a2*b1*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a3*b2*b3*c3*y1 + a2*b1*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*c2*c3*y1 + a2*c2*c3*y1 + a3*c2*c3*y1 + a2*a3*c2*c3*y1 + b1*c2*c3*y1 + a1*b1*c2*c3*y1 + a2*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + a1*b1*b3*c2*c3*y1 + a3*b1*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a3*b2*b3*c2*c3*y1 + b2*c1*c2*c3*y1 + a2*b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + a2*b3*c1*c2*c3*y1 + a3*b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*x1*y1 + a3*b1*b2*x1*y1 + a2*b3*x1*y1 + a1*b2*b3*x1*y1 + a2*b2*b3*x1*y1 + a3*b2*b3*x1*y1 + b1*b2*b3*c1*x1*y1 + b3*c2*x1*y1 + b1*b2*b3*c2*x1*y1 + b3*x2*y1 + a3*b3*x2*y1 + b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a1*b2*b3*x2*y1 + a2*b2*b3*x2*y1 + a3*b2*b3*x2*y1 + a1*b1*b2*b3*x2*y1 + a2*b1*b2*b3*x2*y1 + a3*b1*b2*b3*x2*y1 + a3*c2*x2*y1 + a3*b2*c2*x2*y1 + b3*c2*x2*y1 + a2*b3*c2*x2*y1 + a3*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a2*b2*c3*x2*y1 + a3*b2*c3*x2*y1 + b3*c3*x2*y1 + a2*b3*c3*x2*y1 + a3*b3*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + b2*c1*x3*y1 + a2*b2*c1*x3*y1 + a3*b2*c1*x3*y1 + b2*b3*c1*x3*y1 + a2*b2*b3*c1*x3*y1 + a3*b2*b3*c1*x3*y1 + c2*x3*y1 + a2*c2*x3*y1 + a3*c2*x3*y1 + b2*c2*x3*y1 + b3*c2*x3*y1 + a2*b3*c2*x3*y1 + a3*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a2*c3*x3*y1 + b2*c3*x3*y1 + a2*b3*c3*x3*y1 + b2*b3*c3*x3*y1 + a3*b1*b2*y2 + b1*b3*y2 + a1*b1*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a3*b1*b3*y2 + a1*a3*b1*b3*y2 + a2*a3*b1*b3*y2 + a1*b2*b3*y2 + a1*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + a3*b1*b2*b3*y2 + a1*a3*b1*b2*b3*y2 + a1*a3*b2*c1*y2 + a2*a3*b1*b2*c1*y2 + b3*c1*y2 + a1*a2*b3*c1*y2 + a3*b3*c1*y2 + b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a1*a2*b2*b3*c1*y2 + a1*a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a1*a3*b2*c2*y2 + a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*a3*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*b1*b2*b3*c2*y2 + a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a2*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + a2*b2*b3*c1*c2*y2 + a3*b2*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + b1*b2*c3*y2 + a2*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + b1*b2*b3*c3*y2 + b1*c1*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + b1*b2*c1*c3*y2 + b1*b3*c1*c3*y2 + a1*c2*c3*y2 + b1*c2*c3*y2 + a1*b2*c2*c3*y2 + b1*b2*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a3*x1*y2 + a1*a3*x1*y2 + a3*b2*x1*y2 + a3*b1*b2*x1*y2 + a2*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + a2*b1*b3*x1*y2 + a1*b2*b3*x1*y2 + a2*b2*b3*x1*y2 + a3*b2*b3*x1*y2 + a1*b1*b2*b3*x1*y2 + a2*b1*b2*b3*x1*y2 + a3*b1*b2*b3*x1*y2 + a3*b2*c1*x1*y2 + b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + a3*b2*c2*x1*y2 + b3*c2*x1*y2 + a1*b3*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + b1*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + a2*b3*c3*x1*y2 + a3*b3*c3*x1*y2 + b3*c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + a3*b1*b2*x2*y2 + a1*b2*b3*x2*y2 + b1*b2*b3*c1*x2*y2 + b1*b2*b3*c2*x2*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a1*b1*b2*b3*y1*y2 + a2*b1*b2*b3*y1*y2 + a3*b1*b2*b3*y1*y2 + a3*b2*c1*y1*y2 + b3*c1*y1*y2 + a2*b3*c1*y1*y2 + a3*b3*c1*y1*y2 + b1*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + a3*b2*c2*y1*y2 + b3*c2*y1*y2 + a2*b3*c2*y1*y2 + a3*b3*c2*y1*y2 + b1*b3*c2*y1*y2 + b2*b3*c2*y1*y2 + b1*b2*b3*c2*y1*y2 + b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + a2*b2*c3*y1*y2 + a3*b2*c3*y1*y2 + a2*b3*c3*y1*y2 + a3*b3*c3*y1*y2 + b3*c2*c3*y1*y2 + b2*b3*c2*c3*y1*y2 + a1*a2*a3*b1*y3 + a1*b2*y3 + a1*a2*b2*y3 + a1*a3*b2*y3 + b1*b2*y3 + a2*b1*b2*y3 + a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b1*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a1*a2*c1*y3 + a1*a2*a3*c1*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a1*a2*b2*c1*y3 + a3*b2*c1*y3 + a1*a3*b2*c1*y3 + b1*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a1*a2*b3*c1*y3 + a2*b1*b3*c1*y3 + b2*b3*c1*y3 + a1*b2*b3*c1*y3 + b1*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + b1*c2*y3 + a1*b1*c2*y3 + a2*b1*c2*y3 + a1*b2*c2*y3 + a1*a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a1*a2*b3*c2*y3 + b1*b3*c2*y3 + a1*b1*b3*c2*y3 + a1*a3*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a1*a3*c1*c2*y3 + a2*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*a3*b1*c1*c2*y3 + a2*a3*b1*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + a2*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a1*b1*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + a1*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*b3*c3*y3 + a2*b1*b3*c3*y3 + a1*b2*b3*c3*y3 + b1*b2*b3*c3*y3 + a1*c2*c3*y3 + a1*b1*c2*c3*y3 + a2*b1*c2*c3*y3 + a3*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a1*b1*b2*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + b1*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + a3*b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + b1*b2*b3*c1*c2*c3*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + a2*b1*b2*x1*y3 + a3*b1*b2*x1*y3 + a2*b3*x1*y3 + b2*b3*x1*y3 + a1*b2*b3*x1*y3 + a3*b2*c1*x1*y3 + a2*b3*c1*x1*y3 + a2*b2*b3*c1*x1*y3 + a3*b2*b3*c1*x1*y3 + a1*b3*c2*x1*y3 + a2*b3*c2*x1*y3 + b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + a1*b2*b3*c2*x1*y3 + b1*b2*b3*c2*x1*y3 + b3*c1*c2*x1*y3 + b2*b3*c1*c2*x1*y3 + a2*b3*c3*x1*y3 + b2*b3*c3*x1*y3 + b3*c2*c3*x1*y3 + a1*x2*y3 + a1*a3*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b2*x2*y3 + b1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a3*b2*c1*x2*y3 + a3*b1*b2*c1*x2*y3 + b3*c1*x2*y3 + a3*b3*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + b1*b3*c2*x2*y3 + b1*b2*b3*c2*x2*y3 + b1*b2*x3*y3 + a1*b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a3*b1*b2*x3*y3 + a1*b2*b3*x3*y3 + b1*b2*c1*x3*y3 + b1*b2*b3*c1*x3*y3 + b1*b2*b3*c2*x3*y3 + a2*b3*c1*y1*y3 + b2*b3*c1*y1*y3 + a2*b2*b3*c1*y1*y3 + a3*b2*b3*c1*y1*y3 + a2*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + b3*c1*c2*y1*y3 + b2*b3*c1*c2*y1*y3 + a2*b3*c3*y1*y3 + b2*b3*c3*y1*y3 + b3*c2*c3*y1*y3 + a3*b1*y2*y3 + a1*a3*b1*y2*y3 + a2*a3*b1*y2*y3 + a3*b1*b2*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + a3*b1*b2*c1*y2*y3 + b3*c1*y2*y3 + a3*b3*c1*y2*y3 + b1*b2*b3*c1*y2*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 118 ( P-4n2)
#####################################################################
Acpin118:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin118:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin118:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain118:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
CGAPin118:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a2*a3*b2 + a1*a2*b3 + a2*b1*b3 + a1*a2*b1*b3 + a1*a2*a3*b1*b3 + a1*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a3*b2*c1 + a1*a2*a3*b2*c1 + a1*a3*b1*b2*c1 + a2*a3*b1*b2*c1 + a1*a2*b3*c1 + a1*a2*a3*b3*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + a2*a3*b1*b3*c1 + a1*a2*b2*b3*c1 + a2*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + b1*b2*b3*c1 + a1*a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a1*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a1*a3*b1*b2*c2 + a1*a2*b3*c2 + b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a2*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*a3*b2*b3*c2 + a1*a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a1*a3*c1*c2 + a1*a2*a3*c1*c2 + a3*b1*c1*c2 + a1*a3*b1*c1*c2 + a2*a3*b1*c1*c2 + a1*a3*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a1*a2*b3*c1*c2 + a1*a2*a3*b3*c1*c2 + b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a1*a2*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a1*a3*b1*b2*b3*c1*c2 + a1*a2*a3*b1*c3 + a1*b2*c3 + a1*a2*a3*b2*c3 + b1*b2*c3 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a2*b1*b3*c3 + a1*b2*b3*c3 + a1*a3*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a1*a2*a3*c1*c3 + a2*b1*c1*c3 + a1*a2*b1*c1*c3 + a2*a3*b1*c1*c3 + a2*b2*c1*c3 + a1*a2*b2*c1*c3 + a3*b2*c1*c3 + a1*a3*b2*c1*c3 + b1*b2*c1*c3 + a2*b1*b3*c1*c3 + a2*a3*b1*b3*c1*c3 + a1*b2*b3*c1*c3 + a2*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a3*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + a1*a2*a3*c2*c3 + b1*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a2*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a2*b2*c2*c3 + a1*b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a1*a2*b3*c2*c3 + b1*b3*c2*c3 + a1*b1*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + a2*a3*b1*b2*b3*c2*c3 + a1*a2*c1*c2*c3 + a1*b1*c1*c2*c3 + a1*a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a1*b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a1*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a3*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a2*a3*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + a2*b1*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*a3*b1*x1 + a3*b2*x1 + a2*a3*b2*x1 + a1*a2*a3*b2*x1 + a1*a3*b1*b2*x1 + a2*b3*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a1*a2*b1*b3*x1 + a2*a3*b2*b3*x1 + a2*b1*b2*b3*x1 + a1*a2*b1*b2*b3*x1 + a2*a3*b1*b2*b3*x1 + a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a2*a3*b2*c1*x1 + a1*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a1*a2*b3*c1*x1 + b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a1*a2*b2*b3*c1*x1 + a1*a3*b2*b3*c1*x1 + a3*c2*x1 + a1*a2*a3*c2*x1 + a1*a3*b1*c2*x1 + a2*a3*b1*c2*x1 + a3*b1*b2*c2*x1 + b3*c2*x1 + a2*b3*c2*x1 + a1*a2*b3*c2*x1 + a3*b3*c2*x1 + a1*a3*b3*c2*x1 + a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + a2*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a3*b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + b3*c1*c2*x1 + a1*b3*c1*c2*x1 + b1*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + a2*b1*b3*c1*c2*x1 + a1*b1*b2*b3*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a1*a2*b1*c3*x1 + a2*a3*b1*c3*x1 + a1*a2*b2*c3*x1 + a2*a3*b2*c3*x1 + b1*b2*c3*x1 + a1*b1*b2*c3*x1 + a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + b2*b3*c3*x1 + a1*b2*b3*c3*x1 + a2*b2*b3*c3*x1 + a3*b2*b3*c3*x1 + a2*c1*c3*x1 + a2*b1*c1*c3*x1 + a2*b2*c1*c3*x1 + a2*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + b2*b3*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + c2*c3*x1 + a3*c2*c3*x1 + a1*b1*c2*c3*x1 + a2*b1*c2*c3*x1 + b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a1*a2*b2*c2*c3*x1 + a1*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a3*b1*b2*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + a1*a3*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a1*b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a3*b1*x2 + a1*a3*b1*x2 + a2*a3*b1*x2 + a1*a3*b2*x2 + a1*a3*b1*b2*x2 + a1*b3*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a3*b1*b3*x2 + a2*a3*b1*b3*x2 + a1*b1*b2*b3*x2 + a1*a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a1*a3*b1*b2*b3*x2 + a1*a3*c1*x2 + a2*a3*c1*x2 + a3*b1*c1*x2 + a2*a3*b1*c1*x2 + a3*b2*c1*x2 + a1*a3*b2*c1*x2 + a2*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a2*a3*b1*b2*c1*x2 + a1*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a1*a2*b2*b3*c1*x2 + a1*a3*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b1*c2*x2 + a2*a3*b1*c2*x2 + a3*b1*b2*c2*x2 + a1*b3*c2*x2 + a1*a2*b3*c2*x2 + a1*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a1*a3*b2*b3*c2*x2 + b1*b2*b3*c2*x2 + a1*b1*b2*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + a1*b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + a3*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + a2*b1*b2*b3*c1*c2*x2 + a1*a2*c3*x2 + a2*b1*c3*x2 + a1*a2*b2*c3*x2 + a2*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + a2*b1*b3*c3*x2 + a1*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + c1*c3*x2 + a3*c1*c3*x2 + b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + b2*c1*c3*x2 + a1*b2*c1*c3*x2 + a2*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + b3*c1*c3*x2 + a1*b3*c1*c3*x2 + a2*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a1*b1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a1*b2*c2*c3*x2 + a1*b1*b2*c2*c3*x2 + a2*b1*b2*c2*c3*x2 + a3*b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a1*b1*b3*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a3*b1*b3*c2*c3*x2 + a1*b2*b3*c2*c3*x2 + b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + a3*b1*b2*x1*x2 + b3*x1*x2 + b1*b3*x1*x2 + a3*b1*b3*x1*x2 + a1*b1*b2*b3*x1*x2 + a2*b1*b2*b3*x1*x2 + a3*b1*b2*b3*x1*x2 + b1*b2*b3*c1*x1*x2 + a1*a2*x3 + a2*b1*x3 + a1*a2*b2*x3 + a1*a3*b2*x3 + a1*b1*b2*x3 + a1*a3*b1*b2*x3 + a2*a3*b1*b2*x3 + a1*b2*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a1*b1*b2*b3*x3 + a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a1*a2*b1*c1*x3 + a2*a3*b1*c1*x3 + b2*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a1*a2*b2*c1*x3 + a3*b2*c1*x3 + a2*a3*b2*c1*x3 + b1*b2*c1*x3 + a1*b1*b2*c1*x3 + b1*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*b1*c2*x3 + a1*a3*b1*c2*x3 + a2*a3*b1*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a1*a3*b1*b2*c2*x3 + a2*a3*b1*b2*c2*x3 + a1*a2*b3*c2*x3 + a1*a3*b3*c2*x3 + a1*b1*b3*c2*x3 + a1*a3*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + a2*b1*b2*b3*c2*x3 + a3*b1*b2*b3*c2*x3 + b1*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a1*a2*c3*x3 + a2*b1*c3*x3 + a1*b2*c3*x3 + b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a2*b1*b3*c3*x3 + a1*b2*b3*c3*x3 + b1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + b2*c1*c3*x3 + a2*b1*b3*c1*c3*x3 + b2*b3*c1*c3*x3 + b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a3*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + a2*b1*b2*b3*c2*c3*x3 + a3*b1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + b3*c1*c2*c3*x3 + b2*x1*x3 + a1*b2*x1*x3 + a1*a2*b2*x1*x3 + a1*a3*b2*x1*x3 + a2*b1*b2*x1*x3 + a3*b1*b2*x1*x3 + b2*b3*x1*x3 + a1*b2*b3*x1*x3 + a1*b2*b3*c2*x1*x3 + b1*b2*b3*c2*x1*x3 + b1*b2*x2*x3 + a1*b1*b2*x2*x3 + a2*b1*b2*x2*x3 + a3*b1*b2*x2*x3 + a1*b2*b3*x2*x3 + b1*b2*c1*x2*x3 + b1*b2*b3*c1*x2*x3 + b1*b2*b3*c2*x2*x3 + x1*x2*x3 + a2*a3*y1 + a3*b2*y1 + a2*b3*y1 + a2*b1*b3*y1 + a1*a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a2*b1*b2*b3*y1 + a1*a2*b1*b2*b3*y1 + a2*a3*b1*b2*b3*y1 + a1*a3*b2*c1*y1 + a1*a3*b1*b2*c1*y1 + a1*a2*b3*c1*y1 + a2*b1*b3*c1*y1 + a1*b2*b3*c1*y1 + a1*a2*b2*b3*c1*y1 + a1*a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a1*b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a1*a3*b1*c2*y1 + a3*b2*c2*y1 + a1*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + a2*b3*c2*y1 + a1*a2*b3*c2*y1 + a2*a3*b3*c2*y1 + b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a2*a3*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a1*a3*b2*b3*c2*y1 + a2*a3*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b2*c1*c2*y1 + a3*b1*b2*c1*c2*y1 + a2*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + a1*b2*b3*c1*c2*y1 + a2*b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + a1*b1*b2*b3*c1*c2*y1 + a3*b1*b2*b3*c1*c2*y1 + a2*b1*c3*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a1*b2*c3*y1 + a1*a2*b2*c3*y1 + a3*b2*c3*y1 + a2*a3*b2*c3*y1 + a1*b1*b2*c3*y1 + a2*b1*b2*c3*y1 + a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a1*a2*b3*c3*y1 + a2*a3*b3*c3*y1 + a1*b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a3*b2*b3*c3*y1 + a2*b1*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + b1*b2*b3*c1*c3*y1 + a1*c2*c3*y1 + a2*c2*c3*y1 + a3*c2*c3*y1 + b1*c2*c3*y1 + a1*b1*c2*c3*y1 + a2*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + b1*b3*c2*c3*y1 + a1*b1*b3*c2*c3*y1 + a3*b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a3*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b2*x1*y1 + a3*b1*b2*x1*y1 + a2*b3*x1*y1 + a1*b2*b3*x1*y1 + a2*b2*b3*x1*y1 + a3*b2*b3*x1*y1 + b1*b2*b3*c1*x1*y1 + b3*c2*x1*y1 + b1*b2*b3*c2*x1*y1 + a3*b3*x2*y1 + b1*b3*x2*y1 + a3*b1*b3*x2*y1 + a1*b2*b3*x2*y1 + a2*b2*b3*x2*y1 + a3*b2*b3*x2*y1 + a1*b1*b2*b3*x2*y1 + a2*b1*b2*b3*x2*y1 + a3*b1*b2*b3*x2*y1 + b2*b3*c2*x2*y1 + b1*b2*b3*c2*x2*y1 + x2*x3*y1 + a3*b1*b2*y2 + b1*b3*y2 + a1*b1*b3*y2 + a2*b1*b3*y2 + a1*a2*b1*b3*y2 + a3*b1*b3*y2 + a1*a3*b1*b3*y2 + a2*a3*b1*b3*y2 + a1*b2*b3*y2 + a1*b1*b2*b3*y2 + a1*a2*b1*b2*b3*y2 + a3*b1*b2*b3*y2 + a1*a3*b1*b2*b3*y2 + a1*a3*b2*c1*y2 + a2*a3*b1*b2*c1*y2 + a1*a2*b3*c1*y2 + a1*b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a1*a2*b2*b3*c1*y2 + a1*a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*b1*b2*b3*c1*y2 + a2*b1*b2*b3*c1*y2 + a1*a3*b2*c2*y2 + a3*b1*b2*c2*y2 + a1*a2*b3*c2*y2 + a1*b1*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*a3*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*b1*b2*b3*c2*y2 + a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a2*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*b1*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + a2*b2*b3*c1*c2*y2 + a3*b2*b3*c1*c2*y2 + a2*b1*b2*b3*c1*c2*y2 + a1*b2*c3*y2 + a1*a2*b2*c3*y2 + b1*b2*c3*y2 + a2*b1*b2*c3*y2 + a1*a2*b3*c3*y2 + a2*b1*b3*c3*y2 + a1*b2*b3*c3*y2 + b1*b2*b3*c3*y2 + b1*c1*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a1*c2*c3*y2 + b1*c2*c3*y2 + a1*b2*c2*c3*y2 + b1*b2*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a3*x1*y2 + a1*a3*x1*y2 + a3*b2*x1*y2 + a3*b1*b2*x1*y2 + b3*x1*y2 + a2*b3*x1*y2 + b1*b3*x1*y2 + a1*b1*b3*x1*y2 + a2*b1*b3*x1*y2 + a1*b2*b3*x1*y2 + a2*b2*b3*x1*y2 + a3*b2*b3*x1*y2 + a1*b1*b2*b3*x1*y2 + a2*b1*b2*b3*x1*y2 + a3*b1*b2*b3*x1*y2 + a1*b3*c2*x1*y2 + b1*b3*c2*x1*y2 + a3*b1*b2*x2*y2 + a1*b2*b3*x2*y2 + b1*b2*b3*c1*x2*y2 + b1*b2*b3*c2*x2*y2 + x1*x3*y2 + b3*y1*y2 + b1*b3*y1*y2 + a1*b1*b3*y1*y2 + a2*b1*b3*y1*y2 + a1*b1*b2*b3*y1*y2 + a2*b1*b2*b3*y1*y2 + a3*b1*b2*b3*y1*y2 + b1*b3*c1*y1*y2 + b1*b2*b3*c1*y1*y2 + b1*b3*c2*y1*y2 + b1*b2*b3*c2*y1*y2 + x3*y1*y2 + a1*a2*a3*b1*y3 + a1*b2*y3 + a1*a2*b2*y3 + a1*a3*b2*y3 + b1*b2*y3 + a2*b1*b2*y3 + a3*b1*b2*y3 + a2*a3*b1*b2*y3 + a1*a2*b1*b3*y3 + b1*b2*b3*y3 + a1*b1*b2*b3*y3 + a2*b1*b2*b3*y3 + a3*b1*b2*b3*y3 + a1*a2*c1*y3 + a1*a2*a3*c1*y3 + a2*b1*c1*y3 + a1*a2*b1*c1*y3 + a1*a2*b2*c1*y3 + a3*b2*c1*y3 + a1*a3*b2*c1*y3 + b1*b2*c1*y3 + a1*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a1*a2*b3*c1*y3 + b2*b3*c1*y3 + a1*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + b1*c2*y3 + a1*b1*c2*y3 + a2*b1*c2*y3 + a1*b2*c2*y3 + a1*a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a1*a2*b3*c2*y3 + a2*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*a3*b2*b3*c2*y3 + b1*b2*b3*c2*y3 + a1*b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a1*a3*c1*c2*y3 + a2*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*a3*b1*c1*c2*y3 + a2*a3*b1*c1*c2*y3 + a1*a3*b2*c1*c2*y3 + a2*a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + a2*b3*c1*c2*y3 + a2*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*b3*c3*y3 + a2*b1*b3*c3*y3 + a1*b2*b3*c3*y3 + b1*b2*b3*c3*y3 + a2*b1*b3*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*b1*c2*c3*y3 + a2*b1*c2*c3*y3 + a3*b1*c2*c3*y3 + a1*b2*c2*c3*y3 + b1*b2*c2*c3*y3 + a1*b1*b2*c2*c3*y3 + a2*b1*b2*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + a1*b1*b3*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a2*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + a2*b1*b2*x1*y3 + a3*b1*b2*x1*y3 + a2*b3*x1*y3 + b2*b3*x1*y3 + a1*b2*b3*x1*y3 + a3*b2*c1*x1*y3 + b2*b3*c1*x1*y3 + a1*b3*c2*x1*y3 + b1*b3*c2*x1*y3 + a1*b2*b3*c2*x1*y3 + b1*b2*b3*c2*x1*y3 + a1*x2*y3 + a1*a3*x2*y3 + b1*x2*y3 + a1*b1*x2*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + a1*a3*b1*x2*y3 + a2*a3*b1*x2*y3 + a1*b2*x2*y3 + b1*b2*x2*y3 + a1*b1*b2*x2*y3 + a2*b1*b2*x2*y3 + b1*b3*x2*y3 + a1*b1*b3*x2*y3 + a2*b1*b3*x2*y3 + a1*b2*b3*x2*y3 + a3*b2*c1*x2*y3 + a3*b1*b2*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + b1*b3*c2*x2*y3 + b1*b2*b3*c2*x2*y3 + x1*x2*y3 + b1*b2*x3*y3 + a1*b1*b2*x3*y3 + a2*b1*b2*x3*y3 + a3*b1*b2*x3*y3 + a1*b2*b3*x3*y3 + b1*b2*c1*x3*y3 + b1*b2*b3*c1*x3*y3 + b1*b2*b3*c2*x3*y3 + x2*y1*y3 + a3*b1*y2*y3 + a1*a3*b1*y2*y3 + a2*a3*b1*y2*y3 + a3*b1*b2*y2*y3 + b1*b3*y2*y3 + a1*b1*b3*y2*y3 + a2*b1*b3*y2*y3 + a3*b1*b2*c1*y2*y3 + b1*b2*b3*c1*y2*y3 + x1*y2*y3 + y1*y2*y3 + a2*b3*c2*z1 + b1*b3*c2*z1 + a3*b1*b3*c2*z1 + a3*b2*b3*c2*z1 + a3*b1*b2*b3*c2*z1 + a2*c3*z1 + a2*b2*c3*z1 + a3*b2*c3*z1 + b1*b2*c3*z1 + a3*b1*b2*c3*z1 + a2*b3*c3*z1 + b2*b3*c3*z1 + a3*b2*b3*c3*z1 + a3*b1*b2*b3*c3*z1 + a3*c2*c3*z1 + a3*b2*c2*c3*z1 + a3*b1*b2*c2*c3*z1 + a3*b3*c2*c3*z1 + a3*b1*b3*c2*c3*z1 + b3*x2*z1 + b3*c2*x2*z1 + c3*x2*z1 + b2*c3*x2*z1 + b3*c3*x2*z1 + c2*x3*z1 + b2*c2*x3*z1 + b1*b2*c2*x3*z1 + b3*c2*x3*z1 + b2*b3*c2*x3*z1 + b1*b2*b3*c2*x3*z1 + b2*c3*x3*z1 + b1*b2*c3*x3*z1 + b2*b3*c3*x3*z1 + b1*b2*b3*c3*x3*z1 + x2*x3*z1 + b3*y2*z1 + b1*b3*c2*y2*z1 + b1*b2*c3*y2*z1 + b1*b3*c3*y2*z1 + x3*y2*z1 + b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + b1*b2*b3*c2*y3*z1 + b1*b2*b3*c3*y3*z1 + x2*y3*z1 + y2*y3*z1 + b1*b3*c3*z2 + b3*x1*z2 + x1*x3*z2 + b3*y1*z2 + x3*y1*z2 + b1*b3*c3*y3*z2 + x1*y3*z2 + y1*y3*z2 + b3*z1*z2 + x3*z1*z2 + y3*z1*z2 + x1*x2*z3 + x2*y1*z3 + x1*y2*z3 + y1*y2*z3 + x2*z1*z3 + y2*z1*z3 + x1*z2*z3 + y1*z2*z3 + z1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 119 ( I-4m2)
#####################################################################
Acpin119:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin119:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin119:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain119:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bphiin119:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return c2*x1 + a1*x2 + b1*x2 + a1*c1*x2 + b1*c1*x2 + c2*y1 + a1*y2 + b1*y2 + c1*y2 + a1*c1*y2 + b1*c1*y2 + c2*z1 + a1*c1*z2 + b1*c1*z2;
end;
#####################################################################
Bzxyin119:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*z1 + c1*x2*z1 + y2*z1 + c1*y2*z1 + c1*x2*z2 + c1*y2*z2 + c1*z1*z2;
end;
#####################################################################
C1in119:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return b2*c1*c3*x1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + b2*c2*c3*x1 + b1*b2*c2*c3*x1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + (b2*c3*x1*(1 + x1))/2 + (b1*b2*c3*x1*(1 + x1))/2 + (b1*b2*c1*c3*x1*(1 + x1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1))/2 + (b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + b1*c3*x2 + b2*c1*c3*x2 + b1*b2*c1*c3*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*b2*c2*c3*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c3*x1*x2 + b2*c3*x1*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b2*c2*c3*x1*x2 + b1*b2*c2*c3*x1*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (b1*c3*x2*(1 + x2))/2 + (b1*b2*c3*x2*(1 + x2))/2 + (b1*c1*c3*x2*(1 + x2))/2 + (b2*c1*c3*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2))/2 + (c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + b1*b2*x3 + b2*c1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b1*c2*x3 + c1*c2*x3 + b2*c1*c2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3 + b1*b2*c2*c3*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b2*x1*x3 + b2*c1*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3 + b2*c2*x1*x3 + b1*c1*c2*x1*x3 + b1*b2*c1*c2*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + c1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b1*c2*x2*x3 + b1*c1*c2*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + b1*b2*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3 + b1*c2*c3*x2*x3 + b1*b2*c2*c3*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + c1*x1*x2*x3 + b3*c1*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*x3 + c2*x1*x2*x3 + b1*c2*x1*x2*x3 + c1*c2*x1*x2*x3 + b1*c1*c2*x1*x2*x3 + b2*c1*c2*x1*x2*x3 + b3*c1*c2*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + c1*c3*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + c2*c3*x1*x2*x3 + b1*c2*c3*x1*x2*x3 + b2*c2*c3*x1*x2*x3 + b3*c2*c3*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + (b1*b2*c2*x3*(1 + x3))/2 + (c1*c2*x3*(1 + x3))/2 + (b1*b2*c1*c2*x3*(1 + x3))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b1*b2*c3*x3*(1 + x3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*(1 + x3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + (b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3))/2 + b2*c3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + b2*c2*c3*y1 + b1*b2*c2*c3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b2*c3*x1*y1 + b1*b2*c1*c3*x1*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1 + b2*c2*c3*x1*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + c3*x2*y1 + b1*c3*x2*y1 + c1*c3*x2*y1 + b2*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c3*x1*x2*y1 + b1*c1*c3*x1*x2*y1 + b2*c1*c3*x1*x2*y1 + b1*b2*c1*c3*x1*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y1 + b2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1 + c2*x3*y1 + b1*c2*x3*y1 + c1*c2*x3*y1 + b1*b2*c1*c2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b2*c3*x3*y1 + b2*c1*c3*x3*y1 + b1*b2*c1*c3*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b1*b2*c2*c3*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*c1*c2*x1*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y1 + b2*c3*x1*x3*y1 + b1*b2*c1*c3*x1*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y1 + c2*c3*x1*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y1 + b3*c1*x2*x3*y1 + b1*c2*x2*x3*y1 + b1*c1*c2*x2*x3*y1 + b2*c1*c2*x2*x3*y1 + b3*c1*c2*x2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c3*x2*x3*y1 + b2*c3*x2*x3*y1 + c1*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b1*c2*c3*x2*x3*y1 + b2*c2*c3*x2*x3*y1 + b3*c2*c3*x2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + (b2*c3*y1*(1 + y1))/2 + (b1*b2*c3*y1*(1 + y1))/2 + (b1*b2*c1*c3*y1*(1 + y1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1))/2 + (b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + b1*c1*c3*y2 + b2*c1*c3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*b2*c2*c3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c3*x1*y2 + b1*c3*x1*y2 + b2*c3*x1*y2 + c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b2*c2*c3*x1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + c3*x1*x2*y2 + b1*c3*x1*x2*y2 + b2*c3*x1*x2*y2 + b2*c1*c3*x1*x2*y2 + b1*b2*c1*c3*x1*x2*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + c1*x3*y2 + b1*c1*x3*y2 + b2*c1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + c1*c2*x3*y2 + b1*c1*c2*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2 + b1*c3*x3*y2 + c1*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + b1*b2*c2*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + x1*x3*y2 + c1*x1*x3*y2 + b3*c1*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*y2 + b1*c1*c2*x1*x3*y2 + b2*c1*c2*x1*x3*y2 + b3*c1*c2*x1*x3*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c3*x1*x3*y2 + c1*c3*x1*x3*y2 + b1*c1*c3*x1*x3*y2 + b1*b2*c1*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*c2*c3*x1*x3*y2 + b3*c2*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*x2*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y2 + b1*c2*x2*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + b1*c3*x2*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y2 + c3*y1*y2 + c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*b2*c2*c3*y1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c3*x1*y1*y2 + b1*c1*c3*x1*y1*y2 + b2*c1*c3*x1*y1*y2 + b1*b2*c1*c3*x1*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y2 + b1*c3*x2*y1*y2 + b2*c3*x2*y1*y2 + c1*c3*x2*y1*y2 + b1*c1*c3*x2*y1*y2 + b2*c1*c3*x2*y1*y2 + b1*b2*c1*c3*x2*y1*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + b1*x3*y1*y2 + c1*x3*y1*y2 + b1*c1*x3*y1*y2 + b3*c1*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y2 + c2*x3*y1*y2 + b1*c2*x3*y1*y2 + c1*c2*x3*y1*y2 + b2*c1*c2*x3*y1*y2 + b3*c1*c2*x3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c3*x3*y1*y2 + b2*c3*x3*y1*y2 + b1*b2*c1*c3*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b2*c2*c3*x3*y1*y2 + b3*c2*c3*x3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + (b1*b2*c3*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*(1 + y2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + b1*b2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3 + c1*c2*y3 + b2*c1*c2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*b2*c3*y3 + b1*b2*c2*c3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b2*c1*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3 + b2*c2*x1*y3 + b1*b2*c1*c2*x1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b2*c1*c3*x1*y3 + b1*b2*c1*c3*x1*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3 + b2*c2*c3*x1*y3 + b1*b2*c2*c3*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + b1*c2*x2*y3 + b1*c1*c2*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3 + b1*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + b1*b2*c2*c3*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + x1*x2*y3 + c1*x1*x2*y3 + b3*c1*x1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*y3 + b1*c1*c2*x1*x2*y3 + b2*c1*c2*x1*x2*y3 + b1*b2*c1*c2*x1*x2*y3 + b3*c1*c2*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + c3*x1*x2*y3 + b1*c3*x1*x2*y3 + b2*c3*x1*x2*y3 + c1*c3*x1*x2*y3 + b1*c1*c3*x1*x2*y3 + b1*b2*c1*c3*x1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + c2*c3*x1*x2*y3 + b1*c2*c3*x1*x2*y3 + b2*c2*c3*x1*x2*y3 + b3*c2*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3 + b1*b2*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3 + b1*b2*c2*c3*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*y3 + c2*x1*x3*y3 + b1*c2*x1*x3*y3 + b1*b2*c2*x1*x3*y3 + c1*c2*x1*x3*y3 + b1*b2*c1*c2*x1*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c1*c3*x1*x3*y3 + b1*b2*c1*c3*x1*x3*y3 + c2*c3*x1*x3*y3 + b1*c2*c3*x1*x3*y3 + b2*c2*c3*x1*x3*y3 + b1*b2*c2*c3*x1*x3*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*c2*x2*x3*y3 + b1*b2*c2*x2*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y3 + b1*c3*x2*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b1*b2*c2*c3*x2*x3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y3 + b2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3 + b1*c2*y1*y3 + c1*c2*y1*y3 + b1*c1*c2*y1*y3 + b1*b2*c1*c2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*b2*c1*c3*y1*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3 + b2*c2*c3*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*c1*x1*y1*y3 + c2*x1*y1*y3 + b2*c2*x1*y1*y3 + b1*c1*c2*x1*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*y3 + b1*b2*c1*c3*x1*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*y3 + c2*c3*x1*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y3 + x2*y1*y3 + b1*x2*y1*y3 + b1*c1*x2*y1*y3 + b3*c1*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + b1*c2*x2*y1*y3 + b2*c2*x2*y1*y3 + c1*c2*x2*y1*y3 + b2*c1*c2*x2*y1*y3 + b1*b2*c1*c2*x2*y1*y3 + b3*c1*c2*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c3*x2*y1*y3 + b1*c3*x2*y1*y3 + b2*c3*x2*y1*y3 + c1*c3*x2*y1*y3 + b1*b2*c1*c3*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + b1*c2*c3*x2*y1*y3 + b2*c2*c3*x2*y1*y3 + b3*c2*c3*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*x3*y1*y3 + b2*c1*x3*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y3 + b1*c2*x3*y1*y3 + b2*c2*x3*y1*y3 + b1*b2*c2*x3*y1*y3 + c1*c2*x3*y1*y3 + b1*c1*c2*x3*y1*y3 + b1*b2*c1*c2*x3*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b1*b2*c1*c3*x3*y1*y3 + c2*c3*x3*y1*y3 + b1*b2*c2*c3*x3*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3 + b1*c2*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + b1*b2*c3*y2*y3 + c1*c3*y2*y3 + b1*c1*c3*y2*y3 + b2*c1*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b1*c2*c3*y2*y3 + b1*b2*c2*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + x1*y2*y3 + c1*x1*y2*y3 + b1*c1*x1*y2*y3 + b2*c1*x1*y2*y3 + b3*c1*x1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*y3 + c2*x1*y2*y3 + b2*c2*x1*y2*y3 + c1*c2*x1*y2*y3 + b1*c1*c2*x1*y2*y3 + b2*c1*c2*x1*y2*y3 + b1*b2*c1*c2*x1*y2*y3 + b3*c1*c2*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + c3*x1*y2*y3 + c1*c3*x1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + b2*c2*c3*x1*y2*y3 + b3*c2*c3*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*y3 + c1*c2*x2*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + c1*c3*x2*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2*y3 + b1*x3*y2*y3 + c1*x3*y2*y3 + b1*c1*x3*y2*y3 + b2*c1*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*b2*c2*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*y3 + b1*c3*x3*y2*y3 + c1*c3*x3*y2*y3 + b1*c1*c3*x3*y2*y3 + b2*c1*c3*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b1*c2*c3*x3*y2*y3 + b1*b2*c2*c3*x3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*y3 + c1*y1*y2*y3 + b1*c1*y1*y2*y3 + b2*c1*y1*y2*y3 + b3*c1*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*y3 + c2*y1*y2*y3 + b1*c1*c2*y1*y2*y3 + b2*c1*c2*y1*y2*y3 + b1*b2*c1*c2*y1*y2*y3 + b3*c1*c2*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b2*c2*c3*y1*y2*y3 + b3*c2*c3*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*(1 + y3))/2 + (b1*b2*c2*y3*(1 + y3))/2 + (c1*c2*y3*(1 + y3))/2 + (b1*c1*c2*y3*(1 + y3))/2 + (b1*b2*c1*c2*y3*(1 + y3))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*(1 + y3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*(1 + y3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b1*b2*c3*y3*(1 + y3))/2 + (b1*c2*c3*y3*(1 + y3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*(1 + y3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + (b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3))/2 + b2*c1*c3*z1 + b1*b2*c1*c3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + b2*c2*c3*z1 + b1*b2*c2*c3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*b2*c3*x1*z1 + b2*c1*c3*x1*z1 + b2*c2*c3*x1*z1 + b1*b2*c2*c3*x1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + b2*c2*c3*x2*z1 + b1*b2*c2*c3*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b3*x1*x2*z1 + b1*c3*x1*x2*z1 + b2*c3*x1*x2*z1 + c1*c3*x1*x2*z1 + b1*c1*c3*x1*x2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z1 + b2*c1*x3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1 + b1*c2*x3*z1 + b2*c2*x3*z1 + b1*b2*c2*x3*z1 + b1*c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*x1*x3*z1 + b1*c2*x1*x3*z1 + b2*c2*x1*x3*z1 + b3*c2*x1*x3*z1 + b1*c1*c2*x1*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z1 + b2*c1*c3*x1*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b3*x2*x3*z1 + b3*c1*x2*x3*z1 + b2*c2*x2*x3*z1 + b3*c2*x2*x3*z1 + c1*c2*x2*x3*z1 + b1*c1*c2*x2*x3*z1 + b2*c1*c2*x2*x3*z1 + b3*c1*c2*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c3*x2*x3*z1 + b2*c3*x2*x3*z1 + b1*c1*c3*x2*x3*z1 + b2*c1*c3*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + c2*c3*x2*x3*z1 + b1*c2*c3*x2*x3*z1 + b2*c2*c3*x2*x3*z1 + b3*c2*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*c3*y1*z1 + b1*b2*c3*y1*z1 + b2*c2*c3*y1*z1 + b1*b2*c2*c3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + b2*c3*x1*y1*z1 + b1*b2*c3*x1*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z1 + b3*x2*y1*z1 + b1*c3*x2*y1*z1 + b1*b2*c3*x2*y1*z1 + c1*c3*x2*y1*z1 + b2*c1*c3*x2*y1*z1 + b1*b2*c1*c3*x2*y1*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*x3*y1*z1 + b2*c2*x3*y1*z1 + b3*c2*x3*y1*z1 + c1*c2*x3*y1*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + b2*c3*x3*y1*z1 + b1*b2*c3*x3*y1*z1 + b2*c1*c3*x3*y1*z1 + b1*b2*c1*c3*x3*y1*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z1 + b1*c2*c3*x3*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b1*c3*y2*z1 + b1*b2*c3*y2*z1 + c1*c3*y2*z1 + b2*c1*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1 + b2*c2*c3*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b3*x1*y2*z1 + b1*b2*c3*x1*y2*z1 + c1*c3*x1*y2*z1 + b1*c1*c3*x1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + c3*x2*y2*z1 + b1*c3*x2*y2*z1 + b1*b2*c3*x2*y2*z1 + b2*c1*c3*x2*y2*z1 + b1*b2*c1*c3*x2*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + b3*x3*y2*z1 + b3*c1*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b2*c2*x3*y2*z1 + b3*c2*x3*y2*z1 + b2*c1*c2*x3*y2*z1 + b3*c1*c2*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + c3*x3*y2*z1 + b2*c3*x3*y2*z1 + b1*b2*c3*x3*y2*z1 + b2*c1*c3*x3*y2*z1 + b1*b2*c1*c3*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b2*c2*c3*x3*y2*z1 + b3*c2*c3*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b3*y1*y2*z1 + b1*c3*y1*y2*z1 + b2*c3*y1*y2*z1 + c1*c3*y1*y2*z1 + b2*c1*c3*y1*y2*z1 + b1*b2*c1*c3*y1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + b2*y3*z1 + b2*c1*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1 + b2*c2*y3*z1 + b1*b2*c2*y3*z1 + b1*b2*c1*c2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b2*c3*y3*z1 + b1*b2*c3*y3*z1 + b2*c1*c3*y3*z1 + b1*b2*c1*c3*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1 + b2*c2*c3*y3*z1 + b1*b2*c2*c3*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z1 + c2*x1*y3*z1 + b2*c2*x1*y3*z1 + b1*b2*c2*x1*y3*z1 + b3*c2*x1*y3*z1 + b1*c1*c2*x1*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b1*b2*c3*x1*y3*z1 + b2*c1*c3*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + x2*y3*z1 + b3*x2*y3*z1 + b3*c1*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z1 + b1*c2*x2*y3*z1 + b2*c2*x2*y3*z1 + b1*b2*c2*x2*y3*z1 + b3*c2*x2*y3*z1 + b1*c1*c2*x2*y3*z1 + b2*c1*c2*x2*y3*z1 + b1*b2*c1*c2*x2*y3*z1 + b3*c1*c2*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + c3*x2*y3*z1 + b1*c3*x2*y3*z1 + b1*b2*c3*x2*y3*z1 + b2*c1*c3*x2*y3*z1 + b1*b2*c1*c3*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + c2*c3*x2*y3*z1 + b1*c2*c3*x2*y3*z1 + b2*c2*c3*x2*y3*z1 + b3*c2*c3*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z1 + b1*c2*x3*y3*z1 + c1*c2*x3*y3*z1 + b1*b2*c1*c2*x3*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c3*x3*y3*z1 + b1*b2*c3*x3*y3*z1 + b2*c1*c3*x3*y3*z1 + b1*b2*c1*c3*x3*y3*z1 + c2*c3*x3*y3*z1 + b1*c2*c3*x3*y3*z1 + b2*c2*c3*x3*y3*z1 + b1*b2*c2*c3*x3*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c1*y1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z1 + b1*c2*y1*y3*z1 + b1*b2*c2*y1*y3*z1 + b3*c2*y1*y3*z1 + c1*c2*y1*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b2*c1*c3*y1*y3*z1 + b1*b2*c1*c3*y1*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z1 + b1*c2*c3*y1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b1*y2*y3*z1 + b2*y2*y3*z1 + b3*y2*y3*z1 + c1*y2*y3*z1 + b1*c1*y2*y3*z1 + b2*c1*y2*y3*z1 + b3*c1*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z1 + c2*y2*y3*z1 + b1*b2*c2*y2*y3*z1 + b3*c2*y2*y3*z1 + c1*c2*y2*y3*z1 + b2*c1*c2*y2*y3*z1 + b1*b2*c1*c2*y2*y3*z1 + b3*c1*c2*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*c3*y2*y3*z1 + b2*c3*y2*y3*z1 + b1*c1*c3*y2*y3*z1 + b2*c1*c3*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*c2*c3*y2*y3*z1 + b3*c2*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + (b2*c3*z1*(1 + z1))/2 + (b2*c1*c3*z1*(1 + z1))/2 + (b1*b2*c1*c3*z1*(1 + z1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*(1 + z1))/2 + (b2*c2*c3*z1*(1 + z1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*(1 + z1))/2 + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + b1*b2*c3*z2 + b1*c1*c3*z2 + b1*b2*c1*c3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c3*x1*z2 + b2*c2*c3*x1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*b2*c3*x2*z2 + b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2 + b1*b2*c2*c3*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b3*x1*x2*z2 + b3*c1*x1*x2*z2 + b3*c2*x1*x2*z2 + c3*x1*x2*z2 + b1*c3*x1*x2*z2 + b3*c3*x1*x2*z2 + c1*c3*x1*x2*z2 + b2*c1*c3*x1*x2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b2*c2*c3*x1*x2*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + b1*c1*x3*z2 + b1*b2*c1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2 + b1*c1*c2*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2 + b1*c1*c3*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z2 + b1*b2*c2*c3*x3*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + x1*x3*z2 + b2*x1*x3*z2 + c1*x1*x3*z2 + b2*c1*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z2 + b1*c2*x1*x3*z2 + b2*c2*x1*x3*z2 + b3*c2*x1*x3*z2 + b1*c1*c2*x1*x3*z2 + b2*c1*c2*x1*x3*z2 + b3*c1*c2*x1*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + c3*x1*x3*z2 + b1*c3*x1*x3*z2 + b2*c3*x1*x3*z2 + b1*b2*c3*x1*x3*z2 + b3*c3*x1*x3*z2 + c1*c3*x1*x3*z2 + b1*b2*c1*c3*x1*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b1*c2*c3*x1*x3*z2 + b2*c2*c3*x1*x3*z2 + b3*c2*c3*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c1*x2*x3*z2 + b1*c1*x2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*z2 + b1*c2*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*b2*c3*x2*x3*z2 + c1*c3*x2*x3*z2 + b1*c1*c3*x2*x3*z2 + b2*c1*c3*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z2 + b1*c3*y1*z2 + b1*b2*c3*y1*z2 + c1*c3*y1*z2 + b1*c1*c3*y1*z2 + b2*c1*c3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2 + b1*b2*c2*c3*y1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c3*x1*y1*z2 + b1*c3*x1*y1*z2 + b2*c3*x1*y1*z2 + b1*b2*c3*x1*y1*z2 + b1*c1*c3*x1*y1*z2 + b2*c1*c3*x1*y1*z2 + b1*b2*c1*c3*x1*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z2 + b3*x2*y1*z2 + b3*c1*x2*y1*z2 + b3*c2*x2*y1*z2 + b1*c3*x2*y1*z2 + b2*c3*x2*y1*z2 + b1*b2*c3*x2*y1*z2 + b3*c3*x2*y1*z2 + c1*c3*x2*y1*z2 + b2*c1*c3*x2*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b2*c2*c3*x2*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + x3*y1*z2 + b1*x3*y1*z2 + b2*x3*y1*z2 + c1*x3*y1*z2 + b2*c1*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z2 + c2*x3*y1*z2 + b1*c2*x3*y1*z2 + b2*c2*x3*y1*z2 + b3*c2*x3*y1*z2 + c1*c2*x3*y1*z2 + b2*c1*c2*x3*y1*z2 + b3*c1*c2*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c3*x3*y1*z2 + b3*c3*x3*y1*z2 + c1*c3*x3*y1*z2 + b1*b2*c1*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + c2*c3*x3*y1*z2 + b1*c2*c3*x3*y1*z2 + b2*c2*c3*x3*y1*z2 + b3*c2*c3*x3*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b3*x1*y2*z2 + b3*c1*x1*y2*z2 + b3*c2*x1*y2*z2 + c3*x1*y2*z2 + b1*c3*x1*y2*z2 + b1*b2*c3*x1*y2*z2 + b3*c3*x1*y2*z2 + c1*c3*x1*y2*z2 + b1*b2*c1*c3*x1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b2*c2*c3*x1*y2*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b1*b2*c3*x2*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z2 + b1*c1*x3*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z2 + b1*c1*c2*x3*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + c1*c3*x3*y2*z2 + b1*c1*c3*x3*y2*z2 + b2*c1*c3*x3*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z2 + b3*y1*y2*z2 + b3*c1*y1*y2*z2 + b3*c2*y1*y2*z2 + b1*c3*y1*y2*z2 + b2*c3*y1*y2*z2 + b3*c3*y1*y2*z2 + b1*c1*c3*y1*y2*z2 + b1*b2*c1*c3*y1*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b2*c2*c3*y1*y2*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b1*c1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z2 + b1*c1*c2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + b1*b2*c1*c3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*x1*y3*z2 + b2*x1*y3*z2 + c1*x1*y3*z2 + b2*c1*x1*y3*z2 + b1*b2*c1*x1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + c2*x1*y3*z2 + b2*c2*x1*y3*z2 + b3*c2*x1*y3*z2 + c1*c2*x1*y3*z2 + b1*c1*c2*x1*y3*z2 + b2*c1*c2*x1*y3*z2 + b1*b2*c1*c2*x1*y3*z2 + b3*c1*c2*x1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + c3*x1*y3*z2 + b1*b2*c3*x1*y3*z2 + b3*c3*x1*y3*z2 + c1*c3*x1*y3*z2 + b1*c1*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b1*c2*c3*x1*y3*z2 + b2*c2*c3*x1*y3*z2 + b3*c2*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*x2*y3*z2 + c1*x2*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z2 + b1*c1*c2*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c3*x2*y3*z2 + b1*b2*c3*x2*y3*z2 + c1*c3*x2*y3*z2 + b2*c1*c3*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z2 + b1*b2*x3*y3*z2 + b1*b2*c1*x3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z2 + b1*b2*c2*x3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z2 + b1*b2*c3*x3*y3*z2 + b1*b2*c1*c3*x3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3*z2 + b1*y1*y3*z2 + c1*y1*y3*z2 + b1*c1*y1*y3*z2 + b2*c1*y1*y3*z2 + b1*b2*c1*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + c2*y1*y3*z2 + b1*c2*y1*y3*z2 + b3*c2*y1*y3*z2 + b1*c1*c2*y1*y3*z2 + b2*c1*c2*y1*y3*z2 + b1*b2*c1*c2*y1*y3*z2 + b3*c1*c2*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*c3*y1*y3*z2 + b3*c3*y1*y3*z2 + c1*c3*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + c2*c3*y1*y3*z2 + b1*c2*c3*y1*y3*z2 + b2*c2*c3*y1*y3*z2 + b3*c2*c3*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z2 + c1*c2*y2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + b2*c1*c3*y2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z2 + b1*c3*z1*z2 + b2*c3*z1*z2 + b1*b2*c3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2 + b2*c2*c3*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + c3*x1*z1*z2 + b1*c3*x1*z1*z2 + c1*c3*x1*z1*z2 + b1*c1*c3*x1*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z2 + b3*c1*x2*z1*z2 + b3*c2*x2*z1*z2 + b1*c3*x2*z1*z2 + b2*c3*x2*z1*z2 + b3*c3*x2*z1*z2 + c1*c3*x2*z1*z2 + b2*c1*c3*x2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b2*c2*c3*x2*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*x3*z1*z2 + b2*c1*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z2 + b1*c2*x3*z1*z2 + b2*c1*c2*x3*z1*z2 + b3*c1*c2*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*c3*x3*z1*z2 + b2*c3*x3*z1*z2 + b3*c3*x3*z1*z2 + b1*c1*c3*x3*z1*z2 + b2*c1*c3*x3*z1*z2 + b1*b2*c1*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b1*c2*c3*x3*z1*z2 + b2*c2*c3*x3*z1*z2 + b3*c2*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c3*y1*z1*z2 + c1*c3*y1*z1*z2 + b2*c1*c3*y1*z1*z2 + b1*b2*c1*c3*y1*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b3*c1*y2*z1*z2 + b3*c2*y2*z1*z2 + b1*c3*y2*z1*z2 + b3*c3*y2*z1*z2 + c1*c3*y2*z1*z2 + b1*b2*c1*c3*y2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b2*c2*c3*y2*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + y3*z1*z2 + b1*b2*y3*z1*z2 + b1*c1*y3*z1*z2 + b2*c1*y3*z1*z2 + b1*b2*c1*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z2 + b1*c2*y3*z1*z2 + b1*b2*c2*y3*z1*z2 + c1*c2*y3*z1*z2 + b2*c1*c2*y3*z1*z2 + b1*b2*c1*c2*y3*z1*z2 + b3*c1*c2*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*b2*c3*y3*z1*z2 + b3*c3*y3*z1*z2 + b2*c1*c3*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b1*c2*c3*y3*z1*z2 + b2*c2*c3*y3*z1*z2 + b3*c2*c3*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + (b2*c1*c3*z2*(1 + z2))/2 + (b1*b2*c1*c3*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*(1 + z2))/2 + (b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + b1*b2*c1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z3 + b2*c1*c2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b1*b2*x1*z3 + b1*b2*c1*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z3 + b1*b2*c2*x1*z3 + b1*b2*c1*c2*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*b2*c1*c3*x1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + c1*x2*z3 + b1*c1*x2*z3 + b2*c1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z3 + b1*c1*c2*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*c3*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z3 + b1*c2*c3*x2*z3 + b1*b2*c2*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b3*x1*x2*z3 + c1*x1*x2*z3 + b1*c1*x1*x2*z3 + b3*c1*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + b1*b2*c2*x1*x2*z3 + b3*c2*x1*x2*z3 + c1*c2*x1*x2*z3 + b1*b2*c1*c2*x1*x2*z3 + b3*c1*c2*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c3*x1*x2*z3 + b1*c3*x1*x2*z3 + b1*b2*c3*x1*x2*z3 + b3*c3*x1*x2*z3 + c1*c3*x1*x2*z3 + b1*b2*c1*c3*x1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + c2*c3*x1*x2*z3 + b1*c2*c3*x1*x2*z3 + b3*c2*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z3 + b1*c2*x3*z3 + c1*c2*x3*z3 + b1*c1*c2*x3*z3 + b2*c1*c2*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b2*c1*x1*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + c2*x1*x3*z3 + b1*c2*x1*x3*z3 + c1*c2*x1*x3*z3 + b2*c1*c2*x1*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b2*c3*x1*x3*z3 + b1*b2*c3*x1*x3*z3 + b1*b2*c1*c3*x1*x3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z3 + c2*c3*x1*x3*z3 + b1*c2*c3*x1*x3*z3 + b2*c2*c3*x1*x3*z3 + b1*b2*c2*c3*x1*x3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z3 + b1*c3*x2*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z3 + b1*c2*c3*x2*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z3 + b1*b2*y1*z3 + b1*b2*c1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z3 + b1*c2*y1*z3 + b2*c2*y1*z3 + b1*b2*c2*y1*z3 + c1*c2*y1*z3 + b1*c1*c2*y1*z3 + b1*b2*c1*c2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*c1*c3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z3 + b1*b2*c2*c3*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*x1*y1*z3 + b2*c1*x1*y1*z3 + b1*b2*c1*x1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y1*z3 + c2*x1*y1*z3 + b1*c1*c2*x1*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*z3 + b2*c3*x1*y1*z3 + b1*b2*c1*c3*x1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*z3 + c2*c3*x1*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + x2*y1*z3 + b1*x2*y1*z3 + b2*x2*y1*z3 + b1*b2*x2*y1*z3 + b3*x2*y1*z3 + c1*x2*y1*z3 + b1*b2*c1*x2*y1*z3 + b3*c1*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b3*c2*x2*y1*z3 + c1*c2*x2*y1*z3 + b1*c1*c2*x2*y1*z3 + b3*c1*c2*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + c3*x2*y1*z3 + b2*c3*x2*y1*z3 + b3*c3*x2*y1*z3 + b1*c1*c3*x2*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + b1*c2*c3*x2*y1*z3 + b3*c2*c3*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*x3*y1*z3 + b1*b2*c1*x3*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b1*c2*x3*y1*z3 + b1*b2*c2*x3*y1*z3 + c1*c2*x3*y1*z3 + b1*c1*c2*x3*y1*z3 + b2*c1*c2*x3*y1*z3 + b1*b2*c1*c2*x3*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b2*c3*x3*y1*z3 + b2*c1*c3*x3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z3 + c2*c3*x3*y1*z3 + b1*b2*c2*c3*x3*y1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b1*c1*y2*z3 + b2*c1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z3 + b1*b2*c2*y2*z3 + b2*c1*c2*y2*z3 + b1*b2*c1*c2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c3*y2*z3 + b1*c1*c3*y2*z3 + b2*c1*c3*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + x1*y2*z3 + b3*x1*y2*z3 + b1*c1*x1*y2*z3 + b2*c1*x1*y2*z3 + b3*c1*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*z3 + b2*c2*x1*y2*z3 + b3*c2*x1*y2*z3 + b1*b2*c1*c2*x1*y2*z3 + b3*c1*c2*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b2*c3*x1*y2*z3 + b3*c3*x1*y2*z3 + c1*c3*x1*y2*z3 + b1*c1*c3*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b3*c2*c3*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*x2*y2*z3 + b1*c1*x2*y2*z3 + b2*c1*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b1*c2*x2*y2*z3 + b1*b2*c2*x2*y2*z3 + c1*c2*x2*y2*z3 + b1*c1*c2*x2*y2*z3 + b2*c1*c2*x2*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + b1*c3*x2*y2*z3 + b1*b2*c3*x2*y2*z3 + c1*c3*x2*y2*z3 + b1*c1*c3*x2*y2*z3 + b2*c1*c3*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2*z3 + b1*x3*y2*z3 + c1*x3*y2*z3 + b1*c1*c2*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*c3*x3*y2*z3 + b1*b2*c3*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z3 + y1*y2*z3 + b1*y1*y2*z3 + b2*y1*y2*z3 + b1*b2*y1*y2*z3 + b3*y1*y2*z3 + b1*c1*y1*y2*z3 + b2*c1*y1*y2*z3 + b1*b2*c1*y1*y2*z3 + b3*c1*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + c2*y1*y2*z3 + b1*c2*y1*y2*z3 + b2*c2*y1*y2*z3 + b1*b2*c2*y1*y2*z3 + b3*c2*y1*y2*z3 + b3*c1*c2*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c3*y1*y2*z3 + b1*b2*c3*y1*y2*z3 + b3*c3*y1*y2*z3 + c1*c3*y1*y2*z3 + b1*c1*c3*y1*y2*z3 + b1*b2*c1*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b3*c2*c3*y1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*c1*c2*y3*z3 + b2*c1*c2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z3 + b2*c2*x1*y3*z3 + b2*c1*c2*x1*y3*z3 + b1*b2*c1*c2*x1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b2*c3*x1*y3*z3 + b2*c1*c3*x1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z3 + b1*c3*x2*y3*z3 + b1*b2*c3*x2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*c2*c3*x2*y3*z3 + b1*b2*c2*c3*x2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z3 + b1*c1*c2*x3*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z3 + b1*b2*c3*x3*y3*z3 + b1*c2*c3*x3*y3*z3 + b1*b2*y1*y3*z3 + b1*b2*c1*y1*y3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z3 + b1*b2*c2*y1*y3*z3 + b2*c1*c2*y1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b2*c3*y1*y3*z3 + b1*b2*c3*y1*y3*z3 + b2*c1*c3*y1*y3*z3 + b1*b2*c1*c3*y1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b1*y2*y3*z3 + c1*y2*y3*z3 + b1*c1*y2*y3*z3 + b2*c1*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*c2*y2*y3*z3 + b1*c1*c2*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*c3*y2*y3*z3 + c1*c3*y2*y3*z3 + b1*c1*c3*y2*y3*z3 + b2*c1*c3*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*c2*c3*y2*y3*z3 + b1*b2*c2*c3*y2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z3 + b1*b2*c1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z3 + b1*b2*c1*c2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*c3*z1*z3 + b1*b2*c1*c3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*x1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z1*z3 + b3*c2*x1*z1*z3 + b1*c1*c2*x1*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z1*z3 + b2*c1*c3*x1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + x2*z1*z3 + b1*x2*z1*z3 + c1*x2*z1*z3 + b1*c1*x2*z1*z3 + b3*c1*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + c2*x2*z1*z3 + c1*c2*x2*z1*z3 + b1*b2*c1*c2*x2*z1*z3 + b3*c1*c2*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + c3*x2*z1*z3 + b2*c3*x2*z1*z3 + b3*c3*x2*z1*z3 + b1*c1*c3*x2*z1*z3 + b2*c1*c3*x2*z1*z3 + b1*b2*c1*c3*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + c2*c3*x2*z1*z3 + b1*c2*c3*x2*z1*z3 + b3*c2*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*x3*z1*z3 + b2*c1*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + b1*c2*x3*z1*z3 + b2*c2*x3*z1*z3 + c1*c2*x3*z1*z3 + b2*c1*c2*x3*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b2*c3*x3*z1*z3 + b1*b2*c1*c3*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z3 + c2*c3*x3*z1*z3 + b1*c2*c3*x3*z1*z3 + b2*c2*c3*x3*z1*z3 + b1*b2*c2*c3*x3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*y1*z1*z3 + b1*b2*y1*z1*z3 + b2*c1*y1*z1*z3 + b1*b2*c1*y1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z1*z3 + c2*y1*z1*z3 + b1*c2*y1*z1*z3 + b3*c2*y1*z1*z3 + c1*c2*y1*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + b2*c3*y1*z1*z3 + b1*b2*c3*y1*z1*z3 + b2*c1*c3*y1*z1*z3 + b1*b2*c1*c3*y1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z3 + b1*c2*c3*y1*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + y2*z1*z3 + b1*y2*z1*z3 + b2*y2*z1*z3 + c1*y2*z1*z3 + b3*c1*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + c2*y2*z1*z3 + b1*b2*c2*y2*z1*z3 + b1*c1*c2*y2*z1*z3 + b1*b2*c1*c2*y2*z1*z3 + b3*c1*c2*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + c3*y2*z1*z3 + b1*c3*y2*z1*z3 + b2*c3*y2*z1*z3 + b3*c3*y2*z1*z3 + b2*c1*c3*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b3*c2*c3*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z3 + b1*b2*c2*y3*z1*z3 + b2*c1*c2*y3*z1*z3 + b1*b2*c1*c2*y3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b2*c1*c3*y3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b1*b2*c1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b1*b2*c2*z2*z3 + b1*c1*c2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*c3*z2*z3 + b1*b2*c1*c3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*z3 + b1*b2*c2*c3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*x1*z2*z3 + b1*c1*x1*z2*z3 + b2*c1*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*c2*x1*z2*z3 + b2*c2*x1*z2*z3 + b1*b2*c2*x1*z2*z3 + b1*b2*c1*c2*x1*z2*z3 + b3*c1*c2*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + c3*x1*z2*z3 + b1*c3*x1*z2*z3 + b2*c3*x1*z2*z3 + c1*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*c2*c3*x1*z2*z3 + b3*c2*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b1*x2*z2*z3 + b1*b2*c1*x2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*b2*c2*x2*z2*z3 + b1*b2*c1*c2*x2*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c3*x2*z2*z3 + c1*c3*x2*z2*z3 + b1*c1*c3*x2*z2*z3 + b2*c1*c3*x2*z2*z3 + b1*b2*c1*c3*x2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2*z3 + b1*b2*x3*z2*z3 + b1*c1*x3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2*z3 + b1*b2*c2*x3*z2*z3 + b1*c1*c2*x3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*b2*c3*x3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2*z3 + y1*z2*z3 + b1*c1*y1*z2*z3 + b2*c1*y1*z2*z3 + b1*b2*c1*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + c2*y1*z2*z3 + b2*c2*y1*z2*z3 + b3*c1*c2*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + c3*y1*z2*z3 + b1*c1*c3*y1*z2*z3 + b1*b2*c1*c3*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + c2*c3*y1*z2*z3 + b1*c2*c3*y1*z2*z3 + b3*c2*c3*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b1*b2*c1*y2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z2*z3 + c1*c2*y2*z2*z3 + b2*c1*c2*y2*z2*z3 + b1*b2*c1*c2*y2*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + b1*b2*c1*c3*y2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z2*z3 + b1*b2*y3*z2*z3 + b1*b2*c1*y3*z2*z3 + b1*b2*c2*y3*z2*z3 + b1*c1*c2*y3*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*b2*c3*y3*z2*z3 + b1*b2*c1*c3*y3*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2*z3 + b2*z1*z2*z3 + b1*c1*z1*z2*z3 + b2*c1*z1*z2*z3 + b1*b2*c1*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b2*c2*z1*z2*z3 + b1*b2*c2*z1*z2*z3 + b3*c2*z1*z2*z3 + b1*c1*c2*z1*z2*z3 + b1*b2*c1*c2*z1*z2*z3 + b3*c1*c2*z1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c3*z1*z2*z3 + b2*c3*z1*z2*z3 + b1*b2*c3*z1*z2*z3 + b1*c1*c3*z1*z2*z3 + b2*c1*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*c2*c3*z1*z2*z3 + b3*c2*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + (b1*b2*z3*(1 + z3))/2 + (b2*c1*z3*(1 + z3))/2 + (b1*c2*z3*(1 + z3))/2 + (b1*b2*c2*z3*(1 + z3))/2 + (c1*c2*z3*(1 + z3))/2 + (b1*c1*c2*z3*(1 + z3))/2 + (b1*b2*c1*c2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*b2*c3*z3*(1 + z3))/2 + (b1*c2*c3*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z3*(1 + z3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3*(1 + z3))/2;
end;
#####################################################################
C2in119:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return b2*c3*x1 + b2*c1*c3*x1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1 + b2*c2*c3*x1 + b1*b2*c2*c3*x1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + 2*b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1 + (b2*c3*x1*(1 + x1))/2 + (b1*b2*c3*x1*(1 + x1))/2 + (b1*b2*c1*c3*x1*(1 + x1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1))/2 + (b1*c2*c3*x1*(1 + x1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1))/2 + (b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*(1 + x1))/2 + (b2*c1*c3*x1^2*(1 + x1))/2 + (b1*c2*c3*x1^2*(1 + x1))/2 + (b2*c2*c3*x1^2*(1 + x1))/2 + b1*c3*x2 + b2*c1*c3*x2 + b1*b2*c1*c3*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2 + b1*b2*c2*c3*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2 + 2*b1*c3*x1*x2 + b2*c3*x1*x2 + c1*c3*x1*x2 + b1*c1*c3*x1*x2 + b2*c1*c3*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2 + b2*c2*c3*x1*x2 + b1*b2*c2*c3*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + 2*b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + 2*b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + 2*b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2 + (c1*c3*x1*(1 + x1)*x2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*x2)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*x2)/2 + (b1*c2*c3*x1*(1 + x1)*x2)/2 + (b2*c2*c3*x1*(1 + x1)*x2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*x2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*x2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*x2)/2 + (b1*c3*x2*(1 + x2))/2 + (b1*b2*c3*x2*(1 + x2))/2 + (b1*c1*c3*x2*(1 + x2))/2 + (b2*c1*c3*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2))/2 + (b1*c2*c3*x2*(1 + x2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2))/2 + (c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2))/2 + (c1*c3*x1*x2*(1 + x2))/2 + (b2*c1*c3*x1*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*(1 + x2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*(1 + x2))/2 + (b1*c2*c3*x1*x2*(1 + x2))/2 + (b2*c2*c3*x1*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*(1 + x2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*(1 + x2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*(1 + x2))/2 + (b1*c2*c3*x2^2*(1 + x2))/2 + b1*b2*x3 + b2*c1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3 + b1*c2*x3 + c1*c2*x3 + b2*c1*c2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3 + b1*b2*c2*c3*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3 + 2*b2*x1*x3 + 2*b2*c1*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3 + 2*b2*c2*x1*x3 + 2*b1*c1*c2*x1*x3 + b1*b2*c1*c2*x1*x3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3 + b2*c3*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3 + b1*c2*c3*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + 2*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3 + (b2*c1*x1*(1 + x1)*x3)/2 + (b2*c2*x1*(1 + x1)*x3)/2 + b1*x2*x3 + c1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3 + b1*c2*x2*x3 + b1*c1*c2*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3 + b1*c3*x2*x3 + b1*b2*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3 + b1*c2*c3*x2*x3 + b1*b2*c2*c3*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3 + c1*x1*x2*x3 + b3*c1*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*x3 + c2*x1*x2*x3 + b1*c2*x1*x2*x3 + b2*c2*x1*x2*x3 + 2*c1*c2*x1*x2*x3 + b1*c1*c2*x1*x2*x3 + 2*b2*c1*c2*x1*x2*x3 + b3*c1*c2*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*x3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*x3 + c1*c3*x1*x2*x3 + b2*c1*c3*x1*x2*x3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*x3 + 2*c2*c3*x1*x2*x3 + b1*c2*c3*x1*x2*x3 + 2*b2*c2*c3*x1*x2*x3 + b3*c2*c3*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*x3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*x3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*x3 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + (b1*b2*c2*x3*(1 + x3))/2 + (c1*c2*x3*(1 + x3))/2 + (b1*b2*c1*c2*x3*(1 + x3))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3))/2 + (b1*b2*c3*x3*(1 + x3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*(1 + x3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3))/2 + (b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3))/2 + (b1*c2*x1*x3*(1 + x3))/2 + (b1*c1*c2*x1*x3*(1 + x3))/2 + (b2*c1*c3*x1*x3*(1 + x3))/2 + (b2*c2*c3*x1*x3*(1 + x3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*(1 + x3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*(1 + x3))/2 + 2*b2*c3*y1 + b2*c1*c3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1 + b2*c2*c3*y1 + b1*b2*c2*c3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1 + 2*b2*c3*x1*y1 + b2*c1*c3*x1*y1 + b1*b2*c1*c3*x1*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1 + c2*c3*x1*y1 + b2*c2*c3*x1*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1 + (b2*c1*c3*x1*(1 + x1)*y1)/2 + (c2*c3*x1*(1 + x1)*y1)/2 + (b2*c2*c3*x1*(1 + x1)*y1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*y1)/2 + 2*c3*x2*y1 + b1*c3*x2*y1 + c1*c3*x2*y1 + 2*b2*c1*c3*x2*y1 + b1*b2*c1*c3*x2*y1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + 2*b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1 + c2*c3*x2*y1 + b1*c2*c3*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + 2*b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + 2*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1 + c3*x1*x2*y1 + b1*c3*x1*x2*y1 + b1*c1*c3*x1*x2*y1 + b2*c1*c3*x1*x2*y1 + b1*b2*c1*c3*x1*x2*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y1 + c2*c3*x1*x2*y1 + b2*c2*c3*x1*x2*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y1 + (c3*x2*(1 + x2)*y1)/2 + (b2*c3*x2*(1 + x2)*y1)/2 + (b2*c1*c3*x2*(1 + x2)*y1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2)*y1)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2)*y1)/2 + (c2*c3*x2*(1 + x2)*y1)/2 + (b2*c2*c3*x2*(1 + x2)*y1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2)*y1)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2)*y1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2)*y1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2)*y1)/2 + ((a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*(1 + x2)*y1)/2 + b2*x3*y1 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1 + 2*c2*x3*y1 + b1*c2*x3*y1 + c1*c2*x3*y1 + b1*c1*c2*x3*y1 + b1*b2*c1*c2*x3*y1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1 + b2*c3*x3*y1 + b2*c1*c3*x3*y1 + b1*b2*c1*c3*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1 + b1*c2*c3*x3*y1 + b2*c2*c3*x3*y1 + b1*b2*c2*c3*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1 + b2*c1*x1*x3*y1 + b2*c2*x1*x3*y1 + b1*c1*c2*x1*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y1 + b2*c3*x1*x3*y1 + b1*b2*c1*c3*x1*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y1 + c2*c3*x1*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y1 + x2*x3*y1 + b3*c1*x2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y1 + c2*x2*x3*y1 + b1*c2*x2*x3*y1 + b2*c2*x2*x3*y1 + c1*c2*x2*x3*y1 + b1*c1*c2*x2*x3*y1 + 2*b2*c1*c2*x2*x3*y1 + b3*c1*c2*x2*x3*y1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y1 + b1*c3*x2*x3*y1 + 2*b2*c3*x2*x3*y1 + c1*c3*x2*x3*y1 + b2*c1*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y1 + c2*c3*x2*x3*y1 + b1*c2*c3*x2*x3*y1 + b2*c2*c3*x2*x3*y1 + b3*c2*c3*x2*x3*y1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*y1 + (b1*c1*c2*x3*(1 + x3)*y1)/2 + (b2*c3*x3*(1 + x3)*y1)/2 + (b2*c1*c3*x3*(1 + x3)*y1)/2 + (b2*c2*c3*x3*(1 + x3)*y1)/2 + (b2*c3*y1*(1 + y1))/2 + (b1*b2*c3*y1*(1 + y1))/2 + (b1*b2*c1*c3*y1*(1 + y1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1))/2 + (b1*c2*c3*y1*(1 + y1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1))/2 + (b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*(1 + y1))/2 + (b2*c1*c3*x1*y1*(1 + y1))/2 + (c2*c3*x1*y1*(1 + y1))/2 + (b2*c2*c3*x1*y1*(1 + y1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*(1 + y1))/2 + (c3*x2*y1*(1 + y1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*(1 + y1))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*(1 + y1))/2 + (c2*c3*x2*y1*(1 + y1))/2 + (b2*c2*c3*x2*y1*(1 + y1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*(1 + y1))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*(1 + y1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*(1 + y1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*(1 + y1))/2 + (b2*c1*x3*y1*(1 + y1))/2 + (b2*c2*x3*y1*(1 + y1))/2 + (b2*c1*c3*y1^2*(1 + y1))/2 + (b1*c2*c3*y1^2*(1 + y1))/2 + (b2*c2*c3*y1^2*(1 + y1))/2 + b1*c1*c3*y2 + b2*c1*c3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2 + b1*b2*c2*c3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2 + 2*c3*x1*y2 + b1*c3*x1*y2 + b2*c3*x1*y2 + 2*c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b1*b2*c1*c3*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2 + c2*c3*x1*y2 + b1*c2*c3*x1*y2 + 2*b2*c2*c3*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + 2*b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + 2*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*y2)/2 + (c2*c3*x1*(1 + x1)*y2)/2 + (b2*c2*c3*x1*(1 + x1)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*y2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*y2)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*y2)/2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2 + c3*x1*x2*y2 + b1*c3*x1*x2*y2 + 2*b2*c3*x1*x2*y2 + 2*b2*c1*c3*x1*x2*y2 + b1*b2*c1*c3*x1*x2*y2 + c2*c3*x1*x2*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y2 + (c1*c3*x2*(1 + x2)*y2)/2 + b1*x3*y2 + c1*x3*y2 + b1*c1*x3*y2 + b2*c1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2 + c1*c2*x3*y2 + b1*c1*c2*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2 + 2*b1*c3*x3*y2 + c1*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2 + b1*b2*c2*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2 + 2*x1*x3*y2 + c1*x1*x3*y2 + b3*c1*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*y2 + b2*c2*x1*x3*y2 + b1*c1*c2*x1*x3*y2 + 2*b2*c1*c2*x1*x3*y2 + b3*c1*c2*x1*x3*y2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y2 + 2*c3*x1*x3*y2 + b2*c3*x1*x3*y2 + c1*c3*x1*x3*y2 + b1*c1*c3*x1*x3*y2 + b2*c1*c3*x1*x3*y2 + b1*b2*c1*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*y2 + b2*c2*c3*x1*x3*y2 + b3*c2*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3*y2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y2 + c1*x2*x3*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y2 + b1*c2*x2*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*y2 + b1*c3*x2*x3*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*y2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*(1 + x3)*y2)/2 + (b1*c2*x3*(1 + x3)*y2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3)*y2)/2 + 2*c3*y1*y2 + c1*c3*y1*y2 + b1*c1*c3*y1*y2 + b1*b2*c1*c3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + 2*b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2 + b2*c2*c3*y1*y2 + b1*b2*c2*c3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2 + 2*b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + 2*b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2 + c3*x1*y1*y2 + b1*c1*c3*x1*y1*y2 + b2*c1*c3*x1*y1*y2 + b1*b2*c1*c3*x1*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*y2 + c2*c3*x1*y1*y2 + b2*c2*c3*x1*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y2 + b1*c3*x2*y1*y2 + 2*b2*c3*x2*y1*y2 + c1*c3*x2*y1*y2 + b1*c1*c3*x2*y1*y2 + 2*b2*c1*c3*x2*y1*y2 + b1*b2*c1*c3*x2*y1*y2 + c2*c3*x2*y1*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y2 + x3*y1*y2 + b1*x3*y1*y2 + c1*x3*y1*y2 + b1*c1*x3*y1*y2 + b3*c1*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y2 + c2*x3*y1*y2 + b1*c2*x3*y1*y2 + b2*c2*x3*y1*y2 + c1*c2*x3*y1*y2 + 2*b2*c1*c2*x3*y1*y2 + b3*c1*c2*x3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y2 + c3*x3*y1*y2 + b1*c3*x3*y1*y2 + 2*b2*c3*x3*y1*y2 + b2*c1*c3*x3*y1*y2 + b1*b2*c1*c3*x3*y1*y2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*y2 + b2*c2*c3*x3*y1*y2 + b3*c2*c3*x3*y1*y2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*y2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y2 + (c1*c3*y1*(1 + y1)*y2)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1)*y2)/2 + (b1*c2*c3*y1*(1 + y1)*y2)/2 + (b2*c2*c3*y1*(1 + y1)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*(1 + y1)*y2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*(1 + y1)*y2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1)*y2)/2 + (b1*b2*c3*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2))/2 + (b1*c2*c3*y2*(1 + y2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*(1 + y2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2))/2 + (b2*c1*c3*x1*y2*(1 + y2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*(1 + y2))/2 + (c2*c3*x1*y2*(1 + y2))/2 + (b2*c2*c3*x1*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*(1 + y2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*(1 + y2))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*(1 + y2))/2 + (c1*c3*x2*y2*(1 + y2))/2 + (b2*c3*y1*y2*(1 + y2))/2 + (c1*c3*y1*y2*(1 + y2))/2 + (b2*c1*c3*y1*y2*(1 + y2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*(1 + y2))/2 + (b1*c2*c3*y1*y2*(1 + y2))/2 + (b2*c2*c3*y1*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*(1 + y2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*(1 + y2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*(1 + y2))/2 + ((a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*(1 + y2))/2 + (b1*c2*c3*y2^2*(1 + y2))/2 + b1*b2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3 + c1*c2*y3 + b2*c1*c2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3 + b1*b2*c3*y3 + b1*b2*c2*c3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3 + b2*c1*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3 + c2*x1*y3 + b2*c2*x1*y3 + c1*c2*x1*y3 + b1*c1*c2*x1*y3 + b1*b2*c1*c2*x1*y3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3 + 2*b2*c1*c3*x1*y3 + b1*b2*c1*c3*x1*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3 + c2*c3*x1*y3 + b1*c2*c3*x1*y3 + 2*b2*c2*c3*x1*y3 + b1*b2*c2*c3*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3 + (b2*c1*x1*(1 + x1)*y3)/2 + (b2*c2*x1*(1 + x1)*y3)/2 + b1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3 + b1*c2*x2*y3 + b1*c1*c2*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3 + b1*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3 + b1*b2*c2*c3*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3 + x1*x2*y3 + 2*c1*x1*x2*y3 + b3*c1*x1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*y3 + b2*c2*x1*x2*y3 + c1*c2*x1*x2*y3 + b1*c1*c2*x1*x2*y3 + 2*b2*c1*c2*x1*x2*y3 + b1*b2*c1*c2*x1*x2*y3 + b3*c1*c2*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*y3 + c3*x1*x2*y3 + b1*c3*x1*x2*y3 + 2*b2*c3*x1*x2*y3 + c1*c3*x1*x2*y3 + b1*c1*c3*x1*x2*y3 + b2*c1*c3*x1*x2*y3 + b1*b2*c1*c3*x1*x2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*y3 + 2*c2*c3*x1*x2*y3 + b1*c2*c3*x1*x2*y3 + b2*c2*c3*x1*x2*y3 + b3*c2*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*y3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3 + b1*b2*c2*x3*y3 + b1*b2*c1*c2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3 + b1*b2*c2*c3*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*y3 + c2*x1*x3*y3 + 2*b1*c2*x1*x3*y3 + b1*b2*c2*x1*x3*y3 + 2*c1*c2*x1*x3*y3 + b1*c1*c2*x1*x3*y3 + b1*b2*c1*c2*x1*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*y3 + b2*c3*x1*x3*y3 + 2*b2*c1*c3*x1*x3*y3 + b1*b2*c1*c3*x1*x3*y3 + 2*c2*c3*x1*x3*y3 + b1*c2*c3*x1*x3*y3 + b2*c2*c3*x1*x3*y3 + b1*b2*c2*c3*x1*x3*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*y3 + b1*c2*x2*x3*y3 + b1*b2*c2*x2*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*y3 + b1*c3*x2*x3*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*y3 + b1*b2*c2*c3*x2*x3*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*y3 + 2*b2*y1*y3 + b2*c1*y1*y3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3 + b1*c2*y1*y3 + b2*c2*y1*y3 + 2*c1*c2*y1*y3 + 2*b1*c1*c2*y1*y3 + b1*b2*c1*c2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3 + b2*c3*y1*y3 + b2*c1*c3*y1*y3 + b1*b2*c1*c3*y1*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3 + c2*c3*y1*y3 + b1*c2*c3*y1*y3 + 2*b2*c2*c3*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + 2*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3 + 2*b2*c1*x1*y1*y3 + c2*x1*y1*y3 + 2*b2*c2*x1*y1*y3 + b1*c1*c2*x1*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*y3 + b1*b2*c1*c3*x1*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*y3 + c2*c3*x1*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*y3 + x2*y1*y3 + b1*x2*y1*y3 + c1*x2*y1*y3 + b1*c1*x2*y1*y3 + b3*c1*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*y3 + c2*x2*y1*y3 + b1*c2*x2*y1*y3 + 2*b2*c2*x2*y1*y3 + 2*c1*c2*x2*y1*y3 + 2*b2*c1*c2*x2*y1*y3 + b1*b2*c1*c2*x2*y1*y3 + b3*c1*c2*x2*y1*y3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*y3 + c3*x2*y1*y3 + b1*c3*x2*y1*y3 + 2*b2*c3*x2*y1*y3 + c1*c3*x2*y1*y3 + b2*c1*c3*x2*y1*y3 + b1*b2*c1*c3*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*y3 + c2*c3*x2*y1*y3 + b1*c2*c3*x2*y1*y3 + 2*b2*c2*c3*x2*y1*y3 + b3*c2*c3*x2*y1*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*y3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*y3 + b2*x3*y1*y3 + b2*c1*x3*y1*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*y3 + c2*x3*y1*y3 + 2*b1*c2*x3*y1*y3 + b2*c2*x3*y1*y3 + b1*b2*c2*x3*y1*y3 + 2*c1*c2*x3*y1*y3 + 2*b1*c1*c2*x3*y1*y3 + b1*b2*c1*c2*x3*y1*y3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*y3 + b2*c3*x3*y1*y3 + b2*c1*c3*x3*y1*y3 + b1*b2*c1*c3*x3*y1*y3 + 2*c2*c3*x3*y1*y3 + b2*c2*c3*x3*y1*y3 + b1*b2*c2*c3*x3*y1*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*y3 + (b2*c1*y1*(1 + y1)*y3)/2 + (b2*c2*y1*(1 + y1)*y3)/2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3 + b1*c2*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3 + b1*b2*c3*y2*y3 + c1*c3*y2*y3 + b1*c1*c3*y2*y3 + b2*c1*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3 + b1*c2*c3*y2*y3 + b1*b2*c2*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3 + x1*y2*y3 + c1*x1*y2*y3 + b1*c1*x1*y2*y3 + b2*c1*x1*y2*y3 + b3*c1*x1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*y3 + 2*c2*x1*y2*y3 + 2*b2*c2*x1*y2*y3 + c1*c2*x1*y2*y3 + b1*c1*c2*x1*y2*y3 + 2*b2*c1*c2*x1*y2*y3 + b1*b2*c1*c2*x1*y2*y3 + b3*c1*c2*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*y3 + c3*x1*y2*y3 + c1*c3*x1*y2*y3 + b2*c1*c3*x1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*y3 + 2*b2*c2*c3*x1*y2*y3 + b3*c2*c3*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*y3 + c1*c2*x2*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*y3 + c1*c3*x2*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2*y3 + b1*x3*y2*y3 + c1*x3*y2*y3 + b1*c1*x3*y2*y3 + b2*c1*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*y3 + b1*b2*c2*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*y3 + b1*c3*x3*y2*y3 + c1*c3*x3*y2*y3 + b1*c1*c3*x3*y2*y3 + b2*c1*c3*x3*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*y3 + b1*c2*c3*x3*y2*y3 + b1*b2*c2*c3*x3*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*y3 + y1*y2*y3 + c1*y1*y2*y3 + b1*c1*y1*y2*y3 + b2*c1*y1*y2*y3 + b3*c1*y1*y2*y3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*y3 + 2*c2*y1*y2*y3 + b2*c2*y1*y2*y3 + b1*c1*c2*y1*y2*y3 + 2*b2*c1*c2*y1*y2*y3 + b1*b2*c1*c2*y1*y2*y3 + b3*c1*c2*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*y3 + b2*c3*y1*y2*y3 + b2*c1*c3*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*y3 + 2*b2*c2*c3*y1*y2*y3 + b3*c2*c3*y1*y2*y3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*y3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*y3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*y3 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*(1 + y3))/2 + (b1*b2*c2*y3*(1 + y3))/2 + (c1*c2*y3*(1 + y3))/2 + (b1*c1*c2*y3*(1 + y3))/2 + (b1*b2*c1*c2*y3*(1 + y3))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*(1 + y3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*(1 + y3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3))/2 + (b1*b2*c3*y3*(1 + y3))/2 + (b1*c2*c3*y3*(1 + y3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*(1 + y3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3))/2 + (b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3))/2 + (b1*c2*x1*y3*(1 + y3))/2 + (b1*c1*c2*x1*y3*(1 + y3))/2 + (b2*c1*c3*x1*y3*(1 + y3))/2 + (b2*c2*c3*x1*y3*(1 + y3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*(1 + y3))/2 + (c1*c3*x2*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*(1 + y3))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*(1 + y3))/2 + (b1*c1*c2*y1*y3*(1 + y3))/2 + (b2*c3*y1*y3*(1 + y3))/2 + (b2*c1*c3*y1*y3*(1 + y3))/2 + (b2*c2*c3*y1*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*(1 + y3))/2 + (b1*c2*y2*y3*(1 + y3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*(1 + y3))/2 + (c1*c3*y2*y3*(1 + y3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*(1 + y3))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*(1 + y3))/2 + 2*b2*c1*c3*z1 + b1*b2*c1*c3*z1 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1 + 2*b2*c2*c3*z1 + b1*b2*c2*c3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + 2*b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1 + b2*c3*x1*z1 + b1*b2*c3*x1*z1 + 2*b2*c1*c3*x1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1 + 2*b2*c2*c3*x1*z1 + b1*b2*c2*c3*x1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + 2*b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1 + (b2*c3*x1*(1 + x1)*z1)/2 + (b2*c1*c3*x1*(1 + x1)*z1)/2 + (b1*c2*c3*x1*(1 + x1)*z1)/2 + (b2*c2*c3*x1*(1 + x1)*z1)/2 + b1*c3*x2*z1 + b2*c3*x2*z1 + b2*c1*c3*x2*z1 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1 + b1*c2*c3*x2*z1 + 2*b2*c2*c3*x2*z1 + b1*b2*c2*c3*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1 + 2*b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + 2*b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1 + b3*x1*x2*z1 + b1*c3*x1*x2*z1 + 2*b2*c3*x1*x2*z1 + 2*c1*c3*x1*x2*z1 + b1*c1*c3*x1*x2*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z1 + b1*c2*c3*x1*x2*z1 + b2*c2*c3*x1*x2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z1 + (b2*c3*x2*(1 + x2)*z1)/2 + (b2*c1*c3*x2*(1 + x2)*z1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2)*z1)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*(1 + x2)*z1)/2 + (b1*c2*c3*x2*(1 + x2)*z1)/2 + (b2*c2*c3*x2*(1 + x2)*z1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2)*z1)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*(1 + x2)*z1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2)*z1)/2 + b2*x3*z1 + b2*c1*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1 + 2*b1*c2*x3*z1 + b2*c2*x3*z1 + b1*b2*c2*x3*z1 + 2*b1*c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1 + b2*c3*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1 + b1*c2*c3*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1 + b2*x1*x3*z1 + b1*c2*x1*x3*z1 + b2*c2*x1*x3*z1 + b3*c2*x1*x3*z1 + b1*c1*c2*x1*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z1 + b2*c3*x1*x3*z1 + b2*c1*c3*x1*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z1 + b3*x2*x3*z1 + b3*c1*x2*x3*z1 + c2*x2*x3*z1 + b2*c2*x2*x3*z1 + b3*c2*x2*x3*z1 + 2*c1*c2*x2*x3*z1 + b1*c1*c2*x2*x3*z1 + 2*b2*c1*c2*x2*x3*z1 + b3*c1*c2*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z1 + b1*c3*x2*x3*z1 + 2*b2*c3*x2*x3*z1 + b1*c1*c3*x2*x3*z1 + 2*b2*c1*c3*x2*x3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z1 + 2*c2*c3*x2*x3*z1 + b1*c2*c3*x2*x3*z1 + 2*b2*c2*c3*x2*x3*z1 + b3*c2*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*x3*z1 + (b1*c1*c2*x3*(1 + x3)*z1)/2 + (b2*c3*x3*(1 + x3)*z1)/2 + (b2*c1*c3*x3*(1 + x3)*z1)/2 + (b2*c2*c3*x3*(1 + x3)*z1)/2 + (b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3)*z1)/2 + (b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*(1 + x3)*z1)/2 + (c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3)*z1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3)*z1)/2 + 2*b2*c3*y1*z1 + b1*b2*c3*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1 + 2*b2*c2*c3*y1*z1 + b1*b2*c2*c3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + 2*b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1 + 2*b2*c3*x1*y1*z1 + b1*b2*c3*x1*y1*z1 + b2*c1*c3*x1*y1*z1 + c2*c3*x1*y1*z1 + b2*c2*c3*x1*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z1 + b3*x2*y1*z1 + c3*x2*y1*z1 + b1*c3*x2*y1*z1 + b2*c3*x2*y1*z1 + b1*b2*c3*x2*y1*z1 + c1*c3*x2*y1*z1 + b2*c1*c3*x2*y1*z1 + b1*b2*c1*c3*x2*y1*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z1 + c2*c3*x2*y1*z1 + b2*c2*c3*x2*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z1 + b2*x3*y1*z1 + b2*c2*x3*y1*z1 + b3*c2*x3*y1*z1 + c1*c2*x3*y1*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z1 + 2*b2*c3*x3*y1*z1 + b1*b2*c3*x3*y1*z1 + b2*c1*c3*x3*y1*z1 + b1*b2*c1*c3*x3*y1*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z1 + b1*c2*c3*x3*y1*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z1 + (b2*c3*y1*(1 + y1)*z1)/2 + (b2*c1*c3*y1*(1 + y1)*z1)/2 + (c2*c3*y1*(1 + y1)*z1)/2 + (b2*c2*c3*y1*(1 + y1)*z1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1)*z1)/2 + b1*c3*y2*z1 + b1*b2*c3*y2*z1 + c1*c3*y2*z1 + b1*c1*c3*y2*z1 + b2*c1*c3*y2*z1 + b1*b2*c1*c3*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1 + b1*c2*c3*y2*z1 + b2*c2*c3*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1 + b3*x1*y2*z1 + b2*c3*x1*y2*z1 + b1*b2*c3*x1*y2*z1 + c1*c3*x1*y2*z1 + b1*c1*c3*x1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z1 + c2*c3*x1*y2*z1 + b2*c2*c3*x1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z1 + c3*x2*y2*z1 + b1*c3*x2*y2*z1 + b1*b2*c3*x2*y2*z1 + c1*c3*x2*y2*z1 + 2*b2*c1*c3*x2*y2*z1 + b1*b2*c1*c3*x2*y2*z1 + c2*c3*x2*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y2*z1 + x3*y2*z1 + b3*x3*y2*z1 + b3*c1*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z1 + b2*c2*x3*y2*z1 + b3*c2*x3*y2*z1 + 2*b2*c1*c2*x3*y2*z1 + b3*c1*c2*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z1 + 2*c3*x3*y2*z1 + b2*c3*x3*y2*z1 + b1*b2*c3*x3*y2*z1 + 2*b2*c1*c3*x3*y2*z1 + b1*b2*c1*c3*x3*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z1 + b2*c2*c3*x3*y2*z1 + b3*c2*c3*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y2*z1 + b3*y1*y2*z1 + b1*c3*y1*y2*z1 + 2*b2*c3*y1*y2*z1 + c1*c3*y1*y2*z1 + b2*c1*c3*y1*y2*z1 + b1*b2*c1*c3*y1*y2*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z1 + c2*c3*y1*y2*z1 + b2*c2*c3*y1*y2*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z1 + (c3*y2*(1 + y2)*z1)/2 + (c1*c3*y2*(1 + y2)*z1)/2 + (b2*c1*c3*y2*(1 + y2)*z1)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*(1 + y2)*z1)/2 + (c2*c3*y2*(1 + y2)*z1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*(1 + y2)*z1)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*(1 + y2)*z1)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*(1 + y2)*z1)/2 + (c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2)*z1)/2 + (c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*(1 + y2)*z1)/2 + 2*b2*y3*z1 + 2*b2*c1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1 + 2*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1 + b1*c2*y3*z1 + b2*c2*y3*z1 + b1*b2*c2*y3*z1 + c1*c2*y3*z1 + b1*c1*c2*y3*z1 + b1*b2*c1*c2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1 + 2*b2*c3*y3*z1 + b1*b2*c3*y3*z1 + 2*b2*c1*c3*y3*z1 + b1*b2*c1*c3*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1 + c2*c3*y3*z1 + b1*c2*c3*y3*z1 + b2*c2*c3*y3*z1 + b1*b2*c2*c3*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + 2*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1 + b2*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z1 + c2*x1*y3*z1 + b2*c2*x1*y3*z1 + b1*b2*c2*x1*y3*z1 + b3*c2*x1*y3*z1 + b1*c1*c2*x1*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z1 + b2*c3*x1*y3*z1 + b1*b2*c3*x1*y3*z1 + b2*c1*c3*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z1 + 2*x2*y3*z1 + b3*x2*y3*z1 + c1*x2*y3*z1 + b3*c1*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z1 + c2*x2*y3*z1 + b1*c2*x2*y3*z1 + b2*c2*x2*y3*z1 + b1*b2*c2*x2*y3*z1 + b3*c2*x2*y3*z1 + c1*c2*x2*y3*z1 + b1*c1*c2*x2*y3*z1 + 2*b2*c1*c2*x2*y3*z1 + b1*b2*c1*c2*x2*y3*z1 + b3*c1*c2*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z1 + c3*x2*y3*z1 + b1*c3*x2*y3*z1 + b1*b2*c3*x2*y3*z1 + 2*b2*c1*c3*x2*y3*z1 + b1*b2*c1*c3*x2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z1 + 2*c2*c3*x2*y3*z1 + b1*c2*c3*x2*y3*z1 + b2*c2*c3*x2*y3*z1 + b3*c2*c3*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z1 + c2*x3*y3*z1 + b1*c2*x3*y3*z1 + 2*c1*c2*x3*y3*z1 + b1*c1*c2*x3*y3*z1 + b1*b2*c1*c2*x3*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z1 + b2*c3*x3*y3*z1 + b1*b2*c3*x3*y3*z1 + 2*b2*c1*c3*x3*y3*z1 + b1*b2*c1*c3*x3*y3*z1 + 2*c2*c3*x3*y3*z1 + b1*c2*c3*x3*y3*z1 + b2*c2*c3*x3*y3*z1 + b1*b2*c2*c3*x3*y3*z1 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y3*z1 + b2*c1*y1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z1 + b1*c2*y1*y3*z1 + b1*b2*c2*y1*y3*z1 + b3*c2*y1*y3*z1 + c1*c2*y1*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z1 + b2*c3*y1*y3*z1 + b2*c1*c3*y1*y3*z1 + b1*b2*c1*c3*y1*y3*z1 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z1 + b1*c2*c3*y1*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z1 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z1 + b1*y2*y3*z1 + b2*y2*y3*z1 + b3*y2*y3*z1 + c1*y2*y3*z1 + b1*c1*y2*y3*z1 + b2*c1*y2*y3*z1 + b3*c1*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z1 + c2*y2*y3*z1 + b1*b2*c2*y2*y3*z1 + b3*c2*y2*y3*z1 + c1*c2*y2*y3*z1 + 2*b2*c1*c2*y2*y3*z1 + b1*b2*c1*c2*y2*y3*z1 + b3*c1*c2*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z1 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z1 + c3*y2*y3*z1 + b1*c3*y2*y3*z1 + b2*c3*y2*y3*z1 + b1*c1*c3*y2*y3*z1 + 2*b2*c1*c3*y2*y3*z1 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z1 + b2*c2*c3*y2*y3*z1 + b3*c2*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z1 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*y3*z1 + (c2*y3*(1 + y3)*z1)/2 + (b1*c1*c2*y3*(1 + y3)*z1)/2 + (c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3)*z1)/2 + (b2*c1*c3*y3*(1 + y3)*z1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3)*z1)/2 + (b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3)*z1)/2 + (b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*(1 + y3)*z1)/2 + (c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z1)/2 + (c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z1)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z1)/2 + (b2*c3*z1*(1 + z1))/2 + (b2*c1*c3*z1*(1 + z1))/2 + (b1*b2*c1*c3*z1*(1 + z1))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*(1 + z1))/2 + (b1*c2*c3*z1*(1 + z1))/2 + (b2*c2*c3*z1*(1 + z1))/2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*(1 + z1) + (b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*(1 + z1))/2 + (b2*c1*c3*x1*z1*(1 + z1))/2 + (b1*c2*c3*x1*z1*(1 + z1))/2 + (b2*c2*c3*x1*z1*(1 + z1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*(1 + z1))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*(1 + z1))/2 + (b1*c2*c3*x2*z1*(1 + z1))/2 + (b2*c2*c3*x2*z1*(1 + z1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*(1 + z1))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*(1 + z1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*(1 + z1))/2 + (b2*x3*z1*(1 + z1))/2 + (b2*c1*x3*z1*(1 + z1))/2 + (b2*c2*x3*z1*(1 + z1))/2 + (b2*c1*c3*y1*z1*(1 + z1))/2 + (c2*c3*y1*z1*(1 + z1))/2 + (b2*c2*c3*y1*z1*(1 + z1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*(1 + z1))/2 + (c1*c3*y2*z1*(1 + z1))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*(1 + z1))/2 + (c2*c3*y2*z1*(1 + z1))/2 + (b2*c2*c3*y2*z1*(1 + z1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1*(1 + z1))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1*(1 + z1))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*(1 + z1))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*(1 + z1))/2 + (b2*y3*z1*(1 + z1))/2 + (b2*c1*y3*z1*(1 + z1))/2 + (b2*c2*y3*z1*(1 + z1))/2 + (b2*c3*z1^2*(1 + z1))/2 + (b2*c1*c3*z1^2*(1 + z1))/2 + (b1*c2*c3*z1^2*(1 + z1))/2 + (b2*c2*c3*z1^2*(1 + z1))/2 + b1*b2*c3*z2 + b1*c1*c3*z2 + b1*b2*c1*c3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2 + b1*c3*x1*z2 + b2*c3*x1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2 + b1*c2*c3*x1*z2 + 2*b2*c2*c3*x1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + 2*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2 + (c3*x1*(1 + x1)*z2)/2 + (b1*c3*x1*(1 + x1)*z2)/2 + (b2*c3*x1*(1 + x1)*z2)/2 + (c1*c3*x1*(1 + x1)*z2)/2 + (b1*c1*c3*x1*(1 + x1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*z2)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*(1 + x1)*z2)/2 + (b1*c2*c3*x1*(1 + x1)*z2)/2 + (b2*c2*c3*x1*(1 + x1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*(1 + x1)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*(1 + x1)*z2)/2 + b1*b2*c3*x2*z2 + b2*c1*c3*x2*z2 + b1*b2*c1*c3*x2*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2 + b1*b2*c2*c3*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z2 + b3*x1*x2*z2 + b3*c1*x1*x2*z2 + b3*c2*x1*x2*z2 + c3*x1*x2*z2 + 2*b1*c3*x1*x2*z2 + b2*c3*x1*x2*z2 + b3*c3*x1*x2*z2 + 2*c1*c3*x1*x2*z2 + b1*c1*c3*x1*x2*z2 + 2*b2*c1*c3*x1*x2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z2 + b1*c2*c3*x1*x2*z2 + b2*c2*c3*x1*x2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z2 + (b1*c3*x2*(1 + x2)*z2)/2 + (c1*c3*x2*(1 + x2)*z2)/2 + (b1*c1*c3*x2*(1 + x2)*z2)/2 + (b1*c2*c3*x2*(1 + x2)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*(1 + x2)*z2)/2 + b1*x3*z2 + b1*c1*x3*z2 + b1*b2*c1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2 + b1*c1*c2*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2 + b1*c3*x3*z2 + b1*c1*c3*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z2 + b1*b2*c2*c3*x3*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z2 + x1*x3*z2 + b2*x1*x3*z2 + c1*x1*x3*z2 + 2*b2*c1*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z2 + 2*b1*c2*x1*x3*z2 + b2*c2*x1*x3*z2 + b3*c2*x1*x3*z2 + 2*b1*c1*c2*x1*x3*z2 + 2*b2*c1*c2*x1*x3*z2 + b3*c1*c2*x1*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z2 + c3*x1*x3*z2 + b1*c3*x1*x3*z2 + 2*b2*c3*x1*x3*z2 + b1*b2*c3*x1*x3*z2 + b3*c3*x1*x3*z2 + c1*c3*x1*x3*z2 + b2*c1*c3*x1*x3*z2 + b1*b2*c1*c3*x1*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z2 + b1*c2*c3*x1*x3*z2 + b2*c2*c3*x1*x3*z2 + b3*c2*c3*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z2 + c1*x2*x3*z2 + b1*c1*x2*x3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*x3*z2 + b1*c2*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z2 + b1*b2*c3*x2*x3*z2 + c1*c3*x2*x3*z2 + b1*c1*c3*x2*x3*z2 + b2*c1*c3*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z2 + (b1*x3*(1 + x3)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*(1 + x3)*z2)/2 + (b1*c2*x3*(1 + x3)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*(1 + x3)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*(1 + x3)*z2)/2 + (b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*(1 + x3)*z2)/2 + b1*c3*y1*z2 + b2*c3*y1*z2 + b1*b2*c3*y1*z2 + c1*c3*y1*z2 + 2*b1*c1*c3*y1*z2 + b2*c1*c3*y1*z2 + 2*b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2 + b1*c2*c3*y1*z2 + b2*c2*c3*y1*z2 + b1*b2*c2*c3*y1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + 2*b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2 + c3*x1*y1*z2 + b1*c3*x1*y1*z2 + 2*b2*c3*x1*y1*z2 + b1*b2*c3*x1*y1*z2 + b1*c1*c3*x1*y1*z2 + b2*c1*c3*x1*y1*z2 + b1*b2*c1*c3*x1*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*z2 + c2*c3*x1*y1*z2 + b2*c2*c3*x1*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z2 + b3*x2*y1*z2 + b3*c1*x2*y1*z2 + b3*c2*x2*y1*z2 + c3*x2*y1*z2 + b1*c3*x2*y1*z2 + 2*b2*c3*x2*y1*z2 + b1*b2*c3*x2*y1*z2 + b3*c3*x2*y1*z2 + c1*c3*x2*y1*z2 + 2*b2*c1*c3*x2*y1*z2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z2 + c2*c3*x2*y1*z2 + b2*c2*c3*x2*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z2 + x3*y1*z2 + b1*x3*y1*z2 + b2*x3*y1*z2 + c1*x3*y1*z2 + 2*b2*c1*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z2 + 2*c2*x3*y1*z2 + 2*b1*c2*x3*y1*z2 + b2*c2*x3*y1*z2 + b3*c2*x3*y1*z2 + c1*c2*x3*y1*z2 + b1*c1*c2*x3*y1*z2 + 2*b2*c1*c2*x3*y1*z2 + b3*c1*c2*x3*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z2 + b1*c3*x3*y1*z2 + b2*c3*x3*y1*z2 + b3*c3*x3*y1*z2 + c1*c3*x3*y1*z2 + b2*c1*c3*x3*y1*z2 + b1*b2*c1*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z2 + c2*c3*x3*y1*z2 + b1*c2*c3*x3*y1*z2 + 2*b2*c2*c3*x3*y1*z2 + b3*c2*c3*x3*y1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z2 + (b2*c3*y1*(1 + y1)*z2)/2 + (b1*c1*c3*y1*(1 + y1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1)*z2)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*(1 + y1)*z2)/2 + (c2*c3*y1*(1 + y1)*z2)/2 + (b2*c2*c3*y1*(1 + y1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*(1 + y1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*(1 + y1)*z2)/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*(1 + y1)*z2)/2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z2 + b3*x1*y2*z2 + b3*c1*x1*y2*z2 + b3*c2*x1*y2*z2 + 2*c3*x1*y2*z2 + b1*c3*x1*y2*z2 + b1*b2*c3*x1*y2*z2 + b3*c3*x1*y2*z2 + c1*c3*x1*y2*z2 + b2*c1*c3*x1*y2*z2 + b1*b2*c1*c3*x1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z2 + c2*c3*x1*y2*z2 + 2*b2*c2*c3*x1*y2*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z2 + b1*b2*c3*x2*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z2 + b1*c1*x3*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y2*z2 + b1*c1*c2*x3*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z2 + c1*c3*x3*y2*z2 + b1*c1*c3*x3*y2*z2 + b2*c1*c3*x3*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z2 + b3*y1*y2*z2 + b3*c1*y1*y2*z2 + b3*c2*y1*y2*z2 + c3*y1*y2*z2 + b1*c3*y1*y2*z2 + b2*c3*y1*y2*z2 + b3*c3*y1*y2*z2 + 2*b1*c1*c3*y1*y2*z2 + b2*c1*c3*y1*y2*z2 + b1*b2*c1*c3*y1*y2*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z2 + c2*c3*y1*y2*z2 + 2*b2*c2*c3*y1*y2*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z2 + (b1*c1*c3*y2*(1 + y2)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*(1 + y2)*z2)/2 + b1*c1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z2 + b1*c1*c2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2 + b1*b2*c1*c3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2 + b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z2 + b1*x1*y3*z2 + b2*x1*y3*z2 + c1*x1*y3*z2 + 2*b2*c1*x1*y3*z2 + b1*b2*c1*x1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z2 + 2*c2*x1*y3*z2 + b1*c2*x1*y3*z2 + b2*c2*x1*y3*z2 + b3*c2*x1*y3*z2 + c1*c2*x1*y3*z2 + 2*b1*c1*c2*x1*y3*z2 + 2*b2*c1*c2*x1*y3*z2 + b1*b2*c1*c2*x1*y3*z2 + b3*c1*c2*x1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z2 + 2*c3*x1*y3*z2 + b1*b2*c3*x1*y3*z2 + b3*c3*x1*y3*z2 + c1*c3*x1*y3*z2 + b1*c1*c3*x1*y3*z2 + b2*c1*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z2 + b1*c2*c3*x1*y3*z2 + 2*b2*c2*c3*x1*y3*z2 + b3*c2*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z2 + b1*x2*y3*z2 + c1*x2*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z2 + b1*c1*c2*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z2 + b1*c3*x2*y3*z2 + b1*b2*c3*x2*y3*z2 + c1*c3*x2*y3*z2 + b2*c1*c3*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z2 + b1*b2*x3*y3*z2 + b1*b2*c1*x3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y3*z2 + b1*b2*c2*x3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y3*z2 + b1*b2*c3*x3*y3*z2 + b1*b2*c1*c3*x3*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y3*z2 + b1*y1*y3*z2 + c1*y1*y3*z2 + b1*c1*y1*y3*z2 + 2*b2*c1*y1*y3*z2 + b1*b2*c1*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z2 + c2*y1*y3*z2 + 2*b1*c2*y1*y3*z2 + b3*c2*y1*y3*z2 + 2*b1*c1*c2*y1*y3*z2 + 2*b2*c1*c2*y1*y3*z2 + b1*b2*c1*c2*y1*y3*z2 + b3*c1*c2*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z2 + c3*y1*y3*z2 + b1*c3*y1*y3*z2 + b3*c3*y1*y3*z2 + c1*c3*y1*y3*z2 + b2*c1*c3*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z2 + c2*c3*y1*y3*z2 + b1*c2*c3*y1*y3*z2 + b2*c2*c3*y1*y3*z2 + b3*c2*c3*y1*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y3*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z2 + c1*c2*y2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z2 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z2 + b2*c1*c3*y2*y3*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*y3*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z2 + (b1*y3*(1 + y3)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*(1 + y3)*z2)/2 + (b1*c2*y3*(1 + y3)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*(1 + y3)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*(1 + y3)*z2)/2 + (c1*c3*y3*(1 + y3)*z2)/2 + (b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z2)/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*(1 + y3)*z2)/2 + 2*b1*c3*z1*z2 + b2*c3*z1*z2 + b1*b2*c3*z1*z2 + b1*c1*c3*z1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2 + b2*c2*c3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + 2*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2 + 2*c3*x1*z1*z2 + 2*b1*c3*x1*z1*z2 + 2*c1*c3*x1*z1*z2 + 2*b1*c1*c3*x1*z1*z2 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z2 + b1*c2*c3*x1*z1*z2 + b2*c2*c3*x1*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z2 + b3*c1*x2*z1*z2 + b3*c2*x2*z1*z2 + 2*b1*c3*x2*z1*z2 + b2*c3*x2*z1*z2 + b3*c3*x2*z1*z2 + 2*c1*c3*x2*z1*z2 + b1*c1*c3*x2*z1*z2 + 2*b2*c1*c3*x2*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + 2*b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z2 + b1*c2*c3*x2*z1*z2 + b2*c2*c3*x2*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z2 + b1*x3*z1*z2 + b2*x3*z1*z2 + 2*b2*c1*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z2 + b1*c2*x3*z1*z2 + b2*c2*x3*z1*z2 + b1*c1*c2*x3*z1*z2 + 2*b2*c1*c2*x3*z1*z2 + b3*c1*c2*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z2 + b1*c3*x3*z1*z2 + b2*c3*x3*z1*z2 + b3*c3*x3*z1*z2 + b1*c1*c3*x3*z1*z2 + 2*b2*c1*c3*x3*z1*z2 + b1*b2*c1*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z2 + b1*c2*c3*x3*z1*z2 + b2*c2*c3*x3*z1*z2 + b3*c2*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z1*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z2 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z2 + c3*y1*z1*z2 + c1*c3*y1*z1*z2 + b2*c1*c3*y1*z1*z2 + b1*b2*c1*c3*y1*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z2 + c2*c3*y1*z1*z2 + b2*c2*c3*y1*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z2 + b3*c1*y2*z1*z2 + b3*c2*y2*z1*z2 + c3*y2*z1*z2 + b1*c3*y2*z1*z2 + b2*c3*y2*z1*z2 + b3*c3*y2*z1*z2 + c1*c3*y2*z1*z2 + b2*c1*c3*y2*z1*z2 + b1*b2*c1*c3*y2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z2 + c2*c3*y2*z1*z2 + 2*b2*c2*c3*y2*z1*z2 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z2 + y3*z1*z2 + b2*y3*z1*z2 + b1*b2*y3*z1*z2 + b1*c1*y3*z1*z2 + 2*b2*c1*y3*z1*z2 + b1*b2*c1*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z2 + c2*y3*z1*z2 + b1*c2*y3*z1*z2 + b2*c2*y3*z1*z2 + b1*b2*c2*y3*z1*z2 + c1*c2*y3*z1*z2 + b1*c1*c2*y3*z1*z2 + 2*b2*c1*c2*y3*z1*z2 + b1*b2*c1*c2*y3*z1*z2 + b3*c1*c2*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z2 + c3*y3*z1*z2 + b2*c3*y3*z1*z2 + b1*b2*c3*y3*z1*z2 + b3*c3*y3*z1*z2 + 2*b2*c1*c3*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z2 + b1*c2*c3*y3*z1*z2 + 2*b2*c2*c3*y3*z1*z2 + b3*c2*c3*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z2 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z2 + (b1*c3*z1*(1 + z1)*z2)/2 + (b2*c3*z1*(1 + z1)*z2)/2 + (b1*c1*c3*z1*(1 + z1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*(1 + z1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*(1 + z1)*z2)/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*(1 + z1)*z2)/2 + (b1*c2*c3*z1*(1 + z1)*z2)/2 + (b2*c2*c3*z1*(1 + z1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*(1 + z1)*z2)/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*(1 + z1)*z2)/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*(1 + z1)*z2)/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*(1 + z1)*z2)/2 + (b1*c3*z2*(1 + z2))/2 + (b2*c1*c3*z2*(1 + z2))/2 + (b1*b2*c1*c3*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*(1 + z2))/2 + (b1*c2*c3*z2*(1 + z2))/2 + (b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*(1 + z2))/2 + (b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*(1 + z2))/2 + (c3*x1*z2*(1 + z2))/2 + (b1*c3*x1*z2*(1 + z2))/2 + (c1*c3*x1*z2*(1 + z2))/2 + (b1*c1*c3*x1*z2*(1 + z2))/2 + (b2*c1*c3*x1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*(1 + z2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*(1 + z2))/2 + (b1*c2*c3*x1*z2*(1 + z2))/2 + (b2*c2*c3*x1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2*(1 + z2))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*(1 + z2))/2 + (b1*c3*x2*z2*(1 + z2))/2 + (c1*c3*x2*z2*(1 + z2))/2 + (b1*c1*c3*x2*z2*(1 + z2))/2 + (b1*c2*c3*x2*z2*(1 + z2))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2*(1 + z2))/2 + (b2*c3*y1*z2*(1 + z2))/2 + (b1*c1*c3*y1*z2*(1 + z2))/2 + (b2*c1*c3*y1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*(1 + z2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*(1 + z2))/2 + (c2*c3*y1*z2*(1 + z2))/2 + (b2*c2*c3*y1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*(1 + z2))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*(1 + z2))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*(1 + z2))/2 + ((a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*(1 + z2))/2 + (b1*c1*c3*y2*z2*(1 + z2))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z2*(1 + z2))/2 + (b1*c3*z1*z2*(1 + z2))/2 + (b2*c3*z1*z2*(1 + z2))/2 + (b1*c1*c3*z1*z2*(1 + z2))/2 + (b2*c1*c3*z1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*(1 + z2))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*(1 + z2))/2 + (b1*c2*c3*z1*z2*(1 + z2))/2 + (b2*c2*c3*z1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2*(1 + z2))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2*(1 + z2))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*(1 + z2))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*(1 + z2))/2 + (b1*c3*z2^2*(1 + z2))/2 + (b1*c2*c3*z2^2*(1 + z2))/2 + b1*b2*c1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z3 + b2*c1*c2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3 + b2*x1*z3 + b1*b2*x1*z3 + b2*c1*x1*z3 + b1*b2*c1*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z3 + b1*b2*c2*x1*z3 + b2*c1*c2*x1*z3 + b1*b2*c1*c2*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z3 + b2*c3*x1*z3 + b2*c1*c3*x1*z3 + b1*b2*c1*c3*x1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z3 + b1*c2*c3*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + 2*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z3 + (b2*x1*(1 + x1)*z3)/2 + (b2*c1*x1*(1 + x1)*z3)/2 + (b2*c2*x1*(1 + x1)*z3)/2 + c1*x2*z3 + b1*c1*x2*z3 + b2*c1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z3 + b1*c1*c2*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3 + b1*c3*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z3 + b1*c2*c3*x2*z3 + b1*b2*c2*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3 + x1*x2*z3 + b2*x1*x2*z3 + b3*x1*x2*z3 + 2*c1*x1*x2*z3 + b1*c1*x1*x2*z3 + b2*c1*x1*x2*z3 + b3*c1*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x2*z3 + c2*x1*x2*z3 + b2*c2*x1*x2*z3 + b1*b2*c2*x1*x2*z3 + b3*c2*x1*x2*z3 + 2*c1*c2*x1*x2*z3 + b2*c1*c2*x1*x2*z3 + b1*b2*c1*c2*x1*x2*z3 + b3*c1*c2*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x2*z3 + 2*c3*x1*x2*z3 + b1*c3*x1*x2*z3 + b2*c3*x1*x2*z3 + b1*b2*c3*x1*x2*z3 + b3*c3*x1*x2*z3 + c1*c3*x1*x2*z3 + b2*c1*c3*x1*x2*z3 + b1*b2*c1*c3*x1*x2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x2*z3 + 2*c2*c3*x1*x2*z3 + b1*c2*c3*x1*x2*z3 + b2*c2*c3*x1*x2*z3 + b3*c2*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*x2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x2*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z3 + b1*c2*x3*z3 + c1*c2*x3*z3 + b1*c1*c2*x3*z3 + b2*c1*c2*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z3 + b2*x1*x3*z3 + 2*b2*c1*x1*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*x3*z3 + c2*x1*x3*z3 + b1*c2*x1*x3*z3 + b2*c2*x1*x3*z3 + 2*c1*c2*x1*x3*z3 + 2*b2*c1*c2*x1*x3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*x3*z3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*x3*z3 + 2*b2*c3*x1*x3*z3 + b1*b2*c3*x1*x3*z3 + b2*c1*c3*x1*x3*z3 + b1*b2*c1*c3*x1*x3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*x3*z3 + 2*c2*c3*x1*x3*z3 + b1*c2*c3*x1*x3*z3 + b2*c2*c3*x1*x3*z3 + b1*b2*c2*c3*x1*x3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*x3*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + 2*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*x3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*x3*z3 + b1*c3*x2*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*x3*z3 + b1*c2*c3*x2*x3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*x3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*x3*z3 + b2*y1*z3 + b1*b2*y1*z3 + b1*b2*c1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z3 + c2*y1*z3 + b1*c2*y1*z3 + 2*b2*c2*y1*z3 + b1*b2*c2*y1*z3 + c1*c2*y1*z3 + b1*c1*c2*y1*z3 + b2*c1*c2*y1*z3 + b1*b2*c1*c2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z3 + b2*c3*y1*z3 + 2*b2*c1*c3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z3 + b1*c2*c3*y1*z3 + b1*b2*c2*c3*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z3 + 2*b2*x1*y1*z3 + 2*b2*c1*x1*y1*z3 + b1*b2*c1*x1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y1*z3 + c2*x1*y1*z3 + b2*c2*x1*y1*z3 + b1*c1*c2*x1*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y1*z3 + b2*c3*x1*y1*z3 + b1*b2*c1*c3*x1*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y1*z3 + c2*c3*x1*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y1*z3 + 2*x2*y1*z3 + b1*x2*y1*z3 + b2*x2*y1*z3 + b1*b2*x2*y1*z3 + b3*x2*y1*z3 + 2*c1*x2*y1*z3 + b2*c1*x2*y1*z3 + b1*b2*c1*x2*y1*z3 + b3*c1*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y1*z3 + b2*c2*x2*y1*z3 + b3*c2*x2*y1*z3 + 2*c1*c2*x2*y1*z3 + b1*c1*c2*x2*y1*z3 + b2*c1*c2*x2*y1*z3 + b3*c1*c2*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y1*z3 + 2*c3*x2*y1*z3 + b2*c3*x2*y1*z3 + b3*c3*x2*y1*z3 + b1*c1*c3*x2*y1*z3 + b2*c1*c3*x2*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y1*z3 + c2*c3*x2*y1*z3 + b1*c2*c3*x2*y1*z3 + b3*c2*c3*x2*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y1*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + 2*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*y1*z3 + b1*b2*x3*y1*z3 + b2*c1*x3*y1*z3 + b1*b2*c1*x3*y1*z3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*y1*z3 + b1*c2*x3*y1*z3 + b1*b2*c2*x3*y1*z3 + 2*c1*c2*x3*y1*z3 + b1*c1*c2*x3*y1*z3 + 2*b2*c1*c2*x3*y1*z3 + b1*b2*c1*c2*x3*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y1*z3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y1*z3 + b2*c3*x3*y1*z3 + 2*b2*c1*c3*x3*y1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y1*z3 + 2*c2*c3*x3*y1*z3 + b2*c2*c3*x3*y1*z3 + b1*b2*c2*c3*x3*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*y1*z3 + (b2*y1*(1 + y1)*z3)/2 + (b2*c1*y1*(1 + y1)*z3)/2 + (b2*c2*y1*(1 + y1)*z3)/2 + b1*c1*y2*z3 + b2*c1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z3 + b1*b2*c2*y2*z3 + b2*c1*c2*y2*z3 + b1*b2*c1*c2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3 + b1*c3*y2*z3 + b1*c1*c3*y2*z3 + b2*c1*c3*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + 2*b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3 + x1*y2*z3 + b3*x1*y2*z3 + b1*c1*x1*y2*z3 + b2*c1*x1*y2*z3 + b3*c1*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y2*z3 + b2*c2*x1*y2*z3 + b3*c2*x1*y2*z3 + b2*c1*c2*x1*y2*z3 + b1*b2*c1*c2*x1*y2*z3 + b3*c1*c2*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y2*z3 + c3*x1*y2*z3 + 2*b2*c3*x1*y2*z3 + b3*c3*x1*y2*z3 + c1*c3*x1*y2*z3 + b1*c1*c3*x1*y2*z3 + b2*c1*c3*x1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y2*z3 + b3*c2*c3*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y2*z3 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + 2*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y2*z3 + c1*x2*y2*z3 + b1*c1*x2*y2*z3 + b2*c1*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y2*z3 + b1*c2*x2*y2*z3 + b1*b2*c2*x2*y2*z3 + c1*c2*x2*y2*z3 + b1*c1*c2*x2*y2*z3 + b2*c1*c2*x2*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y2*z3 + b1*c3*x2*y2*z3 + b1*b2*c3*x2*y2*z3 + c1*c3*x2*y2*z3 + b1*c1*c3*x2*y2*z3 + b2*c1*c3*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y2*z3 + b1*x3*y2*z3 + c1*x3*y2*z3 + b1*c1*c2*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y2*z3 + b1*c3*x3*y2*z3 + b1*b2*c3*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*y2*z3 + y1*y2*z3 + b1*y1*y2*z3 + 2*b2*y1*y2*z3 + b1*b2*y1*y2*z3 + b3*y1*y2*z3 + b1*c1*y1*y2*z3 + b2*c1*y1*y2*z3 + b1*b2*c1*y1*y2*z3 + b3*c1*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y2*z3 + c2*y1*y2*z3 + b1*c2*y1*y2*z3 + b2*c2*y1*y2*z3 + b1*b2*c2*y1*y2*z3 + b3*c2*y1*y2*z3 + b2*c1*c2*y1*y2*z3 + b3*c1*c2*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y2*z3 + c3*y1*y2*z3 + b1*c3*y1*y2*z3 + b1*b2*c3*y1*y2*z3 + b3*c3*y1*y2*z3 + c1*c3*y1*y2*z3 + b1*c1*c3*y1*y2*z3 + b2*c1*c3*y1*y2*z3 + b1*b2*c1*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y2*z3 + b3*c2*c3*y1*y2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y2*z3 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + 2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y2*z3 + b1*c1*c2*y3*z3 + b2*c1*c2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*y3*z3 + b2*c2*x1*y3*z3 + 2*b2*c1*c2*x1*y3*z3 + b1*b2*c1*c2*x1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*y3*z3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*y3*z3 + 2*b2*c3*x1*y3*z3 + 2*b2*c1*c3*x1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*y3*z3 + b2*c2*c3*x1*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*y3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*y3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*y3*z3 + b1*c3*x2*y3*z3 + b1*b2*c3*x2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*y3*z3 + b1*c2*c3*x2*y3*z3 + b1*b2*c2*c3*x2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*y3*z3 + b1*c1*c2*x3*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*y3*z3 + b1*b2*c3*x3*y3*z3 + b1*c2*c3*x3*y3*z3 + b2*y1*y3*z3 + b1*b2*y1*y3*z3 + b1*b2*c1*y1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*y3*z3 + c2*y1*y3*z3 + b2*c2*y1*y3*z3 + b1*b2*c2*y1*y3*z3 + 2*b2*c1*c2*y1*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*y3*z3 + b2*c3*y1*y3*z3 + b1*b2*c3*y1*y3*z3 + 2*b2*c1*c3*y1*y3*z3 + b1*b2*c1*c3*y1*y3*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*y3*z3 + b2*c2*c3*y1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*y3*z3 + 2*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*y3*z3 + b1*y2*y3*z3 + c1*y2*y3*z3 + b1*c1*y2*y3*z3 + b2*c1*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*y3*z3 + b1*c2*y2*y3*z3 + b1*c1*c2*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*y3*z3 + b1*c3*y2*y3*z3 + c1*c3*y2*y3*z3 + b1*c1*c3*y2*y3*z3 + b2*c1*c3*y2*y3*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*y3*z3 + b1*c2*c3*y2*y3*z3 + b1*b2*c2*c3*y2*y3*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*y3*z3 + b1*b2*c1*z1*z3 + 2*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z3 + b2*c1*c2*z1*z3 + b1*b2*c1*c2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3 + b1*b2*c3*z1*z3 + b2*c1*c3*z1*z3 + b1*b2*c1*c3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z3 + b1*c2*c3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + 2*b2*c1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + 2*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + 2*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3 + 2*b2*x1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z1*z3 + b3*c2*x1*z1*z3 + b1*c1*c2*x1*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z1*z3 + b2*c3*x1*z1*z3 + b2*c1*c3*x1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z1*z3 + x2*z1*z3 + b1*x2*z1*z3 + 2*c1*x2*z1*z3 + b1*c1*x2*z1*z3 + b2*c1*x2*z1*z3 + b3*c1*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z1*z3 + c2*x2*z1*z3 + 2*c1*c2*x2*z1*z3 + b2*c1*c2*x2*z1*z3 + b1*b2*c1*c2*x2*z1*z3 + b3*c1*c2*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z1*z3 + 2*c3*x2*z1*z3 + b2*c3*x2*z1*z3 + b3*c3*x2*z1*z3 + b1*c1*c3*x2*z1*z3 + 2*b2*c1*c3*x2*z1*z3 + b1*b2*c1*c3*x2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z1*z3 + 2*c2*c3*x2*z1*z3 + b1*c2*c3*x2*z1*z3 + b2*c2*c3*x2*z1*z3 + b3*c2*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z1*z3 + 2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + 2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z1*z3 + b2*x3*z1*z3 + 2*b2*c1*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z1*z3 + c2*x3*z1*z3 + b1*c2*x3*z1*z3 + b2*c2*x3*z1*z3 + 2*c1*c2*x3*z1*z3 + 2*b2*c1*c2*x3*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + 2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z1*z3 + b2*c3*x3*z1*z3 + b2*c1*c3*x3*z1*z3 + b1*b2*c1*c3*x3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x3*z1*z3 + 2*c2*c3*x3*z1*z3 + b1*c2*c3*x3*z1*z3 + b2*c2*c3*x3*z1*z3 + b1*b2*c2*c3*x3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + 2*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x3*z1*z3 + 2*b2*y1*z1*z3 + b1*b2*y1*z1*z3 + b2*c1*y1*z1*z3 + b1*b2*c1*y1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z1*z3 + c2*y1*z1*z3 + b1*c2*y1*z1*z3 + b3*c2*y1*z1*z3 + c1*c2*y1*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z1*z3 + 2*b2*c3*y1*z1*z3 + b1*b2*c3*y1*z1*z3 + b2*c1*c3*y1*z1*z3 + b1*b2*c1*c3*y1*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z1*z3 + b1*c2*c3*y1*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z1*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z1*z3 + y2*z1*z3 + b1*y2*z1*z3 + b2*y2*z1*z3 + c1*y2*z1*z3 + b3*c1*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z1*z3 + c2*y2*z1*z3 + b1*b2*c2*y2*z1*z3 + b1*c1*c2*y2*z1*z3 + b2*c1*c2*y2*z1*z3 + b1*b2*c1*c2*y2*z1*z3 + b3*c1*c2*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z1*z3 + 2*c3*y2*z1*z3 + b1*c3*y2*z1*z3 + b2*c3*y2*z1*z3 + b3*c3*y2*z1*z3 + 2*b2*c1*c3*y2*z1*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z1*z3 + b2*c2*c3*y2*z1*z3 + b3*c2*c3*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z1*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y3*z1*z3 + b1*b2*c2*y3*z1*z3 + 2*b2*c1*c2*y3*z1*z3 + b1*b2*c1*c2*y3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + 2*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + 2*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z1*z3 + 2*b2*c1*c3*y3*z1*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z1*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z1*z3 + b1*b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b1*b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y3*z1*z3 + (b2*c1*z1*(1 + z1)*z3)/2 + (b2*c2*z1*(1 + z1)*z3)/2 + b1*b2*c1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3 + b1*b2*c2*z2*z3 + b1*c1*c2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3 + b1*c1*c3*z2*z3 + b1*b2*c1*c3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z2*z3 + b1*b2*c2*c3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z2*z3 + b1*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + b1*b2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3 + 2*b1*x1*z2*z3 + b2*x1*z2*z3 + 2*b1*c1*x1*z2*z3 + 2*b2*c1*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x1*z2*z3 + 2*b1*c2*x1*z2*z3 + 2*b2*c2*x1*z2*z3 + b1*b2*c2*x1*z2*z3 + b1*c1*c2*x1*z2*z3 + b2*c1*c2*x1*z2*z3 + b1*b2*c1*c2*x1*z2*z3 + b3*c1*c2*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x1*z2*z3 + c3*x1*z2*z3 + b1*c3*x1*z2*z3 + 2*b2*c3*x1*z2*z3 + c1*c3*x1*z2*z3 + b2*c1*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x1*z2*z3 + b1*c2*c3*x1*z2*z3 + b3*c2*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x1*z2*z3 + b1*x2*z2*z3 + b1*b2*c1*x2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x2*z2*z3 + b1*b2*c2*x2*z2*z3 + b1*b2*c1*c2*x2*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z2*z3 + b1*c3*x2*z2*z3 + c1*c3*x2*z2*z3 + b1*c1*c3*x2*z2*z3 + b2*c1*c3*x2*z2*z3 + b1*b2*c1*c3*x2*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*x2*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x2*z2*z3 + b1*b2*x3*z2*z3 + b1*c1*x3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*x3*z2*z3 + b1*b2*c2*x3*z2*z3 + b1*c1*c2*x3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x3*z2*z3 + b1*b2*c3*x3*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*x3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*x3*z2*z3 + 2*y1*z2*z3 + b1*y1*z2*z3 + b2*y1*z2*z3 + 2*b1*c1*y1*z2*z3 + 2*b2*c1*y1*z2*z3 + b1*b2*c1*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y1*z2*z3 + 2*c2*y1*z2*z3 + b1*c2*y1*z2*z3 + 2*b2*c2*y1*z2*z3 + b1*c1*c2*y1*z2*z3 + b2*c1*c2*y1*z2*z3 + b3*c1*c2*y1*z2*z3 + 2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y1*z2*z3 + c3*y1*z2*z3 + b1*c1*c3*y1*z2*z3 + b2*c1*c3*y1*z2*z3 + b1*b2*c1*c3*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y1*z2*z3 + c2*c3*y1*z2*z3 + b1*c2*c3*y1*z2*z3 + b2*c2*c3*y1*z2*z3 + b3*c2*c3*y1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y1*z2*z3 + (a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + 2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + 2*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y1*z2*z3 + b1*b2*c1*y2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z2*z3 + c1*c2*y2*z2*z3 + b2*c1*c2*y2*z2*z3 + b1*b2*c1*c2*y2*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + b1*c1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z2*z3 + b1*b2*c1*c3*y2*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*y2*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y2*z2*z3 + b1*b2*y3*z2*z3 + b1*b2*c1*y3*z2*z3 + b1*b2*c2*y3*z2*z3 + b1*c1*c2*y3*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y3*z2*z3 + b1*b2*c3*y3*z2*z3 + b1*b2*c1*c3*y3*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*y3*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*y3*z2*z3 + b2*z1*z2*z3 + 2*b1*c1*z1*z2*z3 + 2*b2*c1*z1*z2*z3 + b1*b2*c1*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b1*b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z1*z2*z3 + b2*c2*z1*z2*z3 + b1*b2*c2*z1*z2*z3 + b3*c2*z1*z2*z3 + 2*b1*c1*c2*z1*z2*z3 + b2*c1*c2*z1*z2*z3 + b1*b2*c1*c2*z1*z2*z3 + b3*c1*c2*z1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + (a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z2*z3 + b1*c3*z1*z2*z3 + b2*c3*z1*z2*z3 + b1*b2*c3*z1*z2*z3 + b1*c1*c3*z1*z2*z3 + 2*b2*c1*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b2*c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c3*z1*z2*z3 + b1*c2*c3*z1*z2*z3 + b3*c2*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z1*z2*z3 + b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*b2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + 2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z2*z3 + b2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b1*b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b1*b2*c1*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + 2*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + (a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z2*z3 + (b1*b2*z3*(1 + z3))/2 + (b2*c1*z3*(1 + z3))/2 + (b1*c2*z3*(1 + z3))/2 + (b1*b2*c2*z3*(1 + z3))/2 + (c1*c2*z3*(1 + z3))/2 + (b1*c1*c2*z3*(1 + z3))/2 + (b1*b2*c1*c2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z3*(1 + z3))/2 + (c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b2*c1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (c1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z3*(1 + z3))/2 + (b1*b2*c3*z3*(1 + z3))/2 + (b1*c2*c3*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*c3*z3*(1 + z3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + (b1*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z3*(1 + z3))/2 + (b1*c2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z3*(1 + z3))/2 + (b1*c1*c2*x1*z3*(1 + z3))/2 + (b2*c3*x1*z3*(1 + z3))/2 + (b2*c1*c3*x1*z3*(1 + z3))/2 + (b2*c2*c3*x1*z3*(1 + z3))/2 + (b1*x2*z3*(1 + z3))/2 + (b1*c2*x2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*x2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*x2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*x2*z3*(1 + z3))/2 + (b1*c2*y1*z3*(1 + z3))/2 + (b1*c1*c2*y1*z3*(1 + z3))/2 + (b2*c1*c3*y1*z3*(1 + z3))/2 + (b2*c2*c3*y1*z3*(1 + z3))/2 + (b1*y2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*y2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*y2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*y2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*y2*z3*(1 + z3))/2 + (b1*c2*z1*z3*(1 + z3))/2 + (b2*c2*z1*z3*(1 + z3))/2 + (b1*c1*c2*z1*z3*(1 + z3))/2 + (b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z1*z3*(1 + z3))/2 + (b2*c1*c3*z1*z3*(1 + z3))/2 + (b2*c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*z1*z3*(1 + z3))/2 + (b2*c2*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3*(1 + z3))/2 + (c2*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3*(1 + z3))/2 + (b2*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3*(1 + z3))/2 + ((a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*c3*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z1*z3*(1 + z3))/2 + (b1*z2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*z2*z3*(1 + z3))/2 + (b1*(a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*c2*z2*z3*(1 + z3))/2 + (b1*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a2 + b2 + b2*c2 - 2*b2*(a2 + b2)*c2)*z2*z3*(1 + z3))/2 + (b1*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3*(1 + z3))/2 + ((a1 + b1 + b1*c1 - 2*b1*(a1 + b1)*c1)*(a3 + b3 + b3*c3 - 2*b3*(a3 + b3)*c3)*z2*z3*(1 + z3))/2;
end;
#####################################################################
#####################################################################
#Space Group No. 120 ( I-4c2)
#####################################################################
Acpin120:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin120:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin120:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain120:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bzxyin120:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return x2*z1 + c1*x2*z1 + y2*z1 + c1*y2*z1 + c1*x2*z2 + c1*y2*z2 + c1*z1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 121 ( I-42m)
#####################################################################
Acpin121:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin121:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Axyzin121:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain121:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyzin121:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return (x1 + y1)*z2 + b1*((x1 + y1)*(x2 + y2) + (x1 + x2 + y1 + y2)*z2);
end;
#####################################################################
Bphiin121:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return b2*y1 + (a2 + b2*c1)*(x1 + y1) + (a2 + a2*b1 + a1*b2 + a2*b2 + b1*b2*c1)*(x1 + y1 + z1);
end;
#####################################################################
CGAPin121:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*a3*b1*x2 + a3*b1*c1*x2 + (a3*b1*x2*(1 + x2))/2 + (b1*c3*x2*(1 + x2))/2 + (b3*x1*x2*(1 + x2))/2 + (c3*x1*x2*(1 + x2))/2 + (b1*c3*x1*x2*(1 + x2))/2 + a2*x1*x3 + a1*a2*x1*x3 + a1*b2*x1*x3 + a2*c1*x1*x3 + a1*b2*c1*x1*x3 + a2*b2*c1*x1*x3 + a2*c2*x1*x3 + (3*a2*x1*(1 + x1)*x3)/2 + (a2*b2*x1*(1 + x1)*x3)/2 + b2*c2*x1*(1 + x1)*x3 + (3*b2*c3*x1*(1 + x1)*x3)/2 + a1*a2*x2*x3 + a1*b2*x2*x3 + a2*c1*x2*x3 + a1*b2*c1*x2*x3 + a2*b2*c1*x2*x3 + x1*x2*x3 + 2*a2*x1*x2*x3 + 2*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + b3*x1*x2*x3 + 3*b2*c2*x1*x2*x3 + c3*x1*x2*x3 + 2*b2*c3*x1*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a2*b1*x3*(1 + x3))/2 + (a1*b2*x3*(1 + x3))/2 + (a2*c1*x3*(1 + x3))/2 + (a1*b2*c1*x3*(1 + x3))/2 + (a2*b2*c1*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + a2*x1*x3*(1 + x3) + b2*x1*x3*(1 + x3) + (b2*c2*x1*x3*(1 + x3))/2 + (b2*c3*x1*x3*(1 + x3))/2 + a1*x2*x3*(1 + x3) + c1*x2*x3*(1 + x3) + (b3*x2*(1 + x2)*y1)/2 + (c3*x2*(1 + x2)*y1)/2 + (b1*c3*x2*(1 + x2)*y1)/2 + a2*x3*y1 + a1*a2*x3*y1 + a1*b2*x3*y1 + 3*a2*b2*x3*y1 + a2*c1*x3*y1 + a1*b2*c1*x3*y1 + a2*b2*c1*x3*y1 + a2*c2*x3*y1 + 3*b2*c2*x3*y1 + 3*a2*x1*x3*y1 + b2*x1*x3*y1 + a2*b2*x1*x3*y1 + 2*b2*c2*x1*x3*y1 + 3*b2*c3*x1*x3*y1 + 3*x2*x3*y1 + 4*a2*x2*x3*y1 + 4*b2*x2*x3*y1 + a2*b2*x2*x3*y1 + b3*x2*x3*y1 + 2*c2*x2*x3*y1 + 3*b2*c2*x2*x3*y1 + c3*x2*x3*y1 + 2*b2*c3*x2*x3*y1 + (3*a2*x3*(1 + x3)*y1)/2 + (c2*x3*(1 + x3)*y1)/2 + (b2*c2*x3*(1 + x3)*y1)/2 + (b2*c3*x3*(1 + x3)*y1)/2 + (3*a2*x3*y1*(1 + y1))/2 + (a2*b2*x3*y1*(1 + y1))/2 + b2*c2*x3*y1*(1 + y1) + (3*b2*c3*x3*y1*(1 + y1))/2 + a3*b1*y2 + a1*a3*b1*y2 + a3*b1*c1*y2 + a3*b1*x2*y2 + b1*c3*x2*y2 + b3*x1*x2*y2 + c3*x1*x2*y2 + b1*c3*x1*x2*y2 + a1*a2*x3*y2 + a2*b1*x3*y2 + a1*b2*x3*y2 + a2*c1*x3*y2 + a1*b2*c1*x3*y2 + a2*b2*c1*x3*y2 + b1*c2*x3*y2 + x1*x3*y2 + 2*a2*x1*x3*y2 + 2*b2*x1*x3*y2 + a2*b2*x1*x3*y2 + b3*x1*x3*y2 + 3*b2*c2*x1*x3*y2 + c3*x1*x3*y2 + 2*b2*c3*x1*x3*y2 + a1*x3*(1 + x3)*y2 + c1*x3*(1 + x3)*y2 + b3*x2*y1*y2 + c3*x2*y1*y2 + b1*c3*x2*y1*y2 + x3*y1*y2 + 3*a2*x3*y1*y2 + 2*b2*x3*y1*y2 + a2*b2*x3*y1*y2 + b3*x3*y1*y2 + c2*x3*y1*y2 + 3*b2*c2*x3*y1*y2 + c3*x3*y1*y2 + 2*b2*c3*x3*y1*y2 + (a3*b1*y2*(1 + y2))/2 + (b1*c3*y2*(1 + y2))/2 + (b3*x1*y2*(1 + y2))/2 + (c3*x1*y2*(1 + y2))/2 + (b1*c3*x1*y2*(1 + y2))/2 + (b3*y1*y2*(1 + y2))/2 + (c3*y1*y2*(1 + y2))/2 + (b1*c3*y1*y2*(1 + y2))/2 + a1*a2*x1*y3 + a1*b2*x1*y3 + a2*c1*x1*y3 + a1*b2*c1*x1*y3 + a2*b2*c1*x1*y3 + a2*c2*x1*y3 + (3*a2*x1*(1 + x1)*y3)/2 + (b2*x1*(1 + x1)*y3)/2 + (a2*b2*x1*(1 + x1)*y3)/2 + b2*c2*x1*(1 + x1)*y3 + (3*b2*c3*x1*(1 + x1)*y3)/2 + a1*a2*x2*y3 + a1*b2*x2*y3 + a2*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + 2*a2*x1*x2*y3 + b2*x1*x2*y3 + a2*b2*x1*x2*y3 + b3*x1*x2*y3 + 3*b2*c2*x1*x2*y3 + c3*x1*x2*y3 + 2*b2*c3*x1*x2*y3 + a1*a2*x3*y3 + a1*b2*x3*y3 + a2*c1*x3*y3 + a1*b2*c1*x3*y3 + a2*b2*c1*x3*y3 + 2*a2*x1*x3*y3 + 2*b2*x1*x3*y3 + b2*c2*x1*x3*y3 + b2*c3*x1*x3*y3 + a1*a2*y1*y3 + 3*b2*y1*y3 + a1*b2*y1*y3 + 3*a2*b2*y1*y3 + a2*c1*y1*y3 + a1*b2*c1*y1*y3 + a2*b2*c1*y1*y3 + a2*c2*y1*y3 + 3*b2*c2*y1*y3 + 3*a2*x1*y1*y3 + a2*b2*x1*y1*y3 + 2*b2*c2*x1*y1*y3 + 3*b2*c3*x1*y1*y3 + 4*a2*x2*y1*y3 + 3*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + b3*x2*y1*y3 + 2*c2*x2*y1*y3 + 3*b2*c2*x2*y1*y3 + c3*x2*y1*y3 + 2*b2*c3*x2*y1*y3 + 2*a2*x3*y1*y3 + 4*b2*x3*y1*y3 + b2*c2*x3*y1*y3 + b2*c3*x3*y1*y3 + (3*a2*y1*(1 + y1)*y3)/2 + (b2*y1*(1 + y1)*y3)/2 + (a2*b2*y1*(1 + y1)*y3)/2 + b2*c2*y1*(1 + y1)*y3 + (3*b2*c3*y1*(1 + y1)*y3)/2 + a1*a2*y2*y3 + b1*y2*y3 + a2*b1*y2*y3 + a1*b2*y2*y3 + a2*c1*y2*y3 + a1*b2*c1*y2*y3 + a2*b2*c1*y2*y3 + b1*c2*y2*y3 + 2*a2*x1*y2*y3 + 3*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + b3*x1*y2*y3 + 3*b2*c2*x1*y2*y3 + c3*x1*y2*y3 + 2*b2*c3*x1*y2*y3 + y1*y2*y3 + 3*a2*y1*y2*y3 + 3*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + b3*y1*y2*y3 + c2*y1*y2*y3 + 3*b2*c2*y1*y2*y3 + c3*y1*y2*y3 + 2*b2*c3*y1*y2*y3 + (a1*a2*y3*(1 + y3))/2 + (a2*b1*y3*(1 + y3))/2 + (a1*b2*y3*(1 + y3))/2 + (a2*c1*y3*(1 + y3))/2 + (a1*b2*c1*y3*(1 + y3))/2 + (a2*b2*c1*y3*(1 + y3))/2 + (b1*c2*y3*(1 + y3))/2 + a2*x1*y3*(1 + y3) + b2*x1*y3*(1 + y3) + (b2*c2*x1*y3*(1 + y3))/2 + (b2*c3*x1*y3*(1 + y3))/2 + (a1*x2*y3*(1 + y3))/2 + (c1*x2*y3*(1 + y3))/2 + (3*a2*y1*y3*(1 + y3))/2 + (c2*y1*y3*(1 + y3))/2 + (b2*c2*y1*y3*(1 + y3))/2 + (b2*c3*y1*y3*(1 + y3))/2 + (a1*y2*y3*(1 + y3))/2 + (c1*y2*y3*(1 + y3))/2 + a3*b1*x2*z1 + c3*x2*z1 + c3*x1*x2*z1 + (b3*x2*(1 + x2)*z1)/2 + c3*x2*(1 + x2)*z1 + (b1*c3*x2*(1 + x2)*z1)/2 + a2*x3*z1 + a1*a2*x3*z1 + a1*b2*x3*z1 + a2*c1*x3*z1 + a1*b2*c1*x3*z1 + a2*b2*c1*x3*z1 + a2*c2*x3*z1 + 3*a2*x1*x3*z1 + a2*b2*x1*x3*z1 + b2*c1*x1*x3*z1 + 3*b2*c2*x1*x3*z1 + 2*b2*c3*x1*x3*z1 + x2*x3*z1 + 2*a2*x2*x3*z1 + 2*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + b3*x2*x3*z1 + 3*b2*c2*x2*x3*z1 + c3*x2*x3*z1 + 2*b2*c3*x2*x3*z1 + a2*x3*(1 + x3)*z1 + b2*x3*(1 + x3)*z1 + (b2*c2*x3*(1 + x3)*z1)/2 + (b2*c3*x3*(1 + x3)*z1)/2 + c3*x2*y1*z1 + 3*a2*x3*y1*z1 + b2*x3*y1*z1 + a2*b2*x3*y1*z1 + b2*c1*x3*y1*z1 + 3*b2*c2*x3*y1*z1 + 2*b2*c3*x3*y1*z1 + a3*b1*y2*z1 + c3*y2*z1 + c3*x1*y2*z1 + b3*x2*y2*z1 + 2*c3*x2*y2*z1 + b1*c3*x2*y2*z1 + x3*y2*z1 + 2*a2*x3*y2*z1 + 2*b2*x3*y2*z1 + a2*b2*x3*y2*z1 + b3*x3*y2*z1 + 3*b2*c2*x3*y2*z1 + c3*x3*y2*z1 + 2*b2*c3*x3*y2*z1 + c3*y1*y2*z1 + (b3*y2*(1 + y2)*z1)/2 + c3*y2*(1 + y2)*z1 + (b1*c3*y2*(1 + y2)*z1)/2 + a1*a2*y3*z1 + a1*b2*y3*z1 + a2*c1*y3*z1 + a1*b2*c1*y3*z1 + a2*b2*c1*y3*z1 + a2*c2*y3*z1 + 3*a2*x1*y3*z1 + b2*x1*y3*z1 + a2*b2*x1*y3*z1 + b2*c1*x1*y3*z1 + 3*b2*c2*x1*y3*z1 + 2*b2*c3*x1*y3*z1 + 2*a2*x2*y3*z1 + b2*x2*y3*z1 + a2*b2*x2*y3*z1 + b3*x2*y3*z1 + 3*b2*c2*x2*y3*z1 + c3*x2*y3*z1 + 2*b2*c3*x2*y3*z1 + 2*a2*x3*y3*z1 + 2*b2*x3*y3*z1 + b2*c2*x3*y3*z1 + b2*c3*x3*y3*z1 + 3*a2*y1*y3*z1 + a2*b2*y1*y3*z1 + b2*c1*y1*y3*z1 + 3*b2*c2*y1*y3*z1 + 2*b2*c3*y1*y3*z1 + 2*a2*y2*y3*z1 + 3*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + b3*y2*y3*z1 + 3*b2*c2*y2*y3*z1 + c3*y2*y3*z1 + 2*b2*c3*y2*y3*z1 + a2*y3*(1 + y3)*z1 + b2*y3*(1 + y3)*z1 + (b2*c2*y3*(1 + y3)*z1)/2 + (b2*c3*y3*(1 + y3)*z1)/2 + (b3*c2*z1*(1 + z1))/2 + (3*a2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + b2*c2*x3*z1*(1 + z1) + (3*b2*c3*x3*z1*(1 + z1))/2 + (3*a2*y3*z1*(1 + z1))/2 + (b2*y3*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + b2*c2*y3*z1*(1 + z1) + (3*b2*c3*y3*z1*(1 + z1))/2 + c2*c3*(x1 + y1 + z1) + a1*a3*z2 + a1*a3*b1*z2 + (3*c3*x1*(1 + x1)*z2)/2 + b1*c3*x2*z2 + b3*x1*x2*z2 + c3*x1*x2*z2 + b1*c3*x1*x2*z2 + a1*a2*x3*z2 + a1*b2*x3*z2 + a2*c1*x3*z2 + a1*b2*c1*x3*z2 + a2*b2*c1*x3*z2 + 3*a2*x1*x3*z2 + b2*x1*x3*z2 + a2*b2*x1*x3*z2 + b3*x1*x3*z2 + 3*b2*c2*x1*x3*z2 + 2*b2*c3*x1*x3*z2 + a1*x3*(1 + x3)*z2 + 3*c3*x1*y1*z2 + b3*x2*y1*z2 + c3*x2*y1*z2 + b1*c3*x2*y1*z2 + 3*a2*x3*y1*z2 + 3*b2*x3*y1*z2 + a2*b2*x3*y1*z2 + b3*x3*y1*z2 + 3*b2*c2*x3*y1*z2 + 2*b2*c3*x3*y1*z2 + (3*c3*y1*(1 + y1)*z2)/2 + b1*c3*y2*z2 + b3*x1*y2*z2 + c3*x1*y2*z2 + b1*c3*x1*y2*z2 + b3*y1*y2*z2 + c3*y1*y2*z2 + b1*c3*y1*y2*z2 + a1*a2*y3*z2 + a1*b2*y3*z2 + a2*c1*y3*z2 + a1*b2*c1*y3*z2 + a2*b2*c1*y3*z2 + 3*a2*x1*y3*z2 + 2*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + b3*x1*y3*z2 + 3*b2*c2*x1*y3*z2 + 2*b2*c3*x1*y3*z2 + 3*a2*y1*y3*z2 + 4*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + b3*y1*y3*z2 + 3*b2*c2*y1*y3*z2 + 2*b2*c3*y1*y3*z2 + (a1*y3*(1 + y3)*z2)/2 + a3*z1*z2 + a3*b1*z1*z2 + c3*z1*z2 + c3*x1*z1*z2 + b3*x2*z1*z2 + b1*c3*x2*z1*z2 + 3*a2*x3*z1*z2 + b2*x3*z1*z2 + a2*b2*x3*z1*z2 + b3*x3*z1*z2 + 3*b2*c2*x3*z1*z2 + 2*b2*c3*x3*z1*z2 + c3*y1*z1*z2 + b3*y2*z1*z2 + b1*c3*y2*z1*z2 + 3*a2*y3*z1*z2 + 2*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + b3*y3*z1*z2 + 3*b2*c2*y3*z1*z2 + 2*b2*c3*y3*z1*z2 + (3*c3*z1*(1 + z1)*z2)/2 + (a3*b1*z2*(1 + z2))/2 + (b1*c3*z2*(1 + z2))/2 + (b3*x1*z2*(1 + z2))/2 + (c3*x1*z2*(1 + z2))/2 + (b1*c3*x1*z2*(1 + z2))/2 + (b3*y1*z2*(1 + z2))/2 + (c3*y1*z2*(1 + z2))/2 + (b1*c3*y1*z2*(1 + z2))/2 + (b3*z1*z2*(1 + z2))/2 + c3*z1*z2*(1 + z2) + (b1*c3*z1*z2*(1 + z2))/2 + a1*a2*x1*z3 + a1*b2*x1*z3 + a2*c1*x1*z3 + a1*b2*c1*x1*z3 + a2*b2*c1*x1*z3 + a2*x1*(1 + x1)*z3 + (a2*b2*x1*(1 + x1)*z3)/2 + (3*b2*c2*x1*(1 + x1)*z3)/2 + (3*b2*c3*x1*(1 + x1)*z3)/2 + a1*a2*x2*z3 + a1*b2*x2*z3 + a2*c1*x2*z3 + a1*b2*c1*x2*z3 + a2*b2*c1*x2*z3 + 2*x1*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + 2*b2*x1*x2*z3 + a2*b2*x1*x2*z3 + b3*x1*x2*z3 + c1*x1*x2*z3 + b1*c1*x1*x2*z3 + 2*c2*x1*x2*z3 + b1*c2*x1*x2*z3 + 2*b2*c2*x1*x2*z3 + 2*c3*x1*x2*z3 + b1*c3*x1*x2*z3 + 2*b2*c3*x1*x2*z3 + a1*a2*x3*z3 + a2*b1*x3*z3 + a1*b2*x3*z3 + a2*c1*x3*z3 + a1*b2*c1*x3*z3 + a2*b2*c1*x3*z3 + a2*b1*c2*x3*z3 + 3*a2*x1*x3*z3 + 3*b2*x1*x3*z3 + 3*b2*c2*x1*x3*z3 + b2*c3*x1*x3*z3 + 3*a2*y1*z3 + a1*a2*y1*z3 + a1*b2*y1*z3 + 3*a2*b2*y1*z3 + a2*c1*y1*z3 + a1*b2*c1*y1*z3 + a2*b2*c1*y1*z3 + 2*a2*x1*y1*z3 + b2*x1*y1*z3 + a2*b2*x1*y1*z3 + 3*b2*c2*x1*y1*z3 + 3*b2*c3*x1*y1*z3 + x2*y1*z3 + a1*x2*y1*z3 + 3*a2*x2*y1*z3 + 4*b2*x2*y1*z3 + a2*b2*x2*y1*z3 + b3*x2*y1*z3 + c1*x2*y1*z3 + b1*c1*x2*y1*z3 + 2*c2*x2*y1*z3 + b1*c2*x2*y1*z3 + 2*b2*c2*x2*y1*z3 + 2*c3*x2*y1*z3 + b1*c3*x2*y1*z3 + 2*b2*c3*x2*y1*z3 + 4*a2*x3*y1*z3 + 3*b2*x3*y1*z3 + a2*c2*x3*y1*z3 + 5*b2*c2*x3*y1*z3 + b2*c3*x3*y1*z3 + a2*y1*(1 + y1)*z3 + (a2*b2*y1*(1 + y1)*z3)/2 + (3*b2*c2*y1*(1 + y1)*z3)/2 + (3*b2*c3*y1*(1 + y1)*z3)/2 + a1*a2*y2*z3 + a2*b1*y2*z3 + a1*b2*y2*z3 + a2*c1*y2*z3 + a1*b2*c1*y2*z3 + a2*b2*c1*y2*z3 + x1*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + 2*b2*x1*y2*z3 + a2*b2*x1*y2*z3 + b3*x1*y2*z3 + c1*x1*y2*z3 + b1*c1*x1*y2*z3 + 2*c2*x1*y2*z3 + b1*c2*x1*y2*z3 + 2*b2*c2*x1*y2*z3 + 2*c3*x1*y2*z3 + b1*c3*x1*y2*z3 + 2*b2*c3*x1*y2*z3 + a1*y1*y2*z3 + 2*a2*y1*y2*z3 + 2*b2*y1*y2*z3 + a2*b2*y1*y2*z3 + b3*y1*y2*z3 + c1*y1*y2*z3 + b1*c1*y1*y2*z3 + 2*c2*y1*y2*z3 + b1*c2*y1*y2*z3 + 2*b2*c2*y1*y2*z3 + 2*c3*y1*y2*z3 + b1*c3*y1*y2*z3 + 2*b2*c3*y1*y2*z3 + a1*a2*y3*z3 + a1*b2*y3*z3 + a2*c1*y3*z3 + a1*b2*c1*y3*z3 + a2*b2*c1*y3*z3 + a2*b1*c2*y3*z3 + 3*a2*x1*y3*z3 + b2*x1*y3*z3 + 3*b2*c2*x1*y3*z3 + b2*c3*x1*y3*z3 + 5*a2*y1*y3*z3 + 3*b2*y1*y3*z3 + a2*c2*y1*y3*z3 + 5*b2*c2*y1*y3*z3 + b2*c3*y1*y3*z3 + a1*a2*z1*z3 + a1*b2*z1*z3 + a2*c1*z1*z3 + a1*b2*c1*z1*z3 + a2*b2*c1*z1*z3 + 2*a2*x1*z1*z3 + a2*b2*x1*z1*z3 + b2*c1*x1*z1*z3 + 2*b2*c2*x1*z1*z3 + 2*b2*c3*x1*z1*z3 + 2*x2*z1*z3 + a1*x2*z1*z3 + a2*x2*z1*z3 + 2*b2*x2*z1*z3 + a2*b2*x2*z1*z3 + b3*x2*z1*z3 + b1*c1*x2*z1*z3 + c2*x2*z1*z3 + b1*c2*x2*z1*z3 + 2*b2*c2*x2*z1*z3 + c3*x2*z1*z3 + b1*c3*x2*z1*z3 + 2*b2*c3*x2*z1*z3 + 3*a2*x3*z1*z3 + 3*b2*x3*z1*z3 + 3*b2*c2*x3*z1*z3 + b2*c3*x3*z1*z3 + 2*a2*y1*z1*z3 + b2*y1*z1*z3 + a2*b2*y1*z1*z3 + b2*c1*y1*z1*z3 + 2*b2*c2*y1*z1*z3 + 2*b2*c3*y1*z1*z3 + y2*z1*z3 + a1*y2*z1*z3 + a2*y2*z1*z3 + 2*b2*y2*z1*z3 + a2*b2*y2*z1*z3 + b3*y2*z1*z3 + b1*c1*y2*z1*z3 + c2*y2*z1*z3 + b1*c2*y2*z1*z3 + 2*b2*c2*y2*z1*z3 + c3*y2*z1*z3 + b1*c3*y2*z1*z3 + 2*b2*c3*y2*z1*z3 + 3*a2*y3*z1*z3 + b2*y3*z1*z3 + 3*b2*c2*y3*z1*z3 + b2*c3*y3*z1*z3 + a2*z1*(1 + z1)*z3 + (a2*b2*z1*(1 + z1)*z3)/2 + (3*b2*c2*z1*(1 + z1)*z3)/2 + (3*b2*c3*z1*(1 + z1)*z3)/2 + a1*a2*z2*z3 + a1*b2*z2*z3 + a2*c1*z2*z3 + a1*b2*c1*z2*z3 + a2*b2*c1*z2*z3 + a1*x1*z2*z3 + 2*a2*x1*z2*z3 + b2*x1*z2*z3 + a2*b2*x1*z2*z3 + b3*x1*z2*z3 + c1*x1*z2*z3 + b1*c1*x1*z2*z3 + b1*c2*x1*z2*z3 + 2*b2*c2*x1*z2*z3 + b1*c3*x1*z2*z3 + 2*b2*c3*x1*z2*z3 + 5*y1*z2*z3 + a1*y1*z2*z3 + 2*a2*y1*z2*z3 + 3*b2*y1*z2*z3 + a2*b2*y1*z2*z3 + b3*y1*z2*z3 + c1*y1*z2*z3 + b1*c1*y1*z2*z3 + b1*c2*y1*z2*z3 + 2*b2*c2*y1*z2*z3 + b1*c3*y1*z2*z3 + 2*b2*c3*y1*z2*z3 + a1*z1*z2*z3 + 2*a2*z1*z2*z3 + b2*z1*z2*z3 + a2*b2*z1*z2*z3 + b3*z1*z2*z3 + b1*c1*z1*z2*z3 + c2*z1*z2*z3 + b1*c2*z1*z2*z3 + 2*b2*c2*z1*z2*z3 + c3*z1*z2*z3 + b1*c3*z1*z2*z3 + 2*b2*c3*z1*z2*z3 + (a1*a2*z3*(1 + z3))/2 + (a2*b1*z3*(1 + z3))/2 + (a1*b2*z3*(1 + z3))/2 + (a2*c1*z3*(1 + z3))/2 + (a1*b2*c1*z3*(1 + z3))/2 + (a2*b2*c1*z3*(1 + z3))/2 + a2*x1*z3*(1 + z3) + b2*x1*z3*(1 + z3) + (c2*x1*z3*(1 + z3))/2 + (b2*c2*x1*z3*(1 + z3))/2 + (b2*c3*x1*z3*(1 + z3))/2 + 2*a1*x2*z3*(1 + z3) + 2*c1*x2*z3*(1 + z3) + (3*a2*y1*z3*(1 + z3))/2 + (c2*y1*z3*(1 + z3))/2 + (b2*c2*y1*z3*(1 + z3))/2 + (b2*c3*y1*z3*(1 + z3))/2 + 2*a1*y2*z3*(1 + z3) + 2*c1*y2*z3*(1 + z3) + a2*z1*z3*(1 + z3) + b2*z1*z3*(1 + z3) + (c2*z1*z3*(1 + z3))/2 + (b2*c2*z1*z3*(1 + z3))/2 + (b2*c3*z1*z3*(1 + z3))/2 + 2*a1*z2*z3*(1 + z3) + (a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1)*(x3 + y3 + z3) + c1*c2*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 122 ( I-42d)
#####################################################################
Acpin122:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return b1;
end;
#####################################################################
Amin122:=function(g1)
local x1,y1,z1,a1,b1,c1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];
return c1;
end;
#####################################################################
Bdeltain122:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bxyzin122:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];
return a1*a2 + a2*b1*b2 + b2*c1 + a1*b2*c1 + b1*c2 + a1*a2*b1*c2 + a2*b1*b2*c2 + a1*a2*b1*b2*c2 + c1*c2 + b1*c1*c2 + a1*b1*c1*c2 + a2*b1*c1*c2 + b2*c1*c2 + a1*b2*c1*c2 + a1*a2*b2*c1*c2 + a1*a2*b1*b2*c1*c2 + a2*x1 + a2*b1*x1 + b2*x1 + a2*c1*x1 + b1*c1*c2*x1 + b2*c1*c2*x1 + b1*x2 + a2*b1*x2 + a1*a2*b2*x2 + b1*b2*x2 + a1*a2*b1*b2*x2 + a2*c1*x2 + b1*c1*x2 + a1*b1*c1*x2 + a2*b2*c1*x2 + b1*b2*c1*x2 + a1*b1*b2*c1*x2 + a1*a2*b1*c2*x2 + a1*a2*b2*c2*x2 + b1*b2*c2*x2 + b1*c1*c2*x2 + b2*c1*c2*x2 + a2*b2*c1*c2*x2 + b1*b2*c1*c2*x2 + a2*b1*b2*c1*c2*x2 + x1*x2 + b1*x1*x2 + a2*y1 + a1*a2*b1*y1 + a1*b2*y1 + a2*b2*y1 + a1*a2*b1*b2*y1 + a2*c1*y1 + a2*b1*c1*y1 + a1*a2*b1*c1*y1 + b2*c1*y1 + a1*b2*c1*y1 + a1*a2*b2*c1*y1 + a2*b1*b2*c1*y1 + b1*c2*y1 + a1*b1*c2*y1 + a2*b1*c2*y1 + b2*c2*y1 + a1*b2*c2*y1 + a2*b2*c2*y1 + b1*c1*c2*y1 + b1*b2*c1*c2*y1 + x2*y1 + a1*b1*x2*y1 + a2*b1*x2*y1 + b1*b2*x2*y1 + a1*b1*b2*x2*y1 + a2*b1*b2*x2*y1 + b1*y2 + a2*b1*y2 + a1*a2*b1*y2 + a1*b2*y2 + a1*a2*b2*y2 + a1*b1*b2*y2 + a2*b1*b2*y2 + c1*y2 + a2*c1*y2 + a2*b1*c1*y2 + a1*a2*b1*c1*y2 + b2*c1*y2 + a1*b2*c1*y2 + a2*b2*c1*y2 + a1*a2*b2*c1*y2 + b1*b2*c1*y2 + a1*b1*b2*c1*y2 + a2*b1*b2*c1*y2 + b1*c2*y2 + a1*b1*c2*y2 + a2*b1*c2*y2 + a1*a2*b1*c2*y2 + a1*b2*c2*y2 + a1*a2*b2*c2*y2 + b1*b2*c2*y2 + b1*c1*c2*y2 + a2*b2*c1*c2*y2 + a2*b1*b2*c1*c2*y2 + x1*y2 + b1*x1*y2 + b1*x2*y2 + a1*b1*x2*y2 + a2*b1*x2*y2 + b1*b2*x2*y2 + a1*b1*b2*x2*y2 + a2*b1*b2*x2*y2 + y1*y2 + a1*b1*y1*y2 + a2*b1*y1*y2 + b1*b2*y1*y2 + a1*b1*b2*y1*y2 + a2*b1*b2*y1*y2 + a1*a2*b1*z1 + a1*a2*b1*b2*z1 + c2*z1 + b1*c2*z1 + b2*c2*z1 + c1*c2*z1 + b1*c1*c2*z1 + a1*b1*c1*c2*z1 + a2*b1*c1*c2*z1 + a1*b2*c1*c2*z1 + a2*b2*c1*c2*z1 + b1*b2*c1*c2*z1 + x2*z1 + a1*a2*b1*x2*z1 + a1*a2*b2*x2*z1 + b1*c1*x2*z1 + a1*b1*c1*x2*z1 + a2*b1*c1*x2*z1 + a2*b2*c1*x2*z1 + b1*b2*c1*x2*z1 + a1*b1*b2*c1*x2*z1 + a2*b1*y1*z1 + b2*y1*z1 + a1*b2*y1*z1 + a2*b2*y1*z1 + b2*c1*y1*z1 + b1*b2*c1*y1*z1 + y2*z1 + b1*y2*z1 + a1*b1*y2*z1 + a2*b1*y2*z1 + a1*a2*b1*y2*z1 + b2*y2*z1 + a1*b2*y2*z1 + a2*b2*y2*z1 + a1*a2*b2*y2*z1 + b1*c1*y2*z1 + a1*b1*c1*y2*z1 + a2*b1*c1*y2*z1 + b2*c1*y2*z1 + a2*b2*c1*y2*z1 + a1*b1*b2*c1*y2*z1 + b1*b2*z2 + b1*c1*z2 + a2*b1*c1*z2 + a1*b2*c1*z2 + a1*a2*b2*c1*z2 + a1*b1*b2*c1*z2 + a1*a2*b1*b2*c1*z2 + b1*c2*z2 + a1*a2*b1*c2*z2 + a1*a2*b2*c2*z2 + b1*b2*c2*z2 + c1*c2*z2 + a2*b2*c1*c2*z2 + b1*b2*c1*c2*z2 + a2*b1*b2*c1*c2*z2 + b1*x1*z2 + b1*x2*z2 + a1*a2*b1*x2*z2 + a1*a2*b2*x2*z2 + a2*b2*c1*x2*z2 + a2*b1*b2*c1*x2*z2 + b1*y1*z2 + b2*y1*z2 + a1*b2*y1*z2 + a2*b2*y1*z2 + b1*b2*y1*z2 + a1*b1*b2*y1*z2 + a2*b1*b2*y1*z2 + b2*c1*y1*z2 + b1*b2*c1*y1*z2 + b1*y2*z2 + a1*a2*b1*y2*z2 + a1*b2*y2*z2 + a1*a2*b2*y2*z2 + b1*b2*y2*z2 + a1*b1*b2*y2*z2 + a2*b1*b2*y2*z2 + b2*c1*y2*z2 + a2*b2*c1*y2*z2 + b1*b2*c1*y2*z2 + a2*b1*b2*c1*y2*z2 + z1*z2 + a1*a2*b1*z1*z2 + a1*a2*b2*z1*z2 + a1*b2*c1*z1*z2 + a1*b1*b2*c1*z1*z2;
end;
#####################################################################
Cin122:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];
return a1*b2*b3 + a1*a2*b3*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + b1*b2*b3*c1 + a1*a2*a3*c2 + a1*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a1*a3*b1*b2*c2 + a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a2*a3*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a1*a3*b3*c1*c2 + b1*b3*c1*c2 + b2*b3*c1*c2 + a2*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a1*a2*a3*b1*c3 + a1*a2*b2*c3 + a1*a2*a3*b2*c3 + a1*a3*b1*b2*c3 + a1*a2*b3*c3 + a1*a2*c1*c3 + a1*a2*a3*c1*c3 + a2*b1*c1*c3 + a1*a2*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a1*a2*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + (a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1)*c3 + a1*c2*c3 + a1*a3*c2*c3 + a1*a2*a3*c2*c3 + a1*b1*c2*c3 + a3*b1*c2*c3 + a1*a3*b1*c2*c3 + a1*b2*c2*c3 + a1*a3*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a2*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*b3*c2*c3 + a1*b1*b3*c2*c3 + a1*a2*b1*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a2*c1*c2*c3 + a1*a2*c1*c2*c3 + a3*c1*c2*c3 + a1*a3*c1*c2*c3 + a2*a3*c1*c2*c3 + b1*c1*c2*c3 + a2*b1*c1*c2*c3 + a1*a2*b1*c1*c2*c3 + a1*a3*b1*c1*c2*c3 + a2*a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + b1*b2*c1*c2*c3 + a1*b1*b2*c1*c2*c3 + a3*b1*b2*c1*c2*c3 + a2*a3*b1*b2*c1*c2*c3 + b3*c1*c2*c3 + a2*b3*c1*c2*c3 + a1*a2*b3*c1*c2*c3 + a3*b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a1*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*a2*a3*b1*x1 + a2*a3*b2*x1 + a1*a2*a3*b2*x1 + a2*a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a1*a2*a3*b2*b3*x1 + a2*a3*c1*x1 + a1*a2*a3*c1*x1 + a2*a3*b1*c1*x1 + a1*a2*a3*b1*c1*x1 + a2*a3*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a2*b1*b3*c1*x1 + a2*a3*b2*b3*c1*x1 + a2*a3*b1*b2*b3*c1*x1 + a1*a3*b1*c2*x1 + a1*a2*a3*b1*c2*x1 + a3*b2*c2*x1 + a2*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a2*b3*c2*x1 + a3*b3*c2*x1 + a1*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a2*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a2*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a1*a3*c1*c2*x1 + a1*a2*a3*c1*c2*x1 + a3*b1*c1*c2*x1 + a1*a3*b1*c1*c2*x1 + a2*a3*b1*c1*c2*x1 + a3*b2*c1*c2*x1 + a1*a3*b1*b2*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b3*c1*c2*x1 + b1*b2*b3*c1*c2*x1 + a2*c3*x1 + a1*a2*c3*x1 + a2*a3*c3*x1 + a2*b1*c3*x1 + a1*a2*b1*c3*x1 + a2*a3*b1*c3*x1 + a2*b2*c3*x1 + a3*b2*c3*x1 + a1*a3*b2*c3*x1 + a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a2*b3*c3*x1 + a2*b1*b3*c3*x1 + a2*b2*c1*c3*x1 + a2*b1*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + c2*c3*x1 + a1*c2*c3*x1 + a1*a3*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a2*b1*c2*c3*x1 + a1*a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + a1*a3*b1*c2*c3*x1 + a2*b2*c2*c3*x1 + a1*a2*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + a2*b1*b2*c2*c3*x1 + a1*a2*b3*c2*c3*x1 + a3*b3*c2*c3*x1 + a1*a3*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + b2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*c1*c2*c3*x1 + a1*a2*c1*c2*c3*x1 + a1*a3*c1*c2*c3*x1 + a3*b1*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a1*b1*b2*c1*c2*c3*x1 + a2*b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a1*b3*c1*c2*c3*x1 + a3*b3*c1*c2*c3*x1 + a1*b1*b3*c1*c2*c3*x1 + a2*b1*b3*c1*c2*c3*x1 + a3*b1*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + (a2*b3*x1*(1 + x1))/2 + (a3*c2*x1*(1 + x1))/2 + (a3*b1*c2*x1*(1 + x1))/2 + (a1*b3*c2*x1*(1 + x1))/2 + (b2*b3*c2*x1*(1 + x1))/2 + (b3*c1*c2*x1*(1 + x1))/2 + (b1*b3*c1*c2*x1*(1 + x1))/2 + (a2*c3*x1*(1 + x1))/2 + (a2*b2*c3*x1*(1 + x1))/2 + (a3*b2*c3*x1*(1 + x1))/2 + (a2*b3*c3*x1*(1 + x1))/2 + (b2*b3*c2*c3*x1*(1 + x1))/2 + b3*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + b1*b3*c1*x2 + a1*b1*b3*c1*x2 + a1*a3*c2*x2 + a1*a3*b1*c2*x2 + a1*b3*c2*x2 + a1*b1*b3*c2*x2 + a3*c1*c2*x2 + a1*a3*c1*c2*x2 + a2*a3*c1*c2*x2 + a2*a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + a3*b1*b2*c1*c2*x2 + b3*c1*c2*x2 + a2*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*a2*c3*x2 + a1*a2*b1*c3*x2 + a1*a2*c1*c3*x2 + a1*a3*c1*c3*x2 + b1*c1*c3*x2 + a1*b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a2*b2*c1*c3*x2 + a3*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + a2*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a1*b1*b3*c1*c3*x2 + a1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + a1*b1*b2*c2*c3*x2 + c1*c2*c3*x2 + a2*c1*c2*c3*x2 + b1*c1*c2*c3*x2 + a2*b1*c1*c2*c3*x2 + a3*b1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a2*b2*c1*c2*c3*x2 + a3*b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + a2*b3*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + a1*a2*a3*x1*x2 + a2*b3*x1*x2 + a2*a3*c1*x1*x2 + a2*a3*b1*c1*x1*x2 + a3*b1*c2*x1*x2 + a2*a3*b1*c2*x1*x2 + a1*a3*b2*c2*x1*x2 + a3*b1*b2*c2*x1*x2 + b3*c2*x1*x2 + b2*b3*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + a3*b1*b2*c1*c2*x1*x2 + a3*c3*x1*x2 + a2*b2*c3*x1*x2 + a3*b2*c3*x1*x2 + a2*b3*c3*x1*x2 + a1*c2*c3*x1*x2 + a2*b1*c2*c3*x1*x2 + a3*b1*c2*c3*x1*x2 + a1*b2*c2*c3*x1*x2 + b3*c2*c3*x1*x2 + a1*b3*c2*c3*x1*x2 + b1*b3*c2*c3*x1*x2 + b2*b3*c2*c3*x1*x2 + c1*c2*c3*x1*x2 + b1*c1*c2*c3*x1*x2 + b2*c1*c2*c3*x1*x2 + b1*b2*c1*c2*c3*x1*x2 + b3*c1*c2*c3*x1*x2 + b1*b3*c1*c2*c3*x1*x2 + a1*c2*x3 + a1*a2*c2*x3 + a1*a3*c2*x3 + a1*a3*b1*c2*x3 + a1*b2*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + a1*a3*c1*c2*x3 + a2*a3*b1*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a1*a2*c3*x3 + a1*a2*b2*c3*x3 + a1*c2*c3*x3 + a1*a3*c2*c3*x3 + b1*c2*c3*x3 + a1*b1*c2*c3*x3 + a2*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a2*a3*b1*c2*c3*x3 + b1*b3*c2*c3*x3 + a1*b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + a1*c1*c2*c3*x3 + a2*c1*c2*c3*x3 + a3*c1*c2*c3*x3 + a2*a3*c1*c2*c3*x3 + b1*c1*c2*c3*x3 + a2*b1*c1*c2*c3*x3 + a3*b1*c1*c2*c3*x3 + b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + a3*b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + a1*b3*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + b1*b3*c1*c2*c3*x3 + a2*b1*b3*c1*c2*c3*x3 + b2*b3*c1*c2*c3*x3 + a2*a3*x1*x3 + a2*a3*b1*x1*x3 + a1*a2*a3*b2*x1*x3 + a1*a2*a3*b3*x1*x3 + a2*a3*b2*c1*x1*x3 + a2*a3*b1*b2*c1*x1*x3 + a2*a3*b3*c1*x1*x3 + a2*a3*b1*b3*c1*x1*x3 + a1*a3*c2*x1*x3 + a2*a3*c2*x1*x3 + b1*c2*x1*x3 + a2*b1*c2*x1*x3 + a3*b1*c2*x1*x3 + b2*c2*x1*x3 + a1*b2*c2*x1*x3 + a2*b2*c2*x1*x3 + a1*a2*b2*c2*x1*x3 + a1*a3*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a1*a3*b3*c2*x1*x3 + b1*b3*c2*x1*x3 + a2*b1*b3*c2*x1*x3 + a1*b2*b3*c2*x1*x3 + a1*a2*b2*b3*c2*x1*x3 + a3*c1*c2*x1*x3 + a3*b1*c1*c2*x1*x3 + b2*c1*c2*x1*x3 + a2*b2*c1*c2*x1*x3 + a3*b2*c1*c2*x1*x3 + b1*b2*c1*c2*x1*x3 + a2*b1*b2*c1*c2*x1*x3 + a3*b1*b2*c1*c2*x1*x3 + a3*b3*c1*c2*x1*x3 + a3*b1*b3*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + a2*b2*b3*c1*c2*x1*x3 + b1*b2*b3*c1*c2*x1*x3 + a2*b1*b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + a2*b2*c3*x1*x3 + a1*c2*c3*x1*x3 + a2*c2*c3*x1*x3 + b1*c2*c3*x1*x3 + a3*b1*c2*c3*x1*x3 + a3*b2*c2*c3*x1*x3 + b3*c2*c3*x1*x3 + a1*b3*c2*c3*x1*x3 + a2*b3*c2*c3*x1*x3 + b1*b3*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + c1*c2*c3*x1*x3 + b1*c1*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + b1*b3*c1*c2*c3*x1*x3 + a2*a3*b1*y1 + a1*a2*a3*b1*y1 + a1*a2*a3*b2*y1 + a2*a3*b1*b2*y1 + a2*b3*y1 + a2*b1*b3*y1 + a2*a3*b2*b3*y1 + a1*a2*a3*b2*b3*y1 + a1*a2*a3*c1*y1 + a1*a2*a3*b1*c1*y1 + a2*a3*b2*c1*y1 + a2*a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a2*b1*b3*c1*y1 + a2*a3*b2*b3*c1*y1 + a2*a3*b1*b2*b3*c1*y1 + a3*c2*y1 + a3*b1*c2*y1 + a1*a3*b1*c2*y1 + a2*a3*b1*c2*y1 + a1*a2*a3*b1*c2*y1 + a3*b2*c2*y1 + a2*a3*b2*c2*y1 + a3*b1*b2*c2*y1 + b3*c2*y1 + a2*b3*c2*y1 + a3*b3*c2*y1 + b1*b3*c2*y1 + a1*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a2*b2*b3*c2*y1 + b1*b2*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a1*a3*c1*c2*y1 + a2*a3*c1*c2*y1 + a1*a2*a3*c1*c2*y1 + a1*a3*b1*c1*c2*y1 + a2*a3*b1*c1*c2*y1 + a3*b2*c1*c2*y1 + a3*b1*b2*c1*c2*y1 + a1*a3*b1*b2*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a2*c3*y1 + a1*a2*c3*y1 + a2*a3*c3*y1 + a1*a2*b1*c3*y1 + a2*a3*b1*c3*y1 + a2*b2*c3*y1 + a1*a3*b2*c3*y1 + a2*b1*b2*c3*y1 + a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a2*b1*b3*c3*y1 + a2*b2*c1*c3*y1 + a2*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + c2*c3*y1 + a1*c2*c3*y1 + a3*c2*c3*y1 + a1*a3*c2*c3*y1 + b1*c2*c3*y1 + a1*b1*c2*c3*y1 + a1*a2*b1*c2*c3*y1 + a1*a3*b1*c2*c3*y1 + b2*c2*c3*y1 + a1*a2*b2*c2*c3*y1 + a2*a3*b2*c2*c3*y1 + a2*b1*b2*c2*c3*y1 + a2*b3*c2*c3*y1 + a1*a2*b3*c2*c3*y1 + a1*a3*b3*c2*c3*y1 + a2*b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a3*b2*b3*c2*c3*y1 + b1*b2*b3*c2*c3*y1 + c1*c2*c3*y1 + a1*c1*c2*c3*y1 + a2*c1*c2*c3*y1 + a1*a2*c1*c2*c3*y1 + a3*c1*c2*c3*y1 + a1*a3*c1*c2*c3*y1 + a3*b1*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + a1*b1*b2*c1*c2*c3*y1 + a2*b1*b2*c1*c2*c3*y1 + a1*b3*c1*c2*c3*y1 + a3*b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + a1*b1*b3*c1*c2*c3*y1 + a2*b1*b3*c1*c2*c3*y1 + a3*b1*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a2*a3*x1*y1 + a2*b3*x1*y1 + a3*c2*x1*y1 + a3*b2*c2*x1*y1 + b2*b3*c2*x1*y1 + a2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b1*c2*c3*x1*y1 + b2*c2*c3*x1*y1 + b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + a2*a3*x2*y1 + a1*a2*a3*x2*y1 + a2*b3*x2*y1 + a2*a3*c1*x2*y1 + a2*a3*b1*c1*x2*y1 + a3*b1*c2*x2*y1 + a2*a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + a1*a3*b2*c2*x2*y1 + a3*b1*b2*c2*x2*y1 + b3*c2*x2*y1 + b2*b3*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + a3*b1*b2*c1*c2*x2*y1 + a3*c3*x2*y1 + a2*b2*c3*x2*y1 + a3*b2*c3*x2*y1 + a2*b3*c3*x2*y1 + c2*c3*x2*y1 + a1*c2*c3*x2*y1 + a2*b1*c2*c3*x2*y1 + a3*b1*c2*c3*x2*y1 + b2*c2*c3*x2*y1 + a1*b2*c2*c3*x2*y1 + a1*b3*c2*c3*x2*y1 + b1*b3*c2*c3*x2*y1 + b2*b3*c2*c3*x2*y1 + c1*c2*c3*x2*y1 + b1*c1*c2*c3*x2*y1 + b2*c1*c2*c3*x2*y1 + b1*b2*c1*c2*c3*x2*y1 + b3*c1*c2*c3*x2*y1 + b1*b3*c1*c2*c3*x2*y1 + a2*a3*x3*y1 + a2*a3*b1*x3*y1 + a2*a3*b2*x3*y1 + a1*a2*a3*b2*x3*y1 + a2*a3*b3*x3*y1 + a1*a2*a3*b3*x3*y1 + a2*a3*b2*c1*x3*y1 + a2*a3*b1*b2*c1*x3*y1 + a2*a3*b3*c1*x3*y1 + a2*a3*b1*b3*c1*x3*y1 + a3*c2*x3*y1 + a1*a3*c2*x3*y1 + a2*a3*c2*x3*y1 + b1*c2*x3*y1 + a2*b1*c2*x3*y1 + a3*b1*c2*x3*y1 + a1*b2*c2*x3*y1 + a1*a2*b2*c2*x3*y1 + a3*b2*c2*x3*y1 + a1*a3*b2*c2*x3*y1 + b3*c2*x3*y1 + a2*b3*c2*x3*y1 + a3*b3*c2*x3*y1 + a1*a3*b3*c2*x3*y1 + b1*b3*c2*x3*y1 + a2*b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + a1*b2*b3*c2*x3*y1 + a2*b2*b3*c2*x3*y1 + a1*a2*b2*b3*c2*x3*y1 + a3*c1*c2*x3*y1 + a3*b1*c1*c2*x3*y1 + b2*c1*c2*x3*y1 + a2*b2*c1*c2*x3*y1 + a3*b2*c1*c2*x3*y1 + b1*b2*c1*c2*x3*y1 + a2*b1*b2*c1*c2*x3*y1 + a3*b1*b2*c1*c2*x3*y1 + a3*b3*c1*c2*x3*y1 + a3*b1*b3*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a2*b2*b3*c1*c2*x3*y1 + b1*b2*b3*c1*c2*x3*y1 + a2*b1*b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + a2*b2*c3*x3*y1 + c2*c3*x3*y1 + a1*c2*c3*x3*y1 + a2*c2*c3*x3*y1 + b1*c2*c3*x3*y1 + a3*b1*c2*c3*x3*y1 + a3*b2*c2*c3*x3*y1 + a1*b3*c2*c3*x3*y1 + a2*b3*c2*c3*x3*y1 + b1*b3*c2*c3*x3*y1 + b2*b3*c2*c3*x3*y1 + c1*c2*c3*x3*y1 + b1*c1*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + b1*b3*c1*c2*c3*x3*y1 + (a2*b3*y1*(1 + y1))/2 + (a3*c2*y1*(1 + y1))/2 + (a3*b1*c2*y1*(1 + y1))/2 + (b3*c2*y1*(1 + y1))/2 + (a1*b3*c2*y1*(1 + y1))/2 + (b2*b3*c2*y1*(1 + y1))/2 + (b3*c1*c2*y1*(1 + y1))/2 + (b1*b3*c1*c2*y1*(1 + y1))/2 + (a2*c3*y1*(1 + y1))/2 + (a2*b2*c3*y1*(1 + y1))/2 + (a3*b2*c3*y1*(1 + y1))/2 + (a2*b3*c3*y1*(1 + y1))/2 + (b2*b3*c2*c3*y1*(1 + y1))/2 + a3*b1*y2 + a2*a3*b1*y2 + a3*c1*y2 + a2*a3*c1*y2 + a3*b1*c1*y2 + a2*a3*b1*c1*y2 + b3*c1*y2 + a1*b3*c1*y2 + a2*b3*c1*y2 + a1*b1*b3*c1*y2 + a1*a3*c2*y2 + a3*b1*c2*y2 + a1*a3*b1*c2*y2 + a2*a3*b1*c2*y2 + a1*b3*c2*y2 + b1*b3*c2*y2 + a1*b1*b3*c2*y2 + a3*c1*c2*y2 + a1*a3*c1*c2*y2 + a3*b1*c1*c2*y2 + a2*a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a2*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*a2*c3*y2 + b1*c3*y2 + a1*b1*c3*y2 + a2*b1*c3*y2 + a1*a2*b1*c3*y2 + c1*c3*y2 + a1*c1*c3*y2 + a2*c1*c3*y2 + a1*a2*c1*c3*y2 + a3*c1*c3*y2 + a1*a3*c1*c3*y2 + b1*c1*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a3*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + b3*c1*c3*y2 + a2*b3*c1*c3*y2 + a1*b1*b3*c1*c3*y2 + a1*c2*c3*y2 + b1*c2*c3*y2 + a1*b1*c2*c3*y2 + a2*b1*c2*c3*y2 + a3*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a1*b1*b2*c2*c3*y2 + a3*c1*c2*c3*y2 + b1*c1*c2*c3*y2 + a2*b1*c1*c2*c3*y2 + a3*b1*c1*c2*c3*y2 + b2*c1*c2*c3*y2 + a2*b2*c1*c2*c3*y2 + a3*b2*c1*c2*c3*y2 + a1*b3*c1*c2*c3*y2 + a2*b3*c1*c2*c3*y2 + a1*a3*x1*y2 + a2*a3*x1*y2 + a1*a2*a3*x1*y2 + a3*b1*x1*y2 + a1*a3*b2*x1*y2 + b3*x1*y2 + a1*b3*x1*y2 + a2*b3*x1*y2 + a1*a2*b3*x1*y2 + a1*a3*b3*x1*y2 + a3*c1*x1*y2 + a2*a3*c1*x1*y2 + a3*b1*c1*x1*y2 + a2*a3*b1*c1*x1*y2 + a3*b2*c1*x1*y2 + a3*b1*b2*c1*x1*y2 + b3*c1*x1*y2 + a2*b3*c1*x1*y2 + a3*b3*c1*x1*y2 + b1*b3*c1*x1*y2 + a2*b1*b3*c1*x1*y2 + a3*b1*b3*c1*x1*y2 + a2*a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + a1*a3*b2*c2*x1*y2 + a3*b1*b2*c2*x1*y2 + a1*b3*c2*x1*y2 + b1*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + a1*b2*b3*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + a3*b1*b2*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + b1*b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + b1*b2*b3*c1*c2*x1*y2 + c3*x1*y2 + a3*c3*x1*y2 + b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + b3*c3*x1*y2 + a2*b3*c3*x1*y2 + c2*c3*x1*y2 + a1*c2*c3*x1*y2 + b1*c2*c3*x1*y2 + a2*b1*c2*c3*x1*y2 + a3*b1*c2*c3*x1*y2 + b2*c2*c3*x1*y2 + a1*b2*c2*c3*x1*y2 + a1*b3*c2*c3*x1*y2 + b1*b3*c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b1*c1*c2*c3*x1*y2 + b2*c1*c2*c3*x1*y2 + b1*b2*c1*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b1*b3*c1*c2*c3*x1*y2 + a3*y1*y2 + a1*a3*y1*y2 + a1*a2*a3*y1*y2 + a3*b1*y1*y2 + a3*b2*y1*y2 + a1*a3*b2*y1*y2 + a1*b3*y1*y2 + a1*a2*b3*y1*y2 + a3*b3*y1*y2 + a1*a3*b3*y1*y2 + a3*c1*y1*y2 + a2*a3*c1*y1*y2 + a3*b1*c1*y1*y2 + a2*a3*b1*c1*y1*y2 + a3*b2*c1*y1*y2 + a3*b1*b2*c1*y1*y2 + b3*c1*y1*y2 + a2*b3*c1*y1*y2 + a3*b3*c1*y1*y2 + b1*b3*c1*y1*y2 + a2*b1*b3*c1*y1*y2 + a3*b1*b3*c1*y1*y2 + a2*a3*b1*c2*y1*y2 + a1*a3*b2*c2*y1*y2 + a3*b1*b2*c2*y1*y2 + b3*c2*y1*y2 + a1*b3*c2*y1*y2 + b1*b3*c2*y1*y2 + a1*b2*b3*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + a3*b1*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + b1*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + b1*b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a3*c3*y1*y2 + b2*c3*y1*y2 + a2*b2*c3*y1*y2 + a3*b2*c3*y1*y2 + b3*c3*y1*y2 + a2*b3*c3*y1*y2 + a1*c2*c3*y1*y2 + b1*c2*c3*y1*y2 + a2*b1*c2*c3*y1*y2 + a3*b1*c2*c3*y1*y2 + a1*b2*c2*c3*y1*y2 + b3*c2*c3*y1*y2 + a1*b3*c2*c3*y1*y2 + b1*b3*c2*c3*y1*y2 + b2*b3*c2*c3*y1*y2 + c1*c2*c3*y1*y2 + b1*c1*c2*c3*y1*y2 + b2*c1*c2*c3*y1*y2 + b1*b2*c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + b1*b3*c1*c2*c3*y1*y2 + a2*b1*y3 + a2*a3*b1*y3 + a2*b1*b3*y3 + a2*a3*b1*b3*y3 + a2*c1*y3 + a2*a3*c1*y3 + b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b3*c1*y3 + a2*a3*b3*c1*y3 + a2*b1*b3*c1*y3 + a2*a3*b1*b3*c1*y3 + a1*c2*y3 + a1*a2*c2*y3 + a1*a3*c2*y3 + a1*b1*c2*y3 + a1*a3*b1*c2*y3 + a1*b2*c2*y3 + a1*a2*b2*c2*y3 + a1*a3*b2*c2*y3 + a2*b1*b3*c2*y3 + a2*a3*b1*b3*c2*y3 + a1*c1*c2*y3 + a1*a3*c1*c2*y3 + b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + a2*a3*b1*c1*c2*y3 + b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + b3*c1*c2*y3 + a2*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + a2*a3*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a1*a2*c3*y3 + a1*b2*c3*y3 + a1*a2*b2*c3*y3 + a1*a3*c2*c3*y3 + a1*b1*c2*c3*y3 + a2*a3*b1*c2*c3*y3 + a1*b1*b3*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + a1*b2*b3*c2*c3*y3 + c1*c2*c3*y3 + a1*c1*c2*c3*y3 + a2*a3*c1*c2*c3*y3 + b1*c1*c2*c3*y3 + a2*b1*c1*c2*c3*y3 + a3*b1*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a3*b1*b2*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + a2*b3*c1*c2*c3*y3 + a2*b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a2*x1*y3 + a2*a3*x1*y3 + a2*b1*x1*y3 + a2*a3*b1*x1*y3 + b2*x1*y3 + a1*b2*x1*y3 + a1*a2*b2*x1*y3 + a3*b2*x1*y3 + a1*a3*b2*x1*y3 + a1*a2*a3*b2*x1*y3 + a2*b3*x1*y3 + a1*a2*b3*x1*y3 + a2*a3*b3*x1*y3 + a1*a2*a3*b3*x1*y3 + b2*c1*x1*y3 + a2*b2*c1*x1*y3 + a3*b2*c1*x1*y3 + a2*a3*b2*c1*x1*y3 + b1*b2*c1*x1*y3 + a2*b1*b2*c1*x1*y3 + a3*b1*b2*c1*x1*y3 + a2*a3*b1*b2*c1*x1*y3 + a2*b3*c1*x1*y3 + a2*a3*b3*c1*x1*y3 + a2*b1*b3*c1*x1*y3 + a2*a3*b1*b3*c1*x1*y3 + c2*x1*y3 + a1*c2*x1*y3 + a2*c2*x1*y3 + a3*c2*x1*y3 + a1*a3*c2*x1*y3 + a2*a3*c2*x1*y3 + b1*c2*x1*y3 + a2*b1*c2*x1*y3 + a3*b1*c2*x1*y3 + a1*b2*c2*x1*y3 + a2*b2*c2*x1*y3 + a1*a2*b2*c2*x1*y3 + a1*a3*b2*c2*x1*y3 + b3*c2*x1*y3 + a1*b3*c2*x1*y3 + a2*b3*c2*x1*y3 + a3*b3*c2*x1*y3 + a1*a3*b3*c2*x1*y3 + b1*b3*c2*x1*y3 + a2*b1*b3*c2*x1*y3 + a3*b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + a1*a2*b2*b3*c2*x1*y3 + a3*b2*b3*c2*x1*y3 + c1*c2*x1*y3 + a3*c1*c2*x1*y3 + b1*c1*c2*x1*y3 + a3*b1*c1*c2*x1*y3 + b2*c1*c2*x1*y3 + a2*b2*c1*c2*x1*y3 + a3*b2*c1*c2*x1*y3 + b1*b2*c1*c2*x1*y3 + a2*b1*b2*c1*c2*x1*y3 + a3*b1*b2*c1*c2*x1*y3 + b3*c1*c2*x1*y3 + a3*b3*c1*c2*x1*y3 + b1*b3*c1*c2*x1*y3 + a3*b1*b3*c1*c2*x1*y3 + a2*b2*b3*c1*c2*x1*y3 + a2*b1*b2*b3*c1*c2*x1*y3 + a2*c3*x1*y3 + b2*c3*x1*y3 + a2*b2*c3*x1*y3 + c2*c3*x1*y3 + a1*c2*c3*x1*y3 + a2*c2*c3*x1*y3 + a3*b1*c2*c3*x1*y3 + b2*c2*c3*x1*y3 + a3*b2*c2*c3*x1*y3 + a1*b3*c2*c3*x1*y3 + a2*b3*c2*c3*x1*y3 + b1*b3*c2*c3*x1*y3 + b2*b3*c2*c3*x1*y3 + c1*c2*c3*x1*y3 + b1*c1*c2*c3*x1*y3 + b3*c1*c2*c3*x1*y3 + b1*b3*c1*c2*c3*x1*y3 + a2*y1*y3 + a2*a3*y1*y3 + a2*b1*y1*y3 + a2*a3*b1*y1*y3 + a1*b2*y1*y3 + a2*b2*y1*y3 + a1*a2*b2*y1*y3 + a1*a3*b2*y1*y3 + a2*a3*b2*y1*y3 + a1*a2*a3*b2*y1*y3 + a1*a2*b3*y1*y3 + a1*a2*a3*b3*y1*y3 + b2*c1*y1*y3 + a2*b2*c1*y1*y3 + a3*b2*c1*y1*y3 + a2*a3*b2*c1*y1*y3 + b1*b2*c1*y1*y3 + a2*b1*b2*c1*y1*y3 + a3*b1*b2*c1*y1*y3 + a2*a3*b1*b2*c1*y1*y3 + a2*b3*c1*y1*y3 + a2*a3*b3*c1*y1*y3 + a2*b1*b3*c1*y1*y3 + a2*a3*b1*b3*c1*y1*y3 + a1*c2*y1*y3 + a2*c2*y1*y3 + a1*a3*c2*y1*y3 + a2*a3*c2*y1*y3 + b1*c2*y1*y3 + a2*b1*c2*y1*y3 + a3*b1*c2*y1*y3 + b2*c2*y1*y3 + a1*b2*c2*y1*y3 + a1*a2*b2*c2*y1*y3 + a3*b2*c2*y1*y3 + a1*a3*b2*c2*y1*y3 + a1*b3*c2*y1*y3 + a2*b3*c2*y1*y3 + a1*a3*b3*c2*y1*y3 + b1*b3*c2*y1*y3 + a2*b1*b3*c2*y1*y3 + a3*b1*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + a2*b2*b3*c2*y1*y3 + a1*a2*b2*b3*c2*y1*y3 + a3*b2*b3*c2*y1*y3 + c1*c2*y1*y3 + a3*c1*c2*y1*y3 + b1*c1*c2*y1*y3 + a3*b1*c1*c2*y1*y3 + b2*c1*c2*y1*y3 + a2*b2*c1*c2*y1*y3 + a3*b2*c1*c2*y1*y3 + b1*b2*c1*c2*y1*y3 + a2*b1*b2*c1*c2*y1*y3 + a3*b1*b2*c1*c2*y1*y3 + b3*c1*c2*y1*y3 + a3*b3*c1*c2*y1*y3 + b1*b3*c1*c2*y1*y3 + a3*b1*b3*c1*c2*y1*y3 + a2*b2*b3*c1*c2*y1*y3 + a2*b1*b2*b3*c1*c2*y1*y3 + a2*c3*y1*y3 + b2*c3*y1*y3 + a2*b2*c3*y1*y3 + a1*c2*c3*y1*y3 + a2*c2*c3*y1*y3 + a3*b1*c2*c3*y1*y3 + b2*c2*c3*y1*y3 + a3*b2*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + a1*b3*c2*c3*y1*y3 + a2*b3*c2*c3*y1*y3 + b1*b3*c2*c3*y1*y3 + b2*b3*c2*c3*y1*y3 + c1*c2*c3*y1*y3 + b1*c1*c2*c3*y1*y3 + b3*c1*c2*c3*y1*y3 + b1*b3*c1*c2*c3*y1*y3 + a1*a2*a3*b1*z1 + a1*a2*a3*b2*z1 + a2*a3*b1*b2*z1 + a2*b1*b3*z1 + a1*a2*a3*b2*b3*z1 + a1*a2*a3*c1*z1 + a2*a3*b1*c1*z1 + a1*a2*a3*b1*c1*z1 + a2*a3*b1*b2*c1*z1 + a2*b1*b3*c1*z1 + a2*a3*b1*b2*b3*c1*z1 + a1*a3*c2*z1 + a1*a3*b1*c2*z1 + a1*a2*a3*b1*c2*z1 + a2*a3*b2*c2*z1 + a3*b1*b2*c2*z1 + a2*b3*c2*z1 + a1*b1*b3*c2*z1 + a3*b1*b3*c2*z1 + b2*b3*c2*z1 + b1*b2*b3*c2*z1 + a2*b1*b2*b3*c2*z1 + a1*a3*c1*c2*z1 + a2*a3*c1*c2*z1 + a1*a2*a3*c1*c2*z1 + a3*b1*c1*c2*z1 + a1*a3*b1*c1*c2*z1 + a2*a3*b1*c1*c2*z1 + a3*b2*c1*c2*z1 + a1*a3*b1*b2*c1*c2*z1 + a2*b3*c1*c2*z1 + b2*b3*c1*c2*z1 + b1*b2*b3*c1*c2*z1 + a2*b1*c3*z1 + a1*a2*b1*c3*z1 + a2*a3*b1*c3*z1 + a1*a3*b2*c3*z1 + a2*b1*b2*c3*z1 + a3*b1*b2*c3*z1 + a2*b1*b3*c3*z1 + a2*b1*b2*c1*c3*z1 + a2*b1*b3*c1*c3*z1 + a1*c2*c3*z1 + a2*c2*c3*z1 + a3*c2*c3*z1 + a1*a3*c2*c3*z1 + b1*c2*c3*z1 + a2*b1*c2*c3*z1 + a1*a2*b1*c2*c3*z1 + a3*b1*c2*c3*z1 + a1*a3*b1*c2*c3*z1 + a1*b2*c2*c3*z1 + a1*a2*b2*c2*c3*z1 + a2*a3*b2*c2*c3*z1 + a2*b1*b2*c2*c3*z1 + a2*b3*c2*c3*z1 + a1*a2*b3*c2*c3*z1 + a3*b3*c2*c3*z1 + a1*a3*b3*c2*c3*z1 + a2*b1*b3*c2*c3*z1 + a2*b2*b3*c2*c3*z1 + a3*b2*b3*c2*c3*z1 + b1*b2*b3*c2*c3*z1 + a1*c1*c2*c3*z1 + a1*a2*c1*c2*c3*z1 + a3*c1*c2*c3*z1 + a1*a3*c1*c2*c3*z1 + a3*b1*c1*c2*c3*z1 + a2*b2*c1*c2*c3*z1 + a3*b2*c1*c2*c3*z1 + a1*b1*b2*c1*c2*c3*z1 + a2*b1*b2*c1*c2*c3*z1 + b3*c1*c2*c3*z1 + a1*b3*c1*c2*c3*z1 + a2*b3*c1*c2*c3*z1 + a1*b1*b3*c1*c2*c3*z1 + a2*b1*b3*c1*c2*c3*z1 + a3*b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + b1*b2*b3*c1*c2*c3*z1 + a2*b3*x1*z1 + a2*a3*c1*x1*z1 + a1*a3*c2*x1*z1 + a2*a3*c2*x1*z1 + a3*b2*c2*x1*z1 + a1*b3*c2*x1*z1 + b2*b3*c2*x1*z1 + a3*c1*c2*x1*z1 + a3*b2*c1*c2*x1*z1 + a1*b3*c1*c2*x1*z1 + a2*c3*x1*z1 + a2*b2*c3*x1*z1 + a3*b2*c3*x1*z1 + a2*b3*c3*x1*z1 + a1*c2*c3*x1*z1 + a2*c2*c3*x1*z1 + a3*c2*c3*x1*z1 + b3*c2*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + b2*c1*c2*c3*x1*z1 + b3*c1*c2*c3*x1*z1 + a1*a2*a3*x2*z1 + a2*b3*x2*z1 + a2*a3*b1*c1*x2*z1 + a3*c2*x2*z1 + a2*a3*c2*x2*z1 + a3*b1*c2*x2*z1 + a2*a3*b1*c2*x2*z1 + a3*b2*c2*x2*z1 + a1*a3*b2*c2*x2*z1 + a3*b1*b2*c2*x2*z1 + b3*c2*x2*z1 + b2*b3*c2*x2*z1 + a3*b1*b2*c1*c2*x2*z1 + a3*c3*x2*z1 + a2*b2*c3*x2*z1 + a3*b2*c3*x2*z1 + a2*b3*c3*x2*z1 + a1*c2*c3*x2*z1 + a2*c2*c3*x2*z1 + a3*c2*c3*x2*z1 + a2*b1*c2*c3*x2*z1 + a3*b1*c2*c3*x2*z1 + a1*b2*c2*c3*x2*z1 + a1*b3*c2*c3*x2*z1 + b1*b3*c2*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + b1*c1*c2*c3*x2*z1 + b1*b2*c1*c2*c3*x2*z1 + b1*b3*c1*c2*c3*x2*z1 + a2*a3*b1*x3*z1 + a1*a2*a3*b2*x3*z1 + a1*a2*a3*b3*x3*z1 + a2*a3*b1*b2*c1*x3*z1 + a2*a3*b1*b3*c1*x3*z1 + c2*x3*z1 + a2*c2*x3*z1 + a3*c2*x3*z1 + a1*a3*c2*x3*z1 + a2*a3*c2*x3*z1 + b1*c2*x3*z1 + a2*b1*c2*x3*z1 + a3*b1*c2*x3*z1 + b2*c2*x3*z1 + a1*b2*c2*x3*z1 + a2*b2*c2*x3*z1 + a1*a2*b2*c2*x3*z1 + a1*a3*b2*c2*x3*z1 + a1*a3*b3*c2*x3*z1 + b1*b3*c2*x3*z1 + a2*b1*b3*c2*x3*z1 + a1*b2*b3*c2*x3*z1 + a1*a2*b2*b3*c2*x3*z1 + a3*b1*c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + a2*b1*b2*c1*c2*x3*z1 + a3*b1*b2*c1*c2*x3*z1 + a3*b1*b3*c1*c2*x3*z1 + b1*b2*b3*c1*c2*x3*z1 + a2*b1*b2*b3*c1*c2*x3*z1 + a2*c3*x3*z1 + a2*b2*c3*x3*z1 + c2*c3*x3*z1 + a1*c2*c3*x3*z1 + a2*c2*c3*x3*z1 + a3*c2*c3*x3*z1 + b1*c2*c3*x3*z1 + a3*b1*c2*c3*x3*z1 + a3*b2*c2*c3*x3*z1 + a1*b3*c2*c3*x3*z1 + a2*b3*c2*c3*x3*z1 + b1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + b1*c1*c2*c3*x3*z1 + b1*b3*c1*c2*c3*x3*z1 + a2*a3*y1*z1 + a2*b3*y1*z1 + a2*a3*c1*y1*z1 + a3*c2*y1*z1 + a1*a3*c2*y1*z1 + a2*a3*c2*y1*z1 + a3*b1*c2*y1*z1 + b2*b3*c2*y1*z1 + a3*c1*c2*y1*z1 + a3*b2*c1*c2*y1*z1 + a1*b3*c1*c2*y1*z1 + b1*b3*c1*c2*y1*z1 + a2*c3*y1*z1 + a2*b2*c3*y1*z1 + a3*b2*c3*y1*z1 + a2*b3*c3*y1*z1 + a1*c2*c3*y1*z1 + a2*c2*c3*y1*z1 + a3*c2*c3*y1*z1 + b1*c2*c3*y1*z1 + b2*c2*c3*y1*z1 + b2*b3*c2*c3*y1*z1 + b2*c1*c2*c3*y1*z1 + b3*c1*c2*c3*y1*z1 + a3*y2*z1 + a1*a3*y2*z1 + a2*a3*y2*z1 + a1*a2*a3*y2*z1 + a3*b1*y2*z1 + a1*a3*b2*y2*z1 + b3*y2*z1 + a1*b3*y2*z1 + a2*b3*y2*z1 + a1*a2*b3*y2*z1 + a1*a3*b3*y2*z1 + a3*b1*c1*y2*z1 + a2*a3*b1*c1*y2*z1 + a3*b1*b2*c1*y2*z1 + b1*b3*c1*y2*z1 + a2*b1*b3*c1*y2*z1 + a3*b1*b3*c1*y2*z1 + a2*a3*c2*y2*z1 + a2*a3*b1*c2*y2*z1 + a1*a3*b2*c2*y2*z1 + a3*b1*b2*c2*y2*z1 + b3*c2*y2*z1 + a1*b3*c2*y2*z1 + b1*b3*c2*y2*z1 + b2*b3*c2*y2*z1 + a1*b2*b3*c2*y2*z1 + a3*b1*b2*c1*c2*y2*z1 + b1*b3*c1*c2*y2*z1 + b1*b2*b3*c1*c2*y2*z1 + c3*y2*z1 + a3*c3*y2*z1 + b2*c3*y2*z1 + a2*b2*c3*y2*z1 + a3*b2*c3*y2*z1 + b3*c3*y2*z1 + a2*b3*c3*y2*z1 + a1*c2*c3*y2*z1 + a2*c2*c3*y2*z1 + a3*c2*c3*y2*z1 + b1*c2*c3*y2*z1 + a2*b1*c2*c3*y2*z1 + a3*b1*c2*c3*y2*z1 + b2*c2*c3*y2*z1 + a1*b2*c2*c3*y2*z1 + b3*c2*c3*y2*z1 + a1*b3*c2*c3*y2*z1 + b1*b3*c2*c3*y2*z1 + b2*b3*c2*c3*y2*z1 + b1*c1*c2*c3*y2*z1 + b1*b2*c1*c2*c3*y2*z1 + b1*b3*c1*c2*c3*y2*z1 + a2*b1*y3*z1 + a2*a3*b1*y3*z1 + b2*y3*z1 + a1*b2*y3*z1 + a1*a2*b2*y3*z1 + a3*b2*y3*z1 + a1*a3*b2*y3*z1 + a1*a2*a3*b2*y3*z1 + a2*b3*y3*z1 + a1*a2*b3*y3*z1 + a2*a3*b3*y3*z1 + a1*a2*a3*b3*y3*z1 + b1*b2*c1*y3*z1 + a2*b1*b2*c1*y3*z1 + a3*b1*b2*c1*y3*z1 + a2*a3*b1*b2*c1*y3*z1 + a2*b1*b3*c1*y3*z1 + a2*a3*b1*b3*c1*y3*z1 + a1*c2*y3*z1 + a1*a3*c2*y3*z1 + a2*a3*c2*y3*z1 + b1*c2*y3*z1 + a2*b1*c2*y3*z1 + a3*b1*c2*y3*z1 + a1*b2*c2*y3*z1 + a2*b2*c2*y3*z1 + a1*a2*b2*c2*y3*z1 + a1*a3*b2*c2*y3*z1 + a1*b3*c2*y3*z1 + a1*a3*b3*c2*y3*z1 + b1*b3*c2*y3*z1 + a2*b1*b3*c2*y3*z1 + a3*b1*b3*c2*y3*z1 + b2*b3*c2*y3*z1 + a1*a2*b2*b3*c2*y3*z1 + a3*b2*b3*c2*y3*z1 + b1*c1*c2*y3*z1 + a3*b1*c1*c2*y3*z1 + b1*b2*c1*c2*y3*z1 + a2*b1*b2*c1*c2*y3*z1 + a3*b1*b2*c1*c2*y3*z1 + b1*b3*c1*c2*y3*z1 + a3*b1*b3*c1*c2*y3*z1 + a2*b1*b2*b3*c1*c2*y3*z1 + a2*c3*y3*z1 + b2*c3*y3*z1 + a2*b2*c3*y3*z1 + c2*c3*y3*z1 + a1*c2*c3*y3*z1 + a2*c2*c3*y3*z1 + a3*c2*c3*y3*z1 + a3*b1*c2*c3*y3*z1 + b2*c2*c3*y3*z1 + a3*b2*c2*c3*y3*z1 + b3*c2*c3*y3*z1 + a1*b3*c2*c3*y3*z1 + a2*b3*c2*c3*y3*z1 + b1*b3*c2*c3*y3*z1 + b2*b3*c2*c3*y3*z1 + b1*c1*c2*c3*y3*z1 + b1*b3*c1*c2*c3*y3*z1 + (a2*b3*z1*(1 + z1))/2 + (a3*b1*c2*z1*(1 + z1))/2 + (a1*b3*c2*z1*(1 + z1))/2 + (b2*b3*c2*z1*(1 + z1))/2 + (b1*b3*c1*c2*z1*(1 + z1))/2 + (a2*c3*z1*(1 + z1))/2 + (a2*b2*c3*z1*(1 + z1))/2 + (a3*b2*c3*z1*(1 + z1))/2 + (a2*b3*c3*z1*(1 + z1))/2 + (b2*b3*c2*c3*z1*(1 + z1))/2 + a1*b1*b3*c1*z2 + a1*a3*b1*c2*z2 + a1*b1*b3*c2*z2 + a1*a3*c1*c2*z2 + a2*a3*c1*c2*z2 + a3*b2*c1*c2*z2 + a2*b3*c1*c2*z2 + b2*b3*c1*c2*z2 + a1*a2*b1*c3*z2 + a1*a2*c1*c3*z2 + a1*a3*c1*c3*z2 + a1*b2*c1*c3*z2 + a1*b1*b2*c1*c3*z2 + a1*b3*c1*c3*z2 + a1*b1*b3*c1*c3*z2 + a1*b1*b2*c2*c3*z2 + a3*c1*c2*c3*z2 + a2*b2*c1*c2*c3*z2 + a3*b2*c1*c2*c3*z2 + b3*c1*c2*c3*z2 + a1*b3*c1*c2*c3*z2 + a2*b3*c1*c2*c3*z2 + b2*b3*c1*c2*c3*z2 + a1*a2*a3*x1*z2 + a2*b3*x1*z2 + a2*a3*c1*x1*z2 + a2*a3*b1*c1*x1*z2 + a1*a3*c2*x1*z2 + a2*a3*c2*x1*z2 + a2*a3*b1*c2*x1*z2 + a3*b2*c2*x1*z2 + a1*a3*b2*c2*x1*z2 + a3*b1*b2*c2*x1*z2 + b2*b3*c2*x1*z2 + a3*c1*c2*x1*z2 + a3*b1*c1*c2*x1*z2 + a3*b2*c1*c2*x1*z2 + a3*b1*b2*c1*c2*x1*z2 + a2*c3*x1*z2 + a2*b2*c3*x1*z2 + a3*b2*c3*x1*z2 + a2*b3*c3*x1*z2 + a2*c2*c3*x1*z2 + a3*c2*c3*x1*z2 + a2*b1*c2*c3*x1*z2 + a3*b1*c2*c3*x1*z2 + a1*b2*c2*c3*x1*z2 + b3*c2*c3*x1*z2 + a1*b3*c2*c3*x1*z2 + b1*b3*c2*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + b2*c1*c2*c3*x1*z2 + b1*b2*c1*c2*c3*x1*z2 + b3*c1*c2*c3*x1*z2 + b1*b3*c1*c2*c3*x1*z2 + a2*a3*y1*z2 + a1*a2*a3*y1*z2 + a2*b3*y1*z2 + a2*a3*c1*y1*z2 + a2*a3*b1*c1*y1*z2 + a3*c2*y1*z2 + a1*a3*c2*y1*z2 + a2*a3*c2*y1*z2 + a2*a3*b1*c2*y1*z2 + a1*a3*b2*c2*y1*z2 + a3*b1*b2*c2*y1*z2 + b2*b3*c2*y1*z2 + a3*c1*c2*y1*z2 + a3*b1*c1*c2*y1*z2 + a3*b2*c1*c2*y1*z2 + a3*b1*b2*c1*c2*y1*z2 + a2*c3*y1*z2 + a2*b2*c3*y1*z2 + a3*b2*c3*y1*z2 + a2*b3*c3*y1*z2 + a2*c2*c3*y1*z2 + a3*c2*c3*y1*z2 + a2*b1*c2*c3*y1*z2 + a3*b1*c2*c3*y1*z2 + b2*c2*c3*y1*z2 + a1*b2*c2*c3*y1*z2 + a1*b3*c2*c3*y1*z2 + b1*b3*c2*c3*y1*z2 + b2*b3*c2*c3*y1*z2 + b2*c1*c2*c3*y1*z2 + b1*b2*c1*c2*c3*y1*z2 + b3*c1*c2*c3*y1*z2 + b1*b3*c1*c2*c3*y1*z2 + a1*a2*a3*z1*z2 + a2*b3*z1*z2 + a2*a3*b1*c1*z1*z2 + a1*a3*c2*z1*z2 + a2*a3*b1*c2*z1*z2 + a1*a3*b2*c2*z1*z2 + a3*b1*b2*c2*z1*z2 + b2*b3*c2*z1*z2 + a3*b1*c1*c2*z1*z2 + a3*b1*b2*c1*c2*z1*z2 + a2*c3*z1*z2 + a2*b2*c3*z1*z2 + a3*b2*c3*z1*z2 + a2*b3*c3*z1*z2 + a2*b1*c2*c3*z1*z2 + a3*b1*c2*c3*z1*z2 + a1*b2*c2*c3*z1*z2 + a1*b3*c2*c3*z1*z2 + b1*b3*c2*c3*z1*z2 + b2*b3*c2*c3*z1*z2 + b1*b2*c1*c2*c3*z1*z2 + b1*b3*c1*c2*c3*z1*z2 + a1*a3*b1*c2*z3 + a1*a2*b2*c2*z3 + a1*a3*b2*c2*z3 + a1*a3*c1*c2*z3 + a2*a3*b1*c1*c2*z3 + a3*b1*b2*c1*c2*z3 + a1*a2*b2*c3*z3 + a1*a3*c2*c3*z3 + a2*a3*b1*c2*c3*z3 + a1*b3*c2*c3*z3 + a1*b1*b3*c2*c3*z3 + a2*b1*b3*c2*c3*z3 + a1*b2*b3*c2*c3*z3 + a3*c1*c2*c3*z3 + a2*a3*c1*c2*c3*z3 + a3*b2*c1*c2*c3*z3 + a3*b1*b2*c1*c2*c3*z3 + b3*c1*c2*c3*z3 + a1*b3*c1*c2*c3*z3 + a2*b3*c1*c2*c3*z3 + a2*b1*b3*c1*c2*c3*z3 + b2*b3*c1*c2*c3*z3 + a2*a3*x1*z3 + a2*a3*b1*x1*z3 + a1*a2*a3*b2*x1*z3 + a1*a2*a3*b3*x1*z3 + a2*a3*b2*c1*x1*z3 + a2*a3*b1*b2*c1*x1*z3 + a2*a3*b3*c1*x1*z3 + a2*a3*b1*b3*c1*x1*z3 + a1*a3*c2*x1*z3 + a2*a3*c2*x1*z3 + a2*b2*c2*x1*z3 + a2*b3*c2*x1*z3 + a1*a2*b3*c2*x1*z3 + a2*b1*b3*c2*x1*z3 + a1*a2*b2*b3*c2*x1*z3 + a3*c1*c2*x1*z3 + a3*b1*c1*c2*x1*z3 + a2*b3*c1*c2*x1*z3 + a2*b1*b3*c1*c2*x1*z3 + a2*b2*b3*c1*c2*x1*z3 + a2*b1*b2*b3*c1*c2*x1*z3 + a2*b2*c3*x1*z3 + a3*c2*c3*x1*z3 + a3*b1*c2*c3*x1*z3 + a3*b2*c2*c3*x1*z3 + b3*c2*c3*x1*z3 + a1*b3*c2*c3*x1*z3 + a2*b3*c2*c3*x1*z3 + b1*b3*c2*c3*x1*z3 + b2*b3*c2*c3*x1*z3 + b3*c1*c2*c3*x1*z3 + b1*b3*c1*c2*c3*x1*z3 + a2*a3*y1*z3 + a2*a3*b1*y1*z3 + a2*a3*b2*y1*z3 + a1*a2*a3*b2*y1*z3 + a2*a3*b3*y1*z3 + a1*a2*a3*b3*y1*z3 + a2*a3*b2*c1*y1*z3 + a2*a3*b1*b2*c1*y1*z3 + a2*a3*b3*c1*y1*z3 + a2*a3*b1*b3*c1*y1*z3 + a3*c2*y1*z3 + a1*a3*c2*y1*z3 + a2*a3*c2*y1*z3 + a2*b2*c2*y1*z3 + a1*a2*b3*c2*y1*z3 + a2*b1*b3*c2*y1*z3 + a2*b2*b3*c2*y1*z3 + a1*a2*b2*b3*c2*y1*z3 + a3*c1*c2*y1*z3 + a3*b1*c1*c2*y1*z3 + a2*b3*c1*c2*y1*z3 + a2*b1*b3*c1*c2*y1*z3 + a2*b2*b3*c1*c2*y1*z3 + a2*b1*b2*b3*c1*c2*y1*z3 + a2*b2*c3*y1*z3 + a3*c2*c3*y1*z3 + a3*b1*c2*c3*y1*z3 + a3*b2*c2*c3*y1*z3 + a1*b3*c2*c3*y1*z3 + a2*b3*c2*c3*y1*z3 + b1*b3*c2*c3*y1*z3 + b2*b3*c2*c3*y1*z3 + b3*c1*c2*c3*y1*z3 + b1*b3*c1*c2*c3*y1*z3 + a2*a3*b1*z1*z3 + a1*a2*a3*b2*z1*z3 + a1*a2*a3*b3*z1*z3 + a2*a3*b1*b2*c1*z1*z3 + a2*a3*b1*b3*c1*z1*z3 + a1*a3*c2*z1*z3 + a2*a3*c2*z1*z3 + a2*b2*c2*z1*z3 + a1*a2*b3*c2*z1*z3 + a2*b1*b3*c2*z1*z3 + a1*a2*b2*b3*c2*z1*z3 + a3*b1*c1*c2*z1*z3 + a2*b1*b3*c1*c2*z1*z3 + a2*b1*b2*b3*c1*c2*z1*z3 + a2*b2*c3*z1*z3 + a3*b1*c2*c3*z1*z3 + a3*b2*c2*c3*z1*z3 + a1*b3*c2*c3*z1*z3 + a2*b3*c2*c3*z1*z3 + b1*b3*c2*c3*z1*z3 + b2*b3*c2*c3*z1*z3 + b1*b3*c1*c2*c3*z1*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 123 ( P4/mmm)
#####################################################################
Aiin123:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin123:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin123:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyin123:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1;
end;
#####################################################################
Azin123:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return z1;
end;
#####################################################################
Bdeltain123:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bxyin123:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 124 ( P4/mcc)
#####################################################################
Aiin124:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin124:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin124:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyin124:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1;
end;
#####################################################################
Bdeltain124:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bxyin124:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 125 ( P4/nbm)
#####################################################################
Aiin125:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin125:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin125:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Azin125:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return z1;
end;
#####################################################################
Bdeltain125:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin125:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b2*(c1 + d1) + 2*d1*d2 + b2*y1 + (a2 + b2*c1)*(x1 + y1);
end;
#####################################################################
#####################################################################
#Space Group No. 126 ( P4/nnc)
#####################################################################
Aiin126:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Acpin126:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Amin126:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Bdeltain126:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + b1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1;
end;
#####################################################################
Bcmxyin126:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b2*c1 + a1*c2 + a2*d1 + a2*b2*d1 + b2*c2*d1 + b2*y1 + (a2 + b2*c1 + c2)*(x1 + y1);
end;
#####################################################################
Bcmxyzin126:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return b2*c1*c2 + b2*c2*d1 + (b2 + c2)*(x1 + y1) + b2*z1;
end;
#####################################################################
CGAPin126:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return b1*b2*b3 + a2*a3*b2*c1 + a2*a3*b3*c1 + b3*(a1*a2 + a1*b2 + b1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1) + a2*a3*c1*c2 + a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*c1*c3 + a3*b2*c1*c3 + a2*a3*b2*c1*c3 + a2*b3*c1*c3 + a2*a3*b3*c1*c3 + a3*b2*b3*c1*c3 + a2*a3*b2*b3*c1*c3 + a2*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a2*a3*b2*d1 + a2*b3*d1 + a2*a3*b3*d1 + a2*b2*b3*d1 + a3*b2*b3*d1 + a2*a3*b2*b3*d1 + a2*a3*c1*d1 + a2*b2*b3*c1*d1 + a3*b2*b3*c1*d1 + a2*a3*b2*b3*c1*d1 + a3*b2*c2*d1 + a2*b3*c2*d1 + b2*b3*c2*d1 + a2*b2*b3*c2*d1 + a2*a3*b2*b3*c2*d1 + a3*c1*c2*d1 + a3*b2*c1*c2*d1 + a2*a3*b2*c1*c2*d1 + b3*c1*c2*d1 + a2*b3*c1*c2*d1 + b2*b3*c1*c2*d1 + a2*b2*b3*c1*c2*d1 + a3*b2*b3*c1*c2*d1 + a2*a3*c3*d1 + a3*b2*c3*d1 + a2*a3*b2*c3*d1 + a2*a3*b3*c3*d1 + b2*b3*c3*d1 + a2*b2*b3*c3*d1 + a3*b2*b3*c3*d1 + a2*a3*b2*b3*c3*d1 + a2*c1*c3*d1 + a2*a3*c1*c3*d1 + a2*b3*c1*c3*d1 + b2*b3*c1*c3*d1 + a2*b2*b3*c1*c3*d1 + a2*a3*c2*c3*d1 + b2*c2*c3*d1 + a2*b2*c2*c3*d1 + a2*a3*b2*c2*c3*d1 + a2*b3*c2*c3*d1 + b2*b3*c2*c3*d1 + c1*c2*c3*d1 + a3*c1*c2*c3*d1 + b2*c1*c2*c3*d1 + a2*b2*c1*c2*c3*d1 + a2*a3*b2*c1*c2*c3*d1 + b3*c1*c2*c3*d1 + a3*b2*c1*d2 + a2*a3*b2*c1*d2 + a2*b3*c1*d2 + b2*b3*c1*d2 + a2*b2*b3*c1*d2 + a3*b2*b3*c1*d2 + a2*a3*b2*b3*c1*d2 + a3*c1*c2*d2 + a2*a3*c1*c2*d2 + a2*a3*b2*c1*c2*d2 + a2*b3*c1*c2*d2 + a3*b3*c1*c2*d2 + a2*a3*b3*c1*c2*d2 + a2*b2*b3*c1*c2*d2 + a3*c1*c3*d2 + b2*c1*c3*d2 + a2*b2*b3*c1*c3*d2 + a2*c1*c2*c3*d2 + a2*b2*c1*c2*c3*d2 + a3*b2*c1*c2*c3*d2 + a2*b3*c1*c2*c3*d2 + a3*b3*c1*c2*c3*d2 + a2*a3*b3*c1*c2*c3*d2 + a2*b2*b3*c1*c2*c3*d2 + a3*b2*b3*c1*c2*c3*d2 + a3*d1*d2 + a3*b2*d1*d2 + a2*a3*b2*d1*d2 + a2*b3*d1*d2 + a3*b3*d1*d2 + a2*a3*b3*d1*d2 + a3*b2*b3*d1*d2 + a3*c1*d1*d2 + b3*c1*d1*d2 + b2*b3*c1*d1*d2 + a2*b2*b3*c1*d1*d2 + a3*c2*d1*d2 + a2*a3*b2*c2*d1*d2 + b3*c2*d1*d2 + a2*a3*b3*c2*d1*d2 + b2*b3*c2*d1*d2 + a3*b2*b3*c2*d1*d2 + a2*a3*b2*c1*c2*d1*d2 + b3*c1*c2*d1*d2 + a3*b3*c1*c2*d1*d2 + a2*a3*b3*c1*c2*d1*d2 + b2*b3*c1*c2*d1*d2 + a3*b2*b3*c1*c2*d1*d2 + a2*c3*d1*d2 + a3*c3*d1*d2 + a2*a3*c3*d1*d2 + a3*b2*c3*d1*d2 + a2*a3*b2*c3*d1*d2 + a3*b2*b3*c3*d1*d2 + b2*c1*c3*d1*d2 + a2*b2*c1*c3*d1*d2 + a3*b2*c1*c3*d1*d2 + a2*a3*b2*c1*c3*d1*d2 + b3*c1*c3*d1*d2 + a3*b3*c1*c3*d1*d2 + b2*b3*c1*c3*d1*d2 + a2*b2*b3*c1*c3*d1*d2 + c2*c3*d1*d2 + a2*c2*c3*d1*d2 + a3*b2*c2*c3*d1*d2 + b3*c2*c3*d1*d2 + a2*b3*c2*c3*d1*d2 + a2*a3*b3*c2*c3*d1*d2 + a2*b2*b3*c2*c3*d1*d2 + a3*b2*b3*c2*c3*d1*d2 + c1*c2*c3*d1*d2 + a3*c1*c2*c3*d1*d2 + b3*c1*c2*c3*d1*d2 + a2*b3*c1*c2*c3*d1*d2 + a2*b2*b3*c1*c2*c3*d1*d2 + a3*b2*b3*c1*c2*c3*d1*d2 + d1*d2*d3 + b2*b3*x1 + a2*b3*c1*x1 + a3*c2*x1 + b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a2*b2*b3*c1*c2*x1 + b2*c3*x1 + a2*b2*c1*c3*x1 + a2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + c2*c3*x1 + a2*c2*c3*x1 + b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a3*b2*c2*c3*x1 + a2*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b2*c1*c2*c3*x1 + a2*b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a2*b3*c1*c2*c3*x1 + a3*b2*b3*d1*x1 + a2*b3*c1*d1*x1 + a3*b2*b3*c1*d1*x1 + a3*c2*d1*x1 + a2*b3*c2*d1*x1 + b2*b3*c2*d1*x1 + a3*b2*b3*c2*d1*x1 + a3*c1*c2*d1*x1 + a3*b2*c1*c2*d1*x1 + a2*b3*c1*c2*d1*x1 + a2*c3*d1*x1 + b2*c3*d1*x1 + b2*b3*c3*d1*x1 + a3*b2*b3*c3*d1*x1 + a3*b2*c1*c3*d1*x1 + b2*b3*c1*c3*d1*x1 + b2*c2*c3*d1*x1 + a2*b3*c2*c3*d1*x1 + a2*c1*c2*c3*d1*x1 + a2*b2*b3*d2*x1 + a3*b2*b3*d2*x1 + a3*c1*d2*x1 + b3*c1*d2*x1 + a2*b2*b3*c1*d2*x1 + a3*b2*b3*c1*d2*x1 + a3*c2*d2*x1 + a2*b2*b3*c2*d2*x1 + a3*b2*b3*c2*d2*x1 + a3*c1*c2*d2*x1 + a3*b2*c1*c2*d2*x1 + b3*c1*c2*d2*x1 + c3*d2*x1 + a3*c3*d2*x1 + b2*c3*d2*x1 + a2*b2*b3*c3*d2*x1 + a3*b2*b3*c3*d2*x1 + a2*c1*c3*d2*x1 + a2*b2*c1*c3*d2*x1 + b3*c1*c3*d2*x1 + a2*b3*c1*c3*d2*x1 + a3*b3*c1*c3*d2*x1 + a2*c2*c3*d2*x1 + a2*b2*c2*c3*d2*x1 + a3*b2*c2*c3*d2*x1 + b3*c2*c3*d2*x1 + a2*b3*c2*c3*d2*x1 + a3*b3*c2*c3*d2*x1 + a3*c1*c2*c3*d2*x1 + b3*c1*c2*c3*d2*x1 + a3*d1*d2*x1 + a3*b2*d1*d2*x1 + b3*d1*d2*x1 + a2*b3*d1*d2*x1 + a3*b3*d1*d2*x1 + a3*c1*d1*d2*x1 + a3*b2*c1*d1*d2*x1 + b3*c1*d1*d2*x1 + a2*b3*c1*d1*d2*x1 + a3*b3*c1*d1*d2*x1 + a3*b2*c2*d1*d2*x1 + a2*b3*c2*d1*d2*x1 + a3*b3*c2*d1*d2*x1 + a3*c1*c2*d1*d2*x1 + b2*b3*c1*c2*d1*d2*x1 + c3*d1*d2*x1 + a3*b2*c3*d1*d2*x1 + b3*c3*d1*d2*x1 + a2*b3*c3*d1*d2*x1 + a3*b3*c3*d1*d2*x1 + c1*c3*d1*d2*x1 + a2*c1*c3*d1*d2*x1 + a3*c1*c3*d1*d2*x1 + b3*c1*c3*d1*d2*x1 + a2*c2*c3*d1*d2*x1 + b2*c2*c3*d1*d2*x1 + b3*c2*c3*d1*d2*x1 + b2*b3*c2*c3*d1*d2*x1 + b2*c1*c2*c3*d1*d2*x1 + b3*c1*c2*c3*d1*d2*x1 + b3*c1*x2 + b3*c1*c2*x2 + a2*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + c1*c3*x2 + b2*c1*c3*x2 + c1*c2*c3*x2 + b2*c1*c2*c3*x2 + a2*b2*c1*c2*c3*x2 + a3*b2*c1*c2*c3*x2 + a2*b3*c1*c2*c3*x2 + a2*b2*b3*c1*c2*c3*x2 + a3*b2*b3*c1*c2*c3*x2 + b3*d1*x2 + a3*b2*b3*d1*x2 + b3*c1*d1*x2 + a3*b2*b3*c1*d1*x2 + b3*c2*d1*x2 + a2*b3*c2*d1*x2 + b2*b3*c2*d1*x2 + a3*b2*b3*c2*d1*x2 + b3*c1*c2*d1*x2 + b2*b3*c1*c2*d1*x2 + a3*b2*b3*c1*c2*d1*x2 + a2*c3*d1*x2 + b2*c3*d1*x2 + b2*b3*c3*d1*x2 + a3*b2*b3*c3*d1*x2 + a2*c1*c3*d1*x2 + b2*c1*c3*d1*x2 + b3*c1*c3*d1*x2 + b2*b3*c1*c3*d1*x2 + a3*b2*b3*c1*c3*d1*x2 + c2*c3*d1*x2 + b2*c2*c3*d1*x2 + a2*b3*c2*c3*d1*x2 + c1*c2*c3*d1*x2 + b3*c1*c2*c3*d1*x2 + b2*b3*c1*c2*c3*d1*x2 + a3*c1*d2*x2 + a3*b2*c1*d2*x2 + b3*c1*d2*x2 + a2*b2*b3*c1*d2*x2 + a3*b2*b3*c1*d2*x2 + a3*c1*c2*d2*x2 + a3*b2*c1*c2*d2*x2 + b3*c1*c2*d2*x2 + b2*b3*c1*c2*d2*x2 + a2*b2*b3*c1*c2*d2*x2 + a3*b2*b3*c1*c2*d2*x2 + a3*c1*c3*d2*x2 + b2*c1*c3*d2*x2 + a3*b2*c1*c3*d2*x2 + b3*c1*c3*d2*x2 + b2*b3*c1*c3*d2*x2 + a2*b2*b3*c1*c3*d2*x2 + a3*b2*b3*c1*c3*d2*x2 + a2*c1*c2*c3*d2*x2 + a2*b2*c1*c2*c3*d2*x2 + a3*b2*c1*c2*c3*d2*x2 + b3*c1*c2*c3*d2*x2 + a2*b3*c1*c2*c3*d2*x2 + b2*b3*c1*c2*c3*d2*x2 + a3*b2*d1*d2*x2 + b3*d1*d2*x2 + a2*b3*d1*d2*x2 + a3*b3*d1*d2*x2 + b3*c1*d1*d2*x2 + a3*b2*c2*d1*d2*x2 + b3*c2*d1*d2*x2 + a2*b3*c2*d1*d2*x2 + a3*b3*c2*d1*d2*x2 + b3*c1*c2*d1*d2*x2 + a3*b2*c3*d1*d2*x2 + b3*c3*d1*d2*x2 + a2*b3*c3*d1*d2*x2 + a3*b3*c3*d1*d2*x2 + b3*c1*c3*d1*d2*x2 + a2*c2*c3*d1*d2*x2 + b2*c2*c3*d1*d2*x2 + b3*c2*c3*d1*d2*x2 + b2*b3*c2*c3*d1*d2*x2 + c1*c2*c3*d1*d2*x2 + b3*c1*x1*x2 + b3*c1*c2*x1*x2 + c1*c3*x1*x2 + c1*c2*c3*x1*x2 + a2*c1*x3 + a2*b2*c1*x3 + a2*b3*c1*x3 + a2*b2*c1*c2*x3 + a2*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a2*b2*b3*c1*c2*x3 + a2*c1*c3*x3 + c1*c2*c3*x3 + a2*c1*c2*c3*x3 + b2*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + a2*b2*b3*c1*c2*c3*x3 + a2*d1*x3 + a2*b2*d1*x3 + a2*b3*d1*x3 + a3*b2*b3*d1*x3 + a2*c1*d1*x3 + b2*c1*d1*x3 + a3*b2*b3*c1*d1*x3 + c2*d1*x3 + a2*c2*d1*x3 + b2*c2*d1*x3 + a2*b2*c2*d1*x3 + b3*c2*d1*x3 + b2*b3*c2*d1*x3 + a3*b2*b3*c2*d1*x3 + b2*c1*c2*d1*x3 + a2*b2*c1*c2*d1*x3 + a3*b2*c1*c2*d1*x3 + b3*c1*c2*d1*x3 + a2*b3*c1*c2*d1*x3 + b2*b3*c1*c2*d1*x3 + b2*b3*c3*d1*x3 + a3*b2*b3*c3*d1*x3 + a2*c1*c3*d1*x3 + b2*c1*c3*d1*x3 + b2*b3*c1*c3*d1*x3 + a3*b2*b3*c1*c3*d1*x3 + b2*c2*c3*d1*x3 + a2*b2*c2*c3*d1*x3 + b3*c2*c3*d1*x3 + b2*b3*c2*c3*d1*x3 + a3*b2*b3*c2*c3*d1*x3 + a2*b2*c1*c2*c3*d1*x3 + a3*b2*c1*c2*c3*d1*x3 + b3*c1*c2*c3*d1*x3 + a2*b3*c1*c2*c3*d1*x3 + b2*b3*c1*c2*c3*d1*x3 + a3*c1*d2*x3 + a3*b2*c1*d2*x3 + a2*b2*b3*c1*d2*x3 + a3*b2*b3*c1*d2*x3 + a3*c1*c2*d2*x3 + b3*c1*c2*d2*x3 + b2*b3*c1*c2*d2*x3 + a3*c1*c3*d2*x3 + b2*c1*c3*d2*x3 + a3*b2*c1*c3*d2*x3 + b2*b3*c1*c3*d2*x3 + a2*b2*b3*c1*c3*d2*x3 + a3*b2*b3*c1*c3*d2*x3 + a3*c1*c2*c3*d2*x3 + b3*c1*c2*c3*d2*x3 + b2*b3*c1*c2*c3*d2*x3 + a3*b2*d1*d2*x3 + b3*d1*d2*x3 + a2*b3*d1*d2*x3 + a3*b3*d1*d2*x3 + b3*c1*d1*d2*x3 + a3*c2*d1*d2*x3 + b3*c2*d1*d2*x3 + b2*b3*c2*d1*d2*x3 + b3*c1*c2*d1*d2*x3 + a3*b2*c3*d1*d2*x3 + b3*c3*d1*d2*x3 + a2*b3*c3*d1*d2*x3 + a3*b3*c3*d1*d2*x3 + b3*c1*c3*d1*d2*x3 + a3*c2*c3*d1*d2*x3 + b3*c2*c3*d1*d2*x3 + b2*b3*c2*c3*d1*d2*x3 + b3*c1*c2*c3*d1*d2*x3 + b2*x1*x3 + c2*x1*x3 + c2*d1*x1*x3 + c1*c2*d1*x1*x3 + b2*b3*y1 + b2*b3*c2*y1 + a2*b3*c1*c2*y1 + c1*c2*c3*y1 + a2*c1*c2*c3*y1 + a2*b3*d1*y1 + b2*b3*d1*y1 + a2*b3*c1*d1*y1 + b2*b3*c1*d1*y1 + a2*b3*c2*d1*y1 + b2*b3*c2*d1*y1 + b3*c1*c2*d1*y1 + b2*b3*c1*c2*d1*y1 + a2*b2*c3*d1*y1 + a2*b3*c3*d1*y1 + b2*c1*c3*d1*y1 + a2*b2*c1*c3*d1*y1 + a2*b3*c1*c3*d1*y1 + a2*c2*c3*d1*y1 + b2*c2*c3*d1*y1 + a2*b3*c2*c3*d1*y1 + c1*c2*c3*d1*y1 + a2*c1*c2*c3*d1*y1 + b2*b3*c1*c2*c3*d1*y1 + b3*d2*y1 + b2*b3*d2*y1 + a3*b2*c1*d2*y1 + b2*b3*c1*d2*y1 + a3*b2*c1*c2*d2*y1 + b2*b3*c1*c2*d2*y1 + a3*c3*d2*y1 + b3*c3*d2*y1 + a3*b3*c3*d2*y1 + a3*c1*c3*d2*y1 + a3*b2*c1*c3*d2*y1 + a3*b3*c1*c3*d2*y1 + b2*b3*c1*c3*d2*y1 + a3*c2*c3*d2*y1 + a3*b3*c2*c3*d2*y1 + a3*c1*c2*c3*d2*y1 + b2*b3*c1*c2*c3*d2*y1 + a3*b2*c1*d1*d2*y1 + b3*c1*d1*d2*y1 + a2*b3*c1*d1*d2*y1 + a3*b3*c1*d1*d2*y1 + a3*c2*d1*d2*y1 + a3*b2*c2*d1*d2*y1 + a2*b3*c2*d1*d2*y1 + a3*b3*c2*d1*d2*y1 + b2*b3*c2*d1*d2*y1 + a3*c1*c2*d1*d2*y1 + b3*c1*c2*d1*d2*y1 + b2*b3*c1*c2*d1*d2*y1 + a2*c3*d1*d2*y1 + a3*c3*d1*d2*y1 + a3*b2*c3*d1*d2*y1 + a2*b3*c3*d1*d2*y1 + a3*b3*c3*d1*d2*y1 + a2*c1*c3*d1*d2*y1 + a3*c1*c3*d1*d2*y1 + b3*c1*c3*d1*d2*y1 + a2*c2*c3*d1*d2*y1 + b2*b3*c2*c3*d1*d2*y1 + b2*c1*c2*c3*d1*d2*y1 + b3*c1*c2*c3*d1*d2*y1 + b3*c2*x1*y1 + c2*c3*x1*y1 + b3*x2*y1 + b3*c1*x2*y1 + b3*c2*x2*y1 + b3*c1*c2*x2*y1 + c3*x2*y1 + c1*c3*x2*y1 + c2*c3*x2*y1 + c1*c2*c3*x2*y1 + b2*x3*y1 + a2*b3*c1*y2 + a2*b2*b3*c1*c2*y2 + b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a2*b3*c1*c3*y2 + a3*b2*b3*c1*c3*y2 + a2*c1*c2*c3*y2 + a2*b2*b3*c1*c2*c3*y2 + a3*b2*b3*c1*c2*c3*y2 + a2*b3*d1*y2 + b2*b3*d1*y2 + b2*b3*c1*d1*y2 + a2*b3*c2*d1*y2 + b2*b3*c2*d1*y2 + a3*b2*c1*c2*d1*y2 + a2*b3*c1*c2*d1*y2 + a3*b2*b3*c1*c2*d1*y2 + a2*b2*c3*d1*y2 + a2*b3*c3*d1*y2 + a2*c1*c3*d1*y2 + b2*c1*c3*d1*y2 + a2*b2*c1*c3*d1*y2 + a3*b2*c1*c3*d1*y2 + a2*b3*c1*c3*d1*y2 + a3*b2*b3*c1*c3*d1*y2 + a2*c2*c3*d1*y2 + b2*c2*c3*d1*y2 + a2*b3*c2*c3*d1*y2 + b2*b3*c1*d2*y2 + a3*b2*c1*c2*d2*y2 + a2*b2*b3*c1*c2*d2*y2 + a3*b2*b3*c1*c2*d2*y2 + a2*c1*c3*d2*y2 + b2*c1*c3*d2*y2 + a2*b2*c1*c3*d2*y2 + a2*b3*c1*c3*d2*y2 + a2*b2*b3*c1*c3*d2*y2 + a3*b2*b3*c1*c3*d2*y2 + a2*c1*c2*c3*d2*y2 + a2*b2*c1*c2*c3*d2*y2 + a3*b2*c1*c2*c3*d2*y2 + a2*b3*c1*c2*c3*d2*y2 + a3*c2*d1*d2*y2 + a3*b2*c2*d1*d2*y2 + a2*b3*c2*d1*d2*y2 + a3*b3*c2*d1*d2*y2 + b2*b3*c2*d1*d2*y2 + a2*c3*d1*d2*y2 + a3*c3*d1*d2*y2 + a3*b2*c3*d1*d2*y2 + a2*b3*c3*d1*d2*y2 + a3*b3*c3*d1*d2*y2 + a2*c2*c3*d1*d2*y2 + b2*b3*c2*c3*d1*d2*y2 + b3*c2*x1*y2 + b3*c1*c2*x1*y2 + c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b3*c1*c2*y1*y2 + c1*c2*c3*y1*y2 + a2*b2*c1*y3 + a2*b3*c1*y3 + a2*c1*c2*y3 + b2*b3*c1*c2*y3 + a2*b2*c1*c3*y3 + a2*b3*c1*c3*y3 + a3*b2*b3*c1*c3*y3 + a3*b2*c1*c2*c3*y3 + a2*b2*b3*c1*c2*c3*y3 + a2*b2*d1*y3 + a2*b3*d1*y3 + b2*b3*d1*y3 + a2*c1*d1*y3 + b2*c1*d1*y3 + b2*b3*c1*d1*y3 + b2*c2*d1*y3 + a2*c1*c2*d1*y3 + a2*b2*c3*d1*y3 + a2*b3*c3*d1*y3 + a2*c1*c3*d1*y3 + a2*b2*c1*c3*d1*y3 + a3*b2*c1*c3*d1*y3 + a2*b3*c1*c3*d1*y3 + a3*b2*b3*c1*c3*d1*y3 + a2*c2*c3*d1*y3 + b2*c2*c3*d1*y3 + a2*b2*c2*c3*d1*y3 + b2*b3*c2*c3*d1*y3 + a3*b2*b3*c2*c3*d1*y3 + a2*b2*c1*c2*c3*d1*y3 + a3*b2*c1*c2*c3*d1*y3 + a2*b3*c1*c2*c3*d1*y3 + b2*b3*c1*d2*y3 + c1*c2*d2*y3 + a2*c1*c2*d2*y3 + a2*c1*c3*d2*y3 + b2*c1*c3*d2*y3 + a2*b2*c1*c3*d2*y3 + a2*b3*c1*c3*d2*y3 + a2*b2*b3*c1*c3*d2*y3 + a3*b2*b3*c1*c3*d2*y3 + a3*c1*c2*c3*d2*y3 + a2*d1*d2*y3 + b2*d1*d2*y3 + a2*c1*d1*d2*y3 + b2*c1*d1*d2*y3 + a2*c2*d1*d2*y3 + b2*c2*d1*d2*y3 + c1*c2*d1*d2*y3 + b2*c1*c2*d1*d2*y3 + a2*c3*d1*d2*y3 + a3*c3*d1*d2*y3 + a3*b2*c3*d1*d2*y3 + a2*b3*c3*d1*d2*y3 + a3*b3*c3*d1*d2*y3 + a3*c2*c3*d1*d2*y3 + b2*c2*c3*d1*d2*y3 + b2*b3*c2*c3*d1*d2*y3 + c1*c2*c3*d1*d2*y3 + b3*c1*c2*c3*d1*d2*y3 + b2*x1*y3 + c2*x1*y3 + c1*c2*d1*x1*y3 + d2*x1*y3 + c1*d2*x1*y3 + c2*d2*x1*y3 + c1*x2*y3 + d1*x2*y3 + c1*d1*x2*y3 + c2*d1*x2*y3 + c1*c2*d1*x2*y3 + c1*d2*x2*y3 + c1*c2*d2*x2*y3 + b2*y1*y3 + c1*y2*y3 + c1*c2*d1*y2*y3 + c1*c2*d2*y2*y3 + a2*a3*z1 + a2*b3*z1 + a2*b3*c1*z1 + b2*b3*c1*z1 + a3*b2*c2*z1 + a2*b3*c2*z1 + b2*b3*c2*z1 + a3*c1*c2*z1 + a3*b2*c1*c2*z1 + a2*a3*b2*c1*c2*z1 + b3*c1*c2*z1 + a2*b2*b3*c1*c2*z1 + a2*c3*z1 + a2*b2*c3*z1 + a3*b2*c3*z1 + a2*b3*c3*z1 + a2*a3*c1*c3*z1 + a2*a3*b3*c1*c3*z1 + c2*c3*z1 + a2*c2*c3*z1 + a3*c2*c3*z1 + a2*a3*c2*c3*z1 + a2*b2*c2*c3*z1 + a2*a3*b2*c2*c3*z1 + a2*b3*c2*c3*z1 + a2*a3*b3*c2*c3*z1 + a3*b2*b3*c2*c3*z1 + a2*c1*c2*c3*z1 + a3*c1*c2*c3*z1 + a2*b2*c1*c2*c3*z1 + a3*b2*c1*c2*c3*z1 + b3*c1*c2*c3*z1 + a2*b3*c1*c2*c3*z1 + a2*b2*b3*c1*c2*c3*z1 + a3*b2*b3*c1*c2*c3*z1 + a2*a3*b3*d1*z1 + b2*b3*d1*z1 + a3*b2*b3*d1*z1 + a3*b2*c1*d1*z1 + a2*a3*b3*c1*d1*z1 + a3*b2*b3*c1*d1*z1 + a3*b2*c2*d1*z1 + a2*a3*b3*c2*d1*z1 + a3*b2*b3*c2*d1*z1 + a3*b2*c1*c2*d1*z1 + a2*b3*c1*c2*d1*z1 + b2*b3*c1*c2*d1*z1 + a3*b2*b3*c1*c2*d1*z1 + a2*c3*d1*z1 + a2*a3*c3*d1*z1 + a2*b2*c3*d1*z1 + a3*b2*c3*d1*z1 + a2*a3*b3*c3*d1*z1 + b2*b3*c3*d1*z1 + a3*b2*b3*c3*d1*z1 + a2*b2*c1*c3*d1*z1 + a3*b2*c1*c3*d1*z1 + b2*b3*c1*c3*d1*z1 + a3*b2*b3*c1*c3*d1*z1 + a2*c2*c3*d1*z1 + b2*c2*c3*d1*z1 + a3*b2*c2*c3*d1*z1 + a2*b3*c2*c3*d1*z1 + a2*a3*d2*z1 + a3*b2*d2*z1 + a2*a3*b2*d2*z1 + a2*b3*d2*z1 + a3*b3*d2*z1 + a2*a3*b3*d2*z1 + a2*b2*b3*d2*z1 + a3*b2*b3*d2*z1 + a2*a3*b2*c1*d2*z1 + a2*b3*c1*d2*z1 + a2*a3*b3*c1*d2*z1 + a2*b2*b3*c1*d2*z1 + a3*b2*b3*c1*d2*z1 + a3*c2*d2*z1 + a2*a3*c2*d2*z1 + a3*b2*c2*d2*z1 + a2*a3*b2*c2*d2*z1 + b3*c2*d2*z1 + a2*a3*b3*c2*d2*z1 + a2*b2*b3*c2*d2*z1 + a3*b2*b3*c2*d2*z1 + a3*b2*c1*c2*d2*z1 + a3*b2*b3*c1*c2*d2*z1 + a3*c3*d2*z1 + a2*a3*c3*d2*z1 + a3*b2*c3*d2*z1 + a2*a3*b2*c3*d2*z1 + b3*c3*d2*z1 + a2*a3*b3*c3*d2*z1 + a2*b2*b3*c3*d2*z1 + a3*b2*b3*c3*d2*z1 + c1*c3*d2*z1 + a2*c1*c3*d2*z1 + a2*b2*c1*c3*d2*z1 + b2*b3*c1*c3*d2*z1 + a2*b2*b3*c1*c3*d2*z1 + a3*b2*b3*c1*c3*d2*z1 + c2*c3*d2*z1 + a2*c2*c3*d2*z1 + a3*c2*c3*d2*z1 + a2*b2*c2*c3*d2*z1 + a3*b2*c2*c3*d2*z1 + b3*c2*c3*d2*z1 + a2*b3*c2*c3*d2*z1 + b2*b3*c2*c3*d2*z1 + a2*b2*b3*c2*c3*d2*z1 + c1*c2*c3*d2*z1 + b2*b3*c1*c2*c3*d2*z1 + a3*d1*d2*z1 + b3*d1*d2*z1 + a3*c2*d1*d2*z1 + b3*c2*d1*d2*z1 + a2*c3*d1*d2*z1 + a3*c3*d1*d2*z1 + b3*c3*d1*d2*z1 + b2*c2*c3*d1*d2*z1 + b3*c2*c3*d1*d2*z1 + a3*b2*x1*z1 + a2*b3*x1*z1 + a3*b2*c1*x1*z1 + a2*b3*c1*x1*z1 + a3*b2*c2*x1*z1 + a2*b3*c2*x1*z1 + b2*b3*c1*c2*x1*z1 + a2*c3*x1*z1 + a2*b2*c3*x1*z1 + a3*b2*c3*x1*z1 + a2*b3*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + a2*c3*d1*x1*z1 + b2*c3*d1*x1*z1 + b2*c1*c3*d1*x1*z1 + a3*d2*x1*z1 + b3*d2*x1*z1 + a3*c1*d2*x1*z1 + b3*c1*d2*x1*z1 + a3*c2*d2*x1*z1 + b3*c2*d2*x1*z1 + a3*c3*d2*x1*z1 + b3*c3*d2*x1*z1 + b3*c1*c3*d2*x1*z1 + b3*c2*c3*d2*x1*z1 + a3*b2*x2*z1 + a2*b3*x2*z1 + a3*b2*c1*x2*z1 + a2*b3*c1*x2*z1 + a3*b2*c2*x2*z1 + a2*b3*c2*x2*z1 + a3*b2*c1*c2*x2*z1 + a2*b3*c1*c2*x2*z1 + c3*x2*z1 + a2*c3*x2*z1 + a2*b2*c3*x2*z1 + a3*b2*c3*x2*z1 + a2*b3*c3*x2*z1 + a2*c1*c3*x2*z1 + a2*b2*c1*c3*x2*z1 + a3*b2*c1*c3*x2*z1 + a2*b3*c1*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + b2*b3*c1*c2*c3*x2*z1 + a2*c3*d1*x2*z1 + b2*c3*d1*x2*z1 + a3*d2*x2*z1 + b3*d2*x2*z1 + a3*c2*d2*x2*z1 + b3*c2*d2*x2*z1 + a3*c3*d2*x2*z1 + b3*c3*d2*x2*z1 + b3*c2*c3*d2*x2*z1 + a2*b2*x3*z1 + a3*b2*x3*z1 + a2*b3*x3*z1 + a2*c1*x3*z1 + b2*c1*x3*z1 + a2*b2*c1*x3*z1 + a3*b2*c1*x3*z1 + a2*b3*c1*x3*z1 + c2*x3*z1 + a2*c2*x3*z1 + a2*b2*c2*x3*z1 + a3*b2*c2*x3*z1 + a2*b3*c2*x3*z1 + c1*c2*x3*z1 + b2*b3*c1*c2*x3*z1 + a2*c3*x3*z1 + a2*b2*c3*x3*z1 + a3*b2*c3*x3*z1 + a2*b3*c3*x3*z1 + a2*c1*c3*x3*z1 + a2*b2*c1*c3*x3*z1 + a3*b2*c1*c3*x3*z1 + a2*b3*c1*c3*x3*z1 + c2*c3*x3*z1 + a2*c2*c3*x3*z1 + a2*b2*c2*c3*x3*z1 + a3*b2*c2*c3*x3*z1 + a2*b3*c2*c3*x3*z1 + c1*c2*c3*x3*z1 + b2*b3*c1*c2*c3*x3*z1 + a2*d1*x3*z1 + b2*d1*x3*z1 + b2*c2*d1*x3*z1 + a2*c3*d1*x3*z1 + b2*c3*d1*x3*z1 + b2*c2*c3*d1*x3*z1 + a3*d2*x3*z1 + b3*d2*x3*z1 + a3*c3*d2*x3*z1 + b3*c3*d2*x3*z1 + a2*c3*d1*y1*z1 + b2*c1*c3*d1*y1*z1 + a3*c1*d2*y1*z1 + b3*c1*d2*y1*z1 + a3*c2*d2*y1*z1 + b3*c2*d2*y1*z1 + a3*c3*d2*y1*z1 + b3*c1*c3*d2*y1*z1 + b3*c2*c3*d2*y1*z1 + a3*b2*c1*c2*y2*z1 + a2*b3*c1*c2*y2*z1 + b2*b3*c1*c2*y2*z1 + c1*c3*y2*z1 + a2*c1*c3*y2*z1 + a2*b2*c1*c3*y2*z1 + a3*b2*c1*c3*y2*z1 + a2*b3*c1*c3*y2*z1 + b2*b3*c1*c2*c3*y2*z1 + a2*c3*d1*y2*z1 + a3*c2*d2*y2*z1 + b3*c2*d2*y2*z1 + a3*c3*d2*y2*z1 + b3*c2*c3*d2*y2*z1 + a2*y3*z1 + b2*c1*y3*z1 + a2*c1*c3*y3*z1 + a2*b2*c1*c3*y3*z1 + a3*b2*c1*c3*y3*z1 + a2*b3*c1*c3*y3*z1 + a2*c2*c3*y3*z1 + a2*b2*c2*c3*y3*z1 + a3*b2*c2*c3*y3*z1 + a2*b3*c2*c3*y3*z1 + b2*b3*c2*c3*y3*z1 + c1*c2*c3*y3*z1 + b2*b3*c1*c2*c3*y3*z1 + a2*c3*d1*y3*z1 + b2*c2*c3*d1*y3*z1 + a3*c3*d2*y3*z1 + a2*b3*c1*z2 + b2*b3*c1*z2 + a3*b2*c1*c2*z2 + a2*a3*b2*c1*c2*z2 + a2*b2*b3*c1*c2*z2 + a2*a3*c1*c3*z2 + a2*a3*b3*c1*c3*z2 + a2*c1*c2*c3*z2 + a2*b2*c1*c2*c3*z2 + a3*b2*c1*c2*c3*z2 + a2*b3*c1*c2*c3*z2 + a2*b2*b3*c1*c2*c3*z2 + a3*b2*b3*c1*c2*c3*z2 + a2*a3*b3*d1*z2 + b2*b3*d1*z2 + a3*b2*b3*d1*z2 + a3*b2*c1*d1*z2 + a2*a3*b3*c1*d1*z2 + a3*b2*b3*c1*d1*z2 + a3*b2*c2*d1*z2 + a2*a3*b3*c2*d1*z2 + a3*b2*b3*c2*d1*z2 + a3*b2*c1*c2*d1*z2 + a2*b3*c1*c2*d1*z2 + b2*b3*c1*c2*d1*z2 + a3*b2*b3*c1*c2*d1*z2 + a2*c3*d1*z2 + a2*a3*c3*d1*z2 + a2*b2*c3*d1*z2 + a3*b2*c3*d1*z2 + a2*a3*b3*c3*d1*z2 + b2*b3*c3*d1*z2 + a3*b2*b3*c3*d1*z2 + a2*b2*c1*c3*d1*z2 + a3*b2*c1*c3*d1*z2 + b2*b3*c1*c3*d1*z2 + a3*b2*b3*c1*c3*d1*z2 + a2*c2*c3*d1*z2 + b2*c2*c3*d1*z2 + a3*b2*c2*c3*d1*z2 + a2*b3*c2*c3*d1*z2 + c1*c2*c3*d1*z2 + a3*c1*c2*c3*d1*z2 + a2*a3*b2*c1*d2*z2 + a2*b3*c1*d2*z2 + a2*a3*b3*c1*d2*z2 + a2*b2*b3*c1*d2*z2 + a3*b2*b3*c1*d2*z2 + a3*c1*c2*d2*z2 + a3*b2*c1*c2*d2*z2 + b3*c1*c2*d2*z2 + a3*b2*b3*c1*c2*d2*z2 + a2*c1*c3*d2*z2 + a3*c1*c3*d2*z2 + a2*b2*c1*c3*d2*z2 + b2*b3*c1*c3*d2*z2 + a2*b2*b3*c1*c3*d2*z2 + a3*b2*b3*c1*c3*d2*z2 + b3*c1*c2*c3*d2*z2 + b2*b3*c1*c2*c3*d2*z2 + a3*d1*d2*z2 + b3*d1*d2*z2 + a3*c1*d1*d2*z2 + b3*c1*d1*d2*z2 + a3*c2*d1*d2*z2 + b3*c2*d1*d2*z2 + a3*c1*c2*d1*d2*z2 + b3*c1*c2*d1*d2*z2 + a2*c3*d1*d2*z2 + a3*c3*d1*d2*z2 + b3*c3*d1*d2*z2 + a3*c1*c3*d1*d2*z2 + b3*c1*c3*d1*d2*z2 + b2*c2*c3*d1*d2*z2 + b3*c2*c3*d1*d2*z2 + c1*c2*c3*d1*d2*z2 + b3*c1*c2*c3*d1*d2*z2 + a3*b2*x1*z2 + b3*x1*z2 + a2*b3*x1*z2 + a3*b2*c1*x1*z2 + a2*b3*c1*x1*z2 + a3*b2*c2*x1*z2 + a2*b3*c2*x1*z2 + b2*b3*c1*c2*x1*z2 + a2*c3*x1*z2 + a2*b2*c3*x1*z2 + a3*b2*c3*x1*z2 + a2*b3*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + a2*c3*d1*x1*z2 + b2*c3*d1*x1*z2 + b2*c1*c3*d1*x1*z2 + a3*d2*x1*z2 + b3*d2*x1*z2 + a3*c1*d2*x1*z2 + b3*c1*d2*x1*z2 + a3*c2*d2*x1*z2 + b3*c2*d2*x1*z2 + a3*c3*d2*x1*z2 + b3*c3*d2*x1*z2 + b3*c1*c3*d2*x1*z2 + b3*c2*c3*d2*x1*z2 + a3*b2*c1*x2*z2 + a2*b3*c1*x2*z2 + a3*b2*c1*c2*x2*z2 + a2*b3*c1*c2*x2*z2 + a2*c1*c3*x2*z2 + a2*b2*c1*c3*x2*z2 + a3*b2*c1*c3*x2*z2 + a2*b3*c1*c3*x2*z2 + b2*b3*c1*c2*c3*x2*z2 + a2*c3*d1*x2*z2 + b2*c3*d1*x2*z2 + c1*c3*d1*x2*z2 + a2*c1*x3*z2 + b2*c1*x3*z2 + a2*b2*c1*x3*z2 + a3*b2*c1*x3*z2 + a2*b3*c1*x3*z2 + b2*b3*c1*c2*x3*z2 + a2*c1*c3*x3*z2 + a2*b2*c1*c3*x3*z2 + a3*b2*c1*c3*x3*z2 + a2*b3*c1*c3*x3*z2 + b2*b3*c1*c2*c3*x3*z2 + a2*d1*x3*z2 + b2*d1*x3*z2 + c1*d1*x3*z2 + b2*c2*d1*x3*z2 + c1*c2*d1*x3*z2 + a2*c3*d1*x3*z2 + b2*c3*d1*x3*z2 + c1*c3*d1*x3*z2 + b2*c2*c3*d1*x3*z2 + c1*c2*c3*d1*x3*z2 + b3*y1*z2 + a2*c3*d1*y1*z2 + b2*c1*c3*d1*y1*z2 + a3*c1*d2*y1*z2 + b3*c1*d2*y1*z2 + a3*c2*d2*y1*z2 + b3*c2*d2*y1*z2 + a3*c3*d2*y1*z2 + b3*c1*c3*d2*y1*z2 + b3*c2*c3*d2*y1*z2 + a3*b2*c1*c2*y2*z2 + a2*b3*c1*c2*y2*z2 + b2*b3*c1*c2*y2*z2 + a2*c1*c3*y2*z2 + a2*b2*c1*c3*y2*z2 + a3*b2*c1*c3*y2*z2 + a2*b3*c1*c3*y2*z2 + b2*b3*c1*c2*c3*y2*z2 + a2*c3*d1*y2*z2 + b2*c1*y3*z2 + c1*c3*y3*z2 + a2*c1*c3*y3*z2 + a2*b2*c1*c3*y3*z2 + a3*b2*c1*c3*y3*z2 + a2*b3*c1*c3*y3*z2 + b2*b3*c1*c2*c3*y3*z2 + a2*c3*d1*y3*z2 + b2*c2*c3*d1*y3*z2 + c1*c2*c3*d1*y3*z2 + a2*b3*c1*z3 + a3*b2*c1*c2*z3 + a2*a3*b2*c1*c2*z3 + a2*b2*b3*c1*c2*z3 + a2*a3*c1*c3*z3 + a2*a3*b3*c1*c3*z3 + a2*c1*c2*c3*z3 + a2*b2*c1*c2*c3*z3 + a3*b2*c1*c2*c3*z3 + a2*b3*c1*c2*c3*z3 + a2*b2*b3*c1*c2*c3*z3 + a3*b2*b3*c1*c2*c3*z3 + a2*a3*b3*d1*z3 + a3*b2*b3*d1*z3 + a2*c1*d1*z3 + b2*c1*d1*z3 + a2*b2*c1*d1*z3 + a3*b2*c1*d1*z3 + a2*a3*b3*c1*d1*z3 + a3*b2*b3*c1*d1*z3 + a2*c2*d1*z3 + a2*b2*c2*d1*z3 + a3*b2*c2*d1*z3 + a2*a3*b3*c2*d1*z3 + a3*b2*b3*c2*d1*z3 + a2*b2*c1*c2*d1*z3 + a3*b2*c1*c2*d1*z3 + a2*b3*c1*c2*d1*z3 + b2*b3*c1*c2*d1*z3 + a3*b2*b3*c1*c2*d1*z3 + a2*c3*d1*z3 + a2*a3*c3*d1*z3 + a2*b2*c3*d1*z3 + a3*b2*c3*d1*z3 + a2*a3*b3*c3*d1*z3 + b2*b3*c3*d1*z3 + a3*b2*b3*c3*d1*z3 + a2*b2*c1*c3*d1*z3 + a3*b2*c1*c3*d1*z3 + b2*b3*c1*c3*d1*z3 + a3*b2*b3*c1*c3*d1*z3 + a2*c2*c3*d1*z3 + b2*c2*c3*d1*z3 + a3*b2*c2*c3*d1*z3 + a2*b3*c2*c3*d1*z3 + c1*c2*c3*d1*z3 + a3*c1*c2*c3*d1*z3 + a2*a3*b2*c1*d2*z3 + a2*b3*c1*d2*z3 + a2*a3*b3*c1*d2*z3 + a2*b2*b3*c1*d2*z3 + a3*b2*b3*c1*d2*z3 + a3*c1*c2*d2*z3 + a3*b2*c1*c2*d2*z3 + b3*c1*c2*d2*z3 + a3*b2*b3*c1*c2*d2*z3 + a2*c1*c3*d2*z3 + a3*c1*c3*d2*z3 + a2*b2*c1*c3*d2*z3 + b2*b3*c1*c3*d2*z3 + a2*b2*b3*c1*c3*d2*z3 + a3*b2*b3*c1*c3*d2*z3 + b3*c1*c2*c3*d2*z3 + b2*b3*c1*c2*c3*d2*z3 + a3*d1*d2*z3 + b3*d1*d2*z3 + a3*c1*d1*d2*z3 + b3*c1*d1*d2*z3 + a3*c2*d1*d2*z3 + b3*c2*d1*d2*z3 + a3*c1*c2*d1*d2*z3 + b3*c1*c2*d1*d2*z3 + a2*c3*d1*d2*z3 + a3*c3*d1*d2*z3 + b3*c3*d1*d2*z3 + a3*c1*c3*d1*d2*z3 + b3*c1*c3*d1*d2*z3 + b2*c2*c3*d1*d2*z3 + b3*c2*c3*d1*d2*z3 + c1*c2*c3*d1*d2*z3 + b3*c1*c2*c3*d1*d2*z3 + a2*x1*z3 + b2*x1*z3 + a2*b2*x1*z3 + a3*b2*x1*z3 + a2*b3*x1*z3 + a2*c1*x1*z3 + a2*b2*c1*x1*z3 + a3*b2*c1*x1*z3 + a2*b3*c1*x1*z3 + a2*c2*x1*z3 + a2*b2*c2*x1*z3 + a3*b2*c2*x1*z3 + a2*b3*c2*x1*z3 + b2*b3*c1*c2*x1*z3 + a2*c3*x1*z3 + a2*b2*c3*x1*z3 + a3*b2*c3*x1*z3 + a2*b3*c3*x1*z3 + b2*b3*c2*c3*x1*z3 + a2*d1*x1*z3 + b2*d1*x1*z3 + a2*c1*d1*x1*z3 + b2*c1*d1*x1*z3 + a2*c2*d1*x1*z3 + b2*c2*d1*x1*z3 + b2*c1*c2*d1*x1*z3 + a2*c3*d1*x1*z3 + b2*c3*d1*x1*z3 + b2*c1*c3*d1*x1*z3 + a3*d2*x1*z3 + b3*d2*x1*z3 + a3*c1*d2*x1*z3 + b3*c1*d2*x1*z3 + a3*c2*d2*x1*z3 + b3*c2*d2*x1*z3 + a3*c3*d2*x1*z3 + b3*c3*d2*x1*z3 + b3*c1*c3*d2*x1*z3 + b3*c2*c3*d2*x1*z3 + a2*c1*x2*z3 + b2*c1*x2*z3 + a2*b2*c1*x2*z3 + a3*b2*c1*x2*z3 + a2*b3*c1*x2*z3 + a2*c1*c2*x2*z3 + a2*b2*c1*c2*x2*z3 + a3*b2*c1*c2*x2*z3 + a2*b3*c1*c2*x2*z3 + a2*c1*c3*x2*z3 + a2*b2*c1*c3*x2*z3 + a3*b2*c1*c3*x2*z3 + a2*b3*c1*c3*x2*z3 + b2*b3*c1*c2*c3*x2*z3 + a2*d1*x2*z3 + b2*d1*x2*z3 + c1*d1*x2*z3 + a2*c2*d1*x2*z3 + b2*c2*d1*x2*z3 + c1*c2*d1*x2*z3 + a2*c3*d1*x2*z3 + b2*c3*d1*x2*z3 + c1*c3*d1*x2*z3 + a2*c1*x3*z3 + b2*c1*x3*z3 + a2*b2*c1*x3*z3 + a3*b2*c1*x3*z3 + a2*b3*c1*x3*z3 + b2*b3*c1*c2*x3*z3 + a2*c1*c3*x3*z3 + a2*b2*c1*c3*x3*z3 + a3*b2*c1*c3*x3*z3 + a2*b3*c1*c3*x3*z3 + b2*b3*c1*c2*c3*x3*z3 + a2*d1*x3*z3 + b2*d1*x3*z3 + c2*d1*x3*z3 + b2*c2*d1*x3*z3 + c1*c2*d1*x3*z3 + a2*c3*d1*x3*z3 + b2*c3*d1*x3*z3 + c2*c3*d1*x3*z3 + b2*c2*c3*d1*x3*z3 + c1*c2*c3*d1*x3*z3 + c1*d2*x3*z3 + c1*c3*d2*x3*z3 + a2*c1*d1*y1*z3 + b2*c1*d1*y1*z3 + a2*c2*d1*y1*z3 + b2*c1*c2*d1*y1*z3 + a2*c3*d1*y1*z3 + b2*c1*c3*d1*y1*z3 + a3*c1*d2*y1*z3 + b3*c1*d2*y1*z3 + a3*c2*d2*y1*z3 + b3*c2*d2*y1*z3 + a3*c3*d2*y1*z3 + b3*c1*c3*d2*y1*z3 + b3*c2*c3*d2*y1*z3 + b2*c1*y2*z3 + a2*c1*c2*y2*z3 + a2*b2*c1*c2*y2*z3 + a3*b2*c1*c2*y2*z3 + a2*b3*c1*c2*y2*z3 + b2*b3*c1*c2*y2*z3 + a2*c1*c3*y2*z3 + a2*b2*c1*c3*y2*z3 + a3*b2*c1*c3*y2*z3 + a2*b3*c1*c3*y2*z3 + b2*b3*c1*c2*c3*y2*z3 + a2*c2*d1*y2*z3 + a2*c3*d1*y2*z3 + b2*c1*y3*z3 + a2*c1*c3*y3*z3 + a2*b2*c1*c3*y3*z3 + a3*b2*c1*c3*y3*z3 + a2*b3*c1*c3*y3*z3 + b2*b3*c1*c2*c3*y3*z3 + a2*c3*d1*y3*z3 + b2*c2*c3*d1*y3*z3 + c1*c2*c3*d1*y3*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 127 ( P4/mbm)
#####################################################################
Aiin127:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin127:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin127:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Azin127:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return z1;
end;
#####################################################################
Bdeltain127:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bphiin127:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + a2*d1 + b1*b2*d1 + a1*d2 + b1*b2*d2 + c1*d2 + d1*d2 + a2*x1 + b2*x1 + b2*c1*x1 + d2*x1 + a2*y1 + b2*c1*y1 + d2*y1;
end;
#####################################################################
CGAPin127:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a1*a2*a3*b1 + a1*a3*b2 + a2*a3*b1*b2 + a1*a2*a3*b1*b2 + a2*b1*b3 + a1*a2*b1*b3 + a1*b2*b3 + a1*a3*b2*b3 + a1*a2*a3*b2*b3 + a3*b1*b2*b3 + a1*a3*b1*b2*b3 + a2*a3*b1*b2*b3 + a1*a2*a3*b1*b2*b3 + a1*a2*a3*c1 + a2*a3*b1*c1 + a3*b2*c1 + a2*a3*b2*c1 + a1*a2*a3*b2*c1 + a3*b1*b2*c1 + a1*a3*b1*b2*c1 + a2*b1*b3*c1 + a1*a2*b1*b3*c1 + a2*b2*b3*c1 + a3*b2*b3*c1 + a1*a3*b2*b3*c1 + a1*a2*a3*b2*b3*c1 + a1*b1*b2*b3*c1 + a2*b1*b2*b3*c1 + a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a1*a3*c2 + a1*a2*a3*c2 + a3*b1*c2 + a2*a3*b1*c2 + a1*a3*b2*c2 + a1*a2*a3*b2*c2 + a3*b1*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*a3*b1*b2*c2 + a1*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*b1*b3*c2 + a1*a2*a3*b1*b3*c2 + a1*a3*b2*b3*c2 + a1*a2*a3*b2*b3*c2 + b1*b2*b3*c2 + a1*b1*b2*b3*c2 + a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a1*a3*b1*b2*b3*c2 + a2*a3*c1*c2 + a2*a3*b2*c1*c2 + a1*a2*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*a3*b1*b2*c1*c2 + a2*a3*b1*b2*c1*c2 + b3*c1*c2 + a1*a2*a3*b3*c1*c2 + b1*b3*c1*c2 + a1*b1*b3*c1*c2 + a2*b1*b3*c1*c2 + a1*a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + a1*a3*b1*b3*c1*c2 + a2*a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*a3*b2*b3*c1*c2 + a2*a3*b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a1*a2*b1*c3 + a1*a2*a3*b2*c3 + b1*b2*c3 + a1*b1*b2*c3 + a1*a2*b1*b2*c3 + a3*b1*b2*c3 + a1*a3*b1*b2*c3 + a2*a3*b1*b2*c3 + a2*b1*b3*c3 + a1*a2*b1*b3*c3 + a2*a3*b1*b3*c3 + a1*a2*a3*b1*b3*c3 + a1*b2*b3*c3 + a1*a2*a3*b2*b3*c3 + a1*b1*b2*b3*c3 + a2*b1*b2*b3*c3 + a3*b1*b2*b3*c3 + a2*c1*c3 + a1*a2*c1*c3 + a2*b1*c1*c3 + a1*a2*b1*c1*c3 + a2*a3*b1*c1*c3 + b2*c1*c3 + a1*b2*c1*c3 + a2*b2*c1*c3 + a3*b2*c1*c3 + a1*a2*b1*b2*c1*c3 + a1*a3*b1*b2*c1*c3 + a2*a3*b3*c1*c3 + a1*a2*a3*b3*c1*c3 + a1*a2*b1*b3*c1*c3 + b2*b3*c1*c3 + a1*b2*b3*c1*c3 + a1*a3*b2*b3*c1*c3 + a2*a3*b2*b3*c1*c3 + b1*b2*b3*c1*c3 + a1*b1*b2*b3*c1*c3 + a2*a3*b1*b2*b3*c1*c3 + a1*c2*c3 + a1*a2*c2*c3 + a1*a3*c2*c3 + a1*b1*c2*c3 + a2*b1*c2*c3 + a1*a2*b1*c2*c3 + a3*b1*c2*c3 + a1*a2*b2*c2*c3 + a1*a2*a3*b2*c2*c3 + b1*b2*c2*c3 + a1*b1*b2*c2*c3 + a1*a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a1*a3*b1*b2*c2*c3 + a1*b3*c2*c3 + a1*a2*a3*b3*c2*c3 + a3*b1*b3*c2*c3 + a1*a3*b1*b3*c2*c3 + a2*a3*b1*b3*c2*c3 + a1*b2*b3*c2*c3 + a1*a2*b2*b3*c2*c3 + a1*a3*b2*b3*c2*c3 + a1*b1*b2*b3*c2*c3 + a2*b1*b2*b3*c2*c3 + a1*a2*b1*b2*b3*c2*c3 + a3*b1*b2*b3*c2*c3 + a1*a3*b1*b2*b3*c2*c3 + c1*c2*c3 + a1*c1*c2*c3 + a1*a2*c1*c2*c3 + a3*c1*c2*c3 + a3*b1*c1*c2*c3 + b2*c1*c2*c3 + a2*b2*c1*c2*c3 + a1*a2*b2*c1*c2*c3 + a1*a3*b2*c1*c2*c3 + a2*a3*b2*c1*c2*c3 + a2*b3*c1*c2*c3 + a3*b3*c1*c2*c3 + a1*a3*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + b2*b3*c1*c2*c3 + a1*b2*b3*c1*c2*c3 + a2*b2*b3*c1*c2*c3 + a1*a2*b2*b3*c1*c2*c3 + a3*b2*b3*c1*c2*c3 + a1*a3*b2*b3*c1*c2*c3 + a1*b1*b2*b3*c1*c2*c3 + a2*b1*b2*b3*c1*c2*c3 + a2*a3*d1 + a2*a3*b1*d1 + a2*b1*b3*d1 + a1*b1*b2*b3*d1 + a3*b1*b2*b3*d1 + a2*a3*c1*d1 + a3*b2*c1*d1 + a3*b1*b2*c1*d1 + a2*b1*b3*c1*d1 + b2*b3*c1*d1 + a1*b2*b3*c1*d1 + a3*b2*b3*c1*d1 + b1*b2*b3*c1*d1 + a3*c2*d1 + a3*b2*c2*d1 + a3*b1*b2*c2*d1 + a1*a3*b1*b2*c2*d1 + b1*b3*c2*d1 + a1*b1*b3*c2*d1 + a2*b1*b3*c2*d1 + a1*a2*b1*b3*c2*d1 + a3*b1*b3*c2*d1 + a1*a3*b1*b3*c2*d1 + b1*b2*b3*c2*d1 + a1*b1*b2*b3*c2*d1 + a2*b1*b2*b3*c2*d1 + a3*b1*b2*b3*c2*d1 + a3*c1*c2*d1 + a1*a3*b2*c1*c2*d1 + a3*b1*b2*c1*c2*d1 + b3*c1*c2*d1 + a1*b3*c1*c2*d1 + a1*a2*b3*c1*c2*d1 + a1*a3*b3*c1*c2*d1 + a2*b1*b3*c1*c2*d1 + a3*b1*b3*c1*c2*d1 + a1*b2*b3*c1*c2*d1 + a2*b2*b3*c1*c2*d1 + a3*b2*b3*c1*c2*d1 + b1*b2*b3*c1*c2*d1 + a2*c3*d1 + a2*b1*c3*d1 + a1*b2*c3*d1 + b1*b2*c3*d1 + a2*b1*b2*c3*d1 + a1*a2*b1*b2*c3*d1 + a3*b1*b2*c3*d1 + a1*a3*b1*b2*c3*d1 + a2*b3*c3*d1 + a1*a2*b1*b3*c3*d1 + a2*a3*b1*b3*c3*d1 + a3*b2*b3*c3*d1 + a2*c1*c3*d1 + a1*a2*b2*c1*c3*d1 + a1*a3*b2*c1*c3*d1 + a2*b1*b2*c1*c3*d1 + a3*b1*b2*c1*c3*d1 + a2*b3*c1*c3*d1 + a1*a2*b3*c1*c3*d1 + a2*a3*b3*c1*c3*d1 + a2*b1*b3*c1*c3*d1 + b2*b3*c1*c3*d1 + a3*b2*b3*c1*c3*d1 + b1*b2*b3*c1*c3*d1 + a3*b1*b2*b3*c1*c3*d1 + c2*c3*d1 + a1*b1*c2*c3*d1 + b1*b2*c2*c3*d1 + b3*c2*c3*d1 + a3*b3*c2*c3*d1 + a1*b1*b3*c2*c3*d1 + a2*b1*b3*c2*c3*d1 + a3*b1*b3*c2*c3*d1 + b2*b3*c2*c3*d1 + b1*b2*b3*c2*c3*d1 + a1*b1*b2*b3*c2*c3*d1 + a2*b1*b2*b3*c2*c3*d1 + a3*b1*b2*b3*c2*c3*d1 + a1*c1*c2*c3*d1 + a1*b3*c1*c2*c3*d1 + a2*b3*c1*c2*c3*d1 + a3*b3*c1*c2*c3*d1 + b1*b3*c1*c2*c3*d1 + a1*b2*b3*c1*c2*c3*d1 + a2*b2*b3*c1*c2*c3*d1 + a3*b2*b3*c1*c2*c3*d1 + b1*b2*b3*c1*c2*c3*d1 + a1*a3*b1*d2 + a2*a3*b1*d2 + a1*a3*b2*d2 + a1*b1*b3*d2 + a2*b1*b3*d2 + a1*a2*b1*b3*d2 + a1*a3*b1*b3*d2 + a1*b2*b3*d2 + a1*a2*b2*b3*d2 + a1*a3*b2*b3*d2 + a1*b1*b2*b3*d2 + a2*b1*b2*b3*d2 + a1*a2*b1*b2*b3*d2 + a3*b1*b2*b3*d2 + a1*a3*b1*b2*b3*d2 + a3*c1*d2 + a1*a3*c1*d2 + a2*a3*c1*d2 + a3*b2*c1*d2 + a3*b1*b2*c1*d2 + a2*b3*c1*d2 + a1*a2*b3*c1*d2 + a3*b3*c1*d2 + a1*a3*b3*c1*d2 + a3*b1*b3*c1*d2 + b2*b3*c1*d2 + a2*b2*b3*c1*d2 + a1*a2*b2*b3*c1*d2 + a1*a3*b2*b3*c1*d2 + a2*b1*b2*b3*c1*d2 + a3*b1*b2*b3*c1*d2 + a1*a3*b2*c2*d2 + a3*b1*b2*c2*d2 + a1*b1*b3*c2*d2 + a3*b1*b3*c2*d2 + a1*b2*b3*c2*d2 + a1*a2*b2*b3*c2*d2 + a1*a3*b2*b3*c2*d2 + a2*b1*b2*b3*c2*d2 + a3*b1*b2*b3*c2*d2 + a3*c1*c2*d2 + a3*b2*c1*c2*d2 + a3*b1*b2*c1*c2*d2 + a1*b3*c1*c2*d2 + b2*b3*c1*c2*d2 + a1*b1*b2*b3*c1*c2*d2 + a2*b1*b2*b3*c1*c2*d2 + a3*b1*b2*b3*c1*c2*d2 + a1*b1*c3*d2 + a2*b1*c3*d2 + a1*b2*c3*d2 + a1*a2*b2*c3*d2 + a1*a3*b2*c3*d2 + b1*b2*c3*d2 + a1*a2*b1*b2*c3*d2 + a1*a3*b1*b2*c3*d2 + a1*a2*b1*b3*c3*d2 + a2*a3*b1*b3*c3*d2 + a1*a2*b2*b3*c3*d2 + b1*b2*b3*c3*d2 + a2*c1*c3*d2 + b1*c1*c3*d2 + a1*b1*c1*c3*d2 + a2*b2*c1*c3*d2 + a1*a2*b2*c1*c3*d2 + a3*b2*c1*c3*d2 + a1*a3*b2*c1*c3*d2 + a1*b1*b2*c1*c3*d2 + b3*c1*c3*d2 + a1*b3*c1*c3*d2 + a2*b3*c1*c3*d2 + a1*a2*b3*c1*c3*d2 + a2*a3*b3*c1*c3*d2 + a1*b1*b3*c1*c3*d2 + a3*b1*b3*c1*c3*d2 + b2*b3*c1*c3*d2 + a2*b2*b3*c1*c3*d2 + b1*b2*b3*c1*c3*d2 + a3*b1*b2*b3*c1*c3*d2 + a1*c2*c3*d2 + a1*b1*c2*c3*d2 + a2*b1*c2*c3*d2 + a3*b1*c2*c3*d2 + a1*b2*c2*c3*d2 + a1*a2*b2*c2*c3*d2 + a1*a3*b2*c2*c3*d2 + b1*b2*c2*c3*d2 + a1*b3*c2*c3*d2 + a1*a2*b3*c2*c3*d2 + b1*b3*c2*c3*d2 + a2*b1*b3*c2*c3*d2 + a1*b2*b3*c2*c3*d2 + b1*b2*b3*c2*c3*d2 + a2*b1*b2*b3*c2*c3*d2 + b1*c1*c2*c3*d2 + b2*c1*c2*c3*d2 + a2*b2*c1*c2*c3*d2 + a3*b2*c1*c2*c3*d2 + b1*b2*c1*c2*c3*d2 + b1*b3*c1*c2*c3*d2 + a2*b2*b3*c1*c2*c3*d2 + a3*b2*b3*c1*c2*c3*d2 + b1*b2*b3*c1*c2*c3*d2 + c3*d1*d2 + a1*b2*d3 + a1*b1*b2*d3 + a2*b1*b2*d3 + a1*b2*b3*d3 + a1*b1*b2*b3*d3 + a2*b1*b2*b3*d3 + b2*c1*d3 + a3*b2*c1*d3 + b1*b2*c1*d3 + a3*b2*b3*c1*d3 + a1*b1*b2*b3*c1*d3 + a2*b1*b2*b3*c1*d3 + a3*b1*b2*b3*c1*d3 + a1*a2*c2*d3 + a1*a3*c2*d3 + a1*b2*c2*d3 + a1*a2*b2*c2*d3 + a1*a3*b2*c2*d3 + b1*b2*c2*d3 + a1*b1*b2*c2*d3 + a2*b1*b2*c2*d3 + a3*b1*b2*c2*d3 + a1*b3*c2*d3 + a1*a2*b3*c2*d3 + a1*a3*b3*c2*d3 + a1*b2*b3*c2*d3 + b1*b2*b3*c2*d3 + a1*b1*b2*b3*c2*d3 + a2*b1*b2*b3*c2*d3 + a3*b1*b2*b3*c2*d3 + a2*c1*c2*d3 + a3*c1*c2*d3 + b2*c1*c2*d3 + a1*b2*c1*c2*d3 + b1*b2*c1*c2*d3 + a1*b1*b2*c1*c2*d3 + a2*b1*b2*c1*c2*d3 + a3*b1*b2*c1*c2*d3 + a2*b3*c1*c2*d3 + a3*b3*c1*c2*d3 + a1*a2*c3*d3 + a1*b2*c3*d3 + a1*a2*b2*c3*d3 + a1*a3*b2*c3*d3 + a3*b1*b2*c3*d3 + a1*a2*b3*c3*d3 + a2*c1*c3*d3 + a2*b2*c1*c3*d3 + a3*b2*c1*c3*d3 + b1*b2*c1*c3*d3 + a1*b1*b2*c1*c3*d3 + a2*b1*b2*c1*c3*d3 + a3*b1*b2*c1*c3*d3 + a2*b3*c1*c3*d3 + b2*b3*c1*c3*d3 + a1*b2*b3*c1*c3*d3 + a2*b2*b3*c1*c3*d3 + b1*b2*b3*c1*c3*d3 + b1*b2*c2*c3*d3 + b2*c1*c2*c3*d3 + a1*b3*c1*c2*c3*d3 + a2*b3*c1*c2*c3*d3 + a3*b3*c1*c2*c3*d3 + b2*b3*c1*c2*c3*d3 + b1*b2*b3*c1*c2*c3*d3 + d1*d2*d3 + a3*b2*x1 + a3*b1*b2*x1 + a1*a2*b3*x1 + a2*a3*b3*x1 + a2*b1*b3*x1 + a1*b2*b3*x1 + a2*a3*c1*x1 + a3*b2*c1*x1 + a2*b3*c1*x1 + a2*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a3*c2*x1 + a2*a3*c2*x1 + a1*a3*b2*c2*x1 + a3*b1*b2*c2*x1 + a1*a3*b1*b2*c2*x1 + a1*b3*c2*x1 + a1*a2*b3*c2*x1 + a1*a3*b3*c2*x1 + a2*a3*b3*c2*x1 + a2*b1*b3*c2*x1 + a1*a2*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + a1*a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a2*a3*b2*b3*c2*x1 + b1*b2*b3*c2*x1 + a1*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b2*c1*c2*x1 + b3*c1*c2*x1 + a2*a3*b3*c1*c2*x1 + a1*b1*b3*c1*c2*x1 + b2*b3*c1*c2*x1 + a2*a3*b2*b3*c1*c2*x1 + a2*c3*x1 + a1*a2*b2*c3*x1 + a3*b2*c3*x1 + a1*a3*b2*c3*x1 + a2*a3*b2*c3*x1 + a2*b1*b2*c3*x1 + a1*a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a1*a3*b1*b2*c3*x1 + a1*a2*b3*c3*x1 + a2*a3*b3*c3*x1 + a1*a2*b1*b3*c3*x1 + a2*b2*b3*c3*x1 + a1*a3*b2*b3*c3*x1 + b1*b2*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a2*c1*c3*x1 + b2*c1*c3*x1 + a1*b2*c1*c3*x1 + a2*a3*b2*c1*c3*x1 + b1*b2*c1*c3*x1 + a1*b1*b2*c1*c3*x1 + a2*a3*b3*c1*c3*x1 + a2*b1*b3*c1*c3*x1 + a1*b2*b3*c1*c3*x1 + a2*b2*b3*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + a2*a3*b2*b3*c1*c3*x1 + a2*c2*c3*x1 + b1*c2*c3*x1 + a1*b1*c2*c3*x1 + a1*b2*c2*c3*x1 + a2*b2*c2*c3*x1 + a2*a3*b2*c2*c3*x1 + b1*b2*c2*c3*x1 + a1*b3*c2*c3*x1 + a2*b3*c2*c3*x1 + a3*b3*c2*c3*x1 + a2*a3*b3*c2*c3*x1 + b1*b3*c2*c3*x1 + a2*b1*b3*c2*c3*x1 + a2*b2*b3*c2*c3*x1 + a3*b2*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + a1*b1*b2*b3*c2*c3*x1 + a2*c1*c2*c3*x1 + b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + a2*a3*b2*c1*c2*c3*x1 + a3*b3*c1*c2*c3*x1 + a2*a3*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a3*b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + a3*b1*b2*c2*d1*x1 + b1*b3*c2*d1*x1 + a2*b1*b3*c2*d1*x1 + a3*b1*b3*c2*d1*x1 + b1*b2*b3*c2*d1*x1 + a3*b2*c1*c2*d1*x1 + b3*c1*c2*d1*x1 + a2*b3*c1*c2*d1*x1 + a3*b3*c1*c2*d1*x1 + b2*b3*c1*c2*d1*x1 + b2*c3*d1*x1 + b1*b2*c3*d1*x1 + a2*b1*b2*c3*d1*x1 + a3*b1*b2*c3*d1*x1 + a2*b1*b3*c3*d1*x1 + b2*c1*c3*d1*x1 + a2*b2*c1*c3*d1*x1 + a3*b2*c1*c3*d1*x1 + a2*b3*c1*c3*d1*x1 + c2*c3*d1*x1 + b1*c2*c3*d1*x1 + b1*b3*c2*c3*d1*x1 + b1*b2*b3*c2*c3*d1*x1 + c1*c2*c3*d1*x1 + b3*c1*c2*c3*d1*x1 + b2*b3*c1*c2*c3*d1*x1 + b2*b3*d2*x1 + a3*b1*b2*c1*d2*x1 + b1*b3*c1*d2*x1 + a1*b1*b3*c1*d2*x1 + a2*b1*b3*c1*d2*x1 + a3*b1*b3*c1*d2*x1 + a3*b1*b2*c2*d2*x1 + a2*b3*c2*d2*x1 + a3*b3*c2*d2*x1 + b1*b3*c2*d2*x1 + a1*b1*b3*c2*d2*x1 + a2*b1*b3*c2*d2*x1 + a3*b1*b3*c2*d2*x1 + b2*b3*c2*d2*x1 + a2*b2*b3*c2*d2*x1 + a3*b2*b3*c2*d2*x1 + b1*b2*b3*c2*d2*x1 + a3*b2*c1*c2*d2*x1 + b3*c1*c2*d2*x1 + a1*b3*c1*c2*d2*x1 + a2*b2*b3*c1*c2*d2*x1 + a3*b2*b3*c1*c2*d2*x1 + b1*b2*b3*c1*c2*d2*x1 + b1*c3*d2*x1 + b2*c3*d2*x1 + a2*b2*c3*d2*x1 + a3*b2*c3*d2*x1 + b1*b2*c3*d2*x1 + a1*b1*b2*c3*d2*x1 + a2*b1*b2*c3*d2*x1 + a3*b1*b2*c3*d2*x1 + a1*b1*b3*c3*d2*x1 + a2*b1*b3*c3*d2*x1 + a2*b2*b3*c3*d2*x1 + c1*c3*d2*x1 + b1*c1*c3*d2*x1 + b2*c1*c3*d2*x1 + a1*b2*c1*c3*d2*x1 + b1*b2*c1*c3*d2*x1 + b3*c1*c3*d2*x1 + a1*b3*c1*c3*d2*x1 + a2*b3*c1*c3*d2*x1 + b1*b3*c1*c3*d2*x1 + a2*b2*b3*c1*c3*d2*x1 + a3*b2*b3*c1*c3*d2*x1 + c2*c3*d2*x1 + b1*c2*c3*d2*x1 + a2*b2*c2*c3*d2*x1 + a3*b2*c2*c3*d2*x1 + b3*c2*c3*d2*x1 + a2*b3*c2*c3*d2*x1 + b1*b3*c2*c3*d2*x1 + b2*b3*c2*c3*d2*x1 + b1*b2*b3*c2*c3*d2*x1 + a2*b2*c1*c2*c3*d2*x1 + a3*b2*c1*c2*c3*d2*x1 + a2*b3*c1*c2*c3*d2*x1 + a3*b3*c1*c2*c3*d2*x1 + a2*d3*x1 + a1*b2*d3*x1 + a2*b3*d3*x1 + b2*c1*d3*x1 + a1*b1*b2*c1*d3*x1 + a2*b1*b2*c1*d3*x1 + a3*b1*b2*c1*d3*x1 + a1*b2*b3*c1*d3*x1 + a2*b2*b3*c1*d3*x1 + a3*b2*b3*c1*d3*x1 + b1*b2*b3*c1*d3*x1 + c2*d3*x1 + a1*c2*d3*x1 + b1*b2*c2*d3*x1 + a1*b1*b2*c2*d3*x1 + a2*b1*b2*c2*d3*x1 + a3*b1*b2*c2*d3*x1 + a1*b2*b3*c2*d3*x1 + a2*b2*b3*c2*d3*x1 + a3*b2*b3*c2*d3*x1 + b1*b2*b3*c2*d3*x1 + c1*c2*d3*x1 + b2*c1*c2*d3*x1 + a1*b2*c1*c2*d3*x1 + a2*b2*c1*c2*d3*x1 + a3*b2*c1*c2*d3*x1 + b1*b2*c1*c2*d3*x1 + a1*b3*c1*c2*d3*x1 + a2*b3*c1*c2*d3*x1 + a3*b3*c1*c2*d3*x1 + a2*c3*d3*x1 + b1*b2*c3*d3*x1 + a1*b1*b2*c3*d3*x1 + a2*b1*b2*c3*d3*x1 + a3*b1*b2*c3*d3*x1 + b2*b3*c3*d3*x1 + a1*b2*b3*c3*d3*x1 + a2*b2*b3*c3*d3*x1 + a3*b2*b3*c3*d3*x1 + a1*b2*c1*c3*d3*x1 + a2*b2*c1*c3*d3*x1 + a3*b2*c1*c3*d3*x1 + b1*b2*c1*c3*d3*x1 + b2*b3*c1*c3*d3*x1 + b1*b2*b3*c1*c3*d3*x1 + c2*c3*d3*x1 + b3*c2*c3*d3*x1 + a1*b3*c2*c3*d3*x1 + a2*b3*c2*c3*d3*x1 + a3*b3*c2*c3*d3*x1 + b2*b3*c2*c3*d3*x1 + b1*b2*b3*c2*c3*d3*x1 + b3*c1*c2*c3*d3*x1 + a3*b1*x2 + a1*a3*b2*x2 + a3*b1*b2*x2 + a1*a3*b1*b2*x2 + a1*a3*b3*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a1*a2*b1*b3*x2 + a1*a3*b1*b3*x2 + a1*b2*b3*x2 + a3*b2*c1*x2 + a1*a3*b2*c1*x2 + a1*a2*b3*c1*x2 + a3*b3*c1*x2 + a1*a3*b3*c1*x2 + a1*b1*b3*c1*x2 + a3*b1*b3*c1*x2 + b2*b3*c1*x2 + a1*b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*a3*b2*c2*x2 + a1*a3*b1*b2*c2*x2 + a1*a2*b3*c2*x2 + a1*a3*b3*c2*x2 + b1*b3*c2*x2 + a1*b1*b3*c2*x2 + a1*a2*b1*b3*c2*x2 + a1*a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a1*a3*b2*c1*c2*x2 + b3*c1*c2*x2 + a1*a2*b3*c1*c2*x2 + a1*a3*b3*c1*c2*x2 + a1*b1*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + b1*c3*x2 + a1*b1*c3*x2 + a2*b1*c3*x2 + a3*b1*c3*x2 + a1*a2*b2*c3*x2 + a1*a3*b2*c3*x2 + a1*a2*b1*b2*c3*x2 + a1*a3*b1*b2*c3*x2 + a1*a2*b3*c3*x2 + a2*b1*b3*c3*x2 + a1*a2*b1*b3*c3*x2 + a3*b1*b3*c3*x2 + a1*a3*b2*b3*c3*x2 + b1*b2*b3*c3*x2 + a3*b1*b2*b3*c3*x2 + a1*b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a3*b1*c1*c3*x2 + a1*b2*c1*c3*x2 + a1*a2*b2*c1*c3*x2 + a1*a3*b2*c1*c3*x2 + b1*b2*c1*c3*x2 + a1*b1*b2*c1*c3*x2 + a1*a2*b3*c1*c3*x2 + a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a2*b1*b3*c1*c3*x2 + a3*b1*b3*c1*c3*x2 + b2*b3*c1*c3*x2 + a1*b2*b3*c1*c3*x2 + a2*b2*b3*c1*c3*x2 + a3*b2*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + a3*b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a1*b1*c2*c3*x2 + a1*b2*c2*c3*x2 + b1*b2*c2*c3*x2 + a1*b3*c2*c3*x2 + b1*b3*c2*c3*x2 + a2*b1*b3*c2*c3*x2 + a1*b1*b2*b3*c2*c3*x2 + c1*c2*c3*x2 + a1*c1*c2*c3*x2 + b2*c1*c2*c3*x2 + b1*b2*c1*c2*c3*x2 + a1*b3*c1*c2*c3*x2 + a3*b3*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + a1*b2*b3*c1*c2*c3*x2 + b1*b2*b3*c1*c2*c3*x2 + a3*b1*b2*c2*d1*x2 + b1*b3*c2*d1*x2 + a2*b1*b3*c2*d1*x2 + a3*b1*b3*c2*d1*x2 + b1*b2*b3*c2*d1*x2 + a3*b2*c1*c2*d1*x2 + b3*c1*c2*d1*x2 + a2*b3*c1*c2*d1*x2 + a3*b3*c1*c2*d1*x2 + b2*b3*c1*c2*d1*x2 + c3*d1*x2 + b1*c3*d1*x2 + b2*c3*d1*x2 + b1*b2*c3*d1*x2 + a2*b1*b2*c3*d1*x2 + a3*b1*b2*c3*d1*x2 + a2*b1*b3*c3*d1*x2 + c1*c3*d1*x2 + b1*c1*c3*d1*x2 + a2*b2*c1*c3*d1*x2 + a3*b2*c1*c3*d1*x2 + a2*b3*c1*c3*d1*x2 + c2*c3*d1*x2 + b1*c2*c3*d1*x2 + b1*b3*c2*c3*d1*x2 + b1*b2*b3*c2*c3*d1*x2 + b3*c1*c2*c3*d1*x2 + b2*b3*c1*c2*c3*d1*x2 + a3*b1*b2*c1*d2*x2 + b1*b3*c1*d2*x2 + a1*b1*b3*c1*d2*x2 + a2*b1*b3*c1*d2*x2 + a3*b1*b3*c1*d2*x2 + a3*b1*b2*c2*d2*x2 + b1*b3*c2*d2*x2 + a1*b1*b3*c2*d2*x2 + a2*b1*b3*c2*d2*x2 + a3*b1*b3*c2*d2*x2 + b1*b2*b3*c2*d2*x2 + a3*b2*c1*c2*d2*x2 + a1*b3*c1*c2*d2*x2 + a2*b3*c1*c2*d2*x2 + a3*b3*c1*c2*d2*x2 + b2*b3*c1*c2*d2*x2 + b1*b2*b3*c1*c2*d2*x2 + b1*c3*d2*x2 + b1*b2*c3*d2*x2 + a1*b1*b2*c3*d2*x2 + a2*b1*b2*c3*d2*x2 + a3*b1*b2*c3*d2*x2 + a1*b1*b3*c3*d2*x2 + a2*b1*b3*c3*d2*x2 + c1*c3*d2*x2 + b1*c1*c3*d2*x2 + b2*c1*c3*d2*x2 + a1*b2*c1*c3*d2*x2 + a2*b2*c1*c3*d2*x2 + a3*b2*c1*c3*d2*x2 + b1*b2*c1*c3*d2*x2 + b3*c1*c3*d2*x2 + a1*b3*c1*c3*d2*x2 + a2*b3*c1*c3*d2*x2 + b1*b3*c1*c3*d2*x2 + b1*c2*c3*d2*x2 + b1*b3*c2*c3*d2*x2 + b1*b2*b3*c2*c3*d2*x2 + b3*c1*c2*c3*d2*x2 + b2*b3*c1*c2*c3*d2*x2 + a1*b2*d3*x2 + b2*c1*d3*x2 + a1*b1*b2*c1*d3*x2 + a2*b1*b2*c1*d3*x2 + a3*b1*b2*c1*d3*x2 + a1*b2*b3*c1*d3*x2 + a2*b2*b3*c1*d3*x2 + a3*b2*b3*c1*d3*x2 + b1*b2*b3*c1*d3*x2 + a1*c2*d3*x2 + b1*b2*c2*d3*x2 + a1*b1*b2*c2*d3*x2 + a2*b1*b2*c2*d3*x2 + a3*b1*b2*c2*d3*x2 + a1*b2*b3*c2*d3*x2 + b1*b2*b3*c2*d3*x2 + c1*c2*d3*x2 + b2*c1*c2*d3*x2 + a1*b2*c1*c2*d3*x2 + a2*b2*c1*c2*d3*x2 + a3*b2*c1*c2*d3*x2 + b1*b2*c1*c2*d3*x2 + a1*b3*c1*c2*d3*x2 + a2*b3*c1*c2*d3*x2 + a3*b3*c1*c2*d3*x2 + b1*b2*c3*d3*x2 + a1*b1*b2*c3*d3*x2 + a2*b1*b2*c3*d3*x2 + a3*b1*b2*c3*d3*x2 + a1*b2*b3*c3*d3*x2 + a1*b2*c1*c3*d3*x2 + a2*b2*c1*c3*d3*x2 + a3*b2*c1*c3*d3*x2 + b1*b2*c1*c3*d3*x2 + b2*b3*c1*c3*d3*x2 + b1*b2*b3*c1*c3*d3*x2 + a1*b3*c2*c3*d3*x2 + b1*b2*b3*c2*c3*d3*x2 + b3*c1*c2*c3*d3*x2 + b3*x1*x2 + a3*c2*x1*x2 + b3*c2*x1*x2 + c3*x1*x2 + a2*c3*x1*x2 + a3*c3*x1*x2 + b2*c1*c3*x1*x2 + a3*b3*c1*c3*x1*x2 + b3*c2*c3*x1*x2 + c1*c2*c3*x1*x2 + a1*a2*x3 + a2*b1*x3 + a1*a2*b1*x3 + a1*b2*x3 + a1*a3*b2*x3 + b1*b2*x3 + a1*a2*b1*b2*x3 + a3*b1*b2*x3 + a1*a3*b1*b2*x3 + a1*a2*b1*b3*x3 + a2*a3*b1*b3*x3 + a1*a3*b2*b3*x3 + b1*b2*b3*x3 + a2*c1*x3 + a1*a2*c1*x3 + a1*b2*c1*x3 + a2*b2*c1*x3 + a1*a2*b2*c1*x3 + a3*b2*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a2*b1*b2*c1*x3 + a1*a2*b3*c1*x3 + a2*a3*b3*c1*x3 + a2*b1*b3*c1*x3 + a3*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a1*a2*c2*x3 + a2*b1*c2*x3 + a3*b1*c2*x3 + a1*a2*b2*c2*x3 + a1*a3*b2*c2*x3 + b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*a2*b3*c2*x3 + a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + a1*b1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + a1*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b1*b2*c1*c2*x3 + a2*b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a1*b3*c1*c2*x3 + a1*b1*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + a3*b1*b3*c1*c2*x3 + a1*b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + a1*b2*c3*x3 + a1*a2*b2*c3*x3 + a1*a3*b2*c3*x3 + b1*b2*c3*x3 + a1*a2*b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a1*a3*b1*b2*c3*x3 + a1*a2*b3*c3*x3 + a2*b1*b3*c3*x3 + a1*a2*b1*b3*c3*x3 + a2*a3*b1*b3*c3*x3 + a1*a3*b2*b3*c3*x3 + b1*b2*b3*c3*x3 + b2*c1*c3*x3 + a2*b2*c1*c3*x3 + a1*a2*b2*c1*c3*x3 + a1*a3*b2*c1*c3*x3 + b1*b2*c1*c3*x3 + a1*b1*b2*c1*c3*x3 + a1*a2*b3*c1*c3*x3 + a2*a3*b3*c1*c3*x3 + a2*b1*b3*c1*c3*x3 + a1*b2*b3*c1*c3*x3 + a2*b2*b3*c1*c3*x3 + a3*b2*b3*c1*c3*x3 + b1*b2*b3*c1*c3*x3 + a3*b1*b2*b3*c1*c3*x3 + a1*c2*c3*x3 + b1*c2*c3*x3 + a1*a2*b2*c2*c3*x3 + a1*a3*b2*c2*c3*x3 + a1*a2*b3*c2*c3*x3 + b1*b3*c2*c3*x3 + a2*b1*b3*c2*c3*x3 + a1*b2*b3*c2*c3*x3 + b1*b2*b3*c2*c3*x3 + a1*b1*b2*b3*c2*c3*x3 + c1*c2*c3*x3 + b1*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + a3*b2*c1*c2*c3*x3 + b1*b2*c1*c2*c3*x3 + b3*c1*c2*c3*x3 + a1*b3*c1*c2*c3*x3 + a2*b3*c1*c2*c3*x3 + a3*b3*c1*c2*c3*x3 + b1*b3*c1*c2*c3*x3 + a1*b2*b3*c1*c2*c3*x3 + a3*b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + a2*b1*d1*x3 + a2*c1*d1*x3 + b1*c2*d1*x3 + b1*b2*c2*d1*x3 + a2*b1*b2*c2*d1*x3 + a3*b1*b2*c2*d1*x3 + b1*b3*c2*d1*x3 + a2*b1*b3*c2*d1*x3 + a3*b1*b3*c2*d1*x3 + b1*b2*b3*c2*d1*x3 + c1*c2*d1*x3 + b2*c1*c2*d1*x3 + a2*b2*c1*c2*d1*x3 + a3*b2*c1*c2*d1*x3 + b3*c1*c2*d1*x3 + a2*b3*c1*c2*d1*x3 + a3*b3*c1*c2*d1*x3 + b2*b3*c1*c2*d1*x3 + b1*b2*c3*d1*x3 + a2*b1*b2*c3*d1*x3 + a3*b1*b2*c3*d1*x3 + a2*b1*b3*c3*d1*x3 + a3*b2*b3*c3*d1*x3 + b2*c1*c3*d1*x3 + a2*b2*c1*c3*d1*x3 + a3*b2*c1*c3*d1*x3 + a2*b3*c1*c3*d1*x3 + a3*b3*c2*c3*d1*x3 + b1*b3*c2*c3*d1*x3 + b1*b2*b3*c2*c3*d1*x3 + b3*c1*c2*c3*d1*x3 + b2*b3*c1*c2*c3*d1*x3 + a1*b1*d2*x3 + a2*b1*d2*x3 + c1*d2*x3 + a1*c1*d2*x3 + a2*c1*d2*x3 + b1*c1*d2*x3 + b1*b2*c1*d2*x3 + a1*b1*b2*c1*d2*x3 + a2*b1*b2*c1*d2*x3 + a3*b1*b2*c1*d2*x3 + b1*b3*c1*d2*x3 + a1*b1*b3*c1*d2*x3 + a2*b1*b3*c1*d2*x3 + a3*b1*b3*c1*d2*x3 + b1*c2*d2*x3 + b1*b2*c2*d2*x3 + a1*b1*b2*c2*d2*x3 + a2*b1*b2*c2*d2*x3 + a3*b1*b2*c2*d2*x3 + b1*b3*c2*d2*x3 + a1*b1*b3*c2*d2*x3 + a2*b1*b3*c2*d2*x3 + a3*b1*b3*c2*d2*x3 + b1*b2*b3*c2*d2*x3 + c1*c2*d2*x3 + a1*b2*c1*c2*d2*x3 + a2*b2*c1*c2*d2*x3 + a3*b2*c1*c2*d2*x3 + b1*b2*c1*c2*d2*x3 + a1*b3*c1*c2*d2*x3 + a2*b3*c1*c2*d2*x3 + a3*b3*c1*c2*d2*x3 + b2*b3*c1*c2*d2*x3 + b1*b2*b3*c1*c2*d2*x3 + b1*b2*c3*d2*x3 + a1*b1*b2*c3*d2*x3 + a2*b1*b2*c3*d2*x3 + a3*b1*b2*c3*d2*x3 + a1*b1*b3*c3*d2*x3 + a2*b1*b3*c3*d2*x3 + a1*b2*c1*c3*d2*x3 + a2*b2*c1*c3*d2*x3 + a3*b2*c1*c3*d2*x3 + b1*b2*c1*c3*d2*x3 + b3*c1*c3*d2*x3 + a1*b3*c1*c3*d2*x3 + a2*b3*c1*c3*d2*x3 + b1*b3*c1*c3*d2*x3 + b1*b3*c2*c3*d2*x3 + b1*b2*b3*c2*c3*d2*x3 + b3*c1*c2*c3*d2*x3 + b2*b3*c1*c2*c3*d2*x3 + a1*b2*d3*x3 + b2*c1*d3*x3 + a1*b1*b2*c1*d3*x3 + a2*b1*b2*c1*d3*x3 + a3*b1*b2*c1*d3*x3 + a1*b2*b3*c1*d3*x3 + a2*b2*b3*c1*d3*x3 + a3*b2*b3*c1*d3*x3 + b1*b2*b3*c1*d3*x3 + a1*c2*d3*x3 + b1*b2*c2*d3*x3 + a1*b1*b2*c2*d3*x3 + a2*b1*b2*c2*d3*x3 + a3*b1*b2*c2*d3*x3 + a1*b2*b3*c2*d3*x3 + b1*b2*b3*c2*d3*x3 + c1*c2*d3*x3 + b2*c1*c2*d3*x3 + a1*b2*c1*c2*d3*x3 + a2*b2*c1*c2*d3*x3 + a3*b2*c1*c2*d3*x3 + b1*b2*c1*c2*d3*x3 + a1*b3*c1*c2*d3*x3 + a2*b3*c1*c2*d3*x3 + a3*b3*c1*c2*d3*x3 + b1*b2*c3*d3*x3 + a1*b1*b2*c3*d3*x3 + a2*b1*b2*c3*d3*x3 + a3*b1*b2*c3*d3*x3 + a1*b2*b3*c3*d3*x3 + a1*b2*c1*c3*d3*x3 + a2*b2*c1*c3*d3*x3 + a3*b2*c1*c3*d3*x3 + b1*b2*c1*c3*d3*x3 + b2*b3*c1*c3*d3*x3 + b1*b2*b3*c1*c3*d3*x3 + a1*b3*c2*c3*d3*x3 + b1*b2*b3*c2*c3*d3*x3 + b3*c1*c2*c3*d3*x3 + b2*x1*x3 + a2*c1*x1*x3 + a3*c2*x1*x3 + a2*b2*c2*x1*x3 + a3*b2*c2*x1*x3 + b3*c2*x1*x3 + a2*b3*c2*x1*x3 + a3*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + c1*c2*x1*x3 + b2*c1*c2*x1*x3 + a2*b2*c1*c2*x1*x3 + a3*b2*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + a2*b3*c1*c2*x1*x3 + a3*b3*c1*c2*x1*x3 + b2*b3*c1*c2*x1*x3 + a2*c3*x1*x3 + b2*c1*c3*x1*x3 + b2*c2*c3*x1*x3 + a2*b2*c2*c3*x1*x3 + a3*b2*c2*c3*x1*x3 + a2*b3*c2*c3*x1*x3 + a3*b3*c2*c3*x1*x3 + b2*b3*c2*c3*x1*x3 + a2*b2*c1*c2*c3*x1*x3 + a3*b2*c1*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + a2*b3*c1*c2*c3*x1*x3 + a3*b3*c1*c2*c3*x1*x3 + b2*b3*c1*c2*c3*x1*x3 + a2*a3*y1 + a1*a2*b3*y1 + a2*a3*b3*y1 + a3*b2*b3*y1 + a2*a3*c1*y1 + a3*b2*c1*y1 + a2*b3*c1*y1 + b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a2*a3*c2*y1 + a1*a3*b1*b2*c2*y1 + a2*b3*c2*y1 + a3*b3*c2*y1 + a1*a2*b1*b3*c2*y1 + a1*a3*b1*b3*c2*y1 + a1*b2*b3*c2*y1 + a1*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b2*c1*c2*y1 + b3*c1*c2*y1 + a2*a3*b3*c1*c2*y1 + a1*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a2*a3*b2*b3*c1*c2*y1 + b2*c3*y1 + a2*b2*c3*y1 + a1*a2*b1*b2*c3*y1 + a1*a3*b1*b2*c3*y1 + a2*b3*c3*y1 + a2*b1*b3*c3*y1 + a1*a2*b1*b3*c3*y1 + b2*b3*c3*y1 + a2*b2*b3*c3*y1 + a1*a3*b2*b3*c3*y1 + a2*a3*b2*b3*c3*y1 + a2*c1*c3*y1 + b2*c1*c3*y1 + a1*b2*c1*c3*y1 + a2*a3*b2*c1*c3*y1 + a1*b1*b2*c1*c3*y1 + a2*a3*b3*c1*c3*y1 + a2*b1*b3*c1*c3*y1 + a1*b2*b3*c1*c3*y1 + a2*b2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a2*a3*b2*b3*c1*c3*y1 + a1*c2*c3*y1 + b1*c2*c3*y1 + a1*b1*c2*c3*y1 + a1*b2*c2*c3*y1 + a2*b2*c2*c3*y1 + a3*b2*c2*c3*y1 + b3*c2*c3*y1 + a2*b3*c2*c3*y1 + a3*b3*c2*c3*y1 + a2*b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + a1*b2*b3*c2*c3*y1 + a2*b2*b3*c2*c3*y1 + a1*b1*b2*b3*c2*c3*y1 + c1*c2*c3*y1 + a2*c1*c2*c3*y1 + b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + a2*a3*b2*c1*c2*c3*y1 + a3*b3*c1*c2*c3*y1 + a2*a3*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a3*b2*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + a3*b1*b2*c2*d1*y1 + b1*b3*c2*d1*y1 + a2*b1*b3*c2*d1*y1 + a3*b1*b3*c2*d1*y1 + b1*b2*b3*c2*d1*y1 + a3*b2*c1*c2*d1*y1 + b3*c1*c2*d1*y1 + a2*b3*c1*c2*d1*y1 + a3*b3*c1*c2*d1*y1 + b2*b3*c1*c2*d1*y1 + b1*b2*c3*d1*y1 + a2*b1*b2*c3*d1*y1 + a3*b1*b2*c3*d1*y1 + a2*b1*b3*c3*d1*y1 + b2*c1*c3*d1*y1 + a2*b2*c1*c3*d1*y1 + a3*b2*c1*c3*d1*y1 + a2*b3*c1*c3*d1*y1 + b1*c2*c3*d1*y1 + b1*b3*c2*c3*d1*y1 + b1*b2*b3*c2*c3*d1*y1 + c1*c2*c3*d1*y1 + b3*c1*c2*c3*d1*y1 + b2*b3*c1*c2*c3*d1*y1 + b2*b3*d2*y1 + a3*b1*b2*c1*d2*y1 + b1*b3*c1*d2*y1 + a1*b1*b3*c1*d2*y1 + a2*b1*b3*c1*d2*y1 + a3*b1*b3*c1*d2*y1 + a3*b1*b2*c2*d2*y1 + b3*c2*d2*y1 + b1*b3*c2*d2*y1 + a1*b1*b3*c2*d2*y1 + a2*b1*b3*c2*d2*y1 + a3*b1*b3*c2*d2*y1 + b1*b2*b3*c2*d2*y1 + a3*b2*c1*c2*d2*y1 + b3*c1*c2*d2*y1 + a1*b3*c1*c2*d2*y1 + a2*b2*b3*c1*c2*d2*y1 + a3*b2*b3*c1*c2*d2*y1 + b1*b2*b3*c1*c2*d2*y1 + b1*c3*d2*y1 + b2*c3*d2*y1 + b1*b2*c3*d2*y1 + a1*b1*b2*c3*d2*y1 + a2*b1*b2*c3*d2*y1 + a3*b1*b2*c3*d2*y1 + a1*b1*b3*c3*d2*y1 + a2*b1*b3*c3*d2*y1 + a3*b2*b3*c3*d2*y1 + c1*c3*d2*y1 + b1*c1*c3*d2*y1 + b2*c1*c3*d2*y1 + a1*b2*c1*c3*d2*y1 + b1*b2*c1*c3*d2*y1 + b3*c1*c3*d2*y1 + a1*b3*c1*c3*d2*y1 + a2*b3*c1*c3*d2*y1 + b1*b3*c1*c3*d2*y1 + a2*b2*b3*c1*c3*d2*y1 + a3*b2*b3*c1*c3*d2*y1 + c2*c3*d2*y1 + b1*c2*c3*d2*y1 + a3*b3*c2*c3*d2*y1 + b1*b3*c2*c3*d2*y1 + b1*b2*b3*c2*c3*d2*y1 + a2*b2*c1*c2*c3*d2*y1 + a3*b2*c1*c2*c3*d2*y1 + a2*b3*c1*c2*c3*d2*y1 + a3*b3*c1*c2*c3*d2*y1 + a2*d3*y1 + a1*b2*d3*y1 + a2*b3*d3*y1 + b2*c1*d3*y1 + a1*b1*b2*c1*d3*y1 + a2*b1*b2*c1*d3*y1 + a3*b1*b2*c1*d3*y1 + a1*b2*b3*c1*d3*y1 + a2*b2*b3*c1*d3*y1 + a3*b2*b3*c1*d3*y1 + b1*b2*b3*c1*d3*y1 + c2*d3*y1 + a1*c2*d3*y1 + b1*b2*c2*d3*y1 + a1*b1*b2*c2*d3*y1 + a2*b1*b2*c2*d3*y1 + a3*b1*b2*c2*d3*y1 + a1*b2*b3*c2*d3*y1 + a2*b2*b3*c2*d3*y1 + a3*b2*b3*c2*d3*y1 + b1*b2*b3*c2*d3*y1 + c1*c2*d3*y1 + b2*c1*c2*d3*y1 + a1*b2*c1*c2*d3*y1 + a2*b2*c1*c2*d3*y1 + a3*b2*c1*c2*d3*y1 + b1*b2*c1*c2*d3*y1 + a1*b3*c1*c2*d3*y1 + a2*b3*c1*c2*d3*y1 + a3*b3*c1*c2*d3*y1 + a2*c3*d3*y1 + b1*b2*c3*d3*y1 + a1*b1*b2*c3*d3*y1 + a2*b1*b2*c3*d3*y1 + a3*b1*b2*c3*d3*y1 + b2*b3*c3*d3*y1 + a1*b2*b3*c3*d3*y1 + a2*b2*b3*c3*d3*y1 + a3*b2*b3*c3*d3*y1 + a1*b2*c1*c3*d3*y1 + a2*b2*c1*c3*d3*y1 + a3*b2*c1*c3*d3*y1 + b1*b2*c1*c3*d3*y1 + b2*b3*c1*c3*d3*y1 + b1*b2*b3*c1*c3*d3*y1 + c2*c3*d3*y1 + b3*c2*c3*d3*y1 + a1*b3*c2*c3*d3*y1 + a2*b3*c2*c3*d3*y1 + a3*b3*c2*c3*d3*y1 + b2*b3*c2*c3*d3*y1 + b1*b2*b3*c2*c3*d3*y1 + b3*c1*c2*c3*d3*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + a2*b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b2*b3*c2*x1*y1 + b2*c3*x1*y1 + a2*b2*c3*x1*y1 + a3*b2*c3*x1*y1 + a2*b3*c3*x1*y1 + c2*c3*x1*y1 + b3*c2*c3*x1*y1 + b2*b3*c2*c3*x1*y1 + b3*x2*y1 + a3*c2*x2*y1 + b3*c2*x2*y1 + c3*x2*y1 + a2*c3*x2*y1 + a3*c3*x2*y1 + b2*c3*x2*y1 + a3*b3*c3*x2*y1 + b2*c1*c3*x2*y1 + a3*b3*c1*c3*x2*y1 + c2*c3*x2*y1 + b3*c2*c3*x2*y1 + c1*c2*c3*x2*y1 + a2*x3*y1 + b2*x3*y1 + a2*c1*x3*y1 + c2*x3*y1 + a3*c2*x3*y1 + b2*c2*x3*y1 + c1*c2*x3*y1 + b2*c1*c2*x3*y1 + a2*b2*c1*c2*x3*y1 + a3*b2*c1*c2*x3*y1 + b3*c1*c2*x3*y1 + a2*b3*c1*c2*x3*y1 + a3*b3*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a2*c3*x3*y1 + b2*c3*x3*y1 + b2*c1*c3*x3*y1 + b2*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + a2*b2*c1*c2*c3*x3*y1 + a3*b2*c1*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + a2*b3*c1*c2*c3*x3*y1 + a3*b3*c1*c2*c3*x3*y1 + b2*b3*c1*c2*c3*x3*y1 + a1*a2*b3*y2 + a3*b1*b2*c1*y2 + a2*b3*c1*y2 + b1*b3*c1*y2 + a1*b1*b3*c1*y2 + a2*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a1*a3*b1*b2*c2*y2 + a1*a2*b1*b3*c2*y2 + a1*a3*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a1*b1*b2*b3*c2*y2 + a3*b1*c1*c2*y2 + a3*b2*c1*c2*y2 + a1*a3*b2*c1*c2*y2 + b3*c1*c2*y2 + a1*b3*c1*c2*y2 + a2*b3*c1*c2*y2 + a1*a2*b3*c1*c2*y2 + a3*b3*c1*c2*y2 + a1*a3*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*b1*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + b1*c3*y2 + a1*b1*c3*y2 + a1*a2*b1*b2*c3*y2 + a1*a3*b1*b2*c3*y2 + a2*b1*b3*c3*y2 + a1*a2*b1*b3*c3*y2 + a1*a3*b2*b3*c3*y2 + c1*c3*y2 + a1*c1*c3*y2 + b1*c1*c3*y2 + a1*b1*c1*c3*y2 + a2*b1*c1*c3*y2 + a3*b1*c1*c3*y2 + a1*b2*c1*c3*y2 + a2*b2*c1*c3*y2 + a1*a2*b2*c1*c3*y2 + a3*b2*c1*c3*y2 + a1*a3*b2*c1*c3*y2 + a1*b1*b2*c1*c3*y2 + a2*b3*c1*c3*y2 + a1*a2*b3*c1*c3*y2 + b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a3*b1*b3*c1*c3*y2 + b2*b3*c1*c3*y2 + a1*b2*b3*c1*c3*y2 + a2*b2*b3*c1*c3*y2 + a3*b2*b3*c1*c3*y2 + b1*b2*b3*c1*c3*y2 + a3*b1*b2*b3*c1*c3*y2 + a1*c2*c3*y2 + b1*c2*c3*y2 + a1*b1*c2*c3*y2 + a1*b2*c2*c3*y2 + a2*b1*b3*c2*c3*y2 + a1*b2*b3*c2*c3*y2 + a1*b1*b2*b3*c2*c3*y2 + a1*c1*c2*c3*y2 + b2*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + b3*c1*c2*c3*y2 + a1*b3*c1*c2*c3*y2 + a3*b3*c1*c2*c3*y2 + b1*b3*c1*c2*c3*y2 + a1*b2*b3*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + a3*b1*b2*c2*d1*y2 + b1*b3*c2*d1*y2 + a2*b1*b3*c2*d1*y2 + a3*b1*b3*c2*d1*y2 + b1*b2*b3*c2*d1*y2 + a3*b2*c1*c2*d1*y2 + b3*c1*c2*d1*y2 + a2*b3*c1*c2*d1*y2 + a3*b3*c1*c2*d1*y2 + b2*b3*c1*c2*d1*y2 + b1*c3*d1*y2 + b1*b2*c3*d1*y2 + a2*b1*b2*c3*d1*y2 + a3*b1*b2*c3*d1*y2 + a2*b1*b3*c3*d1*y2 + c1*c3*d1*y2 + b1*c1*c3*d1*y2 + a2*b2*c1*c3*d1*y2 + a3*b2*c1*c3*d1*y2 + a2*b3*c1*c3*d1*y2 + b1*c2*c3*d1*y2 + b1*b3*c2*c3*d1*y2 + b1*b2*b3*c2*c3*d1*y2 + b3*c1*c2*c3*d1*y2 + b2*b3*c1*c2*c3*d1*y2 + a3*b1*b2*c1*d2*y2 + b1*b3*c1*d2*y2 + a1*b1*b3*c1*d2*y2 + a2*b1*b3*c1*d2*y2 + a3*b1*b3*c1*d2*y2 + a3*b1*b2*c2*d2*y2 + b1*b3*c2*d2*y2 + a1*b1*b3*c2*d2*y2 + a2*b1*b3*c2*d2*y2 + a3*b1*b3*c2*d2*y2 + b1*b2*b3*c2*d2*y2 + a3*b2*c1*c2*d2*y2 + a1*b3*c1*c2*d2*y2 + a2*b3*c1*c2*d2*y2 + a3*b3*c1*c2*d2*y2 + b2*b3*c1*c2*d2*y2 + b1*b2*b3*c1*c2*d2*y2 + b1*c3*d2*y2 + b1*b2*c3*d2*y2 + a1*b1*b2*c3*d2*y2 + a2*b1*b2*c3*d2*y2 + a3*b1*b2*c3*d2*y2 + a1*b1*b3*c3*d2*y2 + a2*b1*b3*c3*d2*y2 + c1*c3*d2*y2 + b1*c1*c3*d2*y2 + b2*c1*c3*d2*y2 + a1*b2*c1*c3*d2*y2 + a2*b2*c1*c3*d2*y2 + a3*b2*c1*c3*d2*y2 + b1*b2*c1*c3*d2*y2 + b3*c1*c3*d2*y2 + a1*b3*c1*c3*d2*y2 + a2*b3*c1*c3*d2*y2 + b1*b3*c1*c3*d2*y2 + b1*c2*c3*d2*y2 + b1*b3*c2*c3*d2*y2 + b1*b2*b3*c2*c3*d2*y2 + b3*c1*c2*c3*d2*y2 + b2*b3*c1*c2*c3*d2*y2 + a1*b2*d3*y2 + b2*c1*d3*y2 + a1*b1*b2*c1*d3*y2 + a2*b1*b2*c1*d3*y2 + a3*b1*b2*c1*d3*y2 + a1*b2*b3*c1*d3*y2 + a2*b2*b3*c1*d3*y2 + a3*b2*b3*c1*d3*y2 + b1*b2*b3*c1*d3*y2 + a1*c2*d3*y2 + b1*b2*c2*d3*y2 + a1*b1*b2*c2*d3*y2 + a2*b1*b2*c2*d3*y2 + a3*b1*b2*c2*d3*y2 + a1*b2*b3*c2*d3*y2 + b1*b2*b3*c2*d3*y2 + c1*c2*d3*y2 + b2*c1*c2*d3*y2 + a1*b2*c1*c2*d3*y2 + a2*b2*c1*c2*d3*y2 + a3*b2*c1*c2*d3*y2 + b1*b2*c1*c2*d3*y2 + a1*b3*c1*c2*d3*y2 + a2*b3*c1*c2*d3*y2 + a3*b3*c1*c2*d3*y2 + b1*b2*c3*d3*y2 + a1*b1*b2*c3*d3*y2 + a2*b1*b2*c3*d3*y2 + a3*b1*b2*c3*d3*y2 + a1*b2*b3*c3*d3*y2 + a1*b2*c1*c3*d3*y2 + a2*b2*c1*c3*d3*y2 + a3*b2*c1*c3*d3*y2 + b1*b2*c1*c3*d3*y2 + b2*b3*c1*c3*d3*y2 + b1*b2*b3*c1*c3*d3*y2 + a1*b3*c2*c3*d3*y2 + b1*b2*b3*c2*c3*d3*y2 + b3*c1*c2*c3*d3*y2 + a3*c2*x1*y2 + a3*b2*c2*x1*y2 + a2*b3*c2*x1*y2 + a3*b3*c2*x1*y2 + b2*b3*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + a2*b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + b2*b3*c1*c2*x1*y2 + a2*c3*x1*y2 + a3*c3*x1*y2 + b2*c3*x1*y2 + a2*b2*c3*x1*y2 + a3*b2*c3*x1*y2 + a2*b3*c3*x1*y2 + c1*c3*x1*y2 + b2*c1*c3*x1*y2 + a2*b2*c1*c3*x1*y2 + a3*b2*c1*c3*x1*y2 + a2*b3*c1*c3*x1*y2 + c2*c3*x1*y2 + b2*b3*c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b3*c1*c2*c3*x1*y2 + b2*b3*c1*c2*c3*x1*y2 + a3*c2*y1*y2 + b3*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + a2*b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + c3*y1*y2 + a2*c3*y1*y2 + a3*c3*y1*y2 + c1*c3*y1*y2 + b2*c1*c3*y1*y2 + a2*b2*c1*c3*y1*y2 + a3*b2*c1*c3*y1*y2 + a2*b3*c1*c3*y1*y2 + b3*c2*c3*y1*y2 + c1*c2*c3*y1*y2 + b3*c1*c2*c3*y1*y2 + b2*b3*c1*c2*c3*y1*y2 + a2*b1*y3 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*a2*b3*y3 + a2*c1*y3 + a1*a2*c1*y3 + a2*b1*c1*y3 + a2*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b3*c1*y3 + a3*b2*b3*c1*y3 + a1*c2*y3 + a1*a2*c2*y3 + a2*b1*c2*y3 + a3*b1*b2*c2*y3 + a1*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + c1*c2*y3 + a2*c1*c2*y3 + b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a3*b1*c1*c2*y3 + b2*c1*c2*y3 + a1*b2*c1*c2*y3 + a2*b2*c1*c2*y3 + a3*b2*c1*c2*y3 + a1*b1*b2*c1*c2*y3 + a2*b1*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + b3*c1*c2*y3 + a2*b3*c1*c2*y3 + a3*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a1*b1*b3*c1*c2*y3 + a2*b1*b3*c1*c2*y3 + a3*b1*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a1*b2*c3*y3 + b1*b2*c3*y3 + a1*a2*b1*b2*c3*y3 + a3*b1*b2*c3*y3 + a1*a3*b1*b2*c3*y3 + a2*b1*b3*c3*y3 + a1*a2*b1*b3*c3*y3 + a1*a3*b2*b3*c3*y3 + b2*c1*c3*y3 + a1*a2*b2*c1*c3*y3 + a3*b2*c1*c3*y3 + a1*a3*b2*c1*c3*y3 + a1*b1*b2*c1*c3*y3 + a2*b3*c1*c3*y3 + a1*a2*b3*c1*c3*y3 + a2*b1*b3*c1*c3*y3 + a1*b2*b3*c1*c3*y3 + a2*b2*b3*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + a3*b1*b2*b3*c1*c3*y3 + a1*c2*c3*y3 + a1*a2*b2*c2*c3*y3 + a1*a3*b2*c2*c3*y3 + a1*b3*c2*c3*y3 + a1*a2*b3*c2*c3*y3 + a2*b1*b3*c2*c3*y3 + b1*b2*b3*c2*c3*y3 + a1*b1*b2*b3*c2*c3*y3 + a3*b1*b2*b3*c2*c3*y3 + c1*c2*c3*y3 + b1*c1*c2*c3*y3 + a2*b2*c1*c2*c3*y3 + a3*b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + a1*b3*c1*c2*c3*y3 + a2*b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + b2*b3*c1*c2*c3*y3 + a1*b2*b3*c1*c2*c3*y3 + b1*b2*b3*c1*c2*c3*y3 + a2*b1*d1*y3 + a2*c1*d1*y3 + b1*c2*d1*y3 + b1*b2*c2*d1*y3 + a2*b1*b2*c2*d1*y3 + a3*b1*b2*c2*d1*y3 + b1*b3*c2*d1*y3 + a2*b1*b3*c2*d1*y3 + a3*b1*b3*c2*d1*y3 + b1*b2*b3*c2*d1*y3 + c1*c2*d1*y3 + b2*c1*c2*d1*y3 + a2*b2*c1*c2*d1*y3 + a3*b2*c1*c2*d1*y3 + b3*c1*c2*d1*y3 + a2*b3*c1*c2*d1*y3 + a3*b3*c1*c2*d1*y3 + b2*b3*c1*c2*d1*y3 + b1*b2*c3*d1*y3 + a2*b1*b2*c3*d1*y3 + a3*b1*b2*c3*d1*y3 + a2*b1*b3*c3*d1*y3 + b2*c1*c3*d1*y3 + a2*b2*c1*c3*d1*y3 + a3*b2*c1*c3*d1*y3 + a2*b3*c1*c3*d1*y3 + b1*b3*c2*c3*d1*y3 + b1*b2*b3*c2*c3*d1*y3 + b3*c1*c2*c3*d1*y3 + b2*b3*c1*c2*c3*d1*y3 + a1*b1*d2*y3 + a2*b1*d2*y3 + c1*d2*y3 + a1*c1*d2*y3 + a2*c1*d2*y3 + b1*c1*d2*y3 + b1*b2*c1*d2*y3 + a1*b1*b2*c1*d2*y3 + a2*b1*b2*c1*d2*y3 + a3*b1*b2*c1*d2*y3 + b1*b3*c1*d2*y3 + a1*b1*b3*c1*d2*y3 + a2*b1*b3*c1*d2*y3 + a3*b1*b3*c1*d2*y3 + b1*c2*d2*y3 + b1*b2*c2*d2*y3 + a1*b1*b2*c2*d2*y3 + a2*b1*b2*c2*d2*y3 + a3*b1*b2*c2*d2*y3 + b1*b3*c2*d2*y3 + a1*b1*b3*c2*d2*y3 + a2*b1*b3*c2*d2*y3 + a3*b1*b3*c2*d2*y3 + b1*b2*b3*c2*d2*y3 + c1*c2*d2*y3 + a1*b2*c1*c2*d2*y3 + a2*b2*c1*c2*d2*y3 + a3*b2*c1*c2*d2*y3 + b1*b2*c1*c2*d2*y3 + a1*b3*c1*c2*d2*y3 + a2*b3*c1*c2*d2*y3 + a3*b3*c1*c2*d2*y3 + b2*b3*c1*c2*d2*y3 + b1*b2*b3*c1*c2*d2*y3 + b1*b2*c3*d2*y3 + a1*b1*b2*c3*d2*y3 + a2*b1*b2*c3*d2*y3 + a3*b1*b2*c3*d2*y3 + a1*b1*b3*c3*d2*y3 + a2*b1*b3*c3*d2*y3 + a1*b2*c1*c3*d2*y3 + a2*b2*c1*c3*d2*y3 + a3*b2*c1*c3*d2*y3 + b1*b2*c1*c3*d2*y3 + b3*c1*c3*d2*y3 + a1*b3*c1*c3*d2*y3 + a2*b3*c1*c3*d2*y3 + b1*b3*c1*c3*d2*y3 + b1*b3*c2*c3*d2*y3 + b1*b2*b3*c2*c3*d2*y3 + b3*c1*c2*c3*d2*y3 + b2*b3*c1*c2*c3*d2*y3 + a1*b2*d3*y3 + b2*c1*d3*y3 + a1*b1*b2*c1*d3*y3 + a2*b1*b2*c1*d3*y3 + a3*b1*b2*c1*d3*y3 + a1*b2*b3*c1*d3*y3 + a2*b2*b3*c1*d3*y3 + a3*b2*b3*c1*d3*y3 + b1*b2*b3*c1*d3*y3 + a1*c2*d3*y3 + b1*b2*c2*d3*y3 + a1*b1*b2*c2*d3*y3 + a2*b1*b2*c2*d3*y3 + a3*b1*b2*c2*d3*y3 + a1*b2*b3*c2*d3*y3 + b1*b2*b3*c2*d3*y3 + c1*c2*d3*y3 + b2*c1*c2*d3*y3 + a1*b2*c1*c2*d3*y3 + a2*b2*c1*c2*d3*y3 + a3*b2*c1*c2*d3*y3 + b1*b2*c1*c2*d3*y3 + a1*b3*c1*c2*d3*y3 + a2*b3*c1*c2*d3*y3 + a3*b3*c1*c2*d3*y3 + b1*b2*c3*d3*y3 + a1*b1*b2*c3*d3*y3 + a2*b1*b2*c3*d3*y3 + a3*b1*b2*c3*d3*y3 + a1*b2*b3*c3*d3*y3 + a1*b2*c1*c3*d3*y3 + a2*b2*c1*c3*d3*y3 + a3*b2*c1*c3*d3*y3 + b1*b2*c1*c3*d3*y3 + b2*b3*c1*c3*d3*y3 + b1*b2*b3*c1*c3*d3*y3 + a1*b3*c2*c3*d3*y3 + b1*b2*b3*c2*c3*d3*y3 + b3*c1*c2*c3*d3*y3 + a2*x1*y3 + a2*c1*x1*y3 + c2*x1*y3 + a3*c2*x1*y3 + b2*c2*x1*y3 + c1*c2*x1*y3 + b2*c1*c2*x1*y3 + a2*c3*x1*y3 + b2*c3*x1*y3 + a2*b2*c3*x1*y3 + a3*b2*c3*x1*y3 + a2*b3*c3*x1*y3 + b2*c1*c3*x1*y3 + a2*b2*c1*c3*x1*y3 + a3*b2*c1*c3*x1*y3 + a2*b3*c1*c3*x1*y3 + b2*c2*c3*x1*y3 + a2*b2*c2*c3*x1*y3 + a3*b2*c2*c3*x1*y3 + b3*c2*c3*x1*y3 + a2*b3*c2*c3*x1*y3 + a2*b2*c1*c2*c3*x1*y3 + a3*b2*c1*c2*c3*x1*y3 + a2*b3*c1*c2*c3*x1*y3 + a3*b3*c1*c2*c3*x1*y3 + a2*c1*y1*y3 + a3*c2*y1*y3 + c1*c2*y1*y3 + b2*c1*c2*y1*y3 + a2*c3*y1*y3 + b2*c1*c3*y1*y3 + a2*b2*c1*c3*y1*y3 + a3*b2*c1*c3*y1*y3 + a2*b3*c1*c3*y1*y3 + b2*c2*c3*y1*y3 + b3*c2*c3*y1*y3 + a3*b3*c2*c3*y1*y3 + a2*b2*c1*c2*c3*y1*y3 + a3*b2*c1*c2*c3*y1*y3 + a2*b3*c1*c2*c3*y1*y3 + a3*b3*c1*c2*c3*y1*y3;
end;
#####################################################################
#####################################################################
#Space Group No. 128 ( P4/mnc)
#####################################################################
Aiin128:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin128:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin128:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain128:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin128:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a1*b2*c1 + a2*d1 + b1*b2*d1 + a1*d2 + b1*b2*d2 + a2*x1 + b2*x1 + b2*c1*x1 + d2*x1 + a2*y1 + b2*c1*y1 + d2*y1;
end;
#####################################################################
Bcxyzin128:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b1 + a1*b2 + a2*b1*b2 + a2*c1 + a2*b2*c1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1 + b2*z1;
end;
#####################################################################
C1GAPin128:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a1*a3*b1*b2 + a1*a2*b1*b3 + a1*b2*b3 + a1*a3*b2*b3 + a1*a2*b3*c1 + a1*b3*c2 + a1*a2*b3*c2 + a3*b1*b3*c2 + a1*b2*b3*c2 + a1*a2*b2*b3*c2 + a1*a3*b2*b3*c2 + a3*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a2*b3*c1*c2 + a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + b2*b3*c1*c2 + a1*b2*b3*c1*c2 + a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a1*b1*b2*c3 + a2*b1*b2*c3 + a3*b1*b2*c3 + a1*b2*b3*c3 + a3*b1*b2*d1 + a2*b1*b3*d1 + a1*a2*b1*b3*d1 + a1*a3*b2*b3*d1 + a3*b2*c1*d1 + a2*b3*c1*d1 + a1*a2*b3*c1*d1 + a1*b2*b3*c1*d1 + a1*a3*b3*c2*d1 + b1*b3*c2*d1 + a2*b1*b3*c2*d1 + a3*b1*b2*c1*c2*d1 + b3*c1*c2*d1 + b1*b3*c1*c2*d1 + a2*b1*b3*c1*c2*d1 + a3*b1*b3*c1*c2*d1 + a2*b2*b3*c1*c2*d1 + a1*a3*d2 + a1*a3*b2*d2 + a3*b1*b3*d2 + a1*a3*b1*b3*d2 + a1*b2*b3*d2 + a1*a3*b2*b3*d2 + a3*b2*c1*d2 + a3*b1*b2*c1*d2 + a1*a3*b1*b2*c1*d2 + a2*b3*c1*d2 + a1*a3*b3*c1*d2 + b1*b3*c1*d2 + a2*b2*b3*c1*d2 + a1*a3*b2*b3*c1*d2 + a1*a3*c2*d2 + a3*b1*c2*d2 + a1*a3*b1*c2*d2 + a3*b1*b2*c2*d2 + a1*b3*c2*d2 + a1*a3*b3*c2*d2 + b1*b3*c2*d2 + a2*b1*b3*c2*d2 + a1*b2*b3*c2*d2 + a1*a3*b1*c1*c2*d2 + a1*a3*b2*c1*c2*d2 + a1*b3*c1*c2*d2 + a2*b3*c1*c2*d2 + a1*a3*b3*c1*c2*d2 + b1*b3*c1*c2*d2 + a1*b1*b3*c1*c2*d2 + a2*b1*b3*c1*c2*d2 + a3*b1*b3*c1*c2*d2 + b2*b3*c1*c2*d2 + a1*b2*b3*c1*c2*d2 + a2*b2*b3*c1*c2*d2 + c3*d1*d2 + a1*b2*d3 + a1*a3*b2*d3 + a1*b1*b2*d3 + a2*b1*b2*d3 + a1*a2*b1*b2*d3 + a1*b2*b3*d3 + a1*a2*c1*d3 + a1*a2*b1*c1*d3 + a1*b2*c1*d3 + a1*a2*b2*c1*d3 + a3*b1*b2*c1*d3 + a1*a3*b1*b2*c1*d3 + a2*b1*b3*c1*d3 + a2*b2*b3*c1*d3 + a1*a3*b2*b3*c1*d3 + a1*c2*d3 + a1*a3*c2*d3 + a1*b1*c2*d3 + a2*b1*c2*d3 + a3*b1*c2*d3 + a1*a3*b1*c2*d3 + a1*b2*c2*d3 + a1*b1*b2*c2*d3 + a2*b1*b2*c2*d3 + a3*b1*b2*c2*d3 + a1*b3*c2*d3 + a1*b2*b3*c2*d3 + a1*a3*b1*c1*c2*d3 + a1*b2*c1*c2*d3 + a1*a3*b2*c1*c2*d3 + b1*b2*c1*c2*d3 + a2*b1*b2*c1*c2*d3 + a1*b3*c1*c2*d3 + a1*a3*b3*c1*c2*d3 + b1*b3*c1*c2*d3 + a1*b1*b3*c1*c2*d3 + a2*b1*b3*c1*c2*d3 + a3*b1*b3*c1*c2*d3 + a1*b2*b3*c1*c2*d3 + a2*b2*b3*c1*c2*d3 + a3*b2*b3*c1*c2*d3 + a1*a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + b2*b3*x1 + a2*b2*b3*x1 + a3*b2*b3*x1 + a3*b1*b2*c1*x1 + a2*b3*c1*x1 + a2*b1*b3*c1*x1 + b2*b3*c1*x1 + a2*b2*b3*c1*x1 + a3*c2*x1 + a1*a3*c2*x1 + a1*b3*c2*x1 + b1*b3*c2*x1 + a1*b1*b3*c2*x1 + a3*b1*b3*c2*x1 + b2*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*b2*b3*c2*x1 + b3*c1*c2*x1 + a1*b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + b1*b2*c3*x1 + b2*b3*c3*x1 + a3*b1*b2*d1*x1 + a2*b1*b3*d1*x1 + b2*b3*d1*x1 + a3*b2*b3*d1*x1 + a2*b1*b3*c1*d1*x1 + a3*b2*b3*c1*d1*x1 + a3*c2*d1*x1 + a3*b2*c2*d1*x1 + b3*c2*d1*x1 + a1*b3*c2*d1*x1 + a2*b3*c2*d1*x1 + b1*b3*c2*d1*x1 + a2*b1*b3*c2*d1*x1 + a3*c1*c2*d1*x1 + a3*b2*c1*c2*d1*x1 + b3*c1*c2*d1*x1 + a2*b3*c1*c2*d1*x1 + a3*b3*c1*c2*d1*x1 + b1*b3*c1*c2*d1*x1 + b2*b3*c1*c2*d1*x1 + a3*b2*d2*x1 + a1*a3*b2*d2*x1 + a3*b1*b2*d2*x1 + a2*b3*d2*x1 + a3*b3*d2*x1 + a2*b1*b3*d2*x1 + b2*b3*d2*x1 + a1*b2*b3*d2*x1 + a3*b2*b3*d2*x1 + a3*b2*c1*d2*x1 + a3*b1*b2*c1*d2*x1 + b3*c1*d2*x1 + b1*b3*c1*d2*x1 + a2*b1*b3*c1*d2*x1 + a1*b2*b3*c1*d2*x1 + a3*b2*b3*c1*d2*x1 + a1*a3*c2*d2*x1 + b3*c2*d2*x1 + a2*b3*c2*d2*x1 + b1*b3*c2*d2*x1 + a2*b1*b3*c2*d2*x1 + a1*b2*b3*c2*d2*x1 + a3*b1*c1*c2*d2*x1 + a3*b2*c1*c2*d2*x1 + b3*c1*c2*d2*x1 + a1*b3*c1*c2*d2*x1 + a2*b3*c1*c2*d2*x1 + a3*b3*c1*c2*d2*x1 + b2*b3*c1*c2*d2*x1 + a2*d3*x1 + a2*b1*d3*x1 + a1*a2*b1*d3*x1 + a2*b2*d3*x1 + a3*b2*d3*x1 + a1*a3*b2*d3*x1 + b1*b2*d3*x1 + a1*b1*b2*d3*x1 + a3*b1*b2*d3*x1 + a2*b3*d3*x1 + a2*b1*b3*d3*x1 + b2*b3*d3*x1 + a1*b2*b3*d3*x1 + a3*b2*b3*d3*x1 + a1*a2*c1*d3*x1 + a2*b2*c1*d3*x1 + a3*b2*c1*d3*x1 + a1*b1*b2*c1*d3*x1 + a2*b1*b2*c1*d3*x1 + a3*b1*b2*c1*d3*x1 + a2*b1*b3*c1*d3*x1 + b2*b3*c1*d3*x1 + a1*b2*b3*c1*d3*x1 + a3*b2*b3*c1*d3*x1 + a1*c2*d3*x1 + a2*c2*d3*x1 + a1*a3*c2*d3*x1 + a2*b1*c2*d3*x1 + a2*b1*b2*c2*d3*x1 + a2*b3*c2*d3*x1 + a2*b1*b3*c2*d3*x1 + b2*b3*c2*d3*x1 + a1*b2*b3*c2*d3*x1 + a2*b1*c1*c2*d3*x1 + a3*b1*c1*c2*d3*x1 + a2*b2*c1*c2*d3*x1 + a3*b2*c1*c2*d3*x1 + b1*b2*c1*c2*d3*x1 + b3*c1*c2*d3*x1 + a1*b3*c1*c2*d3*x1 + a2*b3*c1*c2*d3*x1 + a3*b3*c1*c2*d3*x1 + b2*b3*c1*c2*d3*x1 + a1*a3*x2 + a3*b1*x2 + a3*b1*b2*x2 + a1*b3*x2 + a1*a2*b3*x2 + a1*a3*b3*x2 + a3*b1*c1*x2 + a1*a3*b2*c1*x2 + a3*b1*b2*c1*x2 + b3*c1*x2 + a1*b3*c1*x2 + a2*b3*c1*x2 + a3*b3*c1*x2 + a1*b1*b3*c1*x2 + b2*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a1*a3*c2*x2 + a1*b3*c2*x2 + a1*b1*b3*c2*x2 + a3*b1*b3*c2*x2 + a1*b2*b3*c2*x2 + a3*c1*c2*x2 + a1*a3*c1*c2*x2 + a3*b2*c1*c2*x2 + a1*b3*c1*c2*x2 + a2*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a1*b2*b3*c1*c2*x2 + b1*b2*c3*x2 + a3*d1*x2 + a3*b1*d1*x2 + a3*b2*d1*x2 + a1*a3*b2*d1*x2 + a3*b1*b2*d1*x2 + a1*b3*d1*x2 + a2*b3*d1*x2 + a3*b3*d1*x2 + b1*b3*d1*x2 + a2*b1*b3*d1*x2 + b2*b3*d1*x2 + a1*b2*b3*d1*x2 + a3*b2*b3*d1*x2 + a3*b1*c1*d1*x2 + b3*c1*d1*x2 + a3*b3*c1*d1*x2 + a3*b2*b3*c1*d1*x2 + a3*c2*d1*x2 + a1*a3*c2*d1*x2 + a3*b2*c2*d1*x2 + b3*c2*d1*x2 + a2*b3*c2*d1*x2 + a2*b1*b3*c2*d1*x2 + b2*b3*c2*d1*x2 + a1*b2*b3*c2*d1*x2 + a3*b2*c1*c2*d1*x2 + b3*c1*c2*d1*x2 + a2*b3*c1*c2*d1*x2 + a3*b3*c1*c2*d1*x2 + b1*b3*c1*c2*d1*x2 + b2*b3*c1*c2*d1*x2 + a3*b1*d2*x2 + a1*a3*b2*d2*x2 + a3*b1*b2*d2*x2 + a1*b3*d2*x2 + b1*b3*d2*x2 + a1*b1*b3*d2*x2 + a2*b1*b3*d2*x2 + a1*b2*b3*d2*x2 + a3*b1*c1*d2*x2 + b3*c1*d2*x2 + a3*b3*c1*d2*x2 + a1*b1*b3*c1*d2*x2 + a3*b2*b3*c1*d2*x2 + a1*a3*c2*d2*x2 + a2*b1*b3*c2*d2*x2 + a1*b2*b3*c2*d2*x2 + a3*b2*c1*c2*d2*x2 + b3*c1*c2*d2*x2 + a2*b3*c1*c2*d2*x2 + a3*b3*c1*c2*d2*x2 + b1*b3*c1*c2*d2*x2 + b2*b3*c1*c2*d2*x2 + a1*a2*b1*d3*x2 + a3*b1*d3*x2 + a1*b2*d3*x2 + a1*a3*b2*d3*x2 + a3*b1*b2*d3*x2 + a1*b3*d3*x2 + b1*b3*d3*x2 + a1*b1*b3*d3*x2 + a2*b1*b3*d3*x2 + a1*b2*b3*d3*x2 + a1*a2*c1*d3*x2 + a2*b1*c1*d3*x2 + a3*b1*c1*d3*x2 + a1*b2*c1*d3*x2 + a1*b1*b2*c1*d3*x2 + a2*b1*b2*c1*d3*x2 + b3*c1*d3*x2 + b1*b3*c1*d3*x2 + a1*b1*b3*c1*d3*x2 + b2*b3*c1*d3*x2 + a3*b2*b3*c1*d3*x2 + a1*c2*d3*x2 + a1*a3*c2*d3*x2 + a2*b1*c2*d3*x2 + a2*b1*b2*c2*d3*x2 + b1*b3*c2*d3*x2 + a2*b1*b3*c2*d3*x2 + a1*b2*b3*c2*d3*x2 + b1*c1*c2*d3*x2 + a2*b1*c1*c2*d3*x2 + a2*b2*c1*c2*d3*x2 + a3*b2*c1*c2*d3*x2 + a2*b3*c1*c2*d3*x2 + a3*b3*c1*c2*d3*x2 + b1*b3*c1*c2*d3*x2 + b2*b3*c1*c2*d3*x2 + b1*b3*c1*x1*x2 + b3*c1*c2*x1*x2 + b3*c1*d1*x1*x2 + b1*b3*c1*d1*x1*x2 + b3*c1*c2*d1*x1*x2 + b3*d2*x1*x2 + b3*c1*d2*x1*x2 + b3*c1*c2*d2*x1*x2 + b2*d3*x1*x2 + b3*d3*x1*x2 + a2*c1*d3*x1*x2 + b3*c1*d3*x1*x2 + b1*c1*c2*d3*x1*x2 + b2*c1*c2*d3*x1*x2 + b3*c1*c2*d3*x1*x2 + a1*a2*b1*x3 + a1*a2*b2*x3 + a3*b1*b2*x3 + a1*a2*b3*x3 + a2*c1*x3 + a1*a2*c1*x3 + a1*b2*c1*x3 + a1*a3*b2*c1*x3 + b1*b2*c1*x3 + a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a1*b2*b3*c1*x3 + a1*c2*x3 + a1*a3*c2*x3 + b1*c2*x3 + a1*b1*c2*x3 + a3*b1*c2*x3 + a1*b2*c2*x3 + b1*b2*c2*x3 + a1*b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a3*b1*b3*c2*x3 + a1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a3*c1*c2*x3 + a1*a3*c1*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a2*b2*c1*c2*x3 + a3*b2*c1*c2*x3 + b3*c1*c2*x3 + a1*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + b1*b2*c3*x3 + a2*d1*x3 + a2*b1*d1*x3 + b2*d1*x3 + a1*a3*b2*d1*x3 + a2*b1*b2*d1*x3 + a3*b1*b2*d1*x3 + a2*b1*b3*d1*x3 + a1*b2*b3*d1*x3 + a3*b2*b3*d1*x3 + b2*c1*d1*x3 + a3*b2*c1*d1*x3 + b1*b2*c1*d1*x3 + a2*b3*c1*d1*x3 + a2*b1*b3*c1*d1*x3 + b2*b3*c1*d1*x3 + a3*b2*b3*c1*d1*x3 + a1*c2*d1*x3 + a3*c2*d1*x3 + a1*a3*c2*d1*x3 + a1*b1*c2*d1*x3 + a3*b1*c2*d1*x3 + b2*c2*d1*x3 + a3*b1*b2*c2*d1*x3 + a3*b3*c2*d1*x3 + a2*b1*b3*c2*d1*x3 + a3*b2*b3*c2*d1*x3 + a1*c1*c2*d1*x3 + a3*b2*c1*c2*d1*x3 + b3*c1*c2*d1*x3 + a2*b3*c1*c2*d1*x3 + a3*b3*c1*c2*d1*x3 + b1*b3*c1*c2*d1*x3 + b2*b3*c1*c2*d1*x3 + a2*b1*d2*x3 + a1*b2*d2*x3 + a1*a3*b2*d2*x3 + a1*b1*b2*d2*x3 + a2*b1*b2*d2*x3 + a3*b1*b2*d2*x3 + a1*b1*b3*d2*x3 + a2*b1*b3*d2*x3 + a1*b2*b3*d2*x3 + a1*c1*d2*x3 + b1*c1*d2*x3 + a1*b1*c1*d2*x3 + a3*b2*c1*d2*x3 + b1*b2*c1*d2*x3 + a1*b1*b2*c1*d2*x3 + a2*b3*c1*d2*x3 + a1*b1*b3*c1*d2*x3 + a2*b1*b3*c1*d2*x3 + a3*b2*b3*c1*d2*x3 + a1*a3*c2*d2*x3 + a1*b1*c2*d2*x3 + a3*b1*c2*d2*x3 + a3*b1*b2*c2*d2*x3 + a2*b1*b3*c2*d2*x3 + a1*b1*c1*c2*d2*x3 + b2*c1*c2*d2*x3 + a1*b2*c1*c2*d2*x3 + a3*b2*c1*c2*d2*x3 + a1*b3*c1*c2*d2*x3 + a2*b3*c1*c2*d2*x3 + a3*b3*c1*c2*d2*x3 + b1*b3*c1*c2*d2*x3 + b2*b3*c1*c2*d2*x3 + a1*a2*b1*d3*x3 + a1*b2*d3*x3 + a1*a3*b2*d3*x3 + a3*b1*b2*d3*x3 + a2*b1*b3*d3*x3 + a1*a2*c1*d3*x3 + a2*b1*c1*d3*x3 + a1*b2*c1*d3*x3 + a3*b2*c1*d3*x3 + a1*b1*b2*c1*d3*x3 + a2*b1*b2*c1*d3*x3 + b2*b3*c1*d3*x3 + a1*b2*b3*c1*d3*x3 + a2*b2*b3*c1*d3*x3 + a3*b2*b3*c1*d3*x3 + a1*c2*d3*x3 + a1*a3*c2*d3*x3 + b1*c2*d3*x3 + a2*b1*c2*d3*x3 + a3*b1*c2*d3*x3 + a1*b2*c2*d3*x3 + a1*b1*b2*c2*d3*x3 + a2*b1*b2*c2*d3*x3 + a3*b1*b2*c2*d3*x3 + a1*b1*b3*c2*d3*x3 + a1*b2*b3*c2*d3*x3 + a1*b1*c1*c2*d3*x3 + b2*c1*c2*d3*x3 + a2*b2*c1*c2*d3*x3 + a3*b2*c1*c2*d3*x3 + b1*b2*c1*c2*d3*x3 + a1*b3*c1*c2*d3*x3 + a2*b3*c1*c2*d3*x3 + a3*b3*c1*c2*d3*x3 + b1*b3*c1*c2*d3*x3 + b2*b3*c1*c2*d3*x3 + a2*c1*x1*x3 + b1*b2*c1*x1*x3 + b2*b3*c1*x1*x3 + a2*c2*x1*x3 + b3*c2*x1*x3 + b1*b3*c2*x1*x3 + b2*b3*c2*x1*x3 + b3*c1*c2*x1*x3 + b1*b2*c1*d1*x1*x3 + b2*b3*c1*d1*x1*x3 + b1*b3*c2*d1*x1*x3 + b2*b3*c2*d1*x1*x3 + b2*c1*c2*d1*x1*x3 + b3*c1*c2*d1*x1*x3 + b2*d2*x1*x3 + b3*d2*x1*x3 + a1*c1*d2*x1*x3 + b1*c1*d2*x1*x3 + b1*b3*c1*d2*x1*x3 + b2*b3*c1*d2*x1*x3 + a1*c2*d2*x1*x3 + b1*b3*c2*d2*x1*x3 + b2*b3*c2*d2*x1*x3 + b1*c1*c2*d2*x1*x3 + b2*c1*c2*d2*x1*x3 + b3*c1*c2*d2*x1*x3 + b2*d3*x1*x3 + a2*c1*d3*x1*x3 + a2*c2*d3*x1*x3 + b1*c2*d3*x1*x3 + b2*c2*d3*x1*x3 + b1*c1*c2*d3*x1*x3 + b3*c1*c2*d3*x1*x3 + b1*c1*x2*x3 + b2*c1*x2*x3 + b1*b3*c1*x2*x3 + b2*b3*c1*x2*x3 + b1*b3*c2*x2*x3 + c1*c2*x2*x3 + a1*c1*c2*x2*x3 + b2*c1*c2*x2*x3 + b1*c1*d1*x2*x3 + b2*c1*d1*x2*x3 + b1*b3*c1*d1*x2*x3 + b2*b3*c1*d1*x2*x3 + a1*c2*d1*x2*x3 + b1*b3*c2*d1*x2*x3 + b2*b3*c2*d1*x2*x3 + b2*c1*c2*d1*x2*x3 + b1*c1*d2*x2*x3 + b2*c1*d2*x2*x3 + b1*b3*c1*d2*x2*x3 + b2*b3*c1*d2*x2*x3 + a1*c2*d2*x2*x3 + b1*b3*c2*d2*x2*x3 + b2*c1*c2*d2*x2*x3 + b3*c1*d3*x2*x3 + b1*c2*d3*x2*x3 + a3*b2*y1 + a1*a3*b2*y1 + a2*b3*y1 + a2*b1*b3*y1 + a1*b2*b3*y1 + a2*b2*b3*y1 + a3*b2*c1*y1 + a3*b1*b2*c1*y1 + a2*b1*b3*c1*y1 + b2*b3*c1*y1 + a2*b2*b3*c1*y1 + a1*a3*c2*y1 + a3*b1*c2*y1 + a3*b2*c2*y1 + a3*b3*c2*y1 + a1*b1*b3*c2*y1 + a3*b1*b3*c2*y1 + a2*b2*b3*c2*y1 + a3*b2*b3*c2*y1 + a3*c1*c2*y1 + a1*b3*c1*c2*y1 + a2*b3*c1*c2*y1 + a3*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + b1*b2*c3*y1 + b2*b3*c3*y1 + a2*b3*c1*d1*y1 + a2*b1*b3*c1*d1*y1 + b2*b3*c1*d1*y1 + a3*b2*b3*c1*d1*y1 + a3*b1*c2*d1*y1 + a1*b3*c2*d1*y1 + a2*b3*c2*d1*y1 + a3*b3*c2*d1*y1 + b1*b3*c2*d1*y1 + a2*b1*b3*c2*d1*y1 + a3*c1*c2*d1*y1 + a3*b2*c1*c2*d1*y1 + a2*b3*c1*c2*d1*y1 + a3*b3*c1*c2*d1*y1 + b1*b3*c1*c2*d1*y1 + b2*b3*c1*c2*d1*y1 + a3*b2*d2*y1 + a1*a3*b2*d2*y1 + a3*b2*c1*d2*y1 + a3*b1*b2*c1*d2*y1 + a2*b3*c1*d2*y1 + b1*b3*c1*d2*y1 + a2*b1*b3*c1*d2*y1 + b2*b3*c1*d2*y1 + a1*b2*b3*c1*d2*y1 + a3*b2*b3*c1*d2*y1 + a1*a3*c2*d2*y1 + a3*b1*c2*d2*y1 + a3*b2*c2*d2*y1 + a1*b3*c2*d2*y1 + a2*b3*c2*d2*y1 + a3*b3*c2*d2*y1 + b1*b3*c2*d2*y1 + a2*b1*b3*c2*d2*y1 + a1*b2*b3*c2*d2*y1 + a3*b1*c1*c2*d2*y1 + a3*b2*c1*c2*d2*y1 + a1*b3*c1*c2*d2*y1 + a2*b3*c1*c2*d2*y1 + a3*b3*c1*c2*d2*y1 + b2*b3*c1*c2*d2*y1 + a2*d3*y1 + a1*a2*b1*d3*y1 + a3*b2*d3*y1 + a1*a3*b2*d3*y1 + a1*a2*c1*d3*y1 + a2*b1*c1*d3*y1 + b2*c1*d3*y1 + a1*b2*c1*d3*y1 + a2*b2*c1*d3*y1 + a3*b2*c1*d3*y1 + a1*b1*b2*c1*d3*y1 + a2*b1*b2*c1*d3*y1 + a3*b1*b2*c1*d3*y1 + a2*b3*c1*d3*y1 + a2*b1*b3*c1*d3*y1 + a1*b2*b3*c1*d3*y1 + a3*b2*b3*c1*d3*y1 + a1*c2*d3*y1 + a2*c2*d3*y1 + a1*a3*c2*d3*y1 + b1*c2*d3*y1 + a2*b1*c2*d3*y1 + a3*b1*c2*d3*y1 + b2*c2*d3*y1 + a3*b2*c2*d3*y1 + a2*b1*b2*c2*d3*y1 + a1*b3*c2*d3*y1 + a2*b3*c2*d3*y1 + a3*b3*c2*d3*y1 + a2*b1*b3*c2*d3*y1 + b2*b3*c2*d3*y1 + a1*b2*b3*c2*d3*y1 + a2*b1*c1*c2*d3*y1 + a3*b1*c1*c2*d3*y1 + b2*c1*c2*d3*y1 + a2*b2*c1*c2*d3*y1 + a3*b2*c1*c2*d3*y1 + a1*b3*c1*c2*d3*y1 + a2*b3*c1*c2*d3*y1 + a3*b3*c1*c2*d3*y1 + b2*b3*c1*c2*d3*y1 + b3*c2*x1*y1 + b3*c2*d1*x1*y1 + b3*c2*d2*x1*y1 + a2*d3*x1*y1 + b2*c1*d3*x1*y1 + b1*c2*d3*x1*y1 + b2*c2*d3*x1*y1 + b3*c2*d3*x1*y1 + b1*b3*c1*x2*y1 + b3*c2*x2*y1 + b3*c1*c2*x2*y1 + b1*b3*c1*d1*x2*y1 + b3*c2*d1*x2*y1 + b3*c1*c2*d1*x2*y1 + b3*c2*d2*x2*y1 + b3*c1*c2*d2*x2*y1 + a2*d3*x2*y1 + a2*c1*d3*x2*y1 + b1*c2*d3*x2*y1 + b2*c2*d3*x2*y1 + b3*c2*d3*x2*y1 + b1*c1*c2*d3*x2*y1 + b2*c1*c2*d3*x2*y1 + b3*c1*c2*d3*x2*y1 + a2*x3*y1 + a2*c1*x3*y1 + b2*c1*x3*y1 + b1*b2*c1*x3*y1 + b2*b3*c1*x3*y1 + a2*c2*x3*y1 + b1*c2*x3*y1 + b2*c2*x3*y1 + b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + b3*c1*c2*x3*y1 + b2*c1*d1*x3*y1 + b1*b2*c1*d1*x3*y1 + b2*b3*c1*d1*x3*y1 + b1*c2*d1*x3*y1 + b2*c2*d1*x3*y1 + b1*b3*c2*d1*x3*y1 + b2*b3*c2*d1*x3*y1 + b2*c1*c2*d1*x3*y1 + b3*c1*c2*d1*x3*y1 + a1*d2*x3*y1 + a1*c1*d2*x3*y1 + b1*c1*d2*x3*y1 + b2*c1*d2*x3*y1 + b1*b3*c1*d2*x3*y1 + b2*b3*c1*d2*x3*y1 + a1*c2*d2*x3*y1 + b1*c2*d2*x3*y1 + b2*c2*d2*x3*y1 + b1*b3*c2*d2*x3*y1 + b2*b3*c2*d2*x3*y1 + b1*c1*c2*d2*x3*y1 + b2*c1*c2*d2*x3*y1 + b3*c1*c2*d2*x3*y1 + a2*d3*x3*y1 + a2*c1*d3*x3*y1 + a2*c2*d3*x3*y1 + b1*c1*c2*d3*x3*y1 + b3*c1*c2*d3*x3*y1 + a1*a3*y2 + a1*a2*b3*y2 + a1*a3*b3*y2 + a2*b1*b3*y2 + a1*b2*b3*y2 + a3*b1*c1*y2 + a1*a3*b2*c1*y2 + a3*b1*b2*c1*y2 + a3*b3*c1*y2 + a1*b1*b3*c1*y2 + a1*b2*b3*c1*y2 + a2*b2*b3*c1*y2 + a3*b2*b3*c1*y2 + a1*a3*c2*y2 + a3*b1*c2*y2 + a1*b1*b3*c2*y2 + a3*b1*b3*c2*y2 + a1*b2*b3*c2*y2 + a3*c1*c2*y2 + a1*a3*c1*c2*y2 + a3*b2*c1*c2*y2 + a2*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a1*b2*b3*c1*c2*y2 + b1*b2*c3*y2 + a1*a3*b2*d1*y2 + a3*b1*c1*d1*y2 + b3*c1*d1*y2 + a2*b3*c1*d1*y2 + a3*b3*c1*d1*y2 + b2*b3*c1*d1*y2 + a3*b2*b3*c1*d1*y2 + a1*a3*c2*d1*y2 + a3*b1*c2*d1*y2 + a1*b3*c2*d1*y2 + a2*b3*c2*d1*y2 + a3*b3*c2*d1*y2 + b1*b3*c2*d1*y2 + a2*b1*b3*c2*d1*y2 + a1*b2*b3*c2*d1*y2 + a3*b2*c1*c2*d1*y2 + a2*b3*c1*c2*d1*y2 + a3*b3*c1*c2*d1*y2 + b1*b3*c1*c2*d1*y2 + b2*b3*c1*c2*d1*y2 + a1*a3*b2*d2*y2 + a1*b1*b3*d2*y2 + a3*b1*c1*d2*y2 + b3*c1*d2*y2 + a1*b3*c1*d2*y2 + a2*b3*c1*d2*y2 + a3*b3*c1*d2*y2 + a1*b1*b3*c1*d2*y2 + b2*b3*c1*d2*y2 + a3*b2*b3*c1*d2*y2 + a1*a3*c2*d2*y2 + a3*b1*c2*d2*y2 + a1*b3*c2*d2*y2 + b1*b3*c2*d2*y2 + a2*b1*b3*c2*d2*y2 + a1*b2*b3*c2*d2*y2 + a3*b2*c1*c2*d2*y2 + a2*b3*c1*c2*d2*y2 + a3*b3*c1*c2*d2*y2 + b1*b3*c1*c2*d2*y2 + b2*b3*c1*c2*d2*y2 + a1*a2*b1*d3*y2 + a1*a3*b2*d3*y2 + a1*b1*b2*d3*y2 + a1*b1*b3*d3*y2 + a1*a2*c1*d3*y2 + b1*c1*d3*y2 + a1*b1*c1*d3*y2 + a3*b1*c1*d3*y2 + a1*b2*c1*d3*y2 + a1*b1*b2*c1*d3*y2 + a2*b1*b2*c1*d3*y2 + a1*b3*c1*d3*y2 + a2*b3*c1*d3*y2 + b1*b3*c1*d3*y2 + a1*b1*b3*c1*d3*y2 + a3*b2*b3*c1*d3*y2 + a1*c2*d3*y2 + a1*a3*c2*d3*y2 + b1*c2*d3*y2 + a2*b1*c2*d3*y2 + a3*b1*c2*d3*y2 + a2*b1*b2*c2*d3*y2 + a1*b3*c2*d3*y2 + a2*b1*b3*c2*d3*y2 + a1*b2*b3*c2*d3*y2 + b1*c1*c2*d3*y2 + a2*b1*c1*c2*d3*y2 + b2*c1*c2*d3*y2 + a2*b2*c1*c2*d3*y2 + a3*b2*c1*c2*d3*y2 + b1*b2*c1*c2*d3*y2 + b3*c1*c2*d3*y2 + a2*b3*c1*c2*d3*y2 + a3*b3*c1*c2*d3*y2 + b1*b3*c1*c2*d3*y2 + b2*b3*c1*c2*d3*y2 + b1*b3*c1*x1*y2 + b3*c2*x1*y2 + b3*c1*c2*x1*y2 + b3*c1*d1*x1*y2 + b1*b3*c1*d1*x1*y2 + b3*c2*d1*x1*y2 + b3*c1*c2*d1*x1*y2 + b3*d2*x1*y2 + b3*c1*d2*x1*y2 + b3*c2*d2*x1*y2 + b3*c1*c2*d2*x1*y2 + a2*d3*x1*y2 + b2*d3*x1*y2 + b3*d3*x1*y2 + a2*c1*d3*x1*y2 + b2*c1*d3*x1*y2 + b3*c1*d3*x1*y2 + b1*c2*d3*x1*y2 + b2*c2*d3*x1*y2 + b3*c2*d3*x1*y2 + b1*c1*c2*d3*x1*y2 + b2*c1*c2*d3*x1*y2 + b3*c1*c2*d3*x1*y2 + b3*c1*d1*x2*y2 + b3*c2*d1*x2*y2 + b3*c1*d2*x2*y2 + b3*c1*d3*x2*y2 + b1*c2*d3*x2*y2 + a1*c1*x3*y2 + b1*c1*x3*y2 + b1*b3*c1*x3*y2 + b2*b3*c1*x3*y2 + b1*c2*x3*y2 + b1*b3*c2*x3*y2 + a1*c1*c2*x3*y2 + b2*c1*c2*x3*y2 + a1*d1*x3*y2 + b1*c1*d1*x3*y2 + b1*b3*c1*d1*x3*y2 + b2*b3*c1*d1*x3*y2 + a1*c2*d1*x3*y2 + b1*c2*d1*x3*y2 + b2*c2*d1*x3*y2 + b1*b3*c2*d1*x3*y2 + b2*b3*c2*d1*x3*y2 + b2*c1*c2*d1*x3*y2 + a1*d2*x3*y2 + b1*c1*d2*x3*y2 + b1*b3*c1*d2*x3*y2 + b2*b3*c1*d2*x3*y2 + a1*c2*d2*x3*y2 + b1*c2*d2*x3*y2 + b1*b3*c2*d2*x3*y2 + b2*c1*c2*d2*x3*y2 + b3*c1*d3*x3*y2 + b1*b3*c1*y1*y2 + b3*c1*c2*y1*y2 + b1*b3*c1*d1*y1*y2 + b3*c1*c2*d1*y1*y2 + b3*c1*c2*d2*y1*y2 + a2*c1*d3*y1*y2 + b2*c1*d3*y1*y2 + b1*c1*c2*d3*y1*y2 + b2*c1*c2*d3*y1*y2 + b3*c1*c2*d3*y1*y2 + a1*a2*b1*y3 + a1*a2*b2*y3 + a1*b1*b2*y3 + a1*a2*b3*y3 + a2*b1*b3*y3 + a1*b2*b3*y3 + a1*a2*c1*y3 + a1*b2*c1*y3 + a1*a3*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*b1*b3*c1*y3 + a1*a3*c2*y3 + a2*b1*c2*y3 + b1*b2*c2*y3 + a1*b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a3*b1*b3*c2*y3 + a1*b2*b3*c2*y3 + a1*c1*c2*y3 + a3*c1*c2*y3 + a1*a3*c1*c2*y3 + b1*c1*c2*y3 + a1*b1*c1*c2*y3 + a2*b2*c1*c2*y3 + a3*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + b3*c1*c2*y3 + b1*b3*c1*c2*y3 + b2*b3*c1*c2*y3 + b1*b2*c3*y3 + a2*b1*d1*y3 + b2*d1*y3 + a1*a3*b2*d1*y3 + a2*c1*d1*y3 + a2*b1*c1*d1*y3 + b2*c1*d1*y3 + a2*b2*c1*d1*y3 + a3*b2*c1*d1*y3 + b1*b2*c1*d1*y3 + a2*b1*b3*c1*d1*y3 + a3*b2*b3*c1*d1*y3 + a1*c2*d1*y3 + a1*a3*c2*d1*y3 + a1*b1*c2*d1*y3 + a3*b2*c2*d1*y3 + a3*b1*b2*c2*d1*y3 + a1*b3*c2*d1*y3 + b1*b3*c2*d1*y3 + a2*b1*b3*c2*d1*y3 + a3*b2*b3*c2*d1*y3 + c1*c2*d1*y3 + a1*c1*c2*d1*y3 + a3*b2*c1*c2*d1*y3 + b3*c1*c2*d1*y3 + a2*b3*c1*c2*d1*y3 + a3*b3*c1*c2*d1*y3 + b1*b3*c1*c2*d1*y3 + b2*b3*c1*c2*d1*y3 + a2*b1*d2*y3 + a1*a3*b2*d2*y3 + a1*b1*b2*d2*y3 + a1*b1*b3*d2*y3 + a2*c1*d2*y3 + b1*c1*d2*y3 + a2*b1*c1*d2*y3 + a1*b2*c1*d2*y3 + a2*b2*c1*d2*y3 + a3*b2*c1*d2*y3 + b1*b2*c1*d2*y3 + a1*b1*b2*c1*d2*y3 + a1*b3*c1*d2*y3 + a1*b1*b3*c1*d2*y3 + a2*b1*b3*c1*d2*y3 + a3*b2*b3*c1*d2*y3 + a1*c2*d2*y3 + a1*a3*c2*d2*y3 + a1*b1*c2*d2*y3 + a3*b1*b2*c2*d2*y3 + a1*b3*c2*d2*y3 + b1*b3*c2*d2*y3 + a2*b1*b3*c2*d2*y3 + a1*b1*c1*c2*d2*y3 + a1*b2*c1*c2*d2*y3 + a3*b2*c1*c2*d2*y3 + b3*c1*c2*d2*y3 + a1*b3*c1*c2*d2*y3 + a2*b3*c1*c2*d2*y3 + a3*b3*c1*c2*d2*y3 + b1*b3*c1*c2*d2*y3 + b2*b3*c1*c2*d2*y3 + a1*a2*b1*d3*y3 + a1*a3*b2*d3*y3 + a1*b1*b2*d3*y3 + a1*b2*b3*d3*y3 + a1*a2*c1*d3*y3 + a2*b1*c1*d3*y3 + a2*b2*c1*d3*y3 + a3*b2*c1*d3*y3 + b1*b2*c1*d3*y3 + a1*b1*b2*c1*d3*y3 + a2*b1*b2*c1*d3*y3 + a1*b2*b3*c1*d3*y3 + a2*b2*b3*c1*d3*y3 + a3*b2*b3*c1*d3*y3 + a1*c2*d3*y3 + a1*a3*c2*d3*y3 + b1*c2*d3*y3 + a1*b1*c2*d3*y3 + a1*b1*b2*c2*d3*y3 + a2*b1*b2*c2*d3*y3 + a3*b1*b2*c2*d3*y3 + b1*b3*c2*d3*y3 + a1*b1*b3*c2*d3*y3 + a1*b2*b3*c2*d3*y3 + a1*b1*c1*c2*d3*y3 + b2*c1*c2*d3*y3 + a2*b2*c1*c2*d3*y3 + a3*b2*c1*c2*d3*y3 + b1*b2*c1*c2*d3*y3 + b3*c1*c2*d3*y3 + a1*b3*c1*c2*d3*y3 + a2*b3*c1*c2*d3*y3 + a3*b3*c1*c2*d3*y3 + b1*b3*c1*c2*d3*y3 + a2*x1*y3 + a2*c1*x1*y3 + b1*b2*c1*x1*y3 + b2*b3*c1*x1*y3 + a2*c2*x1*y3 + b1*b3*c2*x1*y3 + b2*b3*c2*x1*y3 + b3*c1*c2*x1*y3 + b2*c1*d1*x1*y3 + b1*b2*c1*d1*x1*y3 + b2*b3*c1*d1*x1*y3 + b3*c2*d1*x1*y3 + b1*b3*c2*d1*x1*y3 + b2*b3*c2*d1*x1*y3 + b2*c1*c2*d1*x1*y3 + b3*c1*c2*d1*x1*y3 + a1*d2*x1*y3 + b2*d2*x1*y3 + b3*d2*x1*y3 + a1*c1*d2*x1*y3 + b2*c1*d2*x1*y3 + b1*b3*c1*d2*x1*y3 + b2*b3*c1*d2*x1*y3 + a1*c2*d2*x1*y3 + b3*c2*d2*x1*y3 + b1*b3*c2*d2*x1*y3 + b2*b3*c2*d2*x1*y3 + b1*c1*c2*d2*x1*y3 + b2*c1*c2*d2*x1*y3 + b3*c1*c2*d2*x1*y3 + a2*d3*x1*y3 + b2*d3*x1*y3 + a2*c1*d3*x1*y3 + b2*c1*d3*x1*y3 + a2*c2*d3*x1*y3 + b3*c2*d3*x1*y3 + b1*c1*c2*d3*x1*y3 + b3*c1*c2*d3*x1*y3 + c1*x2*y3 + a1*c1*x2*y3 + b2*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + b1*b3*c2*x2*y3 + c1*c2*x2*y3 + a1*c1*c2*x2*y3 + b2*c1*c2*x2*y3 + a1*d1*x2*y3 + b2*c1*d1*x2*y3 + b3*c1*d1*x2*y3 + b1*b3*c1*d1*x2*y3 + b2*b3*c1*d1*x2*y3 + a1*c2*d1*x2*y3 + b3*c2*d1*x2*y3 + b1*b3*c2*d1*x2*y3 + b2*b3*c2*d1*x2*y3 + b2*c1*c2*d1*x2*y3 + a1*d2*x2*y3 + b2*c1*d2*x2*y3 + b3*c1*d2*x2*y3 + b1*b3*c1*d2*x2*y3 + b2*b3*c1*d2*x2*y3 + a1*c2*d2*x2*y3 + b1*b3*c2*d2*x2*y3 + b2*c1*c2*d2*x2*y3 + a2*c1*x3*y3 + a1*c2*x3*y3 + b1*c2*x3*y3 + c1*c2*x3*y3 + b2*c1*c2*x3*y3 + a2*d1*x3*y3 + b1*c2*d1*x3*y3 + b2*c2*d1*x3*y3 + b1*c2*d2*x3*y3 + b1*c2*d3*x3*y3 + a2*c1*y1*y3 + b2*c1*y1*y3 + b1*b2*c1*y1*y3 + b2*b3*c1*y1*y3 + a2*c2*y1*y3 + b1*c2*y1*y3 + b2*c2*y1*y3 + b3*c2*y1*y3 + b1*b3*c2*y1*y3 + b2*b3*c2*y1*y3 + b3*c1*c2*y1*y3 + b1*b2*c1*d1*y1*y3 + b2*b3*c1*d1*y1*y3 + b1*c2*d1*y1*y3 + b2*c2*d1*y1*y3 + b3*c2*d1*y1*y3 + b1*b3*c2*d1*y1*y3 + b2*b3*c2*d1*y1*y3 + b2*c1*c2*d1*y1*y3 + b3*c1*c2*d1*y1*y3 + a1*c1*d2*y1*y3 + b1*b3*c1*d2*y1*y3 + b2*b3*c1*d2*y1*y3 + a1*c2*d2*y1*y3 + b1*c2*d2*y1*y3 + b2*c2*d2*y1*y3 + b3*c2*d2*y1*y3 + b1*b3*c2*d2*y1*y3 + b2*b3*c2*d2*y1*y3 + b1*c1*c2*d2*y1*y3 + b2*c1*c2*d2*y1*y3 + b3*c1*c2*d2*y1*y3 + a2*c1*d3*y1*y3 + b2*c1*d3*y1*y3 + a2*c2*d3*y1*y3 + b1*c2*d3*y1*y3 + b2*c2*d3*y1*y3 + b3*c2*d3*y1*y3 + b1*c1*c2*d3*y1*y3 + b3*c1*c2*d3*y1*y3 + b1*b3*c1*y2*y3 + b2*b3*c1*y2*y3 + b1*c2*y2*y3 + b1*b3*c2*y2*y3 + a1*c1*c2*y2*y3 + b2*c1*c2*y2*y3 + b3*c1*d1*y2*y3 + b1*b3*c1*d1*y2*y3 + b2*b3*c1*d1*y2*y3 + a1*c2*d1*y2*y3 + b1*c2*d1*y2*y3 + b2*c2*d1*y2*y3 + b3*c2*d1*y2*y3 + b1*b3*c2*d1*y2*y3 + b2*b3*c2*d1*y2*y3 + b2*c1*c2*d1*y2*y3 + b3*c1*d2*y2*y3 + b1*b3*c1*d2*y2*y3 + b2*b3*c1*d2*y2*y3 + a1*c2*d2*y2*y3 + b1*c2*d2*y2*y3 + b1*b3*c2*d2*y2*y3 + b2*c1*c2*d2*y2*y3 + b1*c2*d3*y2*y3 + a2*b3*z1 + a2*b1*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*c1*z1 + a3*b1*b2*c1*z1 + a3*b2*b3*c1*z1 + a3*c2*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a3*b1*b2*c2*z1 + a3*b3*c2*z1 + b1*b3*c2*z1 + a1*b1*b3*c2*z1 + b2*b3*c2*z1 + a1*b2*b3*c2*z1 + a2*b2*b3*c2*z1 + a3*b2*c1*c2*z1 + a1*b3*c1*c2*z1 + a3*b3*c1*c2*z1 + b2*b3*c1*c2*z1 + a3*b1*b2*d1*z1 + a2*b1*b3*d1*z1 + b2*b3*d1*z1 + a3*b2*b3*d1*z1 + a2*b3*c1*d1*z1 + b2*b3*c1*d1*z1 + a3*c2*d1*z1 + a3*b1*c2*d1*z1 + a3*b2*c2*d1*z1 + a3*b3*c2*d1*z1 + b3*c1*c2*d1*z1 + a3*b1*b2*d2*z1 + a2*b3*d2*z1 + a3*b3*d2*z1 + a2*b1*b3*d2*z1 + b2*b3*d2*z1 + a1*b2*b3*d2*z1 + a3*b2*b3*d2*z1 + b3*c1*d2*z1 + a2*b3*c1*d2*z1 + b2*b3*c1*d2*z1 + a3*b1*c2*d2*z1 + a3*b2*c2*d2*z1 + a1*b3*c2*d2*z1 + a3*b3*c2*d2*z1 + b3*c1*c2*d2*z1 + a2*d3*z1 + a2*b1*d3*z1 + a2*b2*d3*z1 + b1*b2*d3*z1 + a1*b1*b2*d3*z1 + a3*b1*b2*d3*z1 + a2*b3*d3*z1 + a2*b1*b3*d3*z1 + b2*b3*d3*z1 + a1*b2*b3*d3*z1 + a3*b2*b3*d3*z1 + a2*b1*c1*d3*z1 + a1*b2*c1*d3*z1 + a2*b3*c1*d3*z1 + b2*b3*c1*d3*z1 + a3*b1*c2*d3*z1 + a3*b2*c2*d3*z1 + b3*c2*d3*z1 + a1*b3*c2*d3*z1 + a3*b3*c2*d3*z1 + b2*c1*c2*d3*z1 + b1*b2*c1*c2*d3*z1 + b3*c1*c2*d3*z1 + a3*c2*x1*z1 + b3*c2*x1*z1 + b3*c1*c2*x1*z1 + b3*c2*d1*x1*z1 + b3*c2*d2*x1*z1 + a2*d3*x1*z1 + b2*c1*d3*x1*z1 + b1*c2*d3*x1*z1 + b2*c2*d3*x1*z1 + b3*c2*d3*x1*z1 + b3*c1*x2*z1 + a3*c2*x2*z1 + b3*c2*x2*z1 + b3*c1*d1*x2*z1 + b3*c2*d1*x2*z1 + b3*d2*x2*z1 + b3*c1*d2*x2*z1 + b3*c2*d2*x2*z1 + a2*d3*x2*z1 + b2*d3*x2*z1 + b3*d3*x2*z1 + b3*c1*d3*x2*z1 + b1*c2*d3*x2*z1 + b2*c2*d3*x2*z1 + b3*c2*d3*x2*z1 + b2*c1*x3*z1 + c2*x3*z1 + a1*c2*x3*z1 + a2*c2*x3*z1 + a3*c2*x3*z1 + b1*c2*x3*z1 + b2*c2*x3*z1 + b3*c2*x3*z1 + c1*c2*x3*z1 + b2*c1*c2*x3*z1 + b3*c1*c2*x3*z1 + b2*c1*d1*x3*z1 + b1*c2*d1*x3*z1 + b2*c2*d1*x3*z1 + a1*d2*x3*z1 + b2*d2*x3*z1 + b3*d2*x3*z1 + b2*c1*d2*x3*z1 + b1*c2*d2*x3*z1 + b2*c2*d2*x3*z1 + a2*d3*x3*z1 + b2*d3*x3*z1 + b1*c2*d3*x3*z1 + b2*c2*d3*x3*z1 + a3*c2*y1*z1 + b3*c1*c2*y1*z1 + b3*c2*d1*y1*z1 + b3*c2*d2*y1*z1 + a2*d3*y1*z1 + b2*c1*d3*y1*z1 + b1*c2*d3*y1*z1 + b2*c2*d3*y1*z1 + b3*c2*d3*y1*z1 + a3*c2*y2*z1 + b3*c1*d1*y2*z1 + b3*c2*d1*y2*z1 + b3*d2*y2*z1 + b3*c1*d2*y2*z1 + b3*c2*d2*y2*z1 + a2*d3*y2*z1 + b2*d3*y2*z1 + b3*d3*y2*z1 + b3*c1*d3*y2*z1 + b1*c2*d3*y2*z1 + b2*c2*d3*y2*z1 + b3*c2*d3*y2*z1 + b2*c1*y3*z1 + a1*c2*y3*z1 + a2*c2*y3*z1 + a3*c2*y3*z1 + b1*c2*y3*z1 + b2*c2*y3*z1 + b3*c2*y3*z1 + c1*c2*y3*z1 + b2*c1*c2*y3*z1 + b3*c1*c2*y3*z1 + b2*c1*d1*y3*z1 + b1*c2*d1*y3*z1 + b2*c2*d1*y3*z1 + a1*d2*y3*z1 + b2*d2*y3*z1 + b3*d2*y3*z1 + b2*c1*d2*y3*z1 + b1*c2*d2*y3*z1 + b2*c2*d2*y3*z1 + a2*d3*y3*z1 + b2*d3*y3*z1 + b1*c2*d3*y3*z1 + b2*c2*d3*y3*z1 + a1*a3*b1*z2 + a1*a3*b2*z2 + a2*b1*b3*z2 + a1*b2*b3*z2 + a1*a3*c1*z2 + a3*b1*b2*c1*z2 + b1*b3*c1*z2 + a1*b2*b3*c1*z2 + a1*a3*c2*z2 + a3*b1*c2*z2 + a3*b1*b2*c2*z2 + b1*b3*c2*z2 + a1*b3*c1*c2*z2 + b2*b3*c1*c2*z2 + a3*d1*z2 + a3*b1*d1*z2 + a3*b2*d1*z2 + a3*b1*b2*d1*z2 + a1*b3*d1*z2 + a2*b3*d1*z2 + a3*b3*d1*z2 + b1*b3*d1*z2 + a2*b1*b3*d1*z2 + b2*b3*d1*z2 + a1*b2*b3*d1*z2 + a3*b2*b3*d1*z2 + b3*c1*d1*z2 + a2*b3*c1*d1*z2 + b2*b3*c1*d1*z2 + a3*c2*d1*z2 + a3*b1*c2*d1*z2 + a3*b2*c2*d1*z2 + a1*b3*c2*d1*z2 + a3*b3*c2*d1*z2 + b1*b3*c2*d1*z2 + b2*b3*c2*d1*z2 + b3*c1*c2*d1*z2 + a3*b1*d2*z2 + a3*b1*b2*d2*z2 + a1*b3*d2*z2 + b1*b3*d2*z2 + a2*b1*b3*d2*z2 + a1*b2*b3*d2*z2 + b3*c1*d2*z2 + a1*b3*c1*d2*z2 + a2*b3*c1*d2*z2 + b2*b3*c1*d2*z2 + a3*b1*c2*d2*z2 + a1*b3*c2*d2*z2 + b1*b3*c2*d2*z2 + b3*c1*c2*d2*z2 + a3*b1*d3*z2 + a1*b2*d3*z2 + a1*b1*b2*d3*z2 + a3*b1*b2*d3*z2 + a1*b3*d3*z2 + b1*b3*d3*z2 + a2*b1*b3*d3*z2 + a1*b2*b3*d3*z2 + b1*c1*d3*z2 + a1*b1*c1*d3*z2 + a2*b1*c1*d3*z2 + a1*b3*c1*d3*z2 + a2*b3*c1*d3*z2 + b2*b3*c1*d3*z2 + a3*b1*c2*d3*z2 + a1*b3*c2*d3*z2 + b1*b3*c2*d3*z2 + b2*c1*c2*d3*z2 + b1*b2*c1*c2*d3*z2 + b3*c1*c2*d3*z2 + a3*c1*x1*z2 + a3*c2*x1*z2 + b3*c2*x1*z2 + b3*c2*d1*x1*z2 + b3*c2*d2*x1*z2 + a2*d3*x1*z2 + b2*c1*d3*x1*z2 + b1*c2*d3*x1*z2 + b2*c2*d3*x1*z2 + b3*c2*d3*x1*z2 + b3*c1*d1*x2*z2 + b3*c2*d1*x2*z2 + b3*c1*d2*x2*z2 + b3*c1*d3*x2*z2 + b1*c2*d3*x2*z2 + a1*x3*z2 + a1*c1*x3*z2 + b3*c1*x3*z2 + b1*c2*x3*z2 + c1*c2*x3*z2 + a1*d1*x3*z2 + b2*c1*d1*x3*z2 + b1*c2*d1*x3*z2 + b2*c2*d1*x3*z2 + a1*d2*x3*z2 + b2*c1*d2*x3*z2 + b1*c2*d2*x3*z2 + b1*c2*d3*x3*z2 + a3*y1*z2 + a3*c1*y1*z2 + a3*c2*y1*z2 + b3*c2*y1*z2 + b3*c2*d1*y1*z2 + b3*c2*d2*y1*z2 + a2*d3*y1*z2 + b2*c1*d3*y1*z2 + b1*c2*d3*y1*z2 + b2*c2*d3*y1*z2 + b3*c2*d3*y1*z2 + b3*c1*d1*y2*z2 + b3*c2*d1*y2*z2 + b3*c1*d2*y2*z2 + b3*c1*d3*y2*z2 + b1*c2*d3*y2*z2 + a1*c1*y3*z2 + b2*c1*y3*z2 + b1*c2*y3*z2 + c1*c2*y3*z2 + a1*d1*y3*z2 + b2*c1*d1*y3*z2 + b1*c2*d1*y3*z2 + b2*c2*d1*y3*z2 + a1*d2*y3*z2 + b2*c1*d2*y3*z2 + b1*c2*d2*y3*z2 + b1*c2*d3*y3*z2 + a3*z1*z2 + b3*c1*z1*z2 + b3*c2*z1*z2 + a1*b1*b2*z3 + a3*b1*b2*z3 + a2*b1*b3*z3 + a1*b2*b3*z3 + b1*b2*c1*z3 + a1*b2*b3*c1*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a3*b1*c2*z3 + a1*b2*c2*z3 + a1*c1*c2*z3 + a2*c1*c2*z3 + b2*c1*c2*z3 + b1*b2*c1*c2*z3 + a1*b3*c1*c2*z3 + a2*b1*b2*d1*z3 + a3*b1*b2*d1*z3 + a2*b1*b3*d1*z3 + a1*b2*b3*d1*z3 + a3*b2*b3*d1*z3 + a2*c1*d1*z3 + a2*b1*c1*d1*z3 + a2*b2*c1*d1*z3 + a2*b3*c1*d1*z3 + b2*b3*c1*d1*z3 + a3*c2*d1*z3 + b1*c2*d1*z3 + a3*b1*c2*d1*z3 + a3*b2*c2*d1*z3 + a1*b3*c2*d1*z3 + a3*b3*c2*d1*z3 + b1*b3*c2*d1*z3 + c1*c2*d1*z3 + a1*b2*d2*z3 + a2*b1*b2*d2*z3 + a3*b1*b2*d2*z3 + a2*b1*b3*d2*z3 + a1*b2*b3*d2*z3 + a1*c1*d2*z3 + a2*c1*d2*z3 + a1*b1*c1*d2*z3 + a2*b1*c1*d2*z3 + a1*b2*c1*d2*z3 + a2*b2*c1*d2*z3 + a1*b3*c1*d2*z3 + a2*b3*c1*d2*z3 + a1*c2*d2*z3 + b1*c2*d2*z3 + a3*b1*c2*d2*z3 + a1*b3*c2*d2*z3 + b1*b3*c2*d2*z3 + b2*c1*c2*d2*z3 + b3*c1*c2*d2*z3 + a1*b2*d3*z3 + a1*b1*b2*d3*z3 + a3*b1*b2*d3*z3 + a2*b1*b3*d3*z3 + a1*b2*b3*d3*z3 + a1*b2*c1*d3*z3 + a2*b2*c1*d3*z3 + b1*b2*c1*d3*z3 + b2*b3*c1*d3*z3 + b1*c2*d3*z3 + a1*b1*c2*d3*z3 + a2*b1*c2*d3*z3 + a3*b1*c2*d3*z3 + a1*b2*c2*d3*z3 + b1*b3*c2*d3*z3 + b3*c1*c2*d3*z3 + b2*b3*c1*c2*d3*z3 + a2*x1*z3 + b3*c2*x1*z3 + b2*c1*d1*x1*z3 + b3*c2*d1*x1*z3 + a1*d2*x1*z3 + b1*c1*d2*x1*z3 + b2*c1*d2*x1*z3 + b3*c2*d2*x1*z3 + a2*d3*x1*z3 + b2*c1*d3*x1*z3 + b1*c2*d3*x1*z3 + b2*c2*d3*x1*z3 + b3*c2*d3*x1*z3 + c1*x2*z3 + a1*c1*x2*z3 + b1*c1*x2*z3 + a1*d1*x2*z3 + b1*c1*d1*x2*z3 + b3*c1*d1*x2*z3 + b3*c2*d1*x2*z3 + a1*d2*x2*z3 + b1*c1*d2*x2*z3 + b3*c1*d2*x2*z3 + b3*c1*d3*x2*z3 + b1*c2*d3*x2*z3 + a2*c1*x3*z3 + a1*c2*x3*z3 + b1*c2*x3*z3 + c1*c2*x3*z3 + b2*c1*c2*x3*z3 + a2*d1*x3*z3 + b1*c2*d1*x3*z3 + b2*c2*d1*x3*z3 + b1*c2*d2*x3*z3 + b1*c2*d3*x3*z3 + a2*y1*z3 + b3*c2*y1*z3 + b2*c1*d1*y1*z3 + b3*c2*d1*y1*z3 + a1*d2*y1*z3 + b1*c1*d2*y1*z3 + b2*c1*d2*y1*z3 + b3*c2*d2*y1*z3 + a2*d3*y1*z3 + b2*c1*d3*y1*z3 + b1*c2*d3*y1*z3 + b2*c2*d3*y1*z3 + b3*c2*d3*y1*z3 + a1*c1*y2*z3 + b1*c1*y2*z3 + a1*d1*y2*z3 + b1*c1*d1*y2*z3 + b3*c1*d1*y2*z3 + b3*c2*d1*y2*z3 + a1*d2*y2*z3 + b1*c1*d2*y2*z3 + b3*c1*d2*y2*z3 + b3*c1*d3*y2*z3 + b1*c2*d3*y2*z3 + a2*c1*y3*z3 + a1*c2*y3*z3 + b1*c2*y3*z3 + c1*c2*y3*z3 + b2*c1*c2*y3*z3 + a2*d1*y3*z3 + b1*c2*d1*y3*z3 + b2*c2*d1*y3*z3 + b1*c2*d2*y3*z3 + b1*c2*d3*y3*z3 + c2*z1*z3 + a1*z2*z3 + b2*c1*z2*z3 + b3*c1*z2*z3;
end;
#####################################################################
C2GAPin128:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a2*b1*b3 + a1*a2*b1*b3 + a1*b2*b3 + a1*a3*b2*b3 + a1*a3*b1*b2*c1 + a1*a2*b1*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a1*a3*b2*b3*c1 + a3*b1*b2*c2 + a1*b3*c2 + a1*a3*b3*c2 + a1*b1*b3*c2 + a2*b1*b3*c2 + a1*a2*b1*b3*c2 + a1*a3*c1*c2 + a1*a3*b1*c1*c2 + a3*b2*c1*c2 + a1*a3*b2*c1*c2 + a3*b1*b2*c1*c2 + a1*b3*c1*c2 + a2*b3*c1*c2 + a1*a2*b3*c1*c2 + a3*b3*c1*c2 + a1*a3*b3*c1*c2 + a3*b1*b3*c1*c2 + a3*b2*b3*c1*c2 + a3*b2*b3*d1 + a3*b1*b2*c1*d1 + b2*b3*c1*d1 + a1*b2*b3*c1*d1 + a2*b2*b3*c1*d1 + b1*b3*c2*d1 + a2*b1*b3*c2*d1 + a1*b2*b3*c2*d1 + a2*b2*b3*c2*d1 + b3*c1*c2*d1 + a1*b3*c1*c2*d1 + a1*a3*b2*d2 + a3*b1*b2*d2 + a2*b1*b3*d2 + a1*a2*b1*b3*d2 + a3*b1*b3*d2 + a1*a3*b1*b3*d2 + a3*b1*b2*c1*d2 + a1*a2*b3*c1*d2 + a1*a3*b3*c1*d2 + a2*b1*b3*c1*d2 + a3*b1*b3*c1*d2 + a1*b2*b3*c1*d2 + a2*b2*b3*c1*d2 + a1*a3*c2*d2 + a3*b1*c2*d2 + a1*a3*b1*c2*d2 + a3*b1*b2*c2*d2 + b1*b3*c2*d2 + a1*b1*b3*c2*d2 + a2*b1*b3*c2*d2 + a1*b2*b3*c2*d2 + a1*a3*c1*c2*d2 + a3*b1*c1*c2*d2 + b3*c1*c2*d2 + b1*b3*c1*c2*d2 + b2*b3*c1*c2*d2 + a1*a3*b2*d3 + a3*b1*b2*d3 + a2*b1*b3*d3 + a1*a2*b1*b3*d3 + a1*a3*b2*b3*d3 + a1*b2*c1*d3 + a2*b1*b2*c1*d3 + a3*b1*b2*c1*d3 + a1*a2*b3*c1*d3 + a2*b1*b3*c1*d3 + a1*b2*b3*c1*d3 + a2*b2*b3*c1*d3 + a3*b2*b3*c1*d3 + a1*c2*d3 + a1*a3*c2*d3 + a1*b1*c2*d3 + a2*b1*c2*d3 + a1*a2*b1*c2*d3 + a3*b1*c2*d3 + a1*a3*b1*c2*d3 + a1*b2*c2*d3 + a1*b1*b2*c2*d3 + a3*b1*b2*c2*d3 + a1*a3*b3*c2*d3 + b1*b3*c2*d3 + a1*b1*b3*c2*d3 + a2*b1*b3*c2*d3 + a3*b1*b3*c2*d3 + a1*b2*b3*c2*d3 + c1*c2*d3 + a1*a2*c1*c2*d3 + a1*a3*c1*c2*d3 + a3*b1*c1*c2*d3 + b2*c1*c2*d3 + a2*b1*b2*c1*c2*d3 + b3*c1*c2*d3 + b1*b3*c1*c2*d3 + b2*b3*c1*c2*d3 + a3*b2*b3*c1*c2*d3 + a3*b2*x1 + a3*b1*b2*x1 + a2*b3*x1 + a2*b1*b3*x1 + a3*b2*b3*x1 + a3*b1*b2*c1*x1 + a2*b1*b3*c1*x1 + a3*b2*b3*c1*x1 + a3*c2*x1 + b3*c2*x1 + a1*b3*c2*x1 + a2*b3*c2*x1 + b1*b3*c2*x1 + a2*b1*b3*c2*x1 + b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b1*c1*c2*x1 + a3*b2*c1*c2*x1 + b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a2*b3*d1*x1 + b2*b3*d1*x1 + a3*c2*d1*x1 + b3*c2*d1*x1 + b1*b3*c2*d1*x1 + b3*c1*c2*d1*x1 + a3*b3*d2*x1 + b2*b3*d2*x1 + a3*b2*c1*d2*x1 + b1*b3*c2*d2*x1 + b2*b3*c2*d2*x1 + a3*c1*c2*d2*x1 + b3*c1*c2*d2*x1 + b2*b3*c1*c2*d2*x1 + a1*b2*d3*x1 + a2*b2*d3*x1 + b1*b2*d3*x1 + b2*b3*d3*x1 + a1*b2*c1*d3*x1 + a2*b2*c1*d3*x1 + a3*b2*c1*d3*x1 + b1*c2*d3*x1 + a1*b1*c2*d3*x1 + b2*c2*d3*x1 + a1*b2*c2*d3*x1 + a2*b2*c2*d3*x1 + b1*b2*c2*d3*x1 + b1*b3*c2*d3*x1 + b2*b3*c2*d3*x1 + a2*c1*c2*d3*x1 + a3*c1*c2*d3*x1 + b3*c1*c2*d3*x1 + b2*b3*c1*c2*d3*x1 + a1*a3*x2 + a3*b1*x2 + a3*b1*b2*x2 + a2*b1*b3*x2 + a3*b1*c1*x2 + b3*c1*x2 + b1*b3*c1*x2 + a2*b1*b3*c2*x2 + b3*c1*c2*x2 + a1*b3*c1*c2*x2 + b3*d1*x2 + a3*b3*d1*x2 + b1*b3*d1*x2 + b3*c2*d1*x2 + b1*b3*c2*d1*x2 + b1*b3*d2*x2 + b1*b3*c2*d2*x2 + a1*b2*d3*x2 + b1*b3*d3*x2 + b1*c1*d3*x2 + b1*b2*c1*d3*x2 + a3*b3*c1*d3*x2 + b1*c2*d3*x2 + a1*b1*c2*d3*x2 + a1*b2*c2*d3*x2 + b1*b2*c2*d3*x2 + b1*b3*c2*d3*x2 + a1*c1*c2*d3*x2 + b1*b2*c1*c2*d3*x2 + b3*c1*c2*x1*x2 + d3*x1*x2 + c1*c2*d3*x1*x2 + a2*b1*b2*x3 + a3*b1*b2*x3 + a2*b1*b3*x3 + b1*c2*x3 + a1*b1*c2*x3 + a3*b1*c2*x3 + a1*b2*c2*x3 + a3*b1*b2*c2*x3 + a1*b3*c2*x3 + b1*b3*c2*x3 + b1*c1*c2*x3 + a1*b1*c1*c2*x3 + a1*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a1*b3*c1*c2*x3 + b1*b3*c1*c2*x3 + a2*b1*d1*x3 + b2*d1*x3 + b1*b2*d1*x3 + a2*c1*d1*x3 + b2*c1*d1*x3 + b1*b2*c1*d1*x3 + a1*b1*d2*x3 + a2*b1*d2*x3 + b1*b2*d2*x3 + a1*c1*d2*x3 + a2*c1*d2*x3 + b2*c1*d2*x3 + b1*b2*c1*d2*x3 + a1*b1*c2*d2*x3 + a1*c1*c2*d2*x3 + b1*c1*c2*d2*x3 + a1*b2*d3*x3 + b1*b2*d3*x3 + b1*b2*c1*d3*x3 + a1*c2*d3*x3 + a1*b1*c2*d3*x3 + b1*b2*c2*d3*x3 + a1*c1*c2*d3*x3 + b1*c1*c2*d3*x3 + b1*c2*x1*x3 + b2*c2*x1*x3 + b3*c2*x1*x3 + b1*c1*c2*x1*x3 + b2*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + c2*d1*x1*x3 + c1*d2*x1*x3 + c2*d2*x1*x3 + c1*c2*d2*x1*x3 + c1*c2*d3*x1*x3 + b1*c2*x2*x3 + c1*d1*x2*x3 + c1*d2*x2*x3 + a3*b2*y1 + a2*b3*y1 + a3*b1*b2*c1*y1 + a2*b1*b3*c1*y1 + a3*b2*b3*c1*y1 + a3*b1*c2*y1 + a3*b2*c2*y1 + a3*b3*c2*y1 + a2*b1*b3*c2*y1 + b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b1*c1*c2*y1 + a3*b2*c1*c2*y1 + a2*b3*c1*c2*y1 + a3*b3*c1*c2*y1 + a3*b2*d1*y1 + a2*b3*d1*y1 + b2*b3*d1*y1 + b1*b3*c2*d1*y1 + b2*b3*c2*d1*y1 + b3*c1*c2*d1*y1 + a2*b3*d2*y1 + b2*b3*d2*y1 + a3*b2*c1*d2*y1 + a3*c2*d2*y1 + b1*b3*c2*d2*y1 + b2*b3*c2*d2*y1 + a3*c1*c2*d2*y1 + b3*c1*c2*d2*y1 + b2*b3*c1*c2*d2*y1 + a2*b2*d3*y1 + b1*b2*d3*y1 + a2*b3*d3*y1 + b2*b3*d3*y1 + a1*b2*c1*d3*y1 + a2*b2*c1*d3*y1 + a3*b2*c1*d3*y1 + b1*b2*c1*d3*y1 + a1*c2*d3*y1 + a2*c2*d3*y1 + a3*c2*d3*y1 + b1*c2*d3*y1 + a1*b1*c2*d3*y1 + b2*c2*d3*y1 + a1*b2*c2*d3*y1 + a2*b2*c2*d3*y1 + b1*b3*c2*d3*y1 + b2*b3*c2*d3*y1 + a2*c1*c2*d3*y1 + a3*c1*c2*d3*y1 + b3*c1*c2*d3*y1 + b2*b3*c1*c2*d3*y1 + b3*c2*x1*y1 + c2*d3*x1*y1 + b3*c2*x2*y1 + b3*c1*c2*x2*y1 + d3*x2*y1 + c2*d3*x2*y1 + c1*c2*d3*x2*y1 + b1*c1*c2*x3*y1 + b2*c1*c2*x3*y1 + b3*c1*c2*x3*y1 + c1*d2*x3*y1 + c1*c2*d2*x3*y1 + c2*d3*x3*y1 + c1*c2*d3*x3*y1 + a1*a3*y2 + a3*b1*c1*y2 + a3*b1*c2*y2 + a1*b3*c2*y2 + a2*b1*b3*c2*y2 + a1*b3*c1*c2*y2 + a3*b3*d1*y2 + b1*b3*c2*d1*y2 + b1*b3*c2*d2*y2 + b1*b2*d3*y2 + a3*b3*c1*d3*y2 + a1*c2*d3*y2 + b1*c2*d3*y2 + a1*b1*c2*d3*y2 + a1*b2*c2*d3*y2 + b1*b3*c2*d3*y2 + a1*c1*c2*d3*y2 + b1*b2*c1*c2*d3*y2 + b3*c2*x1*y2 + b3*c1*c2*x1*y2 + c2*d3*x1*y2 + c1*c2*d3*x1*y2 + d1*x3*y2 + c1*d1*x3*y2 + c1*d2*x3*y2 + b3*c1*c2*y1*y2 + c1*c2*d3*y1*y2 + a2*b1*c2*y3 + a3*b1*b2*c2*y3 + b1*c1*c2*y3 + a1*b1*c1*c2*y3 + a1*b2*c1*c2*y3 + b1*b2*c1*c2*y3 + a1*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + b2*d1*y3 + b1*b2*d1*y3 + b2*c1*d1*y3 + b1*b2*d2*y3 + b1*c1*d2*y3 + b2*c1*d2*y3 + a1*b1*c2*d2*y3 + a1*c1*c2*d2*y3 + b1*c1*c2*d2*y3 + b1*b2*d3*y3 + b1*c2*d3*y3 + a1*b1*c2*d3*y3 + a1*c1*c2*d3*y3 + b1*c1*c2*d3*y3 + b1*c1*c2*x1*y3 + b2*c1*c2*x1*y3 + b3*c1*c2*x1*y3 + c2*d1*x1*y3 + c2*d2*x1*y3 + c1*c2*d2*x1*y3 + c2*d3*x1*y3 + c1*c2*d3*x1*y3 + d1*x2*y3 + b1*c2*x3*y3 + b1*c2*y1*y3 + b2*c2*y1*y3 + b3*c2*y1*y3 + b1*c1*c2*y1*y3 + b2*c1*c2*y1*y3 + b3*c1*c2*y1*y3 + c1*c2*d2*y1*y3 + c1*c2*d3*y1*y3 + b1*c2*y2*y3 + d1*y2*y3 + a2*b1*b3*z1 + a3*c2*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + a3*b3*c2*z1 + b1*b3*c2*z1 + b2*b3*c2*z1 + a3*b2*d1*z1 + b2*b3*d1*z1 + a3*c2*d1*z1 + b2*b3*c2*d1*z1 + a2*b3*d2*z1 + a3*b3*d2*z1 + a3*c2*d2*z1 + a1*b2*d3*z1 + a2*b3*d3*z1 + b1*b2*c1*d3*z1 + c2*d3*z1 + a1*c2*d3*z1 + a2*c2*d3*z1 + a3*c2*d3*z1 + b1*b2*c2*d3*z1 + c2*d3*x1*z1 + b3*x2*z1 + c2*d3*x2*z1 + b1*c2*x3*z1 + b2*c2*x3*z1 + b3*c2*x3*z1 + c2*d1*x3*z1 + c2*d2*x3*z1 + c2*d3*x3*z1 + c2*d3*y1*z1 + c2*d3*y2*z1 + b1*c2*y3*z1 + b2*c2*y3*z1 + b3*c2*y3*z1 + c2*d1*y3*z1 + c2*d2*y3*z1 + c2*d3*y3*z1 + a1*a3*z2 + a2*b1*b3*z2 + a3*b1*c2*z2 + a1*b3*c2*z2 + b1*b3*c2*z2 + b1*b3*d1*z2 + b2*b3*d1*z2 + b1*b3*d2*z2 + a1*b2*d3*z2 + b1*b2*d3*z2 + b1*b3*d3*z2 + b1*c1*d3*z2 + b1*b2*c1*d3*z2 + a1*c2*d3*z2 + b1*b2*c2*d3*z2 + a3*x1*z2 + b3*c2*x1*z2 + d3*x1*z2 + c2*d3*x1*z2 + b1*c2*x3*z2 + d1*x3*z2 + a3*y1*z2 + b3*c2*y1*z2 + d3*y1*z2 + c2*d3*y1*z2 + b1*c2*y3*z2 + a2*b1*b2*z3 + a3*b1*b2*z3 + a2*b1*b3*z3 + a1*b1*c2*z3 + a2*b1*c2*z3 + a3*b1*c2*z3 + a1*b2*c2*z3 + a1*b3*c2*z3 + b1*b3*c2*z3 + a2*b1*d1*z3 + a2*c1*d1*z3 + b1*b2*c1*d1*z3 + a1*b1*d2*z3 + a2*b1*d2*z3 + a1*c1*d2*z3 + a2*c1*d2*z3 + b1*c1*d2*z3 + b1*b2*c1*d2*z3 + a1*b2*d3*z3 + b1*b2*c1*d3*z3 + a1*c2*d3*z3 + b1*c2*d3*z3 + b1*b2*c2*d3*z3 + b1*c2*x1*z3 + b2*c2*x1*z3 + b3*c2*x1*z3 + c1*d2*x1*z3 + c2*d3*x1*z3 + b1*c2*x2*z3 + d1*x2*z3 + c1*d1*x2*z3 + c1*d2*x2*z3 + b1*c2*x3*z3 + b1*c2*y1*z3 + b2*c2*y1*z3 + b3*c2*y1*z3 + c1*d2*y1*z3 + c2*d3*y1*z3 + b1*c2*y2*z3 + c1*d1*y2*z3 + c1*d2*y2*z3 + b1*c2*y3*z3 + d1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 129 ( P4/nmm)
#####################################################################
Aiin129:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin129:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin129:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Azin129:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return z1;
end;
#####################################################################
Bdeltain129:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin129:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b1 + a2*b1*b2 + a2*d1 + a2*b2*d1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 130 ( P4/ncc)
#####################################################################
Aiin130:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin130:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin130:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain130:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin130:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b1 + a2*b1*b2 + a2*d1 + a2*b2*d1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1;
end;
#####################################################################
#####################################################################
#Space Group No. 131 ( P4_2/mmc)
#####################################################################
Aiin131:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin131:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin131:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyin131:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1;
end;
#####################################################################
Bdeltain131:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bczin131:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*b2 + a2*c1 + b2*c1*d1 + a1*d2 + b2*c1*d2 + b2*z1;
end;
#####################################################################
Bxyin131:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
Bzxyin131:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return c1*d2*x1 + c2*(1 + c1 + d2)*x1 + d2*y1 + c1*d2*y1 + c2*(c1 + d2)*y1 + a2*(x1 + y1) + x1*z2 + y1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 132 ( P4_2/mcm)
#####################################################################
Aiin132:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin132:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin132:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyin132:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1;
end;
#####################################################################
Bdeltain132:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bmzin132:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*d1 + b2*c2*d1 + c2*z1;
end;
#####################################################################
Bxyin132:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return (1 - c1)*x2*y1 + c1*(x2 + y1)*y2;
end;
#####################################################################
#####################################################################
#Space Group No. 133 ( P4_2/nbc)
#####################################################################
#####################################################################
#Space Group No. 134 ( P4_2/nnm)
#####################################################################
Aiin134:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin134:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin134:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyzin134:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return a1 + d1 + x1 + y1 + z1;
end;
#####################################################################
Bdeltain134:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
#####################################################################
#Space Group No. 135 ( P4_2/mbc)
#####################################################################
Aiin135:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin135:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin135:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain135:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin135:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*(b1 + b1*b2 + c1 + d1) + a1*(a2 + b2 + b2*c1 + d2) + b1*b2*(d1 + d2) + b2*x1 + (a2 + b2*c1 + d2)*(x1 + y1);
end;
#####################################################################
Bczin135:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*b2 + a2*c1 + a2*d1 + b2*z1;
end;
#####################################################################
CGAPin135:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a2*b1*b2*b3 + a3*b1*b2*c1 + a2*b1*b3*c1 + a1*b2*b3*c1 + a2*b2*b3*c1 + a3*b1*c2 + a2*b1*b3*c2 + a3*b1*b3*c2 + a1*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a3*b2*c1*c2 + a2*b1*b3*c1*c2 + a2*b2*b3*c1*c2 + a3*b2*b3*c1*c2 + a2*b1*b2*b3*c1*c2 + a3*b1*b2*b3*c1*c2 + a2*b1*b2*c3 + a2*b1*b3*c3 + b1*b2*c1*c3 + a3*b1*b2*c1*c3 + b1*b2*b3*c1*c3 + a2*b1*b2*b3*c1*c3 + b1*b2*c2*c3 + a2*b1*b2*c2*c3 + a3*b1*b2*c2*c3 + a2*b1*b2*b3*c2*c3 + a3*c1*c2*c3 + a2*b1*c1*c2*c3 + a3*b1*c1*c2*c3 + a2*b2*c1*c2*c3 + b3*c1*c2*c3 + b1*b3*c1*c2*c3 + a2*b1*b3*c1*c2*c3 + a3*b1*b3*c1*c2*c3 + a2*b1*b2*b3*c1*c2*c3 + a3*b1*b2*d1 + a2*b1*b2*b3*d1 + a3*b1*b2*b3*d1 + a3*b1*b2*c1*d1 + b2*b3*c1*d1 + a2*b2*b3*c1*d1 + a3*b1*b2*b3*c1*d1 + a3*b1*b2*c2*d1 + a2*b1*b3*c2*d1 + b1*b2*b3*c2*d1 + a3*b1*b2*b3*c2*d1 + a3*c1*c2*d1 + a3*b1*c1*c2*d1 + a3*b2*c1*c2*d1 + a2*b3*c1*c2*d1 + a3*b3*c1*c2*d1 + a3*b1*b3*c1*c2*d1 + b2*b3*c1*c2*d1 + a3*b2*b3*c1*c2*d1 + b1*b2*b3*c1*c2*d1 + b1*b2*c3*d1 + a2*b1*b2*c3*d1 + a3*b1*b2*c3*d1 + a3*b1*b2*b3*c3*d1 + a2*b2*c1*c3*d1 + a3*b1*b2*c1*c3*d1 + a3*b2*b3*c1*c3*d1 + a2*b1*c2*c3*d1 + a3*b1*b2*c2*c3*d1 + b1*b3*c2*c3*d1 + a3*b1*b3*c2*c3*d1 + b1*b2*b3*c2*c3*d1 + a3*c1*c2*c3*d1 + a2*b1*c1*c2*c3*d1 + a3*b1*c1*c2*c3*d1 + b2*c1*c2*c3*d1 + a2*b2*c1*c2*c3*d1 + a3*b2*c1*c2*c3*d1 + b1*b2*c1*c2*c3*d1 + a2*b1*b2*c1*c2*c3*d1 + a2*b3*c1*c2*c3*d1 + a3*b3*c1*c2*c3*d1 + a2*b1*b3*c1*c2*c3*d1 + b2*b3*c1*c2*c3*d1 + a2*b2*b3*c1*c2*c3*d1 + b1*b2*b3*c1*c2*c3*d1 + a2*b1*b2*b3*c1*c2*c3*d1 + a3*b1*b2*d2 + b1*b2*b3*d2 + a2*b1*b2*b3*d2 + a3*b1*b2*b3*d2 + a3*b1*b2*c1*d2 + b2*b3*c1*d2 + a2*b1*b2*b3*c1*d2 + a3*b1*b2*b3*c1*d2 + a1*b3*c2*d2 + a2*b1*b3*c2*d2 + a3*b1*b3*c2*d2 + a2*b1*b2*b3*c2*d2 + a3*b1*b2*b3*c2*d2 + a3*c1*c2*d2 + a3*b1*c1*c2*d2 + a3*b2*c1*c2*d2 + a2*b3*c1*c2*d2 + a3*b3*c1*c2*d2 + b1*b3*c1*c2*d2 + a2*b1*b3*c1*c2*d2 + a3*b1*b3*c1*c2*d2 + b2*b3*c1*c2*d2 + a2*b2*b3*c1*c2*d2 + a3*b2*b3*c1*c2*d2 + b1*b2*b3*c1*c2*d2 + a2*b1*b2*c3*d2 + a3*b1*b2*c3*d2 + b1*b2*b3*c3*d2 + a2*b1*b2*b3*c3*d2 + a3*b1*b2*b3*c3*d2 + b1*b2*c1*c3*d2 + a2*b1*b2*c1*c3*d2 + a3*b1*b2*c1*c3*d2 + b2*b3*c1*c3*d2 + a2*b2*b3*c1*c3*d2 + a3*b2*b3*c1*c3*d2 + b1*b2*b3*c1*c3*d2 + b1*c2*c3*d2 + b1*b2*c2*c3*d2 + b1*b2*b3*c2*c3*d2 + c1*c2*c3*d2 + a2*c1*c2*c3*d2 + a3*c1*c2*c3*d2 + a2*b1*c1*c2*c3*d2 + a3*b1*c1*c2*c3*d2 + a2*b2*c1*c2*c3*d2 + a3*b2*c1*c2*c3*d2 + a2*b3*c1*c2*c3*d2 + a3*b3*c1*c2*c3*d2 + b1*b3*c1*c2*c3*d2 + a1*b1*b2*d3 + a3*b1*b2*d3 + a2*b1*b3*d3 + a2*b1*c1*d3 + b1*b2*c1*d3 + a2*b1*b2*c1*d3 + a3*b1*b2*c1*d3 + a2*b1*b3*c1*d3 + a3*b2*b3*c1*d3 + a2*b1*c2*d3 + a1*b3*c2*d3 + a3*b1*b3*c2*d3 + a2*c1*c2*d3 + a3*c1*c2*d3 + a2*b1*c1*c2*d3 + a3*b1*c1*c2*d3 + a2*b2*c1*c2*d3 + a3*b2*c1*c2*d3 + a2*b3*c1*c2*d3 + a3*b3*c1*c2*d3 + b2*b3*c1*c2*d3 + b1*b2*b3*c1*c2*d3 + a2*b1*c3*d3 + a2*c1*c3*d3 + a2*b1*c1*c3*d3 + a2*b2*c1*c3*d3 + a2*b3*c1*c3*d3 + a3*b1*c2*c3*d3 + b1*b3*c2*c3*d3 + b1*b3*c1*c2*c3*d3 + b2*b3*c1*c2*c3*d3 + (a1*a2 + a1*b2 + b1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1)*(c3 + d3) + a3*b1*b2*x1 + b1*b2*b3*x1 + a3*b1*b2*b3*x1 + a2*b3*c1*x1 + b2*b3*c1*x1 + a3*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a3*b1*b2*c2*x1 + a2*b3*c2*x1 + b1*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + b3*c1*c2*x1 + a2*b3*c1*c2*x1 + a3*b3*c1*c2*x1 + a3*b2*b3*c1*c2*x1 + a2*b2*c3*x1 + a2*b1*b2*c3*x1 + a3*b1*b2*c3*x1 + a2*b3*c3*x1 + a2*b1*b3*c3*x1 + a3*b1*b2*b3*c3*x1 + a2*c1*c3*x1 + a3*b2*b3*c1*c3*x1 + b1*b2*b3*c1*c3*x1 + a2*b1*c2*c3*x1 + a3*b1*b2*c2*c3*x1 + b3*c2*c3*x1 + a3*b3*c2*c3*x1 + a3*b1*b3*c2*c3*x1 + b1*b2*b3*c2*c3*x1 + c1*c2*c3*x1 + a2*c1*c2*c3*x1 + b2*c1*c2*c3*x1 + a3*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + a3*b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + b1*b2*b3*c1*c2*c3*x1 + b2*b3*d1*x1 + b3*c2*d1*x1 + b1*b3*c2*d1*x1 + b3*c1*c2*d1*x1 + b2*c3*d1*x1 + c2*c3*d1*x1 + b1*c2*c3*d1*x1 + b1*c1*c2*c3*d1*x1 + b2*c1*c2*c3*d1*x1 + b3*c1*c2*c3*d1*x1 + b1*b3*c1*c2*c3*d1*x1 + b2*b3*c1*c2*c3*d1*x1 + b2*b3*d2*x1 + b1*b2*b3*d2*x1 + b2*b3*c1*d2*x1 + b3*c2*d2*x1 + b1*b3*c2*d2*x1 + b1*b2*b3*c2*d2*x1 + b3*c1*c2*d2*x1 + b2*b3*c1*c2*d2*x1 + b2*b3*c3*d2*x1 + b1*b2*b3*c3*d2*x1 + b2*b3*c1*c3*d2*x1 + c2*c3*d2*x1 + b1*b2*c2*c3*d2*x1 + b3*c2*c3*d2*x1 + b1*b3*c2*c3*d2*x1 + b2*c1*c2*c3*d2*x1 + b3*c1*c2*c3*d2*x1 + a2*d3*x1 + b3*c2*d3*x1 + a3*b1*x2 + a3*b1*b2*x2 + a1*b1*b3*x2 + a2*b1*b3*x2 + a3*b1*b3*x2 + a1*b2*b3*x2 + a3*b1*b2*b3*x2 + a3*c1*x2 + a3*b1*c1*x2 + a3*b2*c1*x2 + a3*b1*b2*c1*x2 + a2*b3*c1*x2 + a2*b1*b3*c1*x2 + b2*b3*c1*x2 + a3*b2*b3*c1*x2 + b1*b2*b3*c1*x2 + a3*b1*c2*x2 + a1*b3*c2*x2 + a3*b1*b3*c2*x2 + b1*b2*b3*c2*x2 + a3*b1*c1*c2*x2 + a3*b2*c1*c2*x2 + b3*c1*c2*x2 + a3*b3*c1*c2*x2 + b1*b3*c1*c2*x2 + a2*b1*b3*c1*c2*x2 + b2*b3*c1*c2*x2 + a2*b1*c3*x2 + a3*b1*c3*x2 + b1*b2*c3*x2 + a2*b1*b2*c3*x2 + a3*b1*b2*c3*x2 + b1*b3*c3*x2 + a2*b1*b3*c3*x2 + a2*c1*c3*x2 + b1*c1*c3*x2 + a2*b1*c1*c3*x2 + a2*b2*c1*c3*x2 + a2*b1*b2*c1*c3*x2 + a2*b3*c1*c3*x2 + a3*b3*c1*c3*x2 + b1*b3*c1*c3*x2 + a2*b1*b3*c1*c3*x2 + b1*b2*b3*c1*c3*x2 + b1*c2*c3*x2 + a2*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + c1*c2*c3*x2 + a2*c1*c2*c3*x2 + b1*c1*c2*c3*x2 + b3*c1*c2*c3*x2 + b1*b3*c1*c2*c3*x2 + b2*b3*c1*c2*c3*x2 + b3*d1*x2 + b1*b3*d1*x2 + b2*b3*d1*x2 + b3*c1*d1*x2 + b1*b3*c1*d1*x2 + b2*b3*c1*d1*x2 + b3*c2*d1*x2 + b1*b3*c2*d1*x2 + b3*c1*c2*d1*x2 + b1*b3*c1*c2*d1*x2 + c3*d1*x2 + b2*c3*d1*x2 + b1*b2*c1*c3*d1*x2 + b3*c1*c3*d1*x2 + b1*b3*c1*c3*d1*x2 + c2*c3*d1*x2 + b1*c2*c3*d1*x2 + b1*b3*d2*x2 + b1*b2*b3*d2*x2 + b3*c1*d2*x2 + b1*b3*c1*d2*x2 + b2*b3*c1*d2*x2 + b1*b3*c2*d2*x2 + b1*b3*c1*c2*d2*x2 + b2*b3*c1*c2*d2*x2 + b3*c1*c3*d2*x2 + b1*b3*c1*c3*d2*x2 + b2*b3*c1*c3*d2*x2 + b1*c2*c3*d2*x2 + b1*b2*c2*c3*d2*x2 + b1*b3*c2*c3*d2*x2 + c1*c2*c3*d2*x2 + b1*c1*c2*c3*d2*x2 + b2*c1*c2*c3*d2*x2 + b3*c1*c2*c3*d2*x2 + a1*d3*x2 + b1*c1*d3*x2 + b3*x1*x2 + b1*b3*x1*x2 + b3*c2*x1*x2 + b1*b3*c2*x1*x2 + b3*c1*c2*x1*x2 + b1*c3*x1*x2 + b2*c3*x1*x2 + b1*b2*c3*x1*x2 + b3*c3*x1*x2 + b1*b3*c3*x1*x2 + c1*c3*x1*x2 + b1*c1*c3*x1*x2 + c1*c2*c3*x1*x2 + a1*b1*b2*x3 + a3*b1*b2*x3 + a2*b1*b2*b3*x3 + a3*b1*b2*b3*x3 + a2*c1*x3 + a2*b2*c1*x3 + a3*b1*b2*c1*x3 + b2*b3*c1*x3 + a3*b2*b3*c1*x3 + b1*b2*b3*c1*x3 + a2*b1*b2*b3*c1*x3 + b1*c2*x3 + a2*b1*c2*x3 + a1*b3*c2*x3 + b1*b3*c2*x3 + a3*b1*b3*c2*x3 + b1*b2*b3*c2*x3 + a2*b1*b2*b3*c2*x3 + c1*c2*x3 + a2*c1*c2*x3 + a2*b1*c1*c2*x3 + a3*b1*c1*c2*x3 + a2*b2*c1*c2*x3 + a3*b2*c1*c2*x3 + b1*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + b3*c1*c2*x3 + a3*b3*c1*c2*x3 + a2*b1*b3*c1*c2*x3 + b2*b3*c1*c2*x3 + a2*b2*b3*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + b1*b2*c3*x3 + a3*b1*b2*c3*x3 + a2*b1*b3*c3*x3 + a2*b1*b2*b3*c3*x3 + a2*b1*c1*c3*x3 + a2*b1*b2*c1*c3*x3 + a2*b3*c1*c3*x3 + a2*b1*b3*c1*c3*x3 + a2*b2*b3*c1*c3*x3 + b1*c2*c3*x3 + a2*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + a2*b1*b2*c2*c3*x3 + a3*b1*b2*c2*c3*x3 + c1*c2*c3*x3 + b1*c1*c2*c3*x3 + a2*b1*c1*c2*c3*x3 + b2*c1*c2*c3*x3 + a2*b2*c1*c2*c3*x3 + b2*b3*c1*c2*c3*x3 + b1*b2*b3*c1*c2*c3*x3 + b1*b2*d1*x3 + b1*b2*b3*d1*x3 + b2*c1*d1*x3 + b1*b2*c1*d1*x3 + b2*b3*c1*d1*x3 + b1*b2*b3*c1*d1*x3 + b1*c2*d1*x3 + b1*b2*c2*d1*x3 + b3*c2*d1*x3 + b1*b3*c2*d1*x3 + b1*b2*b3*c2*d1*x3 + c1*c2*d1*x3 + b1*c1*c2*d1*x3 + b2*c1*c2*d1*x3 + b1*b2*c1*c2*d1*x3 + b3*c1*c2*d1*x3 + b1*b3*c1*c2*d1*x3 + b1*b2*c3*d1*x3 + b1*b2*b3*c3*d1*x3 + b2*c1*c3*d1*x3 + b1*b2*c1*c3*d1*x3 + c2*c3*d1*x3 + b1*c2*c3*d1*x3 + b3*c2*c3*d1*x3 + b1*b3*c2*c3*d1*x3 + c1*c2*c3*d1*x3 + b1*c1*c2*c3*d1*x3 + b2*c1*c2*c3*d1*x3 + b3*c1*c2*c3*d1*x3 + b1*b3*c1*c2*c3*d1*x3 + b2*b3*c1*c2*c3*d1*x3 + b1*b2*b3*d2*x3 + b1*c2*d2*x3 + b1*b3*c1*c2*d2*x3 + b2*b3*c1*c2*d2*x3 + b1*c2*c3*d2*x3 + b1*b2*c2*c3*d2*x3 + c1*c2*c3*d2*x3 + b1*c1*c2*c3*d2*x3 + b2*c1*c2*c3*d2*x3 + b3*c1*c2*c3*d2*x3 + b1*c2*d3*x3 + b1*b2*x1*x3 + b2*b3*x1*x3 + b2*c1*x1*x3 + c2*x1*x3 + b1*b2*c2*x1*x3 + b3*c2*x1*x3 + b1*b3*c2*x1*x3 + c1*c2*x1*x3 + b2*c1*c2*x1*x3 + b3*c1*c2*x1*x3 + b1*b2*c3*x1*x3 + b2*b3*c3*x1*x3 + b2*c1*c3*x1*x3 + b1*b2*c2*c3*x1*x3 + b3*c2*c3*x1*x3 + b1*b3*c2*c3*x1*x3 + b2*c1*c2*c3*x1*x3 + b3*c1*c2*c3*x1*x3 + a1*x2*x3 + b1*b3*x2*x3 + b2*c1*x2*x3 + b3*c1*x2*x3 + b1*c2*x2*x3 + b1*b2*c2*x2*x3 + b1*b3*c2*x2*x3 + c1*c2*x2*x3 + b3*c1*c2*x2*x3 + b1*b3*c1*c2*x2*x3 + b2*b3*c1*c2*x2*x3 + b1*c3*x2*x3 + b1*b3*c3*x2*x3 + b1*b3*c1*c3*x2*x3 + b2*b3*c1*c3*x2*x3 + b1*c2*c3*x2*x3 + b1*c1*c2*c3*x2*x3 + b2*c1*c2*c3*x2*x3 + a3*b1*b2*c1*y1 + a2*b3*c1*y1 + a2*b1*b3*c1*y1 + b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a2*b1*b3*c2*y1 + a3*b1*c1*c2*y1 + a3*b2*c1*c2*y1 + a3*b1*b3*c1*c2*y1 + b2*b3*c1*c2*y1 + a3*b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a2*c1*c3*y1 + a2*b1*c1*c3*y1 + a2*b2*c1*c3*y1 + b1*b2*c1*c3*y1 + a3*b1*b2*c1*c3*y1 + a2*b3*c1*c3*y1 + a3*b2*b3*c1*c3*y1 + a2*b1*c2*c3*y1 + a3*b3*c2*c3*y1 + c1*c2*c3*y1 + a2*c1*c2*c3*y1 + a3*b1*c1*c2*c3*y1 + b2*c1*c2*c3*y1 + a3*b2*c1*c2*c3*y1 + a3*b3*c1*c2*c3*y1 + b1*b2*b3*c1*c2*c3*y1 + b1*b3*c2*d1*y1 + b3*c1*c2*d1*y1 + b1*c2*c3*d1*y1 + c1*c2*c3*d1*y1 + b2*b3*c1*d2*y1 + b1*b2*b3*c1*d2*y1 + b3*c2*d2*y1 + b1*b3*c2*d2*y1 + b2*b3*c2*d2*y1 + b3*c1*c2*d2*y1 + b1*b3*c1*c2*d2*y1 + b2*b3*c1*c2*d2*y1 + b1*b2*c1*c3*d2*y1 + b2*b3*c1*c3*d2*y1 + b1*c2*c3*d2*y1 + b2*c2*c3*d2*y1 + b1*c1*c2*c3*d2*y1 + b2*c1*c2*c3*d2*y1 + b3*c1*c2*c3*d2*y1 + a2*d3*y1 + b3*c2*d3*y1 + b3*c2*x1*y1 + c2*c3*x1*y1 + b1*b3*c1*x2*y1 + b3*c2*x2*y1 + b1*c1*c3*x2*y1 + b2*c1*c3*x2*y1 + b3*c1*c3*x2*y1 + c2*c3*x2*y1 + c1*c2*c3*x2*y1 + b1*b2*c1*x3*y1 + b2*b3*c1*x3*y1 + b1*b3*c2*x3*y1 + b2*b3*c2*x3*y1 + b1*b2*c1*c2*x3*y1 + b1*b3*c1*c2*x3*y1 + b1*c2*c3*x3*y1 + b2*c2*c3*x3*y1 + b3*c2*c3*x3*y1 + b1*c1*c2*c3*x3*y1 + b2*c1*c2*c3*x3*y1 + b3*c1*c2*c3*x3*y1 + a1*b1*b3*y2 + a2*b1*b3*y2 + a3*b1*b3*y2 + a1*b2*b3*y2 + a3*b1*b2*b3*y2 + a3*b3*c1*y2 + b2*b3*c1*y2 + b1*b2*b3*c1*y2 + a3*b1*b2*c2*y2 + a1*b3*c2*y2 + b1*b3*c2*y2 + a2*b1*b3*c2*y2 + a3*b1*b3*c2*y2 + b1*b2*b3*c2*y2 + a3*c1*c2*y2 + a2*b3*c1*c2*y2 + b1*b3*c1*c2*y2 + a2*b1*b3*c1*c2*y2 + b2*b3*c1*c2*y2 + a2*c1*c3*y2 + b1*b2*c1*c3*y2 + a2*b1*b2*c1*c3*y2 + a3*b3*c1*c3*y2 + b1*b3*c1*c3*y2 + a2*b1*b3*c1*c3*y2 + a2*b1*c2*c3*y2 + b1*b2*c2*c3*y2 + b1*b2*b3*c2*c3*y2 + c1*c2*c3*y2 + a2*c1*c2*c3*y2 + b1*b2*c1*c2*c3*y2 + b1*b2*b3*c1*c2*c3*y2 + b1*b3*d1*y2 + b3*c1*d1*y2 + b1*b3*c1*d1*y2 + b2*b3*c1*d1*y2 + b1*b3*c2*d1*y2 + b3*c1*c2*d1*y2 + b1*b3*c1*c2*d1*y2 + b1*b2*c1*c3*d1*y2 + b3*c1*c3*d1*y2 + b1*b3*c1*c3*d1*y2 + b1*c2*c3*d1*y2 + c1*c2*c3*d1*y2 + b1*c1*c2*c3*d1*y2 + b2*c1*c2*c3*d1*y2 + b3*c1*c2*c3*d1*y2 + b1*b3*c1*c2*c3*d1*y2 + b2*b3*c1*c2*c3*d1*y2 + b1*b3*d2*y2 + b1*b2*b3*d2*y2 + b3*c1*d2*y2 + b1*b3*c1*d2*y2 + b2*b3*c1*d2*y2 + b1*b3*c2*d2*y2 + b1*b3*c1*c2*d2*y2 + b2*b3*c1*c2*d2*y2 + b3*c1*c3*d2*y2 + b1*b3*c1*c3*d2*y2 + b2*b3*c1*c3*d2*y2 + b1*c2*c3*d2*y2 + b1*b2*c2*c3*d2*y2 + b1*b3*c2*c3*d2*y2 + c1*c2*c3*d2*y2 + b1*c1*c2*c3*d2*y2 + b2*c1*c2*c3*d2*y2 + b3*c1*c2*c3*d2*y2 + a1*d3*y2 + b1*c1*d3*y2 + b3*x1*y2 + b3*c1*x1*y2 + b3*c2*x1*y2 + b1*c1*c3*x1*y2 + b2*c1*c3*x1*y2 + b3*c1*c3*x1*y2 + c2*c3*x1*y2 + c1*c2*c3*x1*y2 + b1*b3*x2*y2 + b3*c1*c2*x2*y2 + c1*c3*x2*y2 + b1*c1*c3*x2*y2 + b2*c1*c3*x2*y2 + b3*c1*c3*x2*y2 + a1*x3*y2 + b1*b2*x3*y2 + b1*b3*x3*y2 + b1*c1*x3*y2 + b3*c1*x3*y2 + b1*b3*c1*x3*y2 + b2*b3*c1*x3*y2 + b1*b2*c2*x3*y2 + b1*c1*c2*x3*y2 + b2*c1*c2*x3*y2 + b1*b3*c1*c2*x3*y2 + b2*b3*c1*c2*x3*y2 + b1*c1*c3*x3*y2 + b2*c1*c3*x3*y2 + b1*b3*c1*c3*x3*y2 + b2*b3*c1*c3*x3*y2 + b1*c2*c3*x3*y2 + b1*c1*c2*c3*x3*y2 + b2*c1*c2*c3*x3*y2 + b3*c1*y1*y2 + b3*c1*c2*y1*y2 + c1*c3*y1*y2 + c1*c2*c3*y1*y2 + a1*b1*b2*y3 + a2*b1*b3*y3 + a3*b1*b2*b3*y3 + a2*b1*c1*y3 + a2*b2*c1*y3 + b1*b2*c1*y3 + a2*b3*c1*y3 + b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a1*b3*c2*y3 + a3*b1*b3*c2*y3 + a3*c1*c2*y3 + b1*c1*c2*y3 + a2*b1*c1*c2*y3 + a2*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a2*b3*c1*c2*y3 + b1*b3*c1*c2*y3 + a3*b2*b3*c1*c2*y3 + a2*b1*c1*c3*y3 + a2*b2*c1*c3*y3 + a2*b3*c1*c3*y3 + b1*b2*b3*c1*c3*y3 + b1*c2*c3*y3 + a3*b1*b2*c2*c3*y3 + b2*c1*c2*c3*y3 + b1*b2*c1*c2*c3*y3 + b3*c1*c2*c3*y3 + b1*b3*c1*c2*c3*y3 + c2*d1*y3 + c1*c2*d1*y3 + b1*c1*c2*d1*y3 + b2*c1*c2*d1*y3 + b1*b2*c1*c2*d1*y3 + b3*c1*c2*d1*y3 + b1*b3*c1*c2*d1*y3 + b1*b2*c2*c3*d1*y3 + b1*b3*c2*c3*d1*y3 + c1*c2*c3*d1*y3 + b1*c1*c2*c3*d1*y3 + b2*c1*c2*c3*d1*y3 + b3*c1*c2*c3*d1*y3 + b1*b2*b3*d2*y3 + b1*c2*d2*y3 + b1*b3*c1*c2*d2*y3 + b2*b3*c1*c2*d2*y3 + b1*c2*c3*d2*y3 + b1*b2*c2*c3*d2*y3 + c1*c2*c3*d2*y3 + b1*c1*c2*c3*d2*y3 + b2*c1*c2*c3*d2*y3 + b3*c1*c2*c3*d2*y3 + b1*c2*d3*y3 + c1*c2*x1*y3 + b1*b2*c2*c3*x1*y3 + b1*b3*c2*c3*x1*y3 + b2*c1*c2*c3*x1*y3 + b3*c1*c2*c3*x1*y3 + a1*x2*y3 + b1*x2*y3 + b1*b2*x2*y3 + b1*b3*x2*y3 + b1*c1*x2*y3 + b1*b2*c2*x2*y3 + b1*b3*c2*x2*y3 + b1*c1*c3*x2*y3 + b2*c1*c3*x2*y3 + b3*c1*c3*x2*y3 + b1*c2*c3*x2*y3 + b1*b2*x3*y3 + c1*c2*x3*y3 + b1*c1*c2*x3*y3 + b2*c1*c2*x3*y3 + b3*c1*c2*x3*y3 + b1*c2*c3*x3*y3 + b1*c1*c2*y1*y3 + b2*c1*c2*y1*y3 + b1*b2*c1*c2*y1*y3 + b3*c1*c2*y1*y3 + b1*b3*c1*c2*y1*y3 + b1*c1*c2*c3*y1*y3 + b2*c1*c2*c3*y1*y3 + b3*c1*c2*c3*y1*y3 + a1*y2*y3 + b1*c1*y2*y3 + b1*b2*c2*y2*y3 + b1*b3*c2*y2*y3 + c1*c2*y2*y3 + b1*c1*c2*y2*y3 + b2*c1*c2*y2*y3 + b3*c1*c2*y2*y3 + b1*c1*c3*y2*y3 + b2*c1*c3*y2*y3 + b3*c1*c3*y2*y3 + a3*b1*b2*b3*c1*z1 + b3*c1*c2*z1 + a3*b1*b2*b3*c1*c2*z1 + b1*b2*c3*z1 + a2*b1*b2*c3*z1 + a2*b1*b2*b3*c3*z1 + a2*b1*b2*c1*c3*z1 + a2*b1*b2*b3*c1*c3*z1 + a3*b1*b2*b3*c1*c3*z1 + a2*b1*b2*c2*c3*z1 + b3*c2*c3*z1 + a2*b1*b2*b3*c2*c3*z1 + c1*c2*c3*z1 + a2*c1*c2*c3*z1 + a2*b1*c1*c2*c3*z1 + a3*b1*c1*c2*c3*z1 + b2*c1*c2*c3*z1 + a2*b2*c1*c2*c3*z1 + b1*b2*c1*c2*c3*z1 + a3*b1*b2*c1*c2*c3*z1 + b3*c1*c2*c3*z1 + a2*b3*c1*c2*c3*z1 + a2*b1*b3*c1*c2*c3*z1 + a3*b1*b3*c1*c2*c3*z1 + b2*b3*c1*c2*c3*z1 + a2*b2*b3*c1*c2*c3*z1 + b1*b2*c3*d1*z1 + b1*b2*b3*c3*d1*z1 + b1*b2*c1*c3*d1*z1 + b1*b2*b3*c1*c3*d1*z1 + b1*b2*c2*c3*d1*z1 + b1*b2*b3*c2*c3*d1*z1 + c1*c2*c3*d1*z1 + b1*c1*c2*c3*d1*z1 + b2*c1*c2*c3*d1*z1 + b3*c1*c2*c3*d1*z1 + b1*b3*c1*c2*c3*d1*z1 + b2*b3*c1*c2*c3*d1*z1 + b1*b2*b3*c1*d2*z1 + b1*b2*b3*c1*c2*d2*z1 + b1*b2*b3*c1*c3*d2*z1 + b1*c1*c2*c3*d2*z1 + b1*b2*c1*c2*c3*d2*z1 + b1*b3*c1*c2*c3*d2*z1 + b3*c2*x1*z1 + b1*b3*c2*x1*z1 + b3*c1*c2*x1*z1 + b1*b3*c1*c2*x1*z1 + b1*b2*c3*x1*z1 + b2*b3*c3*x1*z1 + b1*b2*c1*c3*x1*z1 + b2*b3*c1*c3*x1*z1 + c2*c3*x1*z1 + b1*c2*c3*x1*z1 + b2*c2*c3*x1*z1 + b3*c2*c3*x1*z1 + b1*b3*c2*c3*x1*z1 + b2*b3*c2*c3*x1*z1 + b1*b3*c1*x2*z1 + b1*b3*c1*c2*x2*z1 + b1*c3*x2*z1 + b2*c3*x2*z1 + b3*c3*x2*z1 + b1*b3*c3*x2*z1 + b2*b3*c3*x2*z1 + c1*c3*x2*z1 + b2*c1*c3*x2*z1 + b1*b2*c1*c3*x2*z1 + b3*c1*c3*x2*z1 + b2*b3*c1*c3*x2*z1 + c2*c3*x2*z1 + b1*c2*c3*x2*z1 + b2*c2*c3*x2*z1 + b3*c2*c3*x2*z1 + b1*b3*c2*c3*x2*z1 + b2*b3*c2*c3*x2*z1 + c1*c2*c3*x2*z1 + b1*c1*c2*c3*x2*z1 + b2*c1*c2*c3*x2*z1 + b3*c1*c2*c3*x2*z1 + b1*b3*c1*c2*c3*x2*z1 + b2*b3*c1*c2*c3*x2*z1 + b2*c1*x3*z1 + b1*b2*c1*x3*z1 + b2*b3*c1*x3*z1 + b1*c2*x3*z1 + b2*c2*x3*z1 + b1*b3*c2*x3*z1 + b2*b3*c2*x3*z1 + b1*c1*c2*x3*z1 + b1*b2*c1*c2*x3*z1 + b1*b3*c1*c2*x3*z1 + b2*c1*c3*x3*z1 + b1*b2*c1*c3*x3*z1 + b2*b3*c1*c3*x3*z1 + b1*c2*c3*x3*z1 + b2*c2*c3*x3*z1 + b1*b3*c2*c3*x3*z1 + b2*b3*c2*c3*x3*z1 + b1*c1*c2*c3*x3*z1 + b1*b2*c1*c2*c3*x3*z1 + b1*b3*c1*c2*c3*x3*z1 + c3*y2*z1 + c1*c2*c3*y2*z1 + b1*c1*c2*c3*y2*z1 + b2*c1*c2*c3*y2*z1 + b3*c1*c2*c3*y2*z1 + b1*b3*c1*c2*c3*y2*z1 + b2*b3*c1*c2*c3*y2*z1 + b1*c1*c2*c3*y3*z1 + b1*b2*c1*c2*c3*y3*z1 + b1*b3*c1*c2*c3*y3*z1 + a1*b3*z2 + b3*c1*z2 + b1*b3*c1*z2 + a3*b1*b2*c2*z2 + a2*b1*b3*c2*z2 + a3*b1*b3*c2*z2 + b3*c1*c2*z2 + b1*b2*c3*z2 + a3*b1*b2*c3*z2 + a2*b1*b3*c3*z2 + a3*b1*b3*c3*z2 + a2*b1*b2*b3*c3*z2 + b1*c1*c3*z2 + a2*b1*b2*c1*c3*z2 + a2*b1*b2*b3*c1*c3*z2 + a2*b1*b2*c2*c3*z2 + a2*b1*b2*b3*c2*c3*z2 + c1*c2*c3*z2 + a2*c1*c2*c3*z2 + b1*c1*c2*c3*z2 + a2*b1*c1*c2*c3*z2 + b2*c1*c2*c3*z2 + a2*b2*c1*c2*c3*z2 + b3*c1*c2*c3*z2 + a2*b3*c1*c2*c3*z2 + b1*b3*c1*c2*c3*z2 + a2*b1*b3*c1*c2*c3*z2 + b2*b3*c1*c2*c3*z2 + a2*b2*b3*c1*c2*c3*z2 + b1*b2*c3*d1*z2 + b1*b2*b3*c3*d1*z2 + b1*b2*c1*c3*d1*z2 + b1*b2*b3*c1*c3*d1*z2 + b1*b2*c2*c3*d1*z2 + b1*b2*b3*c2*c3*d1*z2 + c1*c2*c3*d1*z2 + b1*c1*c2*c3*d1*z2 + b2*c1*c2*c3*d1*z2 + b3*c1*c2*c3*d1*z2 + b1*b3*c1*c2*c3*d1*z2 + b2*b3*c1*c2*c3*d1*z2 + b1*c3*x1*z2 + b2*c3*x1*z2 + b3*c3*x1*z2 + b1*b3*c3*x1*z2 + b2*b3*c3*x1*z2 + c1*c3*x1*z2 + b1*c1*c3*x1*z2 + b2*c1*c3*x1*z2 + b3*c1*c3*x1*z2 + b1*b3*c1*c3*x1*z2 + b2*b3*c1*c3*x1*z2 + c2*c3*x1*z2 + b1*c2*c3*x1*z2 + b2*c2*c3*x1*z2 + b3*c2*c3*x1*z2 + b1*b3*c2*c3*x1*z2 + b2*b3*c2*c3*x1*z2 + b1*b3*c2*x2*z2 + b1*c3*x2*z2 + b1*b2*c3*x2*z2 + c1*c3*x2*z2 + b1*c1*c3*x2*z2 + b2*c1*c3*x2*z2 + b3*c1*c3*x2*z2 + b1*b3*c1*c3*x2*z2 + b2*b3*c1*c3*x2*z2 + b1*c2*c3*x2*z2 + b1*b3*c2*c3*x2*z2 + c1*c2*c3*x2*z2 + b1*c1*c2*c3*x2*z2 + b2*c1*c2*c3*x2*z2 + b3*c1*c2*c3*x2*z2 + b1*b3*c1*c2*c3*x2*z2 + b2*b3*c1*c2*c3*x2*z2 + b1*c1*x3*z2 + b2*c1*x3*z2 + b1*b3*c1*x3*z2 + b2*b3*c1*x3*z2 + b1*c2*x3*z2 + b1*b2*c2*x3*z2 + b1*b2*c3*x3*z2 + b1*b3*c3*x3*z2 + b1*c1*c3*x3*z2 + b2*c1*c3*x3*z2 + b1*b3*c1*c3*x3*z2 + b2*b3*c1*c3*x3*z2 + b1*c2*c3*x3*z2 + b1*b3*c2*c3*x3*z2 + c3*y1*z2 + b1*b3*c2*y2*z2 + b1*b2*c3*y2*z2 + b1*b3*c3*y2*z2 + c1*c2*c3*y2*z2 + b1*c1*c2*c3*y2*z2 + b2*c1*c2*c3*y2*z2 + b3*c1*c2*c3*y2*z2 + b1*b3*c1*c2*c3*y2*z2 + b2*b3*c1*c2*c3*y2*z2 + b1*b2*c2*y3*z2 + b1*b3*c2*y3*z2 + b1*b2*c3*y3*z2 + b1*b3*c3*y3*z2 + a2*b1*z3 + a2*b1*b2*c2*z3 + a3*b1*b2*c2*z3 + b1*b3*c2*z3 + a2*b1*b3*c2*z3 + a3*b1*b3*c2*z3 + b1*c1*c2*z3 + b2*c1*c2*z3 + b3*c1*c2*z3 + a2*b1*b2*c3*z3 + a3*b1*b2*c3*z3 + a2*b1*b3*c3*z3 + b1*c2*c3*z3 + b1*b2*c2*x2*z3 + b1*b3*c2*x2*z3 + b1*b2*c3*x2*z3 + b1*b3*c3*x2*z3 + b1*b2*c2*x3*z3 + b1*b3*c2*x3*z3 + b1*b2*c3*x3*z3 + b1*b2*c2*y2*z3 + b1*b3*c2*y2*z3 + b1*b2*c3*y2*z3 + b1*b3*c3*y2*z3 + b1*b2*c2*y3*z3 + b1*b3*c2*y3*z3 + b1*b2*c3*y3*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 136 ( P4_2/mnm)
#####################################################################
Aiin136:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin136:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin136:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain136:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin136:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b1*(1 + b2) + b2*(a1 + b1*(d1 + d2)) + b2*x1 + (a2 + b2*c1 + d2)*(x1 + y1);
end;
#####################################################################
Bpxyzin136:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return b1*b2*d1 + b1*b2*d2 + d2*x1 + d2*y1 + b2*z1;
end;
#####################################################################
Bmzin136:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*d1 + b2*c2*d1 + c2*z1;
end;
#####################################################################
CGAP1in136:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a1*a2*a3 + a1*a3*b2 + a3*b1*b2 + a2*a3*b1*b2 + a3*b1*b2*b3 + a2*a3*b1*c1 + a3*b2*c1 + a1*a3*c2 + a2*a3*b1*c2 + a3*b1*b2*c2 + a2*a3*b1*b2*c2 + a1*a2*b3*c2 + a1*a3*b3*c2 + a1*b2*b3*c2 + a2*b1*b2*b3*c2 + a3*b1*b2*b3*c2 + a2*b1*b3*c1*c2 + a3*b1*b3*c1*c2 + b1*b2*b3*c1*c2 + a3*b1*b2*c1*c3 + a2*b1*b2*b3*c2*c3 + b1*b3*c1*c2*c3 + a3*b2*d1 + a1*a3*b2*d1 + a2*a3*b2*d1 + a1*b2*b3*d1 + a2*b2*b3*d1 + a3*b2*b3*d1 + b2*b3*c1*d1 + b1*b2*b3*c1*d1 + a3*c2*d1 + a3*b1*b2*c2*d1 + a2*b1*b3*c2*d1 + a3*b1*b3*c2*d1 + b2*b3*c2*d1 + a1*b2*b3*c2*d1 + a2*b2*b3*c2*d1 + a3*b2*b3*c2*d1 + b1*b2*b3*c2*d1 + a1*b2*c3*d1 + a2*b2*c3*d1 + b1*b2*c3*d1 + a2*b1*b2*c3*d1 + a3*b1*b2*c3*d1 + b1*b2*b3*c3*d1 + b2*c1*c3*d1 + b1*b2*c1*c3*d1 + b1*b2*c2*c3*d1 + b3*c2*c3*d1 + b1*b3*c2*c3*d1 + a1*a3*b2*d2 + a3*b1*b2*d2 + a1*b2*b3*d2 + b1*b2*b3*d2 + b1*b2*b3*c1*d2 + a2*b1*b3*c2*d2 + a3*b1*b3*c2*d2 + a1*b2*b3*c2*d2 + b1*b2*b3*c2*d2 + a1*b2*c3*d2 + b1*b2*c3*d2 + b1*b2*b3*c3*d2 + b1*b3*c2*c3*d2 + b1*b2*b3*c2*c3*d2 + a1*a3*b2*d3 + a2*b1*b2*d3 + a3*b1*b2*d3 + a1*b2*b3*d3 + b1*b2*b3*d3 + a2*b1*b2*b3*d3 + a3*b1*b2*b3*d3 + b2*b3*c1*d3 + b1*b2*b3*c1*d3 + a1*b2*c2*d3 + b1*b2*c2*d3 + a1*b2*b3*c2*d3 + b1*b2*b3*c2*d3 + a1*b2*c3*d3 + b1*b2*c3*d3 + b2*b3*c1*c3*d3 + a2*a3*x1 + a3*b2*c1*x1 + a3*c2*x1 + a3*b1*c2*x1 + a3*b2*c2*x1 + a2*b3*c2*x1 + a3*b3*c2*x1 + b2*b3*c2*x1 + a3*b1*c1*c2*x1 + a3*b2*c1*c2*x1 + b1*b2*c3*x1 + b2*b3*c3*x1 + b2*b3*c1*c3*x1 + a2*b1*c2*c3*x1 + a3*b1*c2*c3*x1 + a3*b2*c2*c3*x1 + b1*b2*c2*c3*x1 + b3*c2*c3*x1 + b2*c1*c2*c3*x1 + b1*b2*c1*c2*c3*x1 + b3*c1*c2*c3*x1 + b1*b3*c1*c2*c3*x1 + b2*b3*c1*c2*c3*x1 + a3*b2*d1*x1 + b2*b3*c1*d1*x1 + b3*c2*d1*x1 + b2*b3*c2*d1*x1 + b3*c1*c2*d1*x1 + b2*c1*c3*d1*x1 + b3*c2*c3*d1*x1 + b2*b3*c1*d2*x1 + b3*c2*d2*x1 + b3*c1*c2*d2*x1 + b3*c2*c3*d2*x1 + b1*b2*d3*x1 + b2*b3*d3*x1 + b1*b3*x2 + a3*b1*c2*x2 + b1*b2*c3*x2 + b1*c1*c3*x2 + a2*b1*c2*c3*x2 + a3*b1*c2*c3*x2 + b1*b2*c2*c3*x2 + b1*c1*c2*c3*x2 + a3*d1*x2 + a3*b2*d1*x2 + b2*b3*c1*d1*x2 + b2*b3*c2*d1*x2 + b3*c2*c3*d1*x2 + b2*b3*c1*d2*x2 + b1*b2*d3*x2 + b1*b2*c1*d3*x2 + b2*b3*c1*d3*x2 + c1*c3*x1*x2 + c1*c2*c3*x1*x2 + b1*b2*c2*x3 + b1*b3*c2*x3 + a2*b1*c3*x3 + a2*b1*c2*c3*x3 + a3*b1*c2*c3*x3 + b1*b2*c2*c3*x3 + b1*b3*c2*c3*x3 + b1*b2*d1*x3 + b1*b2*c1*d1*x3 + b2*b3*c1*d1*x3 + a1*c2*d1*x3 + a2*c2*d1*x3 + a3*c2*d1*x3 + b1*c2*d1*x3 + b2*c2*d1*x3 + b1*b2*c2*d1*x3 + b2*b3*c2*d1*x3 + b2*c3*d1*x3 + b2*c2*c3*d1*x3 + b3*c2*c3*d1*x3 + b1*b2*d2*x3 + b1*b2*c1*d2*x3 + b2*b3*c1*d2*x3 + a1*c2*d2*x3 + b1*c2*d2*x3 + b1*b2*c2*d2*x3 + b1*b2*d3*x3 + b1*b2*c1*d3*x3 + b2*b3*c1*d3*x3 + a1*c2*d3*x3 + b1*c2*d3*x3 + b1*b2*c2*d3*x3 + c1*c2*x1*x3 + c1*c2*c3*x1*x3 + a2*a3*y1 + a3*b2*y1 + a3*b2*c1*y1 + a3*c2*y1 + a2*b3*c2*y1 + a3*b3*c2*y1 + b2*b3*c2*y1 + a3*b1*c1*c2*y1 + a3*b2*c1*c2*y1 + b1*b2*c3*y1 + b2*b3*c1*c3*y1 + b1*c2*c3*y1 + a2*b1*c2*c3*y1 + a3*b1*c2*c3*y1 + b2*c2*c3*y1 + a3*b2*c2*c3*y1 + b1*b3*c2*c3*y1 + b2*b3*c2*c3*y1 + b2*c1*c2*c3*y1 + b1*b2*c1*c2*c3*y1 + b3*c1*c2*c3*y1 + b1*b3*c1*c2*c3*y1 + b2*b3*c1*c2*c3*y1 + a3*b2*d1*y1 + b2*b3*c1*d1*y1 + b2*b3*c2*d1*y1 + b3*c1*c2*d1*y1 + b2*c3*d1*y1 + b2*c1*c3*d1*y1 + b3*c2*c3*d1*y1 + b2*b3*c1*d2*y1 + b3*c1*c2*d2*y1 + b3*c2*c3*d2*y1 + c2*c3*x1*y1 + c3*x2*y1 + c1*c3*x2*y1 + c2*c3*x2*y1 + c1*c2*c3*x2*y1 + c2*x3*y1 + c1*c2*x3*y1 + c2*c3*x3*y1 + c1*c2*c3*x3*y1 + b1*b2*c3*y2 + b1*c2*c3*y2 + a2*b1*c2*c3*y2 + a3*b1*c2*c3*y2 + b1*b3*c2*c3*y2 + b1*c1*c2*c3*y2 + a3*b2*d1*y2 + b2*b3*c1*d1*y2 + b2*b3*c2*d1*y2 + b2*c3*d1*y2 + b3*c2*c3*d1*y2 + b2*b3*c1*d2*y2 + a1*d3*y2 + b1*d3*y2 + b1*b2*c1*d3*y2 + b2*b3*c1*d3*y2 + c1*c3*x1*y2 + c2*c3*x1*y2 + c1*c2*c3*x1*y2 + c3*y1*y2 + c1*c3*y1*y2 + c1*c2*c3*y1*y2 + a2*b1*c2*y3 + a3*b1*c2*y3 + b1*b3*c2*y3 + a2*b1*c3*y3 + b2*c1*c3*y3 + a2*b1*c2*c3*y3 + a3*b1*c2*c3*y3 + b2*c1*d1*y3 + b1*b2*c1*d1*y3 + b2*b3*c1*d1*y3 + a1*c2*d1*y3 + a2*c2*d1*y3 + a3*c2*d1*y3 + b1*c2*d1*y3 + b1*b2*c2*d1*y3 + b2*b3*c2*d1*y3 + b2*c2*c3*d1*y3 + b3*c2*c3*d1*y3 + b2*c1*d2*y3 + b1*b2*c1*d2*y3 + b2*b3*c1*d2*y3 + a1*c2*d2*y3 + b1*c2*d2*y3 + b1*b2*c2*d2*y3 + b2*c1*d3*y3 + b1*b2*c1*d3*y3 + b2*b3*c1*d3*y3 + a1*c2*d3*y3 + b1*c2*d3*y3 + b1*b2*c2*d3*y3 + c2*c3*x1*y3 + c1*c2*c3*x1*y3 + c1*c2*c3*y1*y3 + b2*b3*c1*z1 + a3*b1*c2*z1 + a3*b2*c2*z1 + b2*b3*c2*z1 + b2*c3*z1 + b2*c1*c3*z1 + b1*b2*c2*c3*z1 + b3*c2*c3*z1 + b1*b3*c2*c3*z1 + b2*b3*c2*c3*z1 + b3*c2*d1*z1 + b2*c3*d1*z1 + b3*c2*d2*z1 + b1*b2*d3*z1 + b2*b3*d3*z1 + c2*c3*x1*z1 + a3*x2*z1 + b3*c2*x2*z1 + c2*c3*x2*z1 + b2*x3*z1 + c2*x3*z1 + b2*c2*x3*z1 + b3*c2*x3*z1 + c2*c3*x3*z1 + c2*c3*y1*z1 + a3*y2*z1 + b3*c2*y2*z1 + c2*c3*y2*z1 + b2*c2*y3*z1 + b3*c2*y3*z1 + c2*c3*y3*z1 + d3*(c1*c2 + a2*d1 + b2*c2*d1 + c2*z1) + a3*b1*z2 + b2*b3*c1*z2 + a2*b1*c3*z2 + a3*b1*c3*z2 + b2*c1*c3*z2 + b1*b2*c2*c3*z2 + a3*d1*z2 + b2*c3*d1*z2 + a1*d3*z2 + b1*d3*z2 + b1*b2*d3*z2 + a3*x1*z2 + b3*c2*x1*z2 + c1*c3*x1*z2 + c2*c3*x1*z2 + a3*y1*z2 + b3*c2*y1*z2 + c3*y1*z2 + c1*c3*y1*z2 + c2*c3*y1*z2 + c3*z1*z2 + a2*b1*b2*z3 + a3*b1*b2*z3 + b2*b3*c1*z3 + b1*b2*c2*z3 + b1*b2*c3*z3 + b1*b2*d1*z3 + b2*c1*d1*z3 + b2*c2*d1*z3 + b2*c3*d1*z3 + b1*b2*d2*z3 + b2*c1*d2*z3 + b1*b2*d3*z3 + b2*c1*d3*z3 + b2*x1*z3 + b2*c1*x1*z3 + b3*c2*x1*z3 + b2*c1*y1*z3 + b3*c2*y1*z3;
end;
#####################################################################
CGAP2in136:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a1*b2*b3*d1 + a2*b2*b3*d1 + b2*b3*c1*d1 + a3*c2*d1 + a3*b2*c2*d1 + a1*b2*b3*c2*d1 + a2*b2*b3*c2*d1 + b1*b2*c3*d1 + a1*a3*b2*d2 + a3*b2*c1*d2 + a1*b2*b3*c2*d2 + b1*b2*c3*d2 + a1*a2*b1*d3 + a1*a3*b2*d3 + a1*b1*b2*d3 + a1*b2*b3*d3 + a2*c1*d3 + a3*b2*c1*d3 + a1*b1*b2*c1*d3 + b1*b2*c2*d3 + a1*b2*b3*c2*d3 + b1*b2*c3*d3 + a3*b2*d1*x1 + b2*b3*d1*x1 + b3*c2*d1*x1 + b2*b3*c2*d1*x1 + b3*d2*x1 + a1*b3*d2*x1 + a2*b3*d2*x1 + a3*b3*d2*x1 + b1*b3*d2*x1 + a1*b1*b3*d2*x1 + a3*b2*b3*d2*x1 + b2*b3*c2*d2*x1 + a1*b2*d3*x1 + a2*b2*d3*x1 + b1*b2*d3*x1 + b2*b3*d3*x1 + b2*b3*c1*d3*x1 + a3*d1*x2 + a3*b2*d1*x2 + a1*b3*d1*x2 + a2*b3*d1*x2 + a3*b3*d1*x2 + a1*b1*b3*d1*x2 + b2*b3*d1*x2 + a3*b2*b3*d1*x2 + b2*b3*c2*d1*x2 + a1*b3*d2*x2 + a1*b1*d3*x2 + a1*b2*d3*x2 + b1*b2*d3*x2 + a1*c1*d3*x2 + a2*c1*d3*x2 + b2*c1*d3*x2 + b1*b2*c1*d3*x2 + b3*d1*x1*x2 + b3*c1*d2*x1*x2 + d3*x1*x2 + a3*b2*d1*x3 + b1*b2*d1*x3 + a1*b1*b2*d1*x3 + a2*b1*b2*d1*x3 + b2*b3*d1*x3 + a1*b2*b3*d1*x3 + a2*b2*b3*d1*x3 + b2*b3*c1*d1*x3 + a1*c2*d1*x3 + a2*c2*d1*x3 + a3*c2*d1*x3 + a3*b2*c2*d1*x3 + b1*b2*c2*d1*x3 + b2*b3*c2*d1*x3 + a1*b1*b3*d2*x3 + a1*b2*b3*d2*x3 + b2*b3*c1*d2*x3 + a1*c2*d2*x3 + a2*b1*d3*x3 + b2*c1*d3*x3 + a1*c2*d3*x3 + b1*b2*c2*d3*x3 + b2*d1*x1*x3 + b2*c1*d1*x1*x3 + c2*d1*x1*x3 + b2*c2*d1*x1*x3 + d2*x1*x3 + b3*d2*x1*x3 + c1*d2*x1*x3 + b3*c1*d2*x1*x3 + b3*c2*d2*x1*x3 + c2*d3*x1*x3 + b3*d1*x2*x3 + b3*c1*d1*x2*x3 + c2*d1*x2*x3 + b3*c2*d1*x2*x3 + b3*c1*d2*x2*x3 + b3*d2*y1 + a1*b3*d2*y1 + a2*b3*d2*y1 + a3*b3*d2*y1 + a1*b1*b3*d2*y1 + a3*b2*b3*d2*y1 + b2*b3*c2*d2*y1 + a2*d3*y1 + a1*b2*d3*y1 + a2*b2*d3*y1 + b2*c1*d3*y1 + b2*b3*c1*d3*y1 + b3*d2*x1*y1 + b3*d2*x2*y1 + b3*c1*d2*x2*y1 + d3*x2*y1 + b2*d1*x3*y1 + b2*c1*d1*x3*y1 + b2*c2*d1*x3*y1 + b3*d2*x3*y1 + c1*d2*x3*y1 + b3*c1*d2*x3*y1 + b3*c2*d2*x3*y1 + c2*d3*x3*y1 + a1*b3*d1*y2 + a2*b3*d1*y2 + a3*b3*d1*y2 + a1*b1*b3*d1*y2 + a3*b2*b3*d1*y2 + a1*b3*d2*y2 + a1*b1*d3*y2 + a1*b2*d3*y2 + a1*c1*d3*y2 + a2*c1*d3*y2 + b1*b2*c1*d3*y2 + b3*d1*x1*y2 + b3*d2*x1*y2 + b3*c1*d2*x1*y2 + b3*d1*x2*y2 + b3*d1*x3*y2 + b3*c1*d1*x3*y2 + b3*c2*d1*x3*y2 + b3*c1*d2*x3*y2 + b3*c1*d2*y1*y2 + a2*b1*d1*y3 + a1*b1*b2*d1*y3 + a2*b1*b2*d1*y3 + a1*b2*b3*d1*y3 + a2*b2*b3*d1*y3 + b1*b2*c1*d1*y3 + b2*b3*c1*d1*y3 + a1*c2*d1*y3 + a2*c2*d1*y3 + a3*c2*d1*y3 + a3*b2*c2*d1*y3 + b1*b2*c2*d1*y3 + a2*b1*d2*y3 + a1*b1*b3*d2*y3 + a1*b2*b3*d2*y3 + b1*b2*c1*d2*y3 + b2*b3*c1*d2*y3 + a1*c2*d2*y3 + a2*b1*d3*y3 + a1*c2*d3*y3 + b1*b2*c2*d3*y3 + b2*c1*d1*x1*y3 + c2*d1*x1*y3 + b2*c2*d1*x1*y3 + c1*d2*x1*y3 + b3*c1*d2*x1*y3 + b3*c2*d2*x1*y3 + c2*d3*x1*y3 + c1*d1*x2*y3 + b3*c1*d1*x2*y3 + c2*d1*x2*y3 + b3*c2*d1*x2*y3 + c1*d2*x2*y3 + b3*c1*d2*x2*y3 + c2*d1*x3*y3 + b2*c1*d1*y1*y3 + b2*c2*d1*y1*y3 + c1*d2*y1*y3 + b3*c1*d2*y1*y3 + b3*c2*d2*y1*y3 + c2*d3*y1*y3 + c1*d1*y2*y3 + b3*c1*d1*y2*y3 + b3*c2*d1*y2*y3 + c1*d2*y2*y3 + b3*c1*d2*y2*y3 + a2*b3*z1 + a1*b2*b3*z1 + a2*b2*b3*z1 + a3*b2*c1*z1 + b2*b3*c1*z1 + a3*c2*z1 + a1*b3*c2*z1 + a2*b3*c2*z1 + a3*b3*c2*z1 + b2*b3*c2*z1 + b1*b2*c3*z1 + b2*b3*c3*z1 + a3*b2*d1*z1 + b2*b3*c1*d1*z1 + b3*c2*d1*z1 + b2*c3*d1*z1 + b1*b2*c3*d1*z1 + b2*b3*c3*d1*z1 + b3*d2*z1 + a2*b3*d2*z1 + a3*b3*d2*z1 + a2*b1*b3*d2*z1 + a3*b1*b3*d2*z1 + b2*b3*d2*z1 + a2*b2*b3*d2*z1 + a3*b2*b3*d2*z1 + b3*c1*d2*z1 + b1*b3*c1*d2*z1 + b2*b3*c1*d2*z1 + b3*c2*d2*z1 + b2*b3*c2*d2*z1 + b1*b3*c3*d2*z1 + a2*d3*z1 + b1*b2*d3*z1 + b2*b3*d3*z1 + b2*c1*d3*z1 + a3*b2*x1*z1 + b2*b3*x1*z1 + b2*b3*c1*x1*z1 + b3*c2*x1*z1 + b2*b3*c2*x1*z1 + b3*d2*x1*z1 + a2*b3*x2*z1 + a3*b3*x2*z1 + b2*b3*x2*z1 + b3*d1*x2*z1 + b3*d2*x2*z1 + a2*b1*x3*z1 + b2*x3*z1 + a2*b2*x3*z1 + b1*b2*x3*z1 + a2*b3*x3*z1 + b2*b3*x3*z1 + b2*c2*x3*z1 + b1*b2*c2*x3*z1 + b2*b3*c2*x3*z1 + c2*d1*x3*z1 + d2*x3*z1 + a3*b2*y1*z1 + b2*b3*c1*y1*z1 + b3*c2*y1*z1 + b2*b3*c2*y1*z1 + b3*d2*y1*z1 + a2*b3*y2*z1 + a3*b3*y2*z1 + b3*d1*y2*z1 + b3*d2*y2*z1 + a2*b1*y3*z1 + a2*b2*y3*z1 + a2*b3*y3*z1 + b2*c2*y3*z1 + b1*b2*c2*y3*z1 + b2*b3*c2*y3*z1 + c2*d1*y3*z1 + a1*a3*z2 + a1*b2*b3*z2 + a3*b2*c1*z2 + b1*b3*c1*z2 + b2*b3*c1*z2 + b1*b3*c2*z2 + b1*b3*c3*z2 + a3*d1*z2 + a3*b2*d1*z2 + b3*c1*d1*z2 + b2*b3*c1*d1*z2 + b3*c2*d1*z2 + b1*c3*d1*z2 + b1*b2*c3*d1*z2 + b3*c3*d1*z2 + b2*b3*c3*d1*z2 + b3*c1*d2*z2 + b1*b3*c1*d2*z2 + b2*b3*c1*d2*z2 + b1*b3*c2*d2*z2 + b1*b3*c3*d2*z2 + b1*b2*d3*z2 + b2*c1*d3*z2 + a3*x1*z2 + a3*b2*x1*z2 + b2*b3*x1*z2 + b2*b3*c1*x1*z2 + b2*b3*c2*x1*z2 + b3*d2*x1*z2 + d3*x1*z2 + b3*d1*x2*z2 + a2*b1*x3*z2 + b1*b2*x3*z2 + b1*b2*c2*x3*z2 + c2*d1*x3*z2 + a3*y1*z2 + a3*b2*y1*z2 + b2*b3*c1*y1*z2 + b2*b3*c2*y1*z2 + b3*d2*y1*z2 + d3*y1*z2 + b3*d1*y2*z2 + a2*b1*y3*z2 + b1*b2*c2*y3*z2 + c2*d1*y3*z2 + a3*b1*z1*z2 + a3*b2*z1*z2 + a2*b3*z1*z2 + a3*b3*z1*z2 + b1*b3*c2*z1*z2 + b2*b3*c2*z1*z2 + b2*c3*z1*z2 + b3*c3*z1*z2 + a1*b1*b2*z3 + a2*b1*b2*z3 + a3*b1*b2*z3 + a1*b2*b3*z3 + b1*b2*c1*z3 + a2*b1*d1*z3 + a3*b1*b2*d1*z3 + a3*b2*b3*d1*z3 + b2*c1*d1*z3 + b2*b3*c1*d1*z3 + c2*d1*z3 + b2*c2*d1*z3 + b1*b2*c2*d1*z3 + b2*c3*d1*z3 + b1*b2*c3*d1*z3 + a2*b1*d2*z3 + b1*c1*d2*z3 + b2*c1*d2*z3 + b1*b2*c1*d2*z3 + b1*b3*c1*d2*z3 + b2*b3*c1*d2*z3 + b1*c2*d2*z3 + b1*b3*c2*d2*z3 + b1*c3*d2*z3 + b1*b3*c3*d2*z3 + b2*c1*d3*z3 + b2*x1*z3 + a1*b2*x1*z3 + a2*b2*x1*z3 + a3*b2*x1*z3 + b1*b2*x1*z3 + b2*b3*x1*z3 + b2*c1*x1*z3 + b2*b3*c1*x1*z3 + b2*b3*c2*x1*z3 + b2*d1*x1*z3 + d2*x1*z3 + b3*d2*x1*z3 + b1*x2*z3 + a1*b1*x2*z3 + a1*b2*x2*z3 + b1*b2*x2*z3 + b1*c1*x2*z3 + b1*b2*c1*x2*z3 + b3*d1*x2*z3 + c1*d1*x2*z3 + c1*d2*x2*z3 + a2*b1*x3*z3 + b1*b2*x3*z3 + b1*b2*c2*x3*z3 + c2*d1*x3*z3 + a1*b2*y1*z3 + a2*b2*y1*z3 + a3*b2*y1*z3 + b2*c1*y1*z3 + b2*b3*c1*y1*z3 + b2*b3*c2*y1*z3 + b2*d1*y1*z3 + b3*d2*y1*z3 + a1*b1*y2*z3 + a1*b2*y2*z3 + b1*c1*y2*z3 + b1*b2*c1*y2*z3 + b3*d1*y2*z3 + c1*d1*y2*z3 + c1*d2*y2*z3 + a2*b1*y3*z3 + b1*b2*c2*y3*z3 + c2*d1*y3*z3 + a2*b1*z1*z3 + a2*b2*z1*z3 + a2*b3*z1*z3 + b2*c2*z1*z3 + b1*b3*c2*z1*z3 + b2*b3*c2*z1*z3 + b2*c3*z1*z3 + d2*z1*z3 + a3*b1*z2*z3;
end;
#####################################################################
#####################################################################
#Space Group No. 137 ( P4_2/nmc)
#####################################################################
Aiin137:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Acpin137:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Amin137:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Bdeltain137:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bcxyin137:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*(1 + b2)*(b1 + d1) + b2*x1 + (a2 + b2*c1)*(x1 + y1);
end;
#####################################################################
Bczin137:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*b2 + a2*c1 + a2*d1 + b2*z1;
end;
#####################################################################
CGAPin137:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return a2*b1*b3 + a2*a3*b1*b3 + a2*b1*b2*b3 + a2*a3*b1*b2*b3 + a2*a3*b1*c1 + a2*b3*c1 + a2*a3*b1*b3*c1 + a3*b1*b2*b3*c1 + a2*a3*b1*b2*b3*c1 + a2*a3*b1*c2 + a2*b1*b3*c2 + a3*b1*b3*c2 + a2*a3*b1*b3*c2 + a2*b1*b2*b3*c2 + a2*a3*b1*b2*b3*c2 + a3*c1*c2 + a3*b3*c1*c2 + b1*b3*c1*c2 + a2*b1*b3*c1*c2 + b2*b3*c1*c2 + b1*b2*b3*c1*c2 + a2*a3*b2*d1 + a3*b1*b2*d1 + a2*a3*b1*b2*d1 + a2*b3*d1 + a2*b1*b3*d1 + a2*a3*b1*b3*d1 + a2*b2*b3*d1 + a3*b1*b2*b3*d1 + a2*a3*b1*b2*b3*d1 + a2*a3*b1*c1*d1 + a2*a3*b2*c1*d1 + a2*a3*b1*b2*c1*d1 + a2*b3*c1*d1 + a2*a3*b3*c1*d1 + a2*b1*b3*c1*d1 + b2*b3*c1*d1 + a2*b2*b3*c1*d1 + a3*b2*b3*c1*d1 + a2*a3*b2*b3*c1*d1 + b1*b2*b3*c1*d1 + a2*b1*b2*b3*c1*d1 + a3*b1*b2*b3*c1*d1 + a2*a3*b1*c2*d1 + a2*a3*b2*c2*d1 + a2*a3*b1*b2*c2*d1 + a2*b3*c2*d1 + a2*a3*b3*c2*d1 + a2*a3*b2*b3*c2*d1 + a2*b1*b2*b3*c2*d1 + a3*b1*c1*c2*d1 + a3*b2*c1*c2*d1 + a2*b3*c1*c2*d1 + b2*b3*c1*c2*d1 + b1*b2*b3*c1*c2*d1 + a2*a3*b1*b2*d2 + a2*b1*b3*d2 + a3*b1*b3*d2 + a3*b1*b2*b3*d2 + a2*a3*b1*b2*b3*d2 + a2*a3*c1*d2 + a3*b1*c1*d2 + a3*b2*c1*d2 + a2*a3*b2*c1*d2 + a2*a3*b3*c1*d2 + a2*b1*b3*c1*d2 + b2*b3*c1*d2 + a3*b2*b3*c1*d2 + a2*a3*b2*b3*c1*d2 + b1*b2*b3*c1*d2 + a3*b1*c2*d2 + a3*b1*b2*c2*d2 + a2*b1*b3*c2*d2 + a3*b1*c1*c2*d2 + a3*b2*c1*c2*d2 + b2*b3*c1*c2*d2 + a3*d1*d2 + a3*b1*d1*d2 + a2*a3*b1*d1*d2 + a3*b2*d1*d2 + a2*a3*b2*d1*d2 + a3*b1*b2*d1*d2 + a2*a3*b1*b2*d1*d2 + a3*b3*d1*d2 + a2*a3*b3*d1*d2 + a2*b1*b3*d1*d2 + a2*b2*b3*d1*d2 + a2*b1*b2*b3*d1*d2 + a3*c1*d1*d2 + a3*b1*b2*c1*d1*d2 + a3*b3*c1*d1*d2 + b1*b3*c1*d1*d2 + a2*b1*b3*c1*d1*d2 + a2*b2*b3*c1*d1*d2 + a3*b2*b3*c1*d1*d2 + b1*b2*b3*c1*d1*d2 + a2*b1*b2*b3*c1*d1*d2 + a3*b1*b2*b3*c1*d1*d2 + a3*b1*c2*d1*d2 + a2*b1*b3*c2*d1*d2 + b2*b3*c2*d1*d2 + a2*b2*b3*c2*d1*d2 + b1*b2*b3*c2*d1*d2 + a2*b1*b2*b3*c2*d1*d2 + b1*b3*c1*c2*d1*d2 + a2*a3*b2*x1 + a3*b1*b2*x1 + a2*a3*b1*b2*x1 + a2*b1*b3*x1 + a2*b2*b3*x1 + b1*b2*b3*x1 + a3*b1*b2*c1*x1 + a2*a3*b1*b2*c1*x1 + a2*a3*b1*b3*c1*x1 + a2*b2*b3*c1*x1 + b1*b2*b3*c1*x1 + a3*c2*x1 + a3*b1*b2*c2*x1 + a2*a3*b1*b2*c2*x1 + a2*a3*b1*b3*c2*x1 + a2*b2*b3*c2*x1 + a3*b1*b2*b3*c2*x1 + a3*c1*c2*x1 + a3*b1*b2*c1*c2*x1 + a3*b1*b2*b3*c1*c2*x1 + a2*a3*d1*x1 + a2*a3*b1*d1*x1 + a3*b2*d1*x1 + a2*a3*b2*d1*x1 + a3*b1*b2*d1*x1 + a2*a3*b3*d1*x1 + a2*b1*b3*d1*x1 + a2*a3*b1*b3*d1*x1 + b2*b3*d1*x1 + a2*a3*b2*b3*d1*x1 + a2*b1*b2*b3*d1*x1 + a3*b1*b2*b3*d1*x1 + a2*a3*c1*d1*x1 + a2*a3*b1*c1*d1*x1 + a3*b2*c1*d1*x1 + a2*a3*b2*c1*d1*x1 + a3*b1*b2*c1*d1*x1 + a2*b3*c1*d1*x1 + a2*a3*b3*c1*d1*x1 + a2*b1*b3*c1*d1*x1 + b2*b3*c1*d1*x1 + a2*b2*b3*c1*d1*x1 + a3*b1*b2*b3*c1*d1*x1 + a2*a3*c2*d1*x1 + a2*a3*b1*c2*d1*x1 + a2*a3*b2*c2*d1*x1 + a3*b1*b2*c2*d1*x1 + a2*b3*c2*d1*x1 + a2*a3*b3*c2*d1*x1 + a2*b1*b3*c2*d1*x1 + b2*b3*c2*d1*x1 + a2*b2*b3*c2*d1*x1 + a3*b2*b3*c2*d1*x1 + b1*b2*b3*c2*d1*x1 + a3*b1*b2*c1*c2*d1*x1 + b2*b3*c1*c2*d1*x1 + a3*b2*b3*c1*c2*d1*x1 + b1*b2*b3*c1*c2*d1*x1 + a3*d2*x1 + a2*a3*d2*x1 + a2*a3*b1*d2*x1 + a3*b2*d2*x1 + a2*a3*b1*b2*d2*x1 + a2*b3*d2*x1 + a3*b3*d2*x1 + b1*b3*d2*x1 + a3*b1*b3*d2*x1 + a2*a3*b1*b3*d2*x1 + a3*b2*b3*d2*x1 + a3*b1*b2*b3*d2*x1 + a3*c1*d2*x1 + a3*b2*c1*d2*x1 + a2*b3*c1*d2*x1 + b1*b3*c1*d2*x1 + a2*b1*b2*b3*c1*d2*x1 + a3*b1*b2*b3*c1*d2*x1 + a3*c2*d2*x1 + a2*b3*c2*d2*x1 + b1*b3*c2*d2*x1 + b1*b2*b3*c2*d2*x1 + a2*b1*b2*b3*c2*d2*x1 + b2*b3*c1*c2*d2*x1 + b1*b2*b3*c1*c2*d2*x1 + a3*d1*d2*x1 + a3*b1*d1*d2*x1 + a3*b2*d1*d2*x1 + a2*b3*d1*d2*x1 + a3*b3*d1*d2*x1 + b1*b3*d1*d2*x1 + a2*b1*b3*d1*d2*x1 + b2*b3*d1*d2*x1 + a2*b2*b3*d1*d2*x1 + b1*b2*b3*d1*d2*x1 + a3*c1*d1*d2*x1 + b1*b3*c1*d1*d2*x1 + b2*b3*c1*d1*d2*x1 + b1*b2*b3*c1*d1*d2*x1 + b1*b3*c2*d1*d2*x1 + b2*b3*c2*d1*d2*x1 + b3*c1*c2*d1*d2*x1 + a2*b1*b3*x2 + b1*b2*b3*x2 + a2*b1*b2*b3*x2 + a3*b1*b2*b3*x2 + a3*b2*c1*x2 + a2*a3*b1*b2*c1*x2 + a2*b1*b3*c1*x2 + a2*a3*b1*b3*c1*x2 + a2*b2*b3*c1*x2 + a3*b2*b3*c1*x2 + a2*a3*b2*b3*c1*x2 + a3*b1*b2*b3*c1*x2 + a3*b1*b2*c2*x2 + a2*a3*b1*b2*c2*x2 + a2*a3*b1*b3*c2*x2 + a2*b1*b2*b3*c2*x2 + a3*b1*b2*b3*c2*x2 + a2*b2*b3*c1*c2*x2 + b1*b2*b3*c1*c2*x2 + a2*a3*d1*x2 + a2*a3*b1*d1*x2 + a3*b2*d1*x2 + a2*a3*b2*d1*x2 + a3*b1*b2*d1*x2 + a2*a3*b1*b2*d1*x2 + a2*a3*b3*d1*x2 + b1*b3*d1*x2 + a2*b1*b3*d1*x2 + a2*a3*b1*b3*d1*x2 + a3*b2*b3*d1*x2 + a2*a3*b2*b3*d1*x2 + a3*b1*b2*b3*d1*x2 + a2*a3*c1*d1*x2 + a2*a3*b1*c1*d1*x2 + a3*b2*c1*d1*x2 + a2*a3*b2*c1*d1*x2 + a2*a3*b3*c1*d1*x2 + b1*b3*c1*d1*x2 + a2*b1*b3*c1*d1*x2 + b2*b3*c1*d1*x2 + a2*b2*b3*c1*d1*x2 + a2*b1*b2*b3*c1*d1*x2 + a3*b1*b2*b3*c1*d1*x2 + a2*a3*c2*d1*x2 + a2*a3*b1*c2*d1*x2 + a2*a3*b2*c2*d1*x2 + a3*b1*b2*c2*d1*x2 + a2*b3*c2*d1*x2 + a2*a3*b3*c2*d1*x2 + a2*b1*b3*c2*d1*x2 + a2*b2*b3*c2*d1*x2 + a3*b2*b3*c2*d1*x2 + b1*b2*b3*c2*d1*x2 + a2*b1*b2*b3*c2*d1*x2 + a3*b1*d2*x2 + a2*a3*b1*b2*d2*x2 + b1*b3*d2*x2 + a2*b1*b3*d2*x2 + a2*a3*b1*b3*d2*x2 + a3*b1*b2*b3*d2*x2 + a3*c1*d2*x2 + a2*a3*c1*d2*x2 + a3*b1*c1*d2*x2 + a2*a3*b2*c1*d2*x2 + b3*c1*d2*x2 + a2*a3*b3*c1*d2*x2 + b1*b3*c1*d2*x2 + b2*b3*c1*d2*x2 + a2*b2*b3*c1*d2*x2 + a3*b2*b3*c1*d2*x2 + b1*b2*b3*c1*d2*x2 + a2*b1*b2*b3*c1*d2*x2 + b1*b3*c2*d2*x2 + a2*b1*b3*c2*d2*x2 + b1*b2*b3*c2*d2*x2 + a2*b1*b2*b3*c2*d2*x2 + b3*c1*c2*d2*x2 + b1*b3*c1*c2*d2*x2 + b2*b3*c1*c2*d2*x2 + a2*b2*b3*c1*c2*d2*x2 + a2*a3*b1*d1*d2*x2 + a3*b1*b2*d1*d2*x2 + a2*b3*d1*d2*x2 + a2*b2*b3*d1*d2*x2 + a3*b2*c1*d1*d2*x2 + a3*b1*b2*c1*d1*d2*x2 + b3*c1*d1*d2*x2 + a2*b3*c1*d1*d2*x2 + a3*b3*c1*d1*d2*x2 + b1*b3*c1*d1*d2*x2 + a2*b1*b3*c1*d1*d2*x2 + a3*b1*b3*c1*d1*d2*x2 + b2*b3*c1*d1*d2*x2 + a2*b2*b3*c1*d1*d2*x2 + a2*b1*b3*c2*d1*d2*x2 + b1*b2*b3*c2*d1*d2*x2 + b3*c1*c2*d1*d2*x2 + b1*b3*c1*c2*d1*d2*x2 + b2*b3*c1*c2*d1*d2*x2 + b1*b2*b3*c1*c2*d1*d2*x2 + a3*c1*x1*x2 + b3*c1*x1*x2 + a3*b3*c1*x1*x2 + a3*c1*c2*x1*x2 + a3*b1*c1*c2*x1*x2 + a3*b2*c1*c2*x1*x2 + b3*c1*c2*x1*x2 + a3*b3*c1*c2*x1*x2 + b3*c1*d1*x1*x2 + a2*b3*c1*d1*x1*x2 + b1*b3*c1*d1*x1*x2 + b2*b3*c1*d1*x1*x2 + a3*b1*c1*d2*x1*x2 + a3*b2*c1*d2*x1*x2 + b3*c1*d2*x1*x2 + a3*b3*c1*d2*x1*x2 + b1*b3*c1*d2*x1*x2 + b2*b3*c1*d2*x1*x2 + b3*c1*c2*d2*x1*x2 + b1*b3*c1*c2*d2*x1*x2 + b2*b3*c1*c2*d2*x1*x2 + a2*b1*x3 + a2*a3*b1*x3 + b1*b2*x3 + a3*b1*b2*x3 + a2*a3*b1*b3*x3 + a2*b1*b2*b3*x3 + a2*b1*c1*x3 + a3*b2*c1*x3 + a2*b1*b2*c1*x3 + a2*a3*b1*b2*c1*x3 + a2*b1*b3*c1*x3 + a2*a3*b1*b3*c1*x3 + a2*b2*b3*c1*x3 + a3*b2*b3*c1*x3 + a2*a3*b2*b3*c1*x3 + a3*b1*b2*b3*c1*x3 + a2*b1*c2*x3 + b1*b2*c2*x3 + a2*b1*b2*c2*x3 + a3*b1*b2*c2*x3 + a2*a3*b1*b2*c2*x3 + a2*b1*b3*c2*x3 + a2*a3*b1*b3*c2*x3 + a3*b2*c1*c2*x3 + a3*b1*b2*c1*c2*x3 + a3*b2*b3*c1*c2*x3 + b1*b2*b3*c1*c2*x3 + a3*b1*b2*b3*c1*c2*x3 + a2*d1*x3 + a2*a3*b1*d1*x3 + a2*b2*d1*x3 + a2*a3*b2*d1*x3 + a2*b1*b2*d1*x3 + a3*b1*b2*d1*x3 + a2*a3*b1*b2*d1*x3 + a2*b3*d1*x3 + a2*b1*b3*d1*x3 + a2*a3*b1*b3*d1*x3 + a2*a3*b2*b3*d1*x3 + a3*b1*b2*b3*d1*x3 + a2*a3*c1*d1*x3 + a2*b1*c1*d1*x3 + a2*a3*b1*c1*d1*x3 + b2*c1*d1*x3 + a2*b2*c1*d1*x3 + a3*b2*c1*d1*x3 + a2*a3*b2*c1*d1*x3 + a2*b3*c1*d1*x3 + a2*a3*b3*c1*d1*x3 + a3*b1*b2*b3*c1*d1*x3 + a2*a3*c2*d1*x3 + a2*b1*c2*d1*x3 + a2*a3*b1*c2*d1*x3 + a2*b2*c2*d1*x3 + a2*a3*b2*c2*d1*x3 + a2*b3*c2*d1*x3 + a2*a3*b3*c2*d1*x3 + b1*b2*b3*c2*d1*x3 + a3*b1*b2*b3*c2*d1*x3 + b2*c1*c2*d1*x3 + b1*b2*c1*c2*d1*x3 + a3*b1*b2*c1*c2*d1*x3 + b2*b3*c1*c2*d1*x3 + a3*b2*b3*c1*c2*d1*x3 + a3*b1*d2*x3 + a2*a3*b1*b2*d2*x3 + a2*b1*b3*d2*x3 + a2*a3*b1*b3*d2*x3 + a3*b1*b2*b3*d2*x3 + a3*c1*d2*x3 + a2*a3*c1*d2*x3 + a3*b1*c1*d2*x3 + a2*a3*b2*c1*d2*x3 + b3*c1*d2*x3 + a2*a3*b3*c1*d2*x3 + a2*b2*b3*c1*d2*x3 + a3*b2*b3*c1*d2*x3 + a3*b1*c2*d2*x3 + b1*b3*c2*d2*x3 + a3*b1*b3*c2*d2*x3 + a3*b1*b2*b3*c2*d2*x3 + a3*c1*c2*d2*x3 + b3*c1*c2*d2*x3 + b2*b3*c1*c2*d2*x3 + a3*b2*b3*c1*c2*d2*x3 + a2*a3*b1*d1*d2*x3 + a3*b1*b2*d1*d2*x3 + a2*b3*d1*d2*x3 + a2*b2*b3*d1*d2*x3 + a3*b2*c1*d1*d2*x3 + a3*b1*b2*c1*d1*d2*x3 + b3*c1*d1*d2*x3 + a3*b3*c1*d1*d2*x3 + b1*b3*c1*d1*d2*x3 + a3*b1*b3*c1*d1*d2*x3 + b2*b3*c1*d1*d2*x3 + b1*b2*b3*c1*d1*d2*x3 + a3*b2*c2*d1*d2*x3 + a3*b1*b2*c2*d1*d2*x3 + b3*c2*d1*d2*x3 + a3*b3*c2*d1*d2*x3 + b2*b3*c2*d1*d2*x3 + a2*c1*x1*x3 + a2*c2*x1*x3 + b2*c2*x1*x3 + b2*c1*c2*x1*x3 + a2*b1*c1*d1*x1*x3 + a2*b2*c1*d1*x1*x3 + a2*b3*c1*d1*x1*x3 + c2*d1*x1*x3 + a2*b1*c2*d1*x1*x3 + b2*c2*d1*x1*x3 + a2*b2*c2*d1*x1*x3 + b1*b2*c2*d1*x1*x3 + a2*b3*c2*d1*x1*x3 + b2*b3*c2*d1*x1*x3 + c1*c2*d1*x1*x3 + b2*c1*c2*d1*x1*x3 + b1*b2*c1*c2*d1*x1*x3 + b2*b3*c1*c2*d1*x1*x3 + a3*b1*c1*d2*x1*x3 + a3*b2*c1*d2*x1*x3 + a3*b3*c1*d2*x1*x3 + a3*b1*c2*d2*x1*x3 + a3*b2*c2*d2*x1*x3 + a3*b3*c2*d2*x1*x3 + a2*b1*c2*x2*x3 + a3*b1*c2*x2*x3 + b1*b3*c2*x2*x3 + c1*c2*x2*x3 + a2*c1*c2*x2*x3 + a3*b1*c1*c2*x2*x3 + a2*b2*c1*c2*x2*x3 + a2*b3*c1*c2*x2*x3 + b2*b3*c1*c2*x2*x3 + a3*b1*c2*d1*x2*x3 + a2*b2*c2*d1*x2*x3 + b3*c2*d1*x2*x3 + a2*b3*c2*d1*x2*x3 + b2*b3*c2*d1*x2*x3 + b2*c1*c2*d1*x2*x3 + b1*b2*c1*c2*d1*x2*x3 + b3*c1*c2*d1*x2*x3 + b1*b3*c1*c2*d1*x2*x3 + a3*b1*c2*d2*x2*x3 + a2*a3*b2*y1 + a2*a3*b2*b3*y1 + a3*b1*b2*c1*y1 + a2*a3*b1*b2*c1*y1 + a2*a3*b1*b3*c1*y1 + b2*b3*c1*y1 + a3*b2*b3*c1*y1 + b1*b2*b3*c1*y1 + a2*b1*b2*b3*c1*y1 + a3*b1*b2*b3*c1*y1 + a2*a3*b1*b2*c2*y1 + a2*a3*b1*b3*c2*y1 + a2*b1*b2*b3*c2*y1 + a3*c1*c2*y1 + a3*b1*b2*c1*c2*y1 + b2*b3*c1*c2*y1 + b1*b2*b3*c1*c2*y1 + a3*b1*b2*b3*c1*c2*y1 + a2*a3*d1*y1 + a2*a3*b1*d1*y1 + a2*a3*b2*d1*y1 + a2*b3*d1*y1 + a2*a3*b3*d1*y1 + a2*b1*b3*d1*y1 + a2*a3*b1*b3*d1*y1 + a2*a3*b2*b3*d1*y1 + a2*a3*c1*d1*y1 + a2*a3*b1*c1*d1*y1 + a2*a3*b2*c1*d1*y1 + a2*b3*c1*d1*y1 + a2*a3*b3*c1*d1*y1 + a2*b1*b3*c1*d1*y1 + b2*b3*c1*d1*y1 + a2*b2*b3*c1*d1*y1 + a3*b2*b3*c1*d1*y1 + a3*b1*b2*b3*c1*d1*y1 + a2*a3*c2*d1*y1 + a2*a3*b1*c2*d1*y1 + a2*a3*b2*c2*d1*y1 + a2*b3*c2*d1*y1 + a2*a3*b3*c2*d1*y1 + a2*b1*b3*c2*d1*y1 + a2*b2*b3*c2*d1*y1 + a3*b1*b2*c1*c2*d1*y1 + a3*b2*b3*c1*c2*d1*y1 + b1*b2*b3*c1*c2*d1*y1 + a2*a3*b2*d2*y1 + a2*a3*b1*b2*d2*y1 + a3*b3*d2*y1 + a2*a3*b3*d2*y1 + a3*b1*b3*d2*y1 + a2*a3*b1*b3*d2*y1 + a3*b2*b3*d2*y1 + a3*c1*d2*y1 + a3*b2*c1*d2*y1 + a3*b1*b2*c1*d2*y1 + a2*b3*c1*d2*y1 + b1*b3*c1*d2*y1 + a2*b1*b3*c1*d2*y1 + b2*b3*c1*d2*y1 + a2*b2*b3*c1*d2*y1 + a3*b2*b3*c1*d2*y1 + a2*b1*b2*b3*c1*d2*y1 + a3*b1*b2*b3*c1*d2*y1 + a3*c2*d2*y1 + a2*b3*c2*d2*y1 + b1*b3*c2*d2*y1 + a2*b1*b3*c2*d2*y1 + b2*b3*c2*d2*y1 + a2*b2*b3*c2*d2*y1 + a2*b1*b2*b3*c2*d2*y1 + a3*b1*d1*d2*y1 + a3*b2*d1*d2*y1 + a3*b3*d1*d2*y1 + b3*c1*d1*d2*y1 + b1*b3*c1*d1*d2*y1 + b2*b3*c1*d1*d2*y1 + b3*c2*d1*d2*y1 + b1*b3*c2*d1*d2*y1 + b2*b3*c2*d1*d2*y1 + a3*b2*x1*y1 + a2*b3*c1*x1*y1 + a3*c2*x1*y1 + a3*b1*c2*x1*y1 + a3*b2*c2*x1*y1 + b3*c2*x1*y1 + a3*b3*c2*x1*y1 + b1*b3*c2*x1*y1 + b1*b3*c1*c2*x1*y1 + b2*b3*c1*c2*x1*y1 + a2*b3*d1*x1*y1 + b2*b3*c1*d1*x1*y1 + a3*b1*d2*x1*y1 + a3*b2*d2*x1*y1 + a3*b3*d2*x1*y1 + b3*c1*d2*x1*y1 + b1*b3*c1*d2*x1*y1 + b2*b3*c1*d2*x1*y1 + b3*c2*d2*x1*y1 + b1*b3*c2*d2*x1*y1 + b2*b3*c2*d2*x1*y1 + a3*x2*y1 + b3*x2*y1 + a2*b3*x2*y1 + a3*b3*x2*y1 + a3*c1*x2*y1 + b3*c1*x2*y1 + a2*b3*c1*x2*y1 + a3*b3*c1*x2*y1 + a3*c2*x2*y1 + a3*b1*c2*x2*y1 + a3*b2*c2*x2*y1 + b3*c2*x2*y1 + a3*b3*c2*x2*y1 + b1*b3*c2*x2*y1 + b2*b3*c2*x2*y1 + a3*c1*c2*x2*y1 + a3*b1*c1*c2*x2*y1 + a3*b2*c1*c2*x2*y1 + b3*c1*c2*x2*y1 + a3*b3*c1*c2*x2*y1 + b1*b3*c1*c2*x2*y1 + b2*b3*c1*c2*x2*y1 + a2*b3*d1*x2*y1 + a2*b3*c1*d1*x2*y1 + a3*b1*d2*x2*y1 + a3*b2*d2*x2*y1 + a3*b3*d2*x2*y1 + a3*b1*c1*d2*x2*y1 + a3*b2*c1*d2*x2*y1 + a3*b3*c1*d2*x2*y1 + b3*c2*d2*x2*y1 + b1*b3*c2*d2*x2*y1 + b2*b3*c2*d2*x2*y1 + b3*c1*c2*d2*x2*y1 + b1*b3*c1*c2*d2*x2*y1 + b2*b3*c1*c2*d2*x2*y1 + a2*b1*x3*y1 + a2*b2*x3*y1 + a2*b3*x3*y1 + a2*b1*c1*x3*y1 + a2*b2*c1*x3*y1 + a2*b3*c1*x3*y1 + a2*b1*c2*x3*y1 + a2*b2*c2*x3*y1 + a2*b3*c2*x3*y1 + b2*c1*c2*x3*y1 + b1*b2*c1*c2*x3*y1 + b2*b3*c1*c2*x3*y1 + a2*b1*d1*x3*y1 + a2*b2*d1*x3*y1 + a2*b3*d1*x3*y1 + a2*b1*c1*d1*x3*y1 + a2*b2*c1*d1*x3*y1 + a2*b3*c1*d1*x3*y1 + a2*b1*c2*d1*x3*y1 + a2*b2*c2*d1*x3*y1 + a2*b3*c2*d1*x3*y1 + b2*c1*c2*d1*x3*y1 + b1*b2*c1*c2*d1*x3*y1 + b2*b3*c1*c2*d1*x3*y1 + a3*b1*d2*x3*y1 + a3*b2*d2*x3*y1 + a3*b3*d2*x3*y1 + a3*b1*c1*d2*x3*y1 + a3*b2*c1*d2*x3*y1 + a3*b3*c1*d2*x3*y1 + a3*b1*c2*d2*x3*y1 + a3*b2*c2*d2*x3*y1 + a3*b3*c2*d2*x3*y1 + a3*b1*b2*c1*y2 + a2*a3*b1*b2*c1*y2 + a2*b1*b3*c1*y2 + a2*a3*b1*b3*c1*y2 + a2*a3*b2*b3*c1*y2 + a2*a3*b1*b2*c2*y2 + a2*a3*b1*b3*c2*y2 + a2*b1*b2*b3*c2*y2 + a2*b2*b3*c1*c2*y2 + b1*b2*b3*c1*c2*y2 + a2*a3*d1*y2 + a2*a3*b1*d1*y2 + a2*a3*b2*d1*y2 + a3*b1*b2*d1*y2 + a2*a3*b1*b2*d1*y2 + a2*b3*d1*y2 + a2*a3*b3*d1*y2 + a2*b1*b3*d1*y2 + a2*a3*b1*b3*d1*y2 + a2*a3*b2*b3*d1*y2 + a2*a3*c1*d1*y2 + a2*a3*b1*c1*d1*y2 + a3*b2*c1*d1*y2 + a2*a3*b2*c1*d1*y2 + a3*b1*b2*c1*d1*y2 + a2*a3*b3*c1*d1*y2 + b1*b3*c1*d1*y2 + a2*b1*b3*c1*d1*y2 + a2*b2*b3*c1*d1*y2 + a3*b2*b3*c1*d1*y2 + a2*b1*b2*b3*c1*d1*y2 + a3*b1*b2*b3*c1*d1*y2 + a2*a3*c2*d1*y2 + a2*a3*b1*c2*d1*y2 + a2*a3*b2*c2*d1*y2 + a2*b3*c2*d1*y2 + a2*a3*b3*c2*d1*y2 + a2*b1*b3*c2*d1*y2 + a2*b2*b3*c2*d1*y2 + b1*b2*b3*c2*d1*y2 + a2*b1*b2*b3*c2*d1*y2 + a2*a3*b1*b2*d2*y2 + a3*b1*b3*d2*y2 + a2*a3*b1*b3*d2*y2 + a2*a3*c1*d2*y2 + a3*b1*c1*d2*y2 + a2*a3*b2*c1*d2*y2 + a2*a3*b3*c1*d2*y2 + a2*b1*b2*b3*c1*d2*y2 + b1*b3*c2*d2*y2 + a2*b1*b3*c2*d2*y2 + a2*b1*b2*b3*c2*d2*y2 + b1*b3*c1*c2*d2*y2 + a2*b2*b3*c1*c2*d2*y2 + a2*a3*b1*d1*d2*y2 + a3*b2*d1*d2*y2 + a3*b3*d1*d2*y2 + a3*b2*c1*d1*d2*y2 + a3*b1*b2*c1*d1*d2*y2 + a2*b3*c1*d1*d2*y2 + a3*b3*c1*d1*d2*y2 + a2*b1*b3*c1*d1*d2*y2 + a3*b1*b3*c1*d1*d2*y2 + a2*b2*b3*c1*d1*d2*y2 + b3*c2*d1*d2*y2 + a2*b1*b3*c2*d1*d2*y2 + b2*b3*c2*d1*d2*y2 + b3*c1*c2*d1*d2*y2 + b1*b3*c1*c2*d1*d2*y2 + b2*b3*c1*c2*d1*d2*y2 + b1*b2*b3*c1*c2*d1*d2*y2 + a3*b1*x1*y2 + a3*b2*x1*y2 + a3*b1*c1*x1*y2 + a3*b2*c1*x1*y2 + a3*c2*x1*y2 + a3*b1*c2*x1*y2 + a3*b2*c2*x1*y2 + b3*c2*x1*y2 + a3*b3*c2*x1*y2 + a3*c1*c2*x1*y2 + a3*b1*c1*c2*x1*y2 + a3*b2*c1*c2*x1*y2 + b3*c1*c2*x1*y2 + a3*b3*c1*c2*x1*y2 + b3*d1*x1*y2 + a2*b3*d1*x1*y2 + b1*b3*d1*x1*y2 + b3*c1*d1*x1*y2 + a2*b3*c1*d1*x1*y2 + b1*b3*c1*d1*x1*y2 + a3*b1*d2*x1*y2 + a3*b2*d2*x1*y2 + a3*b3*d2*x1*y2 + a3*b1*c1*d2*x1*y2 + a3*b2*c1*d2*x1*y2 + a3*b3*c1*d2*x1*y2 + b3*c2*d2*x1*y2 + b1*b3*c2*d2*x1*y2 + b2*b3*c2*d2*x1*y2 + b3*c1*c2*d2*x1*y2 + b1*b3*c1*c2*d2*x1*y2 + b2*b3*c1*c2*d2*x1*y2 + a3*b1*c1*x2*y2 + a2*b3*c1*x2*y2 + a3*b1*c2*x2*y2 + b1*b3*c2*x2*y2 + b2*b3*c1*c2*x2*y2 + a3*b1*d1*x2*y2 + a2*b3*d1*x2*y2 + b2*b3*c1*d1*x2*y2 + b1*b3*c2*d1*x2*y2 + a3*b1*d2*x2*y2 + b3*c1*d2*x2*y2 + b1*b3*c1*d2*x2*y2 + b2*b3*c1*d2*x2*y2 + b1*b3*c2*d2*x2*y2 + a2*b1*x3*y2 + a2*c1*x3*y2 + a3*b1*c1*x3*y2 + a2*b2*c1*x3*y2 + a2*b3*c1*x3*y2 + a2*b1*c2*x3*y2 + a2*c1*c2*x3*y2 + a3*b1*c1*c2*x3*y2 + a2*b2*c1*c2*x3*y2 + a2*b3*c1*c2*x3*y2 + a3*b1*d1*x3*y2 + a2*b2*d1*x3*y2 + a2*b3*d1*x3*y2 + b2*c1*d1*x3*y2 + b1*b2*c1*d1*x3*y2 + b3*c1*d1*x3*y2 + b1*b3*c1*d1*x3*y2 + a3*b1*c2*d1*x3*y2 + a2*b2*c2*d1*x3*y2 + a2*b3*c2*d1*x3*y2 + b2*c1*c2*d1*x3*y2 + b1*b2*c1*c2*d1*x3*y2 + b3*c1*c2*d1*x3*y2 + b1*b3*c1*c2*d1*x3*y2 + a3*b1*d2*x3*y2 + a3*b1*c2*d2*x3*y2 + a3*b1*c1*y1*y2 + a3*b2*c1*y1*y2 + a2*b3*c1*y1*y2 + b1*b3*c1*y1*y2 + a3*c1*c2*y1*y2 + a3*b1*c1*c2*y1*y2 + a3*b2*c1*c2*y1*y2 + b3*c1*c2*y1*y2 + a3*b3*c1*c2*y1*y2 + b1*b3*c1*c2*y1*y2 + b2*b3*c1*c2*y1*y2 + a2*b3*c1*d1*y1*y2 + b2*b3*c1*d1*y1*y2 + a3*b1*c1*d2*y1*y2 + a3*b2*c1*d2*y1*y2 + b3*c1*d2*y1*y2 + a3*b3*c1*d2*y1*y2 + b1*b3*c1*d2*y1*y2 + b2*b3*c1*d2*y1*y2 + b3*c1*c2*d2*y1*y2 + b1*b3*c1*c2*d2*y1*y2 + b2*b3*c1*c2*d2*y1*y2 + a2*a3*b1*y3 + a2*b1*b2*y3 + a2*a3*b1*b2*y3 + a2*b1*c1*y3 + a2*b1*b2*c1*y3 + a3*b1*b2*c1*y3 + a2*a3*b1*b2*c1*y3 + a2*a3*b1*b3*c1*y3 + a2*a3*b2*b3*c1*y3 + a2*b1*b2*b3*c1*y3 + a2*b1*c2*y3 + b1*b2*c2*y3 + a2*b1*b2*c2*y3 + a3*b1*b2*c2*y3 + a2*a3*b1*b2*c2*y3 + a2*a3*b1*b3*c2*y3 + b1*b2*b3*c2*y3 + a2*b1*b2*b3*c2*y3 + a3*b2*c1*c2*y3 + a3*b1*b2*c1*c2*y3 + a3*b2*b3*c1*c2*y3 + b1*b2*b3*c1*c2*y3 + a3*b1*b2*b3*c1*c2*y3 + a2*a3*d1*y3 + a2*b1*b2*d1*y3 + a3*b1*b2*d1*y3 + a2*a3*b1*b2*d1*y3 + a2*a3*b3*d1*y3 + a2*a3*b1*b3*d1*y3 + a2*b2*b3*d1*y3 + a2*a3*b2*b3*d1*y3 + a2*b1*b2*b3*d1*y3 + a2*c1*d1*y3 + a2*a3*c1*d1*y3 + a2*a3*b1*c1*d1*y3 + a2*b2*c1*d1*y3 + a3*b2*c1*d1*y3 + a2*a3*b2*c1*d1*y3 + b1*b2*c1*d1*y3 + a3*b1*b2*c1*d1*y3 + a2*b3*c1*d1*y3 + a2*a3*b3*c1*d1*y3 + a2*b1*b3*c1*d1*y3 + b2*b3*c1*d1*y3 + a2*b2*b3*c1*d1*y3 + a3*b2*b3*c1*d1*y3 + a3*b1*b2*b3*c1*d1*y3 + a2*c2*d1*y3 + a2*a3*c2*d1*y3 + a2*a3*b1*c2*d1*y3 + a2*b2*c2*d1*y3 + a2*a3*b2*c2*d1*y3 + a2*b3*c2*d1*y3 + a2*a3*b3*c2*d1*y3 + a2*b1*b3*c2*d1*y3 + a2*b2*b3*c2*d1*y3 + a3*b1*b2*b3*c2*d1*y3 + a3*b1*b2*c1*c2*d1*y3 + a3*b2*b3*c1*c2*d1*y3 + b1*b2*b3*c1*c2*d1*y3 + a2*b1*d2*y3 + a2*a3*b1*b2*d2*y3 + a3*b1*b3*d2*y3 + a2*a3*b1*b3*d2*y3 + a2*b1*b2*b3*d2*y3 + a2*a3*c1*d2*y3 + a2*b1*c1*d2*y3 + a3*b1*c1*d2*y3 + a2*a3*b2*c1*d2*y3 + a2*a3*b3*c1*d2*y3 + b1*b3*c1*d2*y3 + b2*b3*c1*d2*y3 + a2*b1*c2*d2*y3 + a3*b1*c2*d2*y3 + b1*b3*c2*d2*y3 + a3*b1*b3*c2*d2*y3 + b1*b2*b3*c2*d2*y3 + a3*b1*b2*b3*c2*d2*y3 + a3*c1*c2*d2*y3 + b1*b2*c1*c2*d2*y3 + a3*b2*b3*c1*c2*d2*y3 + a2*d1*d2*y3 + a2*a3*b1*d1*d2*y3 + a3*b2*d1*d2*y3 + a2*b3*d1*d2*y3 + a3*b3*d1*d2*y3 + a2*b1*b3*d1*d2*y3 + a2*b2*b3*d1*d2*y3 + a2*c1*d1*d2*y3 + a3*b2*c1*d1*d2*y3 + a3*b1*b2*c1*d1*d2*y3 + a3*b3*c1*d1*d2*y3 + a3*b1*b3*c1*d1*d2*y3 + a2*c2*d1*d2*y3 + a3*b2*c2*d1*d2*y3 + a3*b1*b2*c2*d1*d2*y3 + a3*b3*c2*d1*d2*y3 + b1*b2*b3*c2*d1*d2*y3 + b2*c1*c2*d1*d2*y3 + a2*x1*y3 + b2*x1*y3 + a2*c1*x1*y3 + b2*c1*x1*y3 + a2*c2*x1*y3 + b2*c2*x1*y3 + b2*c1*c2*x1*y3 + a2*b1*d1*x1*y3 + b2*d1*x1*y3 + a2*b2*d1*x1*y3 + b1*b2*d1*x1*y3 + a2*b3*d1*x1*y3 + b2*b3*d1*x1*y3 + a2*b1*c1*d1*x1*y3 + b2*c1*d1*x1*y3 + a2*b2*c1*d1*x1*y3 + b1*b2*c1*d1*x1*y3 + a2*b3*c1*d1*x1*y3 + b2*b3*c1*d1*x1*y3 + a2*b1*c2*d1*x1*y3 + b2*c2*d1*x1*y3 + a2*b2*c2*d1*x1*y3 + b1*b2*c2*d1*x1*y3 + a2*b3*c2*d1*x1*y3 + b2*b3*c2*d1*x1*y3 + c1*c2*d1*x1*y3 + b2*c1*c2*d1*x1*y3 + b1*b2*c1*c2*d1*x1*y3 + b2*b3*c1*c2*d1*x1*y3 + d2*x1*y3 + a3*b1*d2*x1*y3 + a3*b2*d2*x1*y3 + b3*d2*x1*y3 + a3*b3*d2*x1*y3 + b1*b3*d2*x1*y3 + b2*b3*d2*x1*y3 + c1*d2*x1*y3 + a3*b1*c1*d2*x1*y3 + a3*b2*c1*d2*x1*y3 + b3*c1*d2*x1*y3 + a3*b3*c1*d2*x1*y3 + b1*b3*c1*d2*x1*y3 + b2*b3*c1*d2*x1*y3 + c2*d2*x1*y3 + a3*b1*c2*d2*x1*y3 + a3*b2*c2*d2*x1*y3 + b3*c2*d2*x1*y3 + a3*b3*c2*d2*x1*y3 + b1*b3*c2*d2*x1*y3 + b2*b3*c2*d2*x1*y3 + a2*b1*x2*y3 + a3*b1*x2*y3 + c1*x2*y3 + a2*c1*x2*y3 + a3*b1*c1*x2*y3 + a2*b2*c1*x2*y3 + a2*b3*c1*x2*y3 + b1*b3*c1*x2*y3 + b2*b3*c1*x2*y3 + a2*b1*c2*x2*y3 + a3*b1*c2*x2*y3 + c1*c2*x2*y3 + a2*c1*c2*x2*y3 + a3*b1*c1*c2*x2*y3 + a2*b2*c1*c2*x2*y3 + a2*b3*c1*c2*x2*y3 + b1*b3*c1*c2*x2*y3 + b2*b3*c1*c2*x2*y3 + d1*x2*y3 + a3*b1*d1*x2*y3 + a2*b2*d1*x2*y3 + b3*d1*x2*y3 + a2*b3*d1*x2*y3 + b1*b3*d1*x2*y3 + b2*b3*d1*x2*y3 + c1*d1*x2*y3 + b2*c1*d1*x2*y3 + b1*b2*c1*d1*x2*y3 + b3*c1*d1*x2*y3 + b1*b3*c1*d1*x2*y3 + c2*d1*x2*y3 + a3*b1*c2*d1*x2*y3 + a2*b2*c2*d1*x2*y3 + b3*c2*d1*x2*y3 + a2*b3*c2*d1*x2*y3 + b1*b3*c2*d1*x2*y3 + b2*b3*c2*d1*x2*y3 + c1*c2*d1*x2*y3 + b2*c1*c2*d1*x2*y3 + b1*b2*c1*c2*d1*x2*y3 + b3*c1*c2*d1*x2*y3 + b1*b3*c1*c2*d1*x2*y3 + a3*b1*d2*x2*y3 + b1*b3*d2*x2*y3 + c1*d2*x2*y3 + a3*b1*c2*d2*x2*y3 + b1*b3*c2*d2*x2*y3 + c1*c2*d2*x2*y3 + a2*b1*x3*y3 + a2*c1*x3*y3 + a2*b2*c1*x3*y3 + a3*b2*c1*x3*y3 + a2*b3*c1*x3*y3 + b1*b3*c2*x3*y3 + c1*c2*x3*y3 + b2*b3*c1*c2*x3*y3 + a2*b2*d1*x3*y3 + a3*b2*d1*x3*y3 + a2*b3*d1*x3*y3 + b2*c1*d1*x3*y3 + b1*b2*c1*d1*x3*y3 + b2*b3*c1*d1*x3*y3 + b1*b3*c2*d1*x3*y3 + b3*c1*d2*x3*y3 + b1*b3*c1*d2*x3*y3 + b2*b3*c1*d2*x3*y3 + b1*b3*c2*d2*x3*y3 + a2*b1*c1*y1*y3 + b2*c1*y1*y3 + a2*b2*c1*y1*y3 + b1*b2*c1*y1*y3 + a2*b3*c1*y1*y3 + b2*b3*c1*y1*y3 + a2*b1*c2*y1*y3 + a2*b2*c2*y1*y3 + a2*b3*c2*y1*y3 + b2*c1*c2*y1*y3 + b1*b2*c1*c2*y1*y3 + b2*b3*c1*c2*y1*y3 + a2*b1*c1*d1*y1*y3 + b2*c1*d1*y1*y3 + a2*b2*c1*d1*y1*y3 + b1*b2*c1*d1*y1*y3 + a2*b3*c1*d1*y1*y3 + b2*b3*c1*d1*y1*y3 + a2*b1*c2*d1*y1*y3 + a2*b2*c2*d1*y1*y3 + a2*b3*c2*d1*y1*y3 + b2*c1*c2*d1*y1*y3 + b1*b2*c1*c2*d1*y1*y3 + b2*b3*c1*c2*d1*y1*y3 + a3*b1*c1*d2*y1*y3 + a3*b2*c1*d2*y1*y3 + b3*c1*d2*y1*y3 + a3*b3*c1*d2*y1*y3 + b1*b3*c1*d2*y1*y3 + b2*b3*c1*d2*y1*y3 + a3*b1*c2*d2*y1*y3 + a3*b2*c2*d2*y1*y3 + b3*c2*d2*y1*y3 + a3*b3*c2*d2*y1*y3 + b1*b3*c2*d2*y1*y3 + b2*b3*c2*d2*y1*y3 + a2*b1*c2*y2*y3 + a2*c1*c2*y2*y3 + a3*b1*c1*c2*y2*y3 + a2*b2*c1*c2*y2*y3 + a2*b3*c1*c2*y2*y3 + b1*b3*c1*c2*y2*y3 + a3*b1*c2*d1*y2*y3 + a2*b2*c2*d1*y2*y3 + a2*b3*c2*d1*y2*y3 + b1*b3*c2*d1*y2*y3 + c1*c2*d1*y2*y3 + b2*c1*c2*d1*y2*y3 + b1*b2*c1*c2*d1*y2*y3 + b3*c1*c2*d1*y2*y3 + b1*b3*c1*c2*d1*y2*y3 + a3*b1*c2*d2*y2*y3 + b1*b3*c2*d2*y2*y3 + c1*c2*d2*y2*y3 + a3*b1*b2*z1 + a2*b3*z1 + a2*b1*b3*z1 + a3*b2*b3*z1 + b2*b3*c2*z1 + b1*b2*b3*c2*z1 + a2*b3*d1*z1 + b2*b3*c1*d1*z1 + a3*d2*z1 + a3*b1*d2*z1 + a3*b2*d2*z1 + a3*b3*d2*z1 + b1*b3*c1*d2*z1 + b2*b3*c1*d2*z1 + b1*b3*c2*d2*z1 + b2*b3*c2*d2*z1 + a3*b1*b2*z2 + a2*b1*b3*z2 + b1*b2*b3*c2*z2 + a3*b1*d1*z2 + a2*b3*d1*z2 + b1*b3*c1*d1*z2 + b2*b3*c1*d1*z2 + b1*b3*c2*d1*z2 + a3*b1*d2*z2 + b1*b3*c1*d2*z2 + b2*b3*c1*d2*z2 + b1*b3*c2*d2*z2 + a3*x1*z2 + b3*x1*z2 + b3*c1*x1*z2 + b3*c2*x1*z2 + a3*y1*z2 + b3*c1*y1*z2 + b3*c2*y1*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 138 ( P4_2/ncm)
#####################################################################
Aiin138:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin138:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin138:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain138:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bmzin138:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*d1 + b2*c2*d1 + c2*z1;
end;
#####################################################################
Bcxyin138:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a2*b1 + a2*b1*b2 + a2*d1 + a2*b2*d1 + a2*x1 + b2*x1 + b2*c1*x1 + a2*y1 + b2*c1*y1;
end;
#####################################################################
Bpxyzin138:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return b1*b2*d1 + b1*b2*d2 + d2*x1 + d2*y1 + b2*z1 + d2*z1;
end;
#####################################################################
#####################################################################
#Space Group No. 139 ( I4/mmm)
#####################################################################
Aiin139:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin139:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin139:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyzin139:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain139:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bphiin139:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return b2*y1 + (a2 + b2*c1)*(x1 + y1) + (a2 + a2*b1 + a1*b2 + a2*b2 + b1*b2*c1)*(x1 + y1 + z1);
end;
#####################################################################
Bxyzin139:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return (x1 + y1)*z2 + b1*((x1 + y1)*(x2 + y2) + (x1 + x2 + y1 + y2)*z2);
end;
#####################################################################
CGAPin139:=function(g1,g2,g3)
local x1,y1,z1,x2,y2,z2,x3,y3,z3,a1,a2,a3,b1,b2,b3,c1,c2,c3,d1,d2,d3;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];x3:=g3[1];y3:=g3[2];z3:=g3[3];a1:=g1[4];a2:=g2[4];a3:=g3[4];b1:=g1[5];b2:=g2[5];b3:=g3[5];c1:=g1[6];c2:=g2[6];c3:=g3[6];d1:=g1[7];d2:=g2[7];d3:=g3[7];
return c2*d3*x1 + a1*a3*b1*x2 + a3*b1*c1*x2 + a3*d1*x2 + a3*b1*d1*x2 + b3*c1*d1*x2 + b3*c2*d1*x2 + b1*c3*d1*x2 + b3*c1*d2*x2 + 3*a1*d3*x2 + a1*c1*d3*x2 + b1*c1*d3*x2 + b2*c1*d3*x2 + b3*c1*d3*x2 + b1*c2*d3*x2 + c3*d1*x1*x2 + b1*c3*d1*x1*x2 + b3*d2*x1*x2 + d3*x1*x2 + b2*d3*x1*x2 + b3*d3*x1*x2 + c1*d3*x1*x2 + (a3*b1*x2*(1 + x2))/2 + (b1*c3*x2*(1 + x2))/2 + (b3*x1*x2*(1 + x2))/2 + (c3*x1*x2*(1 + x2))/2 + (b1*c3*x1*x2*(1 + x2))/2 + a2*d1*x3 + a2*b1*d1*x3 + a2*b2*d1*x3 + b1*c2*d1*x3 + 2*b2*c2*d1*x3 + b2*c3*d1*x3 + a2*b1*d2*x3 + b1*c2*d2*x3 + a1*a2*d3*x3 + a1*b2*d3*x3 + a2*c1*d3*x3 + a1*b2*c1*d3*x3 + a2*b2*c1*d3*x3 + a2*x1*x3 + a1*a2*x1*x3 + a1*b2*x1*x3 + a2*c1*x1*x3 + a1*b2*c1*x1*x3 + a2*b2*c1*x1*x3 + a2*c2*x1*x3 + a2*d1*x1*x3 + 2*b2*d1*x1*x3 + b2*c2*d1*x1*x3 + b2*c3*d1*x1*x3 + a2*d2*x1*x3 + 2*b2*d2*x1*x3 + b2*c2*d2*x1*x3 + b2*c3*d2*x1*x3 + a2*d3*x1*x3 + 2*b2*d3*x1*x3 + (3*a2*x1*(1 + x1)*x3)/2 + (a2*b2*x1*(1 + x1)*x3)/2 + b2*c2*x1*(1 + x1)*x3 + (3*b2*c3*x1*(1 + x1)*x3)/2 + a1*a2*x2*x3 + a1*b2*x2*x3 + a2*c1*x2*x3 + a1*b2*c1*x2*x3 + a2*b2*c1*x2*x3 + 3*d1*x2*x3 + 2*a1*d1*x2*x3 + a2*d1*x2*x3 + 3*b2*d1*x2*x3 + a1*b2*d1*x2*x3 + a2*b2*d1*x2*x3 + a1*b3*d1*x2*x3 + 3*c1*d1*x2*x3 + b3*c1*d1*x2*x3 + 2*b2*c2*d1*x2*x3 + c3*d1*x2*x3 + b2*c3*d1*x2*x3 + 2*a1*d2*x2*x3 + a1*b2*d2*x2*x3 + a1*b3*d2*x2*x3 + 3*c1*d2*x2*x3 + b3*c1*d2*x2*x3 + a1*b2*d3*x2*x3 + a1*b3*d3*x2*x3 + c1*d3*x2*x3 + b3*c1*d3*x2*x3 + x1*x2*x3 + 2*a2*x1*x2*x3 + 2*b2*x1*x2*x3 + a2*b2*x1*x2*x3 + b3*x1*x2*x3 + 3*b2*c2*x1*x2*x3 + c3*x1*x2*x3 + 2*b2*c3*x1*x2*x3 + (a1*a2*x3*(1 + x3))/2 + (a2*b1*x3*(1 + x3))/2 + (a1*b2*x3*(1 + x3))/2 + (a2*c1*x3*(1 + x3))/2 + (a1*b2*c1*x3*(1 + x3))/2 + (a2*b2*c1*x3*(1 + x3))/2 + (b1*c2*x3*(1 + x3))/2 + a2*x1*x3*(1 + x3) + b2*x1*x3*(1 + x3) + (b2*c2*x1*x3*(1 + x3))/2 + (b2*c3*x1*x3*(1 + x3))/2 + a1*x2*x3*(1 + x3) + c1*x2*x3*(1 + x3) + c2*d3*y1 + b3*d1*x2*y1 + c3*d1*x2*y1 + b1*c3*d1*x2*y1 + a1*d3*x2*y1 + (b3*x2*(1 + x2)*y1)/2 + (c3*x2*(1 + x2)*y1)/2 + (b1*c3*x2*(1 + x2)*y1)/2 + a2*x3*y1 + a1*a2*x3*y1 + a1*b2*x3*y1 + 3*a2*b2*x3*y1 + a2*c1*x3*y1 + a1*b2*c1*x3*y1 + a2*b2*c1*x3*y1 + a2*c2*x3*y1 + 3*b2*c2*x3*y1 + 2*a2*d1*x3*y1 + c2*d1*x3*y1 + b2*c2*d1*x3*y1 + b2*c3*d1*x3*y1 + 2*a2*d2*x3*y1 + c2*d2*x3*y1 + b2*c2*d2*x3*y1 + b2*c3*d2*x3*y1 + a2*d3*x3*y1 + 3*a2*x1*x3*y1 + b2*x1*x3*y1 + a2*b2*x1*x3*y1 + 2*b2*c2*x1*x3*y1 + 3*b2*c3*x1*x3*y1 + 3*x2*x3*y1 + 4*a2*x2*x3*y1 + 4*b2*x2*x3*y1 + a2*b2*x2*x3*y1 + b3*x2*x3*y1 + 2*c2*x2*x3*y1 + 3*b2*c2*x2*x3*y1 + c3*x2*x3*y1 + 2*b2*c3*x2*x3*y1 + (3*a2*x3*(1 + x3)*y1)/2 + (c2*x3*(1 + x3)*y1)/2 + (b2*c2*x3*(1 + x3)*y1)/2 + (b2*c3*x3*(1 + x3)*y1)/2 + (3*a2*x3*y1*(1 + y1))/2 + (a2*b2*x3*y1*(1 + y1))/2 + b2*c2*x3*y1*(1 + y1) + (3*b2*c3*x3*y1*(1 + y1))/2 + a3*b1*y2 + a1*a3*b1*y2 + a3*b1*c1*y2 + a3*d1*y2 + a3*b1*d1*y2 + b3*c1*d1*y2 + b3*c2*d1*y2 + b1*c3*d1*y2 + b3*c1*d2*y2 + 2*a1*d3*y2 + a1*c1*d3*y2 + b1*c1*d3*y2 + b2*c1*d3*y2 + b3*c1*d3*y2 + b1*c2*d3*y2 + c3*d1*x1*y2 + b1*c3*d1*x1*y2 + b3*d2*x1*y2 + b2*d3*x1*y2 + b3*d3*x1*y2 + c1*d3*x1*y2 + a3*b1*x2*y2 + b1*c3*x2*y2 + a1*d3*x2*y2 + c1*d3*x2*y2 + b3*x1*x2*y2 + c3*x1*x2*y2 + b1*c3*x1*x2*y2 + a1*a2*x3*y2 + a2*b1*x3*y2 + a1*b2*x3*y2 + a2*c1*x3*y2 + a1*b2*c1*x3*y2 + a2*b2*c1*x3*y2 + b1*c2*x3*y2 + 2*d1*x3*y2 + 2*a1*d1*x3*y2 + a2*d1*x3*y2 + 3*b2*d1*x3*y2 + a1*b2*d1*x3*y2 + a2*b2*d1*x3*y2 + b3*d1*x3*y2 + a1*b3*d1*x3*y2 + 3*c1*d1*x3*y2 + b3*c1*d1*x3*y2 + 2*b2*c2*d1*x3*y2 + c3*d1*x3*y2 + b2*c3*d1*x3*y2 + 2*a1*d2*x3*y2 + a1*b2*d2*x3*y2 + a1*b3*d2*x3*y2 + 3*c1*d2*x3*y2 + b3*c1*d2*x3*y2 + a1*b2*d3*x3*y2 + a1*b3*d3*x3*y2 + c1*d3*x3*y2 + b3*c1*d3*x3*y2 + x1*x3*y2 + 2*a2*x1*x3*y2 + 2*b2*x1*x3*y2 + a2*b2*x1*x3*y2 + b3*x1*x3*y2 + 3*b2*c2*x1*x3*y2 + c3*x1*x3*y2 + 2*b2*c3*x1*x3*y2 + a1*x3*(1 + x3)*y2 + c1*x3*(1 + x3)*y2 + b3*d1*y1*y2 + c3*d1*y1*y2 + b1*c3*d1*y1*y2 + a1*d3*y1*y2 + b3*x2*y1*y2 + c3*x2*y1*y2 + b1*c3*x2*y1*y2 + x3*y1*y2 + 3*a2*x3*y1*y2 + 2*b2*x3*y1*y2 + a2*b2*x3*y1*y2 + b3*x3*y1*y2 + c2*x3*y1*y2 + 3*b2*c2*x3*y1*y2 + c3*x3*y1*y2 + 2*b2*c3*x3*y1*y2 + (a3*b1*y2*(1 + y2))/2 + (b1*c3*y2*(1 + y2))/2 + (b3*x1*y2*(1 + y2))/2 + (c3*x1*y2*(1 + y2))/2 + (b1*c3*x1*y2*(1 + y2))/2 + (b3*y1*y2*(1 + y2))/2 + (c3*y1*y2*(1 + y2))/2 + (b1*c3*y1*y2*(1 + y2))/2 + a2*d1*y3 + a2*b1*d1*y3 + a2*b2*d1*y3 + b1*c2*d1*y3 + 2*b2*c2*d1*y3 + b2*c3*d1*y3 + a2*b1*d2*y3 + b1*c2*d2*y3 + a1*a2*d3*y3 + a1*b2*d3*y3 + a2*c1*d3*y3 + a1*b2*c1*d3*y3 + a2*b2*c1*d3*y3 + a1*a2*x1*y3 + a1*b2*x1*y3 + a2*c1*x1*y3 + a1*b2*c1*x1*y3 + a2*b2*c1*x1*y3 + a2*c2*x1*y3 + a2*d1*x1*y3 + 2*b2*d1*x1*y3 + b2*c2*d1*x1*y3 + b2*c3*d1*x1*y3 + a2*d2*x1*y3 + 2*b2*d2*x1*y3 + b2*c2*d2*x1*y3 + b2*c3*d2*x1*y3 + a2*d3*x1*y3 + 2*b2*d3*x1*y3 + (3*a2*x1*(1 + x1)*y3)/2 + (b2*x1*(1 + x1)*y3)/2 + (a2*b2*x1*(1 + x1)*y3)/2 + b2*c2*x1*(1 + x1)*y3 + (3*b2*c3*x1*(1 + x1)*y3)/2 + a1*a2*x2*y3 + a1*b2*x2*y3 + a2*c1*x2*y3 + a1*b2*c1*x2*y3 + a2*b2*c1*x2*y3 + 2*d1*x2*y3 + a1*d1*x2*y3 + a2*d1*x2*y3 + 2*b2*d1*x2*y3 + a1*b2*d1*x2*y3 + a2*b2*d1*x2*y3 + a1*b3*d1*x2*y3 + 2*c1*d1*x2*y3 + b3*c1*d1*x2*y3 + 2*b2*c2*d1*x2*y3 + c3*d1*x2*y3 + b2*c3*d1*x2*y3 + a1*d2*x2*y3 + a1*b2*d2*x2*y3 + a1*b3*d2*x2*y3 + 2*c1*d2*x2*y3 + b3*c1*d2*x2*y3 + a1*b2*d3*x2*y3 + a1*b3*d3*x2*y3 + c1*d3*x2*y3 + b3*c1*d3*x2*y3 + 2*a2*x1*x2*y3 + b2*x1*x2*y3 + a2*b2*x1*x2*y3 + b3*x1*x2*y3 + 3*b2*c2*x1*x2*y3 + c3*x1*x2*y3 + 2*b2*c3*x1*x2*y3 + a1*a2*x3*y3 + a1*b2*x3*y3 + a2*c1*x3*y3 + a1*b2*c1*x3*y3 + a2*b2*c1*x3*y3 + 2*b2*d1*x3*y3 + 2*a2*x1*x3*y3 + 2*b2*x1*x3*y3 + b2*c2*x1*x3*y3 + b2*c3*x1*x3*y3 + a1*a2*y1*y3 + 3*b2*y1*y3 + a1*b2*y1*y3 + 3*a2*b2*y1*y3 + a2*c1*y1*y3 + a1*b2*c1*y1*y3 + a2*b2*c1*y1*y3 + a2*c2*y1*y3 + 3*b2*c2*y1*y3 + 2*a2*d1*y1*y3 + c2*d1*y1*y3 + b2*c2*d1*y1*y3 + b2*c3*d1*y1*y3 + 2*a2*d2*y1*y3 + c2*d2*y1*y3 + b2*c2*d2*y1*y3 + b2*c3*d2*y1*y3 + a2*d3*y1*y3 + 3*a2*x1*y1*y3 + a2*b2*x1*y1*y3 + 2*b2*c2*x1*y1*y3 + 3*b2*c3*x1*y1*y3 + 4*a2*x2*y1*y3 + 3*b2*x2*y1*y3 + a2*b2*x2*y1*y3 + b3*x2*y1*y3 + 2*c2*x2*y1*y3 + 3*b2*c2*x2*y1*y3 + c3*x2*y1*y3 + 2*b2*c3*x2*y1*y3 + 2*a2*x3*y1*y3 + 4*b2*x3*y1*y3 + b2*c2*x3*y1*y3 + b2*c3*x3*y1*y3 + (3*a2*y1*(1 + y1)*y3)/2 + (b2*y1*(1 + y1)*y3)/2 + (a2*b2*y1*(1 + y1)*y3)/2 + b2*c2*y1*(1 + y1)*y3 + (3*b2*c3*y1*(1 + y1)*y3)/2 + a1*a2*y2*y3 + b1*y2*y3 + a2*b1*y2*y3 + a1*b2*y2*y3 + a2*c1*y2*y3 + a1*b2*c1*y2*y3 + a2*b2*c1*y2*y3 + b1*c2*y2*y3 + a1*d1*y2*y3 + a2*d1*y2*y3 + 4*b2*d1*y2*y3 + a1*b2*d1*y2*y3 + a2*b2*d1*y2*y3 + b3*d1*y2*y3 + a1*b3*d1*y2*y3 + 2*c1*d1*y2*y3 + b3*c1*d1*y2*y3 + 2*b2*c2*d1*y2*y3 + c3*d1*y2*y3 + b2*c3*d1*y2*y3 + a1*d2*y2*y3 + a1*b2*d2*y2*y3 + a1*b3*d2*y2*y3 + 2*c1*d2*y2*y3 + b3*c1*d2*y2*y3 + a1*b2*d3*y2*y3 + a1*b3*d3*y2*y3 + c1*d3*y2*y3 + b3*c1*d3*y2*y3 + 2*a2*x1*y2*y3 + 3*b2*x1*y2*y3 + a2*b2*x1*y2*y3 + b3*x1*y2*y3 + 3*b2*c2*x1*y2*y3 + c3*x1*y2*y3 + 2*b2*c3*x1*y2*y3 + y1*y2*y3 + 3*a2*y1*y2*y3 + 3*b2*y1*y2*y3 + a2*b2*y1*y2*y3 + b3*y1*y2*y3 + c2*y1*y2*y3 + 3*b2*c2*y1*y2*y3 + c3*y1*y2*y3 + 2*b2*c3*y1*y2*y3 + (a1*a2*y3*(1 + y3))/2 + (a2*b1*y3*(1 + y3))/2 + (a1*b2*y3*(1 + y3))/2 + (a2*c1*y3*(1 + y3))/2 + (a1*b2*c1*y3*(1 + y3))/2 + (a2*b2*c1*y3*(1 + y3))/2 + (b1*c2*y3*(1 + y3))/2 + a2*x1*y3*(1 + y3) + b2*x1*y3*(1 + y3) + (b2*c2*x1*y3*(1 + y3))/2 + (b2*c3*x1*y3*(1 + y3))/2 + (a1*x2*y3*(1 + y3))/2 + (c1*x2*y3*(1 + y3))/2 + (3*a2*y1*y3*(1 + y3))/2 + (c2*y1*y3*(1 + y3))/2 + (b2*c2*y1*y3*(1 + y3))/2 + (b2*c3*y1*y3*(1 + y3))/2 + (a1*y2*y3*(1 + y3))/2 + (c1*y2*y3*(1 + y3))/2 + a3*b1*x2*z1 + c3*x2*z1 + 2*c3*d1*x2*z1 + b1*c3*d1*x2*z1 + b3*d2*x2*z1 + d3*x2*z1 + b2*d3*x2*z1 + b3*d3*x2*z1 + c1*d3*x2*z1 + c3*x1*x2*z1 + (b3*x2*(1 + x2)*z1)/2 + c3*x2*(1 + x2)*z1 + (b1*c3*x2*(1 + x2)*z1)/2 + a2*x3*z1 + a1*a2*x3*z1 + a1*b2*x3*z1 + a2*c1*x3*z1 + a1*b2*c1*x3*z1 + a2*b2*c1*x3*z1 + a2*c2*x3*z1 + a2*d1*x3*z1 + 2*b2*d1*x3*z1 + 2*b2*c2*d1*x3*z1 + 2*b2*c3*d1*x3*z1 + a2*d2*x3*z1 + 2*b2*d2*x3*z1 + 2*b2*c2*d2*x3*z1 + 2*b2*c3*d2*x3*z1 + a2*d3*x3*z1 + 2*b2*d3*x3*z1 + b2*c2*d3*x3*z1 + b2*c3*d3*x3*z1 + 3*a2*x1*x3*z1 + a2*b2*x1*x3*z1 + b2*c1*x1*x3*z1 + 3*b2*c2*x1*x3*z1 + 2*b2*c3*x1*x3*z1 + x2*x3*z1 + 2*a2*x2*x3*z1 + 2*b2*x2*x3*z1 + a2*b2*x2*x3*z1 + b3*x2*x3*z1 + 3*b2*c2*x2*x3*z1 + c3*x2*x3*z1 + 2*b2*c3*x2*x3*z1 + a2*x3*(1 + x3)*z1 + b2*x3*(1 + x3)*z1 + (b2*c2*x3*(1 + x3)*z1)/2 + (b2*c3*x3*(1 + x3)*z1)/2 + c3*x2*y1*z1 + 3*a2*x3*y1*z1 + b2*x3*y1*z1 + a2*b2*x3*y1*z1 + b2*c1*x3*y1*z1 + 3*b2*c2*x3*y1*z1 + 2*b2*c3*x3*y1*z1 + a3*b1*y2*z1 + c3*y2*z1 + 2*c3*d1*y2*z1 + b1*c3*d1*y2*z1 + b3*d2*y2*z1 + b2*d3*y2*z1 + b3*d3*y2*z1 + c1*d3*y2*z1 + c3*x1*y2*z1 + b3*x2*y2*z1 + 2*c3*x2*y2*z1 + b1*c3*x2*y2*z1 + x3*y2*z1 + 2*a2*x3*y2*z1 + 2*b2*x3*y2*z1 + a2*b2*x3*y2*z1 + b3*x3*y2*z1 + 3*b2*c2*x3*y2*z1 + c3*x3*y2*z1 + 2*b2*c3*x3*y2*z1 + c3*y1*y2*z1 + (b3*y2*(1 + y2)*z1)/2 + c3*y2*(1 + y2)*z1 + (b1*c3*y2*(1 + y2)*z1)/2 + a1*a2*y3*z1 + a1*b2*y3*z1 + a2*c1*y3*z1 + a1*b2*c1*y3*z1 + a2*b2*c1*y3*z1 + a2*c2*y3*z1 + a2*d1*y3*z1 + 2*b2*d1*y3*z1 + 2*b2*c2*d1*y3*z1 + 2*b2*c3*d1*y3*z1 + a2*d2*y3*z1 + 2*b2*d2*y3*z1 + 2*b2*c2*d2*y3*z1 + 2*b2*c3*d2*y3*z1 + a2*d3*y3*z1 + 2*b2*d3*y3*z1 + b2*c2*d3*y3*z1 + b2*c3*d3*y3*z1 + 3*a2*x1*y3*z1 + b2*x1*y3*z1 + a2*b2*x1*y3*z1 + b2*c1*x1*y3*z1 + 3*b2*c2*x1*y3*z1 + 2*b2*c3*x1*y3*z1 + 2*a2*x2*y3*z1 + b2*x2*y3*z1 + a2*b2*x2*y3*z1 + b3*x2*y3*z1 + 3*b2*c2*x2*y3*z1 + c3*x2*y3*z1 + 2*b2*c3*x2*y3*z1 + 2*a2*x3*y3*z1 + 2*b2*x3*y3*z1 + b2*c2*x3*y3*z1 + b2*c3*x3*y3*z1 + 3*a2*y1*y3*z1 + a2*b2*y1*y3*z1 + b2*c1*y1*y3*z1 + 3*b2*c2*y1*y3*z1 + 2*b2*c3*y1*y3*z1 + 2*a2*y2*y3*z1 + 3*b2*y2*y3*z1 + a2*b2*y2*y3*z1 + b3*y2*y3*z1 + 3*b2*c2*y2*y3*z1 + c3*y2*y3*z1 + 2*b2*c3*y2*y3*z1 + a2*y3*(1 + y3)*z1 + b2*y3*(1 + y3)*z1 + (b2*c2*y3*(1 + y3)*z1)/2 + (b2*c3*y3*(1 + y3)*z1)/2 + (b3*c2*z1*(1 + z1))/2 + (3*a2*x3*z1*(1 + z1))/2 + (a2*b2*x3*z1*(1 + z1))/2 + b2*c2*x3*z1*(1 + z1) + (3*b2*c3*x3*z1*(1 + z1))/2 + (3*a2*y3*z1*(1 + z1))/2 + (b2*y3*z1*(1 + z1))/2 + (a2*b2*y3*z1*(1 + z1))/2 + b2*c2*y3*z1*(1 + z1) + (3*b2*c3*y3*z1*(1 + z1))/2 + c3*(c2 + d2)*(x1 + y1 + z1) + a1*a3*z2 + a1*a3*b1*z2 + a3*b1*d1*z2 + b3*c1*d1*z2 + b3*c2*d1*z2 + b1*c3*d1*z2 + b3*c1*d2*z2 + 2*a1*d3*z2 + b1*c1*d3*z2 + b2*c1*d3*z2 + b3*c1*d3*z2 + b1*c2*d3*z2 + c3*d1*x1*z2 + b1*c3*d1*x1*z2 + b3*d2*x1*z2 + b2*d3*x1*z2 + b3*d3*x1*z2 + c1*d3*x1*z2 + (3*c3*x1*(1 + x1)*z2)/2 + b1*c3*x2*z2 + 2*c3*d1*x2*z2 + a1*d3*x2*z2 + c1*d3*x2*z2 + a1*c1*d3*x2*z2 + b3*x1*x2*z2 + c3*x1*x2*z2 + b1*c3*x1*x2*z2 + a1*a2*x3*z2 + a1*b2*x3*z2 + a2*c1*x3*z2 + a1*b2*c1*x3*z2 + a2*b2*c1*x3*z2 + 3*a1*d1*x3*z2 + 2*a2*d1*x3*z2 + 3*b2*d1*x3*z2 + a1*b2*d1*x3*z2 + a2*b2*d1*x3*z2 + a1*b3*d1*x3*z2 + b2*c1*d1*x3*z2 + 2*b2*c2*d1*x3*z2 + b2*c3*d1*x3*z2 + 3*a1*d2*x3*z2 + a1*b2*d2*x3*z2 + a1*b3*d2*x3*z2 + b2*c1*d2*x3*z2 + a1*d3*x3*z2 + a1*b2*d3*x3*z2 + a1*b3*d3*x3*z2 + b2*c1*d3*x3*z2 + 3*a2*x1*x3*z2 + b2*x1*x3*z2 + a2*b2*x1*x3*z2 + b3*x1*x3*z2 + 3*b2*c2*x1*x3*z2 + 2*b2*c3*x1*x3*z2 + a1*x3*(1 + x3)*z2 + b3*d1*y1*z2 + c3*d1*y1*z2 + b1*c3*d1*y1*z2 + a1*d3*y1*z2 + c1*d3*y1*z2 + 3*c3*x1*y1*z2 + b3*x2*y1*z2 + c3*x2*y1*z2 + b1*c3*x2*y1*z2 + 3*a2*x3*y1*z2 + 3*b2*x3*y1*z2 + a2*b2*x3*y1*z2 + b3*x3*y1*z2 + 3*b2*c2*x3*y1*z2 + 2*b2*c3*x3*y1*z2 + (3*c3*y1*(1 + y1)*z2)/2 + b1*c3*y2*z2 + 2*c3*d1*y2*z2 + c1*d3*y2*z2 + a1*c1*d3*y2*z2 + b3*x1*y2*z2 + c3*x1*y2*z2 + b1*c3*x1*y2*z2 + b3*y1*y2*z2 + c3*y1*y2*z2 + b1*c3*y1*y2*z2 + a1*a2*y3*z2 + a1*b2*y3*z2 + a2*c1*y3*z2 + a1*b2*c1*y3*z2 + a2*b2*c1*y3*z2 + 2*a1*d1*y3*z2 + 2*a2*d1*y3*z2 + 2*b2*d1*y3*z2 + a1*b2*d1*y3*z2 + a2*b2*d1*y3*z2 + a1*b3*d1*y3*z2 + b2*c1*d1*y3*z2 + 2*b2*c2*d1*y3*z2 + b2*c3*d1*y3*z2 + 2*a1*d2*y3*z2 + a1*b2*d2*y3*z2 + a1*b3*d2*y3*z2 + b2*c1*d2*y3*z2 + a1*d3*y3*z2 + a1*b2*d3*y3*z2 + a1*b3*d3*y3*z2 + b2*c1*d3*y3*z2 + 3*a2*x1*y3*z2 + 2*b2*x1*y3*z2 + a2*b2*x1*y3*z2 + b3*x1*y3*z2 + 3*b2*c2*x1*y3*z2 + 2*b2*c3*x1*y3*z2 + 3*a2*y1*y3*z2 + 4*b2*y1*y3*z2 + a2*b2*y1*y3*z2 + b3*y1*y3*z2 + 3*b2*c2*y1*y3*z2 + 2*b2*c3*y1*y3*z2 + (a1*y3*(1 + y3)*z2)/2 + a3*z1*z2 + a3*b1*z1*z2 + c3*z1*z2 + 3*c3*d1*z1*z2 + b1*c3*d1*z1*z2 + b3*d2*z1*z2 + c3*d2*z1*z2 + b2*d3*z1*z2 + b3*d3*z1*z2 + c1*d3*z1*z2 + c2*d3*z1*z2 + c3*d3*z1*z2 + c3*x1*z1*z2 + b3*x2*z1*z2 + b1*c3*x2*z1*z2 + 3*a2*x3*z1*z2 + b2*x3*z1*z2 + a2*b2*x3*z1*z2 + b3*x3*z1*z2 + 3*b2*c2*x3*z1*z2 + 2*b2*c3*x3*z1*z2 + c3*y1*z1*z2 + b3*y2*z1*z2 + b1*c3*y2*z1*z2 + 3*a2*y3*z1*z2 + 2*b2*y3*z1*z2 + a2*b2*y3*z1*z2 + b3*y3*z1*z2 + 3*b2*c2*y3*z1*z2 + 2*b2*c3*y3*z1*z2 + (3*c3*z1*(1 + z1)*z2)/2 + (a3*b1*z2*(1 + z2))/2 + (b1*c3*z2*(1 + z2))/2 + (b3*x1*z2*(1 + z2))/2 + (c3*x1*z2*(1 + z2))/2 + (b1*c3*x1*z2*(1 + z2))/2 + (b3*y1*z2*(1 + z2))/2 + (c3*y1*z2*(1 + z2))/2 + (b1*c3*y1*z2*(1 + z2))/2 + (b3*z1*z2*(1 + z2))/2 + c3*z1*z2*(1 + z2) + (b1*c3*z1*z2*(1 + z2))/2 + 2*a2*d1*z3 + a2*b1*d1*z3 + a2*b2*d1*z3 + b2*c2*d1*z3 + b2*c3*d1*z3 + a2*b1*d2*z3 + a1*a2*d3*z3 + a1*b2*d3*z3 + a2*c1*d3*z3 + a1*b2*c1*d3*z3 + a2*b2*c1*d3*z3 + a1*a2*x1*z3 + a1*b2*x1*z3 + a2*c1*x1*z3 + a1*b2*c1*x1*z3 + a2*b2*c1*x1*z3 + a2*d1*x1*z3 + 2*b2*d1*x1*z3 + b2*c2*d1*x1*z3 + b2*c3*d1*x1*z3 + a2*d2*x1*z3 + 2*b2*d2*x1*z3 + b2*c2*d2*x1*z3 + b2*c3*d2*x1*z3 + a2*d3*x1*z3 + 2*b2*d3*x1*z3 + c2*d3*x1*z3 + a2*x1*(1 + x1)*z3 + (a2*b2*x1*(1 + x1)*z3)/2 + (3*b2*c2*x1*(1 + x1)*z3)/2 + (3*b2*c3*x1*(1 + x1)*z3)/2 + a1*a2*x2*z3 + a1*b2*x2*z3 + a2*c1*x2*z3 + a1*b2*c1*x2*z3 + a2*b2*c1*x2*z3 + 4*d1*x2*z3 + 4*a1*d1*x2*z3 + 3*b2*d1*x2*z3 + a1*b2*d1*x2*z3 + a2*b2*d1*x2*z3 + a1*b3*d1*x2*z3 + 4*c1*d1*x2*z3 + b3*c1*d1*x2*z3 + 2*c2*d1*x2*z3 + b2*c2*d1*x2*z3 + 2*c3*d1*x2*z3 + b1*c3*d1*x2*z3 + b2*c3*d1*x2*z3 + 4*a1*d2*x2*z3 + a1*b2*d2*x2*z3 + a1*b3*d2*x2*z3 + 4*c1*d2*x2*z3 + b3*c1*d2*x2*z3 + b1*c3*d2*x2*z3 + a1*b2*d3*x2*z3 + a1*b3*d3*x2*z3 + b3*c1*d3*x2*z3 + b1*c3*d3*x2*z3 + 2*x1*x2*z3 + a1*x1*x2*z3 + a2*x1*x2*z3 + 2*b2*x1*x2*z3 + a2*b2*x1*x2*z3 + b3*x1*x2*z3 + c1*x1*x2*z3 + b1*c1*x1*x2*z3 + 2*c2*x1*x2*z3 + b1*c2*x1*x2*z3 + 2*b2*c2*x1*x2*z3 + 2*c3*x1*x2*z3 + b1*c3*x1*x2*z3 + 2*b2*c3*x1*x2*z3 + a1*a2*x3*z3 + a2*b1*x3*z3 + a1*b2*x3*z3 + a2*c1*x3*z3 + a1*b2*c1*x3*z3 + a2*b2*c1*x3*z3 + a2*b1*c2*x3*z3 + 2*a2*d1*x3*z3 + 4*b2*d1*x3*z3 + 2*b2*c2*d1*x3*z3 + 3*a2*x1*x3*z3 + 3*b2*x1*x3*z3 + 3*b2*c2*x1*x3*z3 + b2*c3*x1*x3*z3 + 3*a2*y1*z3 + a1*a2*y1*z3 + a1*b2*y1*z3 + 3*a2*b2*y1*z3 + a2*c1*y1*z3 + a1*b2*c1*y1*z3 + a2*b2*c1*y1*z3 + 2*a2*d1*y1*z3 + b2*c2*d1*y1*z3 + b2*c3*d1*y1*z3 + 2*a2*d2*y1*z3 + b2*c2*d2*y1*z3 + b2*c3*d2*y1*z3 + a2*d3*y1*z3 + c2*d3*y1*z3 + 2*a2*x1*y1*z3 + b2*x1*y1*z3 + a2*b2*x1*y1*z3 + 3*b2*c2*x1*y1*z3 + 3*b2*c3*x1*y1*z3 + x2*y1*z3 + a1*x2*y1*z3 + 3*a2*x2*y1*z3 + 4*b2*x2*y1*z3 + a2*b2*x2*y1*z3 + b3*x2*y1*z3 + c1*x2*y1*z3 + b1*c1*x2*y1*z3 + 2*c2*x2*y1*z3 + b1*c2*x2*y1*z3 + 2*b2*c2*x2*y1*z3 + 2*c3*x2*y1*z3 + b1*c3*x2*y1*z3 + 2*b2*c3*x2*y1*z3 + 4*a2*x3*y1*z3 + 3*b2*x3*y1*z3 + a2*c2*x3*y1*z3 + 5*b2*c2*x3*y1*z3 + b2*c3*x3*y1*z3 + a2*y1*(1 + y1)*z3 + (a2*b2*y1*(1 + y1)*z3)/2 + (3*b2*c2*y1*(1 + y1)*z3)/2 + (3*b2*c3*y1*(1 + y1)*z3)/2 + a1*a2*y2*z3 + a2*b1*y2*z3 + a1*b2*y2*z3 + a2*c1*y2*z3 + a1*b2*c1*y2*z3 + a2*b2*c1*y2*z3 + 4*a1*d1*y2*z3 + 3*b2*d1*y2*z3 + a1*b2*d1*y2*z3 + a2*b2*d1*y2*z3 + b3*d1*y2*z3 + a1*b3*d1*y2*z3 + 4*c1*d1*y2*z3 + b3*c1*d1*y2*z3 + 2*c2*d1*y2*z3 + b2*c2*d1*y2*z3 + 2*c3*d1*y2*z3 + b1*c3*d1*y2*z3 + b2*c3*d1*y2*z3 + 4*a1*d2*y2*z3 + a1*b2*d2*y2*z3 + a1*b3*d2*y2*z3 + 4*c1*d2*y2*z3 + b3*c1*d2*y2*z3 + b1*c3*d2*y2*z3 + a1*b2*d3*y2*z3 + a1*b3*d3*y2*z3 + b3*c1*d3*y2*z3 + b1*c3*d3*y2*z3 + x1*y2*z3 + a1*x1*y2*z3 + a2*x1*y2*z3 + 2*b2*x1*y2*z3 + a2*b2*x1*y2*z3 + b3*x1*y2*z3 + c1*x1*y2*z3 + b1*c1*x1*y2*z3 + 2*c2*x1*y2*z3 + b1*c2*x1*y2*z3 + 2*b2*c2*x1*y2*z3 + 2*c3*x1*y2*z3 + b1*c3*x1*y2*z3 + 2*b2*c3*x1*y2*z3 + a1*y1*y2*z3 + 2*a2*y1*y2*z3 + 2*b2*y1*y2*z3 + a2*b2*y1*y2*z3 + b3*y1*y2*z3 + c1*y1*y2*z3 + b1*c1*y1*y2*z3 + 2*c2*y1*y2*z3 + b1*c2*y1*y2*z3 + 2*b2*c2*y1*y2*z3 + 2*c3*y1*y2*z3 + b1*c3*y1*y2*z3 + 2*b2*c3*y1*y2*z3 + a1*a2*y3*z3 + a1*b2*y3*z3 + a2*c1*y3*z3 + a1*b2*c1*y3*z3 + a2*b2*c1*y3*z3 + a2*b1*c2*y3*z3 + 2*a2*d1*y3*z3 + 4*b2*d1*y3*z3 + 2*b2*c2*d1*y3*z3 + 3*a2*x1*y3*z3 + b2*x1*y3*z3 + 3*b2*c2*x1*y3*z3 + b2*c3*x1*y3*z3 + 5*a2*y1*y3*z3 + 3*b2*y1*y3*z3 + a2*c2*y1*y3*z3 + 5*b2*c2*y1*y3*z3 + b2*c3*y1*y3*z3 + a1*a2*z1*z3 + a1*b2*z1*z3 + a2*c1*z1*z3 + a1*b2*c1*z1*z3 + a2*b2*c1*z1*z3 + a2*d1*z1*z3 + 2*b2*d1*z1*z3 + c2*d1*z1*z3 + 2*b2*c2*d1*z1*z3 + 2*b2*c3*d1*z1*z3 + a2*d2*z1*z3 + 2*b2*d2*z1*z3 + c2*d2*z1*z3 + 2*b2*c2*d2*z1*z3 + 2*b2*c3*d2*z1*z3 + a2*d3*z1*z3 + 2*b2*d3*z1*z3 + b2*c2*d3*z1*z3 + b2*c3*d3*z1*z3 + 2*a2*x1*z1*z3 + a2*b2*x1*z1*z3 + b2*c1*x1*z1*z3 + 2*b2*c2*x1*z1*z3 + 2*b2*c3*x1*z1*z3 + 2*x2*z1*z3 + a1*x2*z1*z3 + a2*x2*z1*z3 + 2*b2*x2*z1*z3 + a2*b2*x2*z1*z3 + b3*x2*z1*z3 + b1*c1*x2*z1*z3 + c2*x2*z1*z3 + b1*c2*x2*z1*z3 + 2*b2*c2*x2*z1*z3 + c3*x2*z1*z3 + b1*c3*x2*z1*z3 + 2*b2*c3*x2*z1*z3 + 3*a2*x3*z1*z3 + 3*b2*x3*z1*z3 + 3*b2*c2*x3*z1*z3 + b2*c3*x3*z1*z3 + 2*a2*y1*z1*z3 + b2*y1*z1*z3 + a2*b2*y1*z1*z3 + b2*c1*y1*z1*z3 + 2*b2*c2*y1*z1*z3 + 2*b2*c3*y1*z1*z3 + y2*z1*z3 + a1*y2*z1*z3 + a2*y2*z1*z3 + 2*b2*y2*z1*z3 + a2*b2*y2*z1*z3 + b3*y2*z1*z3 + b1*c1*y2*z1*z3 + c2*y2*z1*z3 + b1*c2*y2*z1*z3 + 2*b2*c2*y2*z1*z3 + c3*y2*z1*z3 + b1*c3*y2*z1*z3 + 2*b2*c3*y2*z1*z3 + 3*a2*y3*z1*z3 + b2*y3*z1*z3 + 3*b2*c2*y3*z1*z3 + b2*c3*y3*z1*z3 + a2*z1*(1 + z1)*z3 + (a2*b2*z1*(1 + z1)*z3)/2 + (3*b2*c2*z1*(1 + z1)*z3)/2 + (3*b2*c3*z1*(1 + z1)*z3)/2 + a1*a2*z2*z3 + a1*b2*z2*z3 + a2*c1*z2*z3 + a1*b2*c1*z2*z3 + a2*b2*c1*z2*z3 + d1*z2*z3 + 5*a1*d1*z2*z3 + a2*d1*z2*z3 + 3*b2*d1*z2*z3 + a1*b2*d1*z2*z3 + a2*b2*d1*z2*z3 + a1*b3*d1*z2*z3 + c1*d1*z2*z3 + b2*c1*d1*z2*z3 + c2*d1*z2*z3 + b2*c2*d1*z2*z3 + b1*c3*d1*z2*z3 + b2*c3*d1*z2*z3 + 5*a1*d2*z2*z3 + a1*b2*d2*z2*z3 + a1*b3*d2*z2*z3 + c1*d2*z2*z3 + b2*c1*d2*z2*z3 + b1*c3*d2*z2*z3 + a1*d3*z2*z3 + a1*b2*d3*z2*z3 + a1*b3*d3*z2*z3 + c1*d3*z2*z3 + b2*c1*d3*z2*z3 + b1*c3*d3*z2*z3 + a1*x1*z2*z3 + 2*a2*x1*z2*z3 + b2*x1*z2*z3 + a2*b2*x1*z2*z3 + b3*x1*z2*z3 + c1*x1*z2*z3 + b1*c1*x1*z2*z3 + b1*c2*x1*z2*z3 + 2*b2*c2*x1*z2*z3 + b1*c3*x1*z2*z3 + 2*b2*c3*x1*z2*z3 + 5*y1*z2*z3 + a1*y1*z2*z3 + 2*a2*y1*z2*z3 + 3*b2*y1*z2*z3 + a2*b2*y1*z2*z3 + b3*y1*z2*z3 + c1*y1*z2*z3 + b1*c1*y1*z2*z3 + b1*c2*y1*z2*z3 + 2*b2*c2*y1*z2*z3 + b1*c3*y1*z2*z3 + 2*b2*c3*y1*z2*z3 + a1*z1*z2*z3 + 2*a2*z1*z2*z3 + b2*z1*z2*z3 + a2*b2*z1*z2*z3 + b3*z1*z2*z3 + b1*c1*z1*z2*z3 + c2*z1*z2*z3 + b1*c2*z1*z2*z3 + 2*b2*c2*z1*z2*z3 + c3*z1*z2*z3 + b1*c3*z1*z2*z3 + 2*b2*c3*z1*z2*z3 + (a1*a2*z3*(1 + z3))/2 + (a2*b1*z3*(1 + z3))/2 + (a1*b2*z3*(1 + z3))/2 + (a2*c1*z3*(1 + z3))/2 + (a1*b2*c1*z3*(1 + z3))/2 + (a2*b2*c1*z3*(1 + z3))/2 + a2*x1*z3*(1 + z3) + b2*x1*z3*(1 + z3) + (c2*x1*z3*(1 + z3))/2 + (b2*c2*x1*z3*(1 + z3))/2 + (b2*c3*x1*z3*(1 + z3))/2 + 2*a1*x2*z3*(1 + z3) + 2*c1*x2*z3*(1 + z3) + (3*a2*y1*z3*(1 + z3))/2 + (c2*y1*z3*(1 + z3))/2 + (b2*c2*y1*z3*(1 + z3))/2 + (b2*c3*y1*z3*(1 + z3))/2 + 2*a1*y2*z3*(1 + z3) + 2*c1*y2*z3*(1 + z3) + a2*z1*z3*(1 + z3) + b2*z1*z3*(1 + z3) + (c2*z1*z3*(1 + z3))/2 + (b2*c2*z1*z3*(1 + z3))/2 + (b2*c3*z1*z3*(1 + z3))/2 + 2*a1*z2*z3*(1 + z3) + c1*c2*(x3 + y3 + z3) + (a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2))*(x3 + y3 + z3);
end;
#####################################################################
#####################################################################
#Space Group No. 140 ( I4/mcm)
#####################################################################
Aiin140:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin140:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin140:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Axyzin140:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return x1 + y1 + z1;
end;
#####################################################################
Bdeltain140:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################
Bzxyin140:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return b1*(x1 + y1)*(x2 + y2) + (x1 + y1)*z2 + b1*(x1 + x2 + y1 + y2)*z2;
end;
#####################################################################
#####################################################################
#Space Group No. 141 ( I4_1/amd)
#####################################################################
#####################################################################
#Space Group No. 142 ( I4_1/acd)
#####################################################################
Aiin142:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return d1;
end;
#####################################################################
Amin142:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return c1;
end;
#####################################################################
Acpin142:=function(g1)
local x1,y1,z1,a1,b1,c1,d1;
x1:=g1[1];y1:=g1[2];z1:=g1[3];a1:=g1[4];b1:=g1[5];c1:=g1[6];d1:=g1[7];
return b1;
end;
#####################################################################
Bdeltain142:=function(g1,g2)
local x1,y1,z1,x2,y2,z2,a1,a2,b1,b2,c1,c2,d1,d2;
x1:=g1[1];y1:=g1[2];z1:=g1[3];x2:=g2[1];y2:=g2[2];z2:=g2[3];a1:=g1[4];a2:=g2[4];b1:=g1[5];b2:=g2[5];c1:=g1[6];c2:=g2[6];d1:=g1[7];d2:=g2[7];
return a1*a2 + a1*b2 + a2*c1 + a1*b2*c1 + a2*b2*c1 + d1*(b2 + c2 + d2);
end;
#####################################################################









PGGens230:=[[],[P2],[C23],[C24],[C25],[M6],[M7],[M8],[M9],[C210,P10],[C211,P11],[C212,P12],[C213,P13],[C214,P14],[C215,P15],[C216,C2p16],[C217,C2p17],[C218,C2p18],[C219,C2p19],[C220,C2p20],[C221,C2p21],[C222,C2p22],[C223,C2p23],[C224,C2p24],[C225,M25],[C226,M26],[C227,M27],[C228,M28],[C229,M29],[C230,M30],[C231,M31],[C232,M32],[C233,M33],[C234,M34],[C235,M35],[C236,M36],[C237,M37],[C238,M38],[C239,M39],[C240,M40],[C241,M41],[C242,M42],[C243,M43],[C244,M44],[C245,M45],[C246,M46],[C247,C2p47,P47],[C248,C2p48,P48],[C249,C2p49,P49],[C250,C2p50,P50],[C251,C2p51,P51],[C252,C2p52,P52],[C253,C2p53,P53],[C254,C2p54,P54],[C255,C2p55,P55],[C256,C2p56,P56],[C257,C2p57,P57],[C258,C2p58,P58],[C259,C2p59,P59],[C260,C2p60,P60],[C261,C2p61,P61],[C262,C2p62,P62],[C263,C2p63,P63],[C264,C2p64,P64],[C265,C2p65,P65],[C266,C2p66,P66],[C267,C2p67,P67],[C268,C2p68,P68],[C269,C2p69,P69],[C270,C2p70,P70],[C271,C2p71,P71],[C272,C2p72,P72],[C273,C2p73,P73],[C274,C2p74,P74],[C275,C475],[C276,C476],[C277,C477],[C278,C478],[C279,C479],[C280,C480],[C281,C481],[C282,C482],[C283,C483,P83],[C284,C484,P84],[C285,C485,P85],[C286,C486,P86],[C287,C487,P87],[C288,C488,P88],[C289,C2p89,C2pp89],[C290,C2p90,C2pp90],[C291,C2p91,C2pp91],[C292,C2p92,C2pp92],[C293,C2p93,C2pp93],[C294,C2p94,C2pp94],[C295,C2p95,C2pp95],[C296,C2p96,C2pp96],[C297,C2p97,C2pp97],[C298,C2p98,C2pp98],[C299,Mp99,M99],[C2100,Mp100,M100],[C2101,Mp101,M101],[C2102,Mp102,M102],[C2103,Mp103,M103],[C2104,Mp104,M104],[C2105,Mp105,M105],[C2106,Mp106,M106],[C2107,Mp107,M107],[C2108,Mp108,M108],[C2109,Mp109,M109],[C2110,Mp110,M110],[C2111,C2p111,M111],[C2112,C2p112,M112],[C2113,C2p113,M113],[C2114,C2p114,M114],[C2115,C2p115,M115],[C2116,C2p116,M116],[C2117,C2p117,M117],[C2118,C2p118,M118],[C2119,C2p119,M119],[C2120,C2p120,M120],[C2121,C2p121,M121],[C2122,C2p122,M122],[C2123,C2p123,M123,P123],[C2124,C2p124,M124,P124],[C2125,C2p125,M125,P125],[C2126,C2p126,M126,P126],[C2127,C2p127,M127,P127],[C2128,C2p128,M128,P128],[C2129,C2p129,M129,P129],[C2130,C2p130,M130,P130],[C2131,C2p131,M131,P131],[C2132,C2p132,M132,P132],[C2133,C2p133,M133,P133],[C2134,C2p134,M134,P134],[C2135,C2p135,M135,P135],[C2136,C2p136,M136,P136],[C2137,C2p137,M137,P137],[C2138,C2p138,M138,P138],[C2139,C2p139,M139,P139],[C2140,C2p140,M140,P140],[C2141,C2p141,M141,P141],[C2142,C2p142,M142,P142],[C3143],[C3144],[C3145],[C3146],[C3147,P147],[C3148,P148],[C3149,C2p149],[C3150,C2p150],[C3151,C2p151],[C3152,C2p152],[C3153,C2p153],[C3154,C2p154],[C3155,C2p155],[C3156,M156],[C3157,M157],[C3158,M158],[C3159,M159],[C3160,M160],[C3161,M161],[C3162,C2p162,P162],[C3163,C2p163,P163],[C3164,C2p164,P164],[C3165,C2p165,P165],[C3166,C2p166,P166],[C3167,C2p167,P167],[C3168,C2168],[C3169,C2169],[C3170,C2170],[C3171,C2171],[C3172,C2172],[C3173,C2173],[C3174,M174],[C3175,C2175,P175],[C3176,C2176,P176],[C3177,C2p177,C2177],[C3178,C2p178,C2178],[C3179,C2p179,C2179],[C3180,C2p180,C2180],[C3181,C2p181,C2181],[C3182,C2p182,C2182],[C3183,M183,C2183],[C3184,M184,C2184],[C3185,M185,C2185],[C3186,M186,C2186],[C3187,C2p187,M187],[C3188,C2p188,M188],[C3189,C2p189,M189],[C3190,C2p190,M190],[C3191,C2p191,C2191,P191],[C3192,C2p192,C2192,P192],[C3193,C2p193,C2193,P193],[C3194,C2p194,C2194,P194],[C2195,C2p195,C3195],[C2196,C2p196,C3196],[C2197,C2p197,C3197],[C2198,C2p198,C3198],[C2199,C2p199,C3199],[C2200,C2p200,C3200,P200],[C2201,C2p201,C3201,P201],[C2202,C2p202,C3202,P202],[C2203,C2p203,C3203,P203],[C2204,C2p204,C3204,P204],[C2205,C2p205,C3205,P205],[C2206,C2p206,C3206,P206],[C2207,C2p207,C3207,C2pp207],[C2208,C2p208,C3208,C2pp208],[C2209,C2p209,C3209,C2pp209],[C2210,C2p210,C3210,C2pp210],[C2211,C2p211,C3211,C2pp211],[C2212,C2p212,C3212,C2pp212],[C2213,C2p213,C3213,C2pp213],[C2214,C2p214,C3214,C2pp214],[C2215,C2p215,C3215,M215],[C2216,C2p216,C3216,M216],[C2217,C2p217,C3217,M217],[C2218,C2p218,C3218,M218],[C2219,C2p219,C3219,M219],[C2220,C2p220,C3220,M220],[C2221,C2p221,C3221,M221,P221],[C2222,C2p222,C3222,M222,P222],[C2223,C2p223,C3223,M223,P223],[C2224,C2p224,C3224,M224,P224],[C2225,C2p225,C3225,M225,P225],[C2226,C2p226,C3226,M226,P226],[C2227,C2p227,C3227,M227,P227],[C2228,C2p228,C3228,M228,P228],[C2229,C2p229,C3229,M229,P229],[C2230,C2p230,C3230,M230,P230]];



funcs230:=[[[Axin1,Ayin1,Azin1],[],[]],[[Aiin2,Axin2,Ayin2,Azin2],[],[]],[[Acin3,Axin3,Ayin3,Azin3],[],[]],[[Acin4,Axin4,Azin4],[],[]],[[Acin5,Axyin5,Azin5],[Bxyin5],[]],[[Amin6,Axin6,Ayin6,Azin6],[],[]],[[Amin7,Axin7,Ayin7],[],[]],[[Amin8,Axyin8,Azin8],[Bxyin8],[]],[[Amin9,Axyin9],[Bxyin9,Bzxyin9],[]],[[Acin10,Aiin10,Axin10,Ayin10,Azin10],[],[]],[[Acin11,Aiin11,Axin11,Azin11],[],[]],[[Acin12,Aiin12,Axyin12,Azin12],[Bxyin12],[]],[[Acin13,Aiin13,Axin13,Ayin13],[],[]],[[Acin14,Aiin14,Axin14],[Bphiin14],[]],[[Acin15,Aiin15,Axyin15],[Bxyin15,Bzxyin15],[]],[[Acin16,Acpin16,Axin16,Ayin16,Azin16],[],[]],[[Acin17,Acpin17,Axin17,Ayin17],[],[]],[[Acin18,Acpin18,Azin18],[Bphiin18],[]],[[Acin19,Acpin19],[Bphi1in19,Bphi2in19],[]],[[Acin20,Acpin20,Axyin20],[Bxyin20],[]],[[Acin21,Acpin21,Axyin21,Azin21],[Bxyin21],[]],[[Acin22,Acpin22,Axyin22,Axzin22],[],[Cgamma1in22,Cgamma2in22]],[[Acin23,Acpin23,Axyzin23],[Bphiin23,Bxyzin23,Byxzin23],[Cxyzin23]],[[Acin24,Acpin24,Axyzin24],[Byxzin24,Bzxyin24],[]],[[Acin25,Amin25,Axin25,Ayin25,Azin25],[],[]],[[Acin26,Amin26,Axin26,Ayin26],[],[]],[[Acin27,Amin27,Axin27,Ayin27],[],[]],[[Acin28,Amin28,Ayin28,Azin28],[],[]],[[Acin29,Amin29,Ayin29],[],[]],[[Acin30,Amin30,Axin30],[Bphiin30],[]],[[Acin31,Amin31,Ayin31],[Bphiin31],[]],[[Acin32,Amin32,Azin32],[Bphiin32],[]],[[Acin33,Amin33],[Bphi1in33,Bphi2in33],[]],[[Acin34,Amin34,Axyzin34],[],[]],[[Acin35,Amin35,Axyin35,Azin35],[Bxyin35],[]],[[Acin36,Amin36,Axyin36],[Bxyin36],[]],[[Acin37,Amin37,Axyin37],[Bxyin37,Bzxyin37],[]],[[Acin38,Amin38,Axin38,Ayzin38],[Bxyin38],[]],[[Acin39,Amin39,Axin39,Ayzin39],[],[]],[[Acin40,Amin40,Ayzin40],[Bxyin40,Bzxyin40],[]],[[Acin41,Amin41,Ayzin41],[],[Cin41]],[[Acin42,Amin42,Axzin42,Ayzin42],[],[Cin42]],[[Acin43,Amin43],[Bxyxzyzin43],[Cin43]],[[Acin44,Amin44,Axyzin44],[Bphiin44,Bxyzin44,Byxzin44],[Cxyzin44]],[[Acin45,Amin45,Axyzin45],[Bzxyin45],[]],[[Acin46,Amin46,Axyzin46],[Byxzin46,Bzxyin46],[]],[[Aiin47,Acpin47,Acin47,Axin47,Ayin47,Azin47],[],[]],[[Aiin48,Acpin48,Acin48,Axyzin48],[],[]],[[Aiin49,Acpin49,Acin49,Axin49,Ayin49],[],[]],[[Aiin50,Acpin50,Acin50,Azin50],[Bphiin50],[]],[[Aiin51,Acpin51,Acin51,Ayin51,Azin51],[],[]],[[Aiin52,Acpin52,Acin52],[Bphi1in52,Bphi2in52],[]],[[Aiin53,Acpin53,Acin53,Ayin53],[Bphiin53],[]],[[Aiin54,Acpin54,Acin54,Ayin54],[],[]],[[Aiin55,Acpin55,Acin55,Azin55],[Bphiin55],[]],[[Aiin56,Acpin56,Acin56],[Bphi1in56,Bphi2in56],[]],[[Aiin57,Acpin57,Acin57,Axin57],[],[]],[[Aiin58,Acpin58,Acin58],[Bphi1in58,Bphi2in58,Bphi3in58],[Cin58]],[[Aiin59,Acpin59,Acin59,Azin59],[Bphiin59],[]],[[Aiin60,Acpin60,Acin60],[Bphiin60],[]],[[Aiin61,Acpin61,Acin61],[],[Cin61]],[[Aiin62,Acpin62,Acin62],[Bphi1in62,Bphi2in62],[]],[[Aiin63,Acpin63,Acin63,Axyin63],[Bxyin63],[]],[[Aiin64,Acpin64,Acin64,Axyin64],[],[Cin64]],[[Aiin65,Acpin65,Acin65,Axyin65,Azin65],[Bxyin65],[]],[[Aiin66,Acpin66,Acin66,Axyin66],[Bxyin66,Bzxyin66],[]],[[Aiin67,Acpin67,Acin67,Axyin67,Azin67],[],[]],[[Aiin68,Acpin68,Acin68,Axyin68],[],[Cin68]],[[Aiin69,Acpin69,Acin69,Axzin69,Ayzin69],[],[Cin69]],[[Aiin70,Acpin70,Acin70],[Bxyxzyzin70],[Cin70]],[[Aiin71,Acpin71,Acin71,Axyzin71],[Bphiin71,Bxyzin71,Byxzin71],[Cxyzin71]],[[Aiin72,Acpin72,Acin72,Axyzin72],[Bzxyin72],[]],[[Aiin73,Acpin73,Acin73,Axyzin73],[],[]],[[Aiin74,Acpin74,Acin74,Axyzin74],[Byxzin74,Bzxyin74],[]],[[Aqin75,Axyin75,Azin75],[Bdeltain75,Bxyin75],[]],[[Aqin76,Axyin76],[Bxyin76],[]],[[Aqin77,Axyin77,Azin77],[Bxyin77],[]],[[Aqin78,Axyin78],[Bxyin78],[]],[[Aqin79,Axyzin79],[Bdeltain79,B2in79,B3in79],[C1in79,C2in79]],[[Aqin80,Axyzin80],[Bxyzin80],[CGAPin80]],[[Aqin81,Axyin81,Azin81],[Bdeltain81,Bxyin81],[]],[[Aqin82,Axyzin82],[Bdeltain82,B2in82,Bzxyin82],[C1in82,C2in82]],[[Aiin83,Aqin83,Axyin83,Azin83],[Bdeltain83,Bxyin83],[]],[[Aiin84,Aqin84,Axyin84],[Bdeltain84,Bczin84,Bxyin84,Bzxyin84],[]],[[Aiin85,Aqin85,Azin85],[Bdeltain85,Bcxyin85],[]],[[Aiin86,Aqin86,Axyzin86],[Bdeltain86],[]],[[Aiin87,Aqin87,Axyzin87],[Bdeltain87,Bphiin87,Bxyzin87],[CGAPin87]],[[Aiin88,Aqin88],[Bdeltain88,Bxyzin88],[Cin88]],[[Acpin89,Acppin89,Axyin89,Azin89],[Bdeltain89,Bxyin89],[]],[[Acpin90,Acppin90,Azin90],[Bdeltain90,Bphiin90],[CGAPin90]],[[Acpin91,Acppin91,Axyin91],[Bxyin91],[]],[[Acpin92,Acppin92],[Bphiin92],[CGAPin92]],[[Acpin93,Acppin93,Axyin93,Azin93],[Bxyin93],[]],[[Acpin94,Acppin94,Azin94],[Bphiin94],[CGAPin94]],[[Acpin95,Acppin95,Axyin95],[Bxyin95],[]],[[Acpin96,Acppin96],[Bphiin96],[CGAPin96]],[[Acpin97,Acppin97,Axyzin97],[Bdeltain97,B2in97,B3in97],[C1in97,C2in97]],[[Acpin98,Acppin98,Axyzin98],[Bxyzin98],[CGAPin98]],[[Ampin99,Amin99,Axyin99,Azin99],[Bdeltain99,Bxyin99],[]],[[Ampin100,Amin100,Azin100],[Bdeltain100,Bphiin100],[CGAPin100]],[[Ampin101,Amin101,Axyin101],[Bdeltain101,Bmzin101,Bxyin101],[]],[[Ampin102,Amin102,Axyzin102],[Bdeltain102],[CGAPin102]],[[Ampin103,Amin103,Axyin103],[Bdeltain103,Bxyin103],[]],[[Ampin104,Amin104],[Bdeltain104,Bcxyin104,Bcxyzin104],[C1GAPin104,C2GAPin104]],[[Ampin105,Amin105,Axyin105],[Bdeltain105,Bczin105,Bxyin105,Bzxyin105],[]],[[Ampin106,Amin106],[Bdeltain106,Bphi1in106,Bphi2in106],[C1in106,C2in106]],[[Ampin107,Amin107,Axyzin107],[Bdeltain107,Bphiin107,Bxyzin107],[CGAPin107]],[[Ampin108,Amin108,Axyzin108],[Bdeltain108,Bxyzin108],[]],[[Ampin109,Amin109],[Bdeltain109,B2in109],[C1in109,C2in109]],[[Ampin110,Amin110],[Bdeltain110],[CGAPin110]],[[Acpin111,Amin111,Axyin111,Azin111],[Bdeltain111,Bxyin111],[]],[[Acpin112,Amin112,Axyin112],[Bdeltain112,Bxyin112,Bczin112,Bzxyin112],[]],[[Acpin113,Amin113,Azin113],[Bdeltain113,Bphiin113],[Cin113]],[[Acpin114,Amin114],[Bdeltain114,Bcxyin114,Bcxyzin114],[C1in114,C2in114]],[[Acpin115,Amin115,Axyin115,Azin115],[Bdeltain115,Bxyin115],[]],[[Acpin116,Amin116,Axyin116],[Bdeltain116,Bxyin116,Bcpzin116],[]],[[Acpin117,Amin117,Azin117],[Bdeltain117,Bphiin117],[CGAPin117]],[[Acpin118,Amin118,Axyzin118],[Bdeltain118],[CGAPin118]],[[Acpin119,Amin119,Axyzin119],[Bdeltain119,Bphiin119,Bzxyin119],[C1in119,C2in119]],[[Acpin120,Amin120,Axyzin120],[Bdeltain120,Bzxyin120],[]],[[Acpin121,Amin121,Axyzin121],[Bdeltain121,Bxyzin121,Bphiin121],[CGAPin121]],[[Acpin122,Amin122],[Bdeltain122,Bxyzin122],[Cin122]],[[Aiin123,Amin123,Acpin123,Axyin123,Azin123],[Bdeltain123,Bxyin123],[]],[[Aiin124,Amin124,Acpin124,Axyin124],[Bdeltain124,Bxyin124],[]],[[Aiin125,Amin125,Acpin125,Azin125],[Bdeltain125,Bcxyin125],[]],[[Aiin126,Acpin126,Amin126],[Bdeltain126,Bcmxyin126,Bcmxyzin126],[CGAPin126]],[[Aiin127,Amin127,Acpin127,Azin127],[Bdeltain127,Bphiin127],[CGAPin127]],[[Aiin128,Amin128,Acpin128],[Bdeltain128,Bcxyin128,Bcxyzin128],[C1GAPin128,C2GAPin128]],[[Aiin129,Amin129,Acpin129,Azin129],[Bdeltain129,Bcxyin129],[]],[[Aiin130,Amin130,Acpin130],[Bdeltain130,Bcxyin130],[]],[[Aiin131,Amin131,Acpin131,Axyin131],[Bdeltain131,Bczin131,Bxyin131,Bzxyin131],[]],[[Aiin132,Amin132,Acpin132,Axyin132],[Bdeltain132,Bmzin132,Bxyin132],[]],[[],[],[]],[[Aiin134,Amin134,Acpin134,Axyzin134],[Bdeltain134],[]],[[Aiin135,Amin135,Acpin135],[Bdeltain135,Bcxyin135,Bczin135],[CGAPin135]],[[Aiin136,Amin136,Acpin136],[Bdeltain136,Bcxyin136,Bpxyzin136,Bmzin136],[CGAP1in136,CGAP2in136]],[[Aiin137,Acpin137,Amin137],[Bdeltain137,Bcxyin137,Bczin137],[CGAPin137]],[[Aiin138,Amin138,Acpin138],[Bdeltain138,Bmzin138,Bcxyin138,Bpxyzin138],[]],[[Aiin139,Amin139,Acpin139,Axyzin139],[Bdeltain139,Bphiin139,Bxyzin139],[CGAPin139]],[[Aiin140,Amin140,Acpin140,Axyzin140],[Bdeltain140,Bzxyin140],[]],[[],[],[]],[[Aiin142,Amin142,Acpin142],[Bdeltain142],[]]];


