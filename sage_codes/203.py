import numpy as np
from sage.all import *

import pickle

import sys

sys.setrecursionlimit(100000)

def sg203productg1g2(tuple1, tuple2):
    x1,y1,z1,c1,cp1,t1,p1 = tuple1
    x2,y2,z2,c2,cp2,t2,p2 = tuple2
    return np.array([[-c2*cp1*p1+2*c1*c2*cp1*p1-c1*cp2*p1-c2*cp2*p1+2*c1*c2*cp2*p1+2*c1*cp1*cp2*p1+2*c2*cp1*cp2*p1-4*c1*c2*cp1*cp2*p1+x1+x2-c1*x2-cp1*x2-2*p1*x2+2*c1*p1*x2+2*cp1*p1*x2+c1*y2-2*c1*cp1*y2-2*c1*p1*y2+4*c1*cp1*p1*y2+cp1*z2-2*c1*cp1*z2-2*cp1*p1*z2+4*c1*cp1*p1*z2,c2*cp1*p1-2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+2*cp1*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1+c1*x2-cp1*x2-2*c1*p1*x2+2*cp1*p1*x2+y1+y2-c1*y2-2*cp1*y2+2*c1*cp1*y2-2*p1*y2+2*c1*p1*y2+4*cp1*p1*y2-4*c1*cp1*p1*y2-cp1*z2+2*c1*cp1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,-c2*p1+2*c1*c2*p1+c2*cp1*p1-2*c1*c2*cp1*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1-c1*x2+cp1*x2+2*c1*p1*x2-2*cp1*p1*x2-c1*y2+2*c1*cp1*y2+2*c1*p1*y2-4*c1*cp1*p1*y2+z1+z2-2*c1*z2-cp1*z2+2*c1*cp1*z2-2*p1*z2+4*c1*p1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,c1+c2-2*c1*c2,cp1+cp2-2*cp1*cp2,0,p1+p2-2*p1*p2],[-c2*cp1*p1+2*c1*c2*cp1*p1-c1*cp2*p1-c2*cp2*p1+2*c1*c2*cp2*p1+2*c1*cp1*cp2*p1+2*c2*cp1*cp2*p1-4*c1*c2*cp1*cp2*p1+x1+x2-c1*x2-cp1*x2-2*p1*x2+2*c1*p1*x2+2*cp1*p1*x2+c1*y2-2*c1*cp1*y2-2*c1*p1*y2+4*c1*cp1*p1*y2+cp1*z2-2*c1*cp1*z2-2*cp1*p1*z2+4*c1*cp1*p1*z2,c2*cp1*p1-2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+2*cp1*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1+c1*x2-cp1*x2-2*c1*p1*x2+2*cp1*p1*x2+y1+y2-c1*y2-2*cp1*y2+2*c1*cp1*y2-2*p1*y2+2*c1*p1*y2+4*cp1*p1*y2-4*c1*cp1*p1*y2-cp1*z2+2*c1*cp1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,-c2*p1+2*c1*c2*p1+c2*cp1*p1-2*c1*c2*cp1*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1-c1*x2+cp1*x2+2*c1*p1*x2-2*cp1*p1*x2-c1*y2+2*c1*cp1*y2+2*c1*p1*y2-4*c1*cp1*p1*y2+z1+z2-2*c1*z2-cp1*z2+2*c1*cp1*z2-2*p1*z2+4*c1*p1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,c1+c2-2*c1*c2,cp1+cp2-2*cp1*cp2,1,p1+p2-2*p1*p2],[-c2*cp1*p1+2*c1*c2*cp1*p1-c1*cp2*p1-c2*cp2*p1+2*c1*c2*cp2*p1+2*c1*cp1*cp2*p1+2*c2*cp1*cp2*p1-4*c1*c2*cp1*cp2*p1+x1+x2-c1*x2-cp1*x2-2*p1*x2+2*c1*p1*x2+2*cp1*p1*x2+c1*y2-2*c1*cp1*y2-2*c1*p1*y2+4*c1*cp1*p1*y2+cp1*z2-2*c1*cp1*z2-2*cp1*p1*z2+4*c1*cp1*p1*z2,c2*cp1*p1-2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+2*cp1*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1+c1*x2-cp1*x2-2*c1*p1*x2+2*cp1*p1*x2+y1+y2-c1*y2-2*cp1*y2+2*c1*cp1*y2-2*p1*y2+2*c1*p1*y2+4*cp1*p1*y2-4*c1*cp1*p1*y2-cp1*z2+2*c1*cp1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,-c2*p1+2*c1*c2*p1+c2*cp1*p1-2*c1*c2*cp1*p1+c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1-2*c1*cp1*cp2*p1-2*c2*cp1*cp2*p1+4*c1*c2*cp1*cp2*p1-c1*x2+cp1*x2+2*c1*p1*x2-2*cp1*p1*x2-c1*y2+2*c1*cp1*y2+2*c1*p1*y2-4*c1*cp1*p1*y2+z1+z2-2*c1*z2-cp1*z2+2*c1*cp1*z2-2*p1*z2+4*c1*p1*z2+2*cp1*p1*z2-4*c1*cp1*p1*z2,c1+c2-2*c1*c2,cp1+cp2-2*cp1*cp2,2,p1+p2-2*p1*p2],[-c2*p1+c1*c2*p1+c2*cp1*p1+c2*cp2*p1-2*c1*c2*cp2*p1-cp1*cp2*p1+2*c1*cp1*cp2*p1+x1+c1*x2-2*c1*cp1*x2-2*c1*p1*x2+4*c1*cp1*p1*x2+cp1*y2-2*c1*cp1*y2-2*cp1*p1*y2+4*c1*cp1*p1*y2+z2-c1*z2-cp1*z2-2*p1*z2+2*c1*p1*z2+2*cp1*p1*z2,-c1*c2*p1+c2*cp1*p1-c2*cp2*p1+2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1+x2-c1*x2-2*cp1*x2+2*c1*cp1*x2-2*p1*x2+2*c1*p1*x2+4*cp1*p1*x2-4*c1*cp1*p1*x2+y1-cp1*y2+2*c1*cp1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+c1*z2-cp1*z2-2*c1*p1*z2+2*cp1*p1*z2,c1*c2*p1-c2*cp1*p1-cp2*p1+2*c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1-c1*x2+2*c1*cp1*x2+2*c1*p1*x2-4*c1*cp1*p1*x2+y2-2*c1*y2-cp1*y2+2*c1*cp1*y2-2*p1*y2+4*c1*p1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+z1-c1*z2+cp1*z2+2*c1*p1*z2-2*cp1*p1*z2,c1+c2+cp2-2*c2*cp2-2*c1*(c2+cp2-2*c2*cp2),c2+cp1-2*c2*cp1,1,p1+p2-2*p1*p2],[-c2*p1+c1*c2*p1+c2*cp1*p1+c2*cp2*p1-2*c1*c2*cp2*p1-cp1*cp2*p1+2*c1*cp1*cp2*p1+x1+c1*x2-2*c1*cp1*x2-2*c1*p1*x2+4*c1*cp1*p1*x2+cp1*y2-2*c1*cp1*y2-2*cp1*p1*y2+4*c1*cp1*p1*y2+z2-c1*z2-cp1*z2-2*p1*z2+2*c1*p1*z2+2*cp1*p1*z2,-c1*c2*p1+c2*cp1*p1-c2*cp2*p1+2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1+x2-c1*x2-2*cp1*x2+2*c1*cp1*x2-2*p1*x2+2*c1*p1*x2+4*cp1*p1*x2-4*c1*cp1*p1*x2+y1-cp1*y2+2*c1*cp1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+c1*z2-cp1*z2-2*c1*p1*z2+2*cp1*p1*z2,c1*c2*p1-c2*cp1*p1-cp2*p1+2*c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1-c1*x2+2*c1*cp1*x2+2*c1*p1*x2-4*c1*cp1*p1*x2+y2-2*c1*y2-cp1*y2+2*c1*cp1*y2-2*p1*y2+4*c1*p1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+z1-c1*z2+cp1*z2+2*c1*p1*z2-2*cp1*p1*z2,c1+c2+cp2-2*c2*cp2-2*c1*(c2+cp2-2*c2*cp2),c2+cp1-2*c2*cp1,2,p1+p2-2*p1*p2],[-c2*p1+c1*c2*p1+c2*cp1*p1+c2*cp2*p1-2*c1*c2*cp2*p1-cp1*cp2*p1+2*c1*cp1*cp2*p1+x1+c1*x2-2*c1*cp1*x2-2*c1*p1*x2+4*c1*cp1*p1*x2+cp1*y2-2*c1*cp1*y2-2*cp1*p1*y2+4*c1*cp1*p1*y2+z2-c1*z2-cp1*z2-2*p1*z2+2*c1*p1*z2+2*cp1*p1*z2,-c1*c2*p1+c2*cp1*p1-c2*cp2*p1+2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1+x2-c1*x2-2*cp1*x2+2*c1*cp1*x2-2*p1*x2+2*c1*p1*x2+4*cp1*p1*x2-4*c1*cp1*p1*x2+y1-cp1*y2+2*c1*cp1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+c1*z2-cp1*z2-2*c1*p1*z2+2*cp1*p1*z2,c1*c2*p1-c2*cp1*p1-cp2*p1+2*c1*cp2*p1+c2*cp2*p1-2*c1*c2*cp2*p1+cp1*cp2*p1-2*c1*cp1*cp2*p1-c1*x2+2*c1*cp1*x2+2*c1*p1*x2-4*c1*cp1*p1*x2+y2-2*c1*y2-cp1*y2+2*c1*cp1*y2-2*p1*y2+4*c1*p1*y2+2*cp1*p1*y2-4*c1*cp1*p1*y2+z1-c1*z2+cp1*z2+2*c1*p1*z2-2*cp1*p1*z2,c1+c2+cp2-2*c2*cp2-2*c1*(c2+cp2-2*c2*cp2),c2+cp1-2*c2*cp1,0,p1+p2-2*p1*p2],[-c1*c2*p1+2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1+x1+cp1*x2-2*c1*cp1*x2-2*cp1*p1*x2+4*c1*cp1*p1*x2+y2-c1*y2-cp1*y2-2*p1*y2+2*c1*p1*y2+2*cp1*p1*y2+c1*z2-2*c1*cp1*z2-2*c1*p1*z2+4*c1*cp1*p1*z2,-c2*p1+c1*c2*p1+2*c2*cp1*p1-2*c1*c2*cp1*p1-c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1-cp1*x2+2*c1*cp1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2+y1+c1*y2-cp1*y2-2*c1*p1*y2+2*cp1*p1*y2+z2-c1*z2-2*cp1*z2+2*c1*cp1*z2-2*p1*z2+2*c1*p1*z2+4*cp1*p1*z2-4*c1*cp1*p1*z2,c1*c2*p1-2*c1*c2*cp1*p1+c1*cp2*p1-c2*cp2*p1-cp1*cp2*p1+2*c2*cp1*cp2*p1+x2-2*c1*x2-cp1*x2+2*c1*cp1*x2-2*p1*x2+4*c1*p1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2-c1*y2+cp1*y2+2*c1*p1*y2-2*cp1*p1*y2+z1-c1*z2+2*c1*cp1*z2+2*c1*p1*z2-4*c1*cp1*p1*z2,c1+cp2-2*c1*cp2,c2+cp1+cp2-2*c2*cp2-2*cp1*(c2+cp2-2*c2*cp2),2,p1+p2-2*p1*p2],[-c1*c2*p1+2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1+x1+cp1*x2-2*c1*cp1*x2-2*cp1*p1*x2+4*c1*cp1*p1*x2+y2-c1*y2-cp1*y2-2*p1*y2+2*c1*p1*y2+2*cp1*p1*y2+c1*z2-2*c1*cp1*z2-2*c1*p1*z2+4*c1*cp1*p1*z2,-c2*p1+c1*c2*p1+2*c2*cp1*p1-2*c1*c2*cp1*p1-c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1-cp1*x2+2*c1*cp1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2+y1+c1*y2-cp1*y2-2*c1*p1*y2+2*cp1*p1*y2+z2-c1*z2-2*cp1*z2+2*c1*cp1*z2-2*p1*z2+2*c1*p1*z2+4*cp1*p1*z2-4*c1*cp1*p1*z2,c1*c2*p1-2*c1*c2*cp1*p1+c1*cp2*p1-c2*cp2*p1-cp1*cp2*p1+2*c2*cp1*cp2*p1+x2-2*c1*x2-cp1*x2+2*c1*cp1*x2-2*p1*x2+4*c1*p1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2-c1*y2+cp1*y2+2*c1*p1*y2-2*cp1*p1*y2+z1-c1*z2+2*c1*cp1*z2+2*c1*p1*z2-4*c1*cp1*p1*z2,c1+cp2-2*c1*cp2,c2+cp1+cp2-2*c2*cp2-2*cp1*(c2+cp2-2*c2*cp2),0,p1+p2-2*p1*p2],[-c1*c2*p1+2*c1*c2*cp1*p1-cp2*p1+c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1+x1+cp1*x2-2*c1*cp1*x2-2*cp1*p1*x2+4*c1*cp1*p1*x2+y2-c1*y2-cp1*y2-2*p1*y2+2*c1*p1*y2+2*cp1*p1*y2+c1*z2-2*c1*cp1*z2-2*c1*p1*z2+4*c1*cp1*p1*z2,-c2*p1+c1*c2*p1+2*c2*cp1*p1-2*c1*c2*cp1*p1-c1*cp2*p1+c2*cp2*p1+cp1*cp2*p1-2*c2*cp1*cp2*p1-cp1*x2+2*c1*cp1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2+y1+c1*y2-cp1*y2-2*c1*p1*y2+2*cp1*p1*y2+z2-c1*z2-2*cp1*z2+2*c1*cp1*z2-2*p1*z2+2*c1*p1*z2+4*cp1*p1*z2-4*c1*cp1*p1*z2,c1*c2*p1-2*c1*c2*cp1*p1+c1*cp2*p1-c2*cp2*p1-cp1*cp2*p1+2*c2*cp1*cp2*p1+x2-2*c1*x2-cp1*x2+2*c1*cp1*x2-2*p1*x2+4*c1*p1*x2+2*cp1*p1*x2-4*c1*cp1*p1*x2-c1*y2+cp1*y2+2*c1*p1*y2-2*cp1*p1*y2+z1-c1*z2+2*c1*cp1*z2+2*c1*p1*z2-4*c1*cp1*p1*z2,c1+cp2-2*c1*cp2,c2+cp1+cp2-2*c2*cp2-2*cp1*(c2+cp2-2*c2*cp2),1,p1+p2-2*p1*p2]][3*t1+t2],dtype=int)


def RandXYZ(XYZtuple3):
    x1,y1,z1,x2,y2,z2,x3,y3,z3 = XYZtuple3
    return np.array([1,x1,y1,z1,x2,y2,z2,x3,y3,z3,(x1*(1+x1))//2,(y1*(1+y1))//2,(z1*(1+z1))//2,(x2*(1+x2))//2,(y2*(1+y2))//2,(z2*(1+z2))//2,(x3*(1+x3))//2,(y3*(1+y3))//2,(z3*(1+z3))//2,x1*y1,x1*z1,x1*x2,x1*y2,x1*z2,x1*x3,x1*y3,x1*z3,y1*z1,x2*y1,y1*y2,y1*z2,x3*y1,y1*y3,y1*z3,x2*z1,y2*z1,z1*z2,x3*z1,y3*z1,z1*z3,x2*y2,x2*z2,x2*x3,x2*y3,x2*z3,y2*z2,x3*y2,y2*y3,y2*z3,x3*z2,y3*z2,z2*z3,x3*y3,x3*z3,y3*z3],dtype=int)

def RandPT(PTtuple3):
    c1,c2,c3,cp1,cp2,cp3,t1,t2,t3,p1,p2,p3 = PTtuple3
    singt = np.array([1,p1,p2,p3,p1*p2,p2*p3,cp1,cp1*p1,cp1*p2,cp1*p3,cp1*p1*p2,cp1*p2*p3,cp2,cp2*p1,cp2*p2,cp2*p3,cp2*p1*p2,cp2*p2*p3,cp3,cp3*p1,cp3*p2,cp3*p3,cp3*p1*p2,cp3*p2*p3,cp1*cp2,cp1*cp2*p1,cp1*cp2*p2,cp1*cp2*p3,cp1*cp2*p1*p2,cp1*cp2*p2*p3,cp1*cp3,cp1*cp3*p1,cp1*cp3*p2,cp1*cp3*p3,cp1*cp3*p1*p2,cp1*cp3*p2*p3,cp2*cp3,cp2*cp3*p1,cp2*cp3*p2,cp2*cp3*p3,cp2*cp3*p1*p2,cp2*cp3*p2*p3,cp1*cp2*cp3,cp1*cp2*cp3*p1,cp1*cp2*cp3*p2,cp1*cp2*cp3*p3,cp1*cp2*cp3*p1*p2,cp1*cp2*cp3*p2*p3,c1,c1*p1,c1*p2,c1*p3,c1*p1*p2,c1*p2*p3,c1*cp1,c1*cp1*p1,c1*cp1*p2,c1*cp1*p3,c1*cp1*p1*p2,c1*cp1*p2*p3,c1*cp2,c1*cp2*p1,c1*cp2*p2,c1*cp2*p3,c1*cp2*p1*p2,c1*cp2*p2*p3,c1*cp3,c1*cp3*p1,c1*cp3*p2,c1*cp3*p3,c1*cp3*p1*p2,c1*cp3*p2*p3,c1*cp1*cp2,c1*cp1*cp2*p1,c1*cp1*cp2*p2,c1*cp1*cp2*p3,c1*cp1*cp2*p1*p2,c1*cp1*cp2*p2*p3,c1*cp1*cp3,c1*cp1*cp3*p1,c1*cp1*cp3*p2,c1*cp1*cp3*p3,c1*cp1*cp3*p1*p2,c1*cp1*cp3*p2*p3,c1*cp2*cp3,c1*cp2*cp3*p1,c1*cp2*cp3*p2,c1*cp2*cp3*p3,c1*cp2*cp3*p1*p2,c1*cp2*cp3*p2*p3,c1*cp1*cp2*cp3,c1*cp1*cp2*cp3*p1,c1*cp1*cp2*cp3*p2,c1*cp1*cp2*cp3*p3,c1*cp1*cp2*cp3*p1*p2,c1*cp1*cp2*cp3*p2*p3,c2,c2*p1,c2*p2,c2*p3,c2*p1*p2,c2*p2*p3,c2*cp1,c2*cp1*p1,c2*cp1*p2,c2*cp1*p3,c2*cp1*p1*p2,c2*cp1*p2*p3,c2*cp2,c2*cp2*p1,c2*cp2*p2,c2*cp2*p3,c2*cp2*p1*p2,c2*cp2*p2*p3,c2*cp3,c2*cp3*p1,c2*cp3*p2,c2*cp3*p3,c2*cp3*p1*p2,c2*cp3*p2*p3,c2*cp1*cp2,c2*cp1*cp2*p1,c2*cp1*cp2*p2,c2*cp1*cp2*p3,c2*cp1*cp2*p1*p2,c2*cp1*cp2*p2*p3,c2*cp1*cp3,c2*cp1*cp3*p1,c2*cp1*cp3*p2,c2*cp1*cp3*p3,c2*cp1*cp3*p1*p2,c2*cp1*cp3*p2*p3,c2*cp2*cp3,c2*cp2*cp3*p1,c2*cp2*cp3*p2,c2*cp2*cp3*p3,c2*cp2*cp3*p1*p2,c2*cp2*cp3*p2*p3,c2*cp1*cp2*cp3,c2*cp1*cp2*cp3*p1,c2*cp1*cp2*cp3*p2,c2*cp1*cp2*cp3*p3,c2*cp1*cp2*cp3*p1*p2,c2*cp1*cp2*cp3*p2*p3,c3,c3*p1,c3*p2,c3*p3,c3*p1*p2,c3*p2*p3,c3*cp1,c3*cp1*p1,c3*cp1*p2,c3*cp1*p3,c3*cp1*p1*p2,c3*cp1*p2*p3,c3*cp2,c3*cp2*p1,c3*cp2*p2,c3*cp2*p3,c3*cp2*p1*p2,c3*cp2*p2*p3,c3*cp3,c3*cp3*p1,c3*cp3*p2,c3*cp3*p3,c3*cp3*p1*p2,c3*cp3*p2*p3,c3*cp1*cp2,c3*cp1*cp2*p1,c3*cp1*cp2*p2,c3*cp1*cp2*p3,c3*cp1*cp2*p1*p2,c3*cp1*cp2*p2*p3,c3*cp1*cp3,c3*cp1*cp3*p1,c3*cp1*cp3*p2,c3*cp1*cp3*p3,c3*cp1*cp3*p1*p2,c3*cp1*cp3*p2*p3,c3*cp2*cp3,c3*cp2*cp3*p1,c3*cp2*cp3*p2,c3*cp2*cp3*p3,c3*cp2*cp3*p1*p2,c3*cp2*cp3*p2*p3,c3*cp1*cp2*cp3,c3*cp1*cp2*cp3*p1,c3*cp1*cp2*cp3*p2,c3*cp1*cp2*cp3*p3,c3*cp1*cp2*cp3*p1*p2,c3*cp1*cp2*cp3*p2*p3,c1*c2,c1*c2*p1,c1*c2*p2,c1*c2*p3,c1*c2*p1*p2,c1*c2*p2*p3,c1*c2*cp1,c1*c2*cp1*p1,c1*c2*cp1*p2,c1*c2*cp1*p3,c1*c2*cp1*p1*p2,c1*c2*cp1*p2*p3,c1*c2*cp2,c1*c2*cp2*p1,c1*c2*cp2*p2,c1*c2*cp2*p3,c1*c2*cp2*p1*p2,c1*c2*cp2*p2*p3,c1*c2*cp3,c1*c2*cp3*p1,c1*c2*cp3*p2,c1*c2*cp3*p3,c1*c2*cp3*p1*p2,c1*c2*cp3*p2*p3,c1*c2*cp1*cp2,c1*c2*cp1*cp2*p1,c1*c2*cp1*cp2*p2,c1*c2*cp1*cp2*p3,c1*c2*cp1*cp2*p1*p2,c1*c2*cp1*cp2*p2*p3,c1*c2*cp1*cp3,c1*c2*cp1*cp3*p1,c1*c2*cp1*cp3*p2,c1*c2*cp1*cp3*p3,c1*c2*cp1*cp3*p1*p2,c1*c2*cp1*cp3*p2*p3,c1*c2*cp2*cp3,c1*c2*cp2*cp3*p1,c1*c2*cp2*cp3*p2,c1*c2*cp2*cp3*p3,c1*c2*cp2*cp3*p1*p2,c1*c2*cp2*cp3*p2*p3,c1*c2*cp1*cp2*cp3,c1*c2*cp1*cp2*cp3*p1,c1*c2*cp1*cp2*cp3*p2,c1*c2*cp1*cp2*cp3*p3,c1*c2*cp1*cp2*cp3*p1*p2,c1*c2*cp1*cp2*cp3*p2*p3,c1*c3,c1*c3*p1,c1*c3*p2,c1*c3*p3,c1*c3*p1*p2,c1*c3*p2*p3,c1*c3*cp1,c1*c3*cp1*p1,c1*c3*cp1*p2,c1*c3*cp1*p3,c1*c3*cp1*p1*p2,c1*c3*cp1*p2*p3,c1*c3*cp2,c1*c3*cp2*p1,c1*c3*cp2*p2,c1*c3*cp2*p3,c1*c3*cp2*p1*p2,c1*c3*cp2*p2*p3,c1*c3*cp3,c1*c3*cp3*p1,c1*c3*cp3*p2,c1*c3*cp3*p3,c1*c3*cp3*p1*p2,c1*c3*cp3*p2*p3,c1*c3*cp1*cp2,c1*c3*cp1*cp2*p1,c1*c3*cp1*cp2*p2,c1*c3*cp1*cp2*p3,c1*c3*cp1*cp2*p1*p2,c1*c3*cp1*cp2*p2*p3,c1*c3*cp1*cp3,c1*c3*cp1*cp3*p1,c1*c3*cp1*cp3*p2,c1*c3*cp1*cp3*p3,c1*c3*cp1*cp3*p1*p2,c1*c3*cp1*cp3*p2*p3,c1*c3*cp2*cp3,c1*c3*cp2*cp3*p1,c1*c3*cp2*cp3*p2,c1*c3*cp2*cp3*p3,c1*c3*cp2*cp3*p1*p2,c1*c3*cp2*cp3*p2*p3,c1*c3*cp1*cp2*cp3,c1*c3*cp1*cp2*cp3*p1,c1*c3*cp1*cp2*cp3*p2,c1*c3*cp1*cp2*cp3*p3,c1*c3*cp1*cp2*cp3*p1*p2,c1*c3*cp1*cp2*cp3*p2*p3,c2*c3,c2*c3*p1,c2*c3*p2,c2*c3*p3,c2*c3*p1*p2,c2*c3*p2*p3,c2*c3*cp1,c2*c3*cp1*p1,c2*c3*cp1*p2,c2*c3*cp1*p3,c2*c3*cp1*p1*p2,c2*c3*cp1*p2*p3,c2*c3*cp2,c2*c3*cp2*p1,c2*c3*cp2*p2,c2*c3*cp2*p3,c2*c3*cp2*p1*p2,c2*c3*cp2*p2*p3,c2*c3*cp3,c2*c3*cp3*p1,c2*c3*cp3*p2,c2*c3*cp3*p3,c2*c3*cp3*p1*p2,c2*c3*cp3*p2*p3,c2*c3*cp1*cp2,c2*c3*cp1*cp2*p1,c2*c3*cp1*cp2*p2,c2*c3*cp1*cp2*p3,c2*c3*cp1*cp2*p1*p2,c2*c3*cp1*cp2*p2*p3,c2*c3*cp1*cp3,c2*c3*cp1*cp3*p1,c2*c3*cp1*cp3*p2,c2*c3*cp1*cp3*p3,c2*c3*cp1*cp3*p1*p2,c2*c3*cp1*cp3*p2*p3,c2*c3*cp2*cp3,c2*c3*cp2*cp3*p1,c2*c3*cp2*cp3*p2,c2*c3*cp2*cp3*p3,c2*c3*cp2*cp3*p1*p2,c2*c3*cp2*cp3*p2*p3,c2*c3*cp1*cp2*cp3,c2*c3*cp1*cp2*cp3*p1,c2*c3*cp1*cp2*cp3*p2,c2*c3*cp1*cp2*cp3*p3,c2*c3*cp1*cp2*cp3*p1*p2,c2*c3*cp1*cp2*cp3*p2*p3,c1*c2*c3,c1*c2*c3*p1,c1*c2*c3*p2,c1*c2*c3*p3,c1*c2*c3*p1*p2,c1*c2*c3*p2*p3,c1*c2*c3*cp1,c1*c2*c3*cp1*p1,c1*c2*c3*cp1*p2,c1*c2*c3*cp1*p3,c1*c2*c3*cp1*p1*p2,c1*c2*c3*cp1*p2*p3,c1*c2*c3*cp2,c1*c2*c3*cp2*p1,c1*c2*c3*cp2*p2,c1*c2*c3*cp2*p3,c1*c2*c3*cp2*p1*p2,c1*c2*c3*cp2*p2*p3,c1*c2*c3*cp3,c1*c2*c3*cp3*p1,c1*c2*c3*cp3*p2,c1*c2*c3*cp3*p3,c1*c2*c3*cp3*p1*p2,c1*c2*c3*cp3*p2*p3,c1*c2*c3*cp1*cp2,c1*c2*c3*cp1*cp2*p1,c1*c2*c3*cp1*cp2*p2,c1*c2*c3*cp1*cp2*p3,c1*c2*c3*cp1*cp2*p1*p2,c1*c2*c3*cp1*cp2*p2*p3,c1*c2*c3*cp1*cp3,c1*c2*c3*cp1*cp3*p1,c1*c2*c3*cp1*cp3*p2,c1*c2*c3*cp1*cp3*p3,c1*c2*c3*cp1*cp3*p1*p2,c1*c2*c3*cp1*cp3*p2*p3,c1*c2*c3*cp2*cp3,c1*c2*c3*cp2*cp3*p1,c1*c2*c3*cp2*cp3*p2,c1*c2*c3*cp2*cp3*p3,c1*c2*c3*cp2*cp3*p1*p2,c1*c2*c3*cp2*cp3*p2*p3,c1*c2*c3*cp1*cp2*cp3,c1*c2*c3*cp1*cp2*cp3*p1,c1*c2*c3*cp1*cp2*cp3*p2,c1*c2*c3*cp1*cp2*cp3*p3,c1*c2*c3*cp1*cp2*cp3*p1*p2,c1*c2*c3*cp1*cp2*cp3*p2*p3],dtype=int)
    #return np.concatenate([((t1==0)*1)*singt,((t1==1)*1)*singt,((t1==2)*1)*singt])
    return np.concatenate([((t1==0 and t2==0)*1)*singt,((t1==0 and t2==1)*1)*singt,((t1==0 and t2==2)*1)*singt,((t1==1 and t2==0)*1)*singt,((t1==1 and t2==1)*1)*singt,((t1==1 and t2==2)*1)*singt,((t1==2 and t2==0)*1)*singt,((t1==2 and t2==1)*1)*singt,((t1==2 and t2==2)*1)*singt])
    
def ToBeCycMat(tuple1, tuple2, tuple3):
    x1,y1,z1,c1,cp1,t1,p1 = tuple1
    x2,y2,z2,c2,cp2,t2,p2 = tuple2
    x3,y3,z3,c3,cp3,t3,p3 = tuple3
    return np.reshape(np.outer(RandXYZ(np.array([x1,y1,z1,x2,y2,z2,x3,y3,z3]))%2,RandPT(np.array([c1,c2,c3,cp1,cp2,cp3,t1,t2,t3,p1,p2,p3]))%2),(-1,))



def diff3Cocycle(XYZtuple4, PTtuple4, PC3tuple4):
    x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4 = XYZtuple4
    c1,cp1,c2,cp2,c3,cp3,c4,cp4,p1,p2,p3,p4 = PTtuple4
    t1,t2,t3,t4 = PC3tuple4
    
    return ToBeCycMat(np.array([x2,y2,z2,c2,cp2,t2,p2],dtype=int),np.array([x3,y3,z3,c3,cp3,t3,p3],dtype=int),np.array([x4,y4,z4,c4,cp4,t4,p4],dtype=int))+\
                      ToBeCycMat(np.array([x1,y1,z1,c1,cp1,t1,p1],dtype=int),np.array([x2,y2,z2,c2,cp2,t2,p2],dtype=int),sg203productg1g2(np.array([x3,y3,z3,c3,cp3,t3,p3],dtype=int),np.array([x4,y4,z4,c4,cp4,t4,p4],dtype=int)))+\
                      ToBeCycMat(np.array([x1,y1,z1,c1,cp1,t1,p1],dtype=int),sg203productg1g2(np.array([x2,y2,z2,c2,cp2,t2,p2],dtype=int),np.array([x3,y3,z3,c3,cp3,t3,p3],dtype=int)),np.array([x4,y4,z4,c4,cp4,t4,p4],dtype=int))+\
                      ToBeCycMat(sg203productg1g2(np.array([x1,y1,z1,c1,cp1,t1,p1],dtype=int),np.array([x2,y2,z2,c2,cp2,t2,p2],dtype=int)),np.array([x3,y3,z3,c3,cp3,t3,p3],dtype=int),np.array([x4,y4,z4,c4,cp4,t4,p4],dtype=int))+\
                      ToBeCycMat(np.array([x1,y1,z1,c1,cp1,t1,p1],dtype=int),np.array([x2,y2,z2,c2,cp2,t2,p2],dtype=int),np.array([x3,y3,z3,c3,cp3,t3,p3],dtype=int))

def randdiffGen():
    return diff3Cocycle(np.random.choice(a=[0,1,2,3], size=(12,)), np.random.choice(a=[0,1], size=(12,)), np.random.choice(a=[0,1,2], size=(4,)))




MM = np.array([randdiffGen() for _ in range(200000)],dtype=int)
#MM = np.vstack(MM)
MM = MM%2

print(MM.dtype)


MMod2 = Matrix(MM, ring=GF(2))
ns=MMod2.right_kernel()



with open('203_basis', 'wb') as f:
    pickle.dump(ns.basis(), f)
    
    
#f = open('/Users/tony/Downloads/141_basis', 'rb')
#kers = pickle.load(f)
#kers.basis() #this will print the vectors; we then copy then to 133_basis which is to be read in Mathematica.










